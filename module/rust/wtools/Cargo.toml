[package]
name = "wtools"
version = "0.2.9"
edition = "2021"
authors = [
  "Kostiantyn Wandalen <wandalen@obox.systems>",
  "Volodymyr M. <volodymyr.migdal@gmail.com>",
  "Dmytro Kryvoruchko <dm.vict.kr@gmail.com>",
]
license = "MIT"
readme = "Readme.md"
documentation = "https://docs.rs/wtools"
repository = "https://github.com/Wandalen/wTools/tree/master/module/rust/wtools"
homepage = "https://github.com/Wandalen/wTools/tree/master/module/rust/wtools"
description = """
Collection of general purpose tools for solving problems. Fundamentally extend the language without spoiling, so may be used solely or in conjunction with another module of such kind.
"""
categories = [ "algorithms", "development-tools" ]
keywords = [ "fundamental", "general-purpose" ]

include = [
  "/rust/impl/wtools_lib.rs",
  "/rust/impl/dt/mod.rs",
  "/rust/impl/iter/mod.rs",
  "/rust/impl/meta/mod.rs",
  "/rust/impl/typing/mod.rs",
  "/rust/impl/convert/mod.rs",
  "/rust/impl/time/mod.rs",
  "/Cargo.toml",
  "/Readme.md",
  "/License",
]

[lib]
name = "wtools"
path = "rust/impl/wtools_lib.rs"

[[test]]
name = "wtools_test"
path = "rust/test/wtools_lib_test.rs"

[[test]]
name = "wtools_smoke_test"
path = "rust/test/smoke_test.rs"

[[example]]
name = "wtools_trivial"
path = "sample/rust/wtools_trivial/src/main.rs"

[features]

# iter

iter = [ "iter_tools" ]
iter_default = [ "iter", "iter_tools/default" ]
iter_all = [ "iter" ]
iter_use_std = [ "iter_tools/use_std" ]
iter_use_alloc = [ "iter_tools/use_alloc" ]

# meta

meta = [ "meta_tools" ]
meta_default = [
  "meta",
  "meta_for_each",
  "meta_impls_index",
  "meta_mod_interface",
  "meta_former",
  "meta_options",
  "meta_collection_make",
]
meta_all = [
  "meta",
  "meta_for_each",
  "meta_impls_index",
  "meta_mod_interface",
  "meta_former",
  "meta_options",
  "meta_collection_make",
]
meta_for_each = [ "meta_tools/for_each" ]
meta_impls_index = [ "meta_tools/impls_index" ]
meta_mod_interface = [ "meta_tools/mod_interface" ]
meta_collection_make = [ "meta_tools/collection_make" ]
meta_former = [ "meta_tools/former" ]
meta_options = [ "meta_tools/options" ]

# typing

typing = [ "typing_tools" ]
typing_default = [ "typing", "typing_tools/default" ]
typing_all = [
  "typing",
  "typing_inspect_type",
  "typing_is_slice",
  "typing_implements",
]
typing_nightly = [ "typing_tools/nightly" ]
typing_inspect_type = [ "typing", "typing_tools/inspect_type" ]
typing_is_slice = [ "typing", "typing_tools/is_slice" ]
typing_implements = [ "typing", "typing_tools/implements" ]

# time

time = [ "time_tools/default" ]
time_default = [ "time" ]
time_all = [ "time" ]
time_chrono = [ "time_tools/chrono" ]

# string

string = [ "wstring_tools" ]
string_default = [ "string" ]
string_all = [ "string" ]

# error

error = [ "werror" ]
error_default = [ "error" ]
error_all = [ "error" ]

# derive

derive = [ "derive_tools" ]
derive_all = [

  "derive",
  "derive_nightly",

  "derive_add_assign",
  "derive_add",
  "derive_as_mut",
  "derive_as_ref",
  "derive_constructor",
  "derive_deref",
  "derive_deref_mut",
  "derive_error",
  "derive_from",
  "derive_from_str",
  "derive_index",
  "derive_index_mut",
  "derive_into",
  "derive_into_iterator",
  "derive_iterator",
  "derive_mul_assign",
  "derive_mul",
  "derive_not",
  "derive_sum",
  "derive_try_into",
  "derive_is_variant",
  "derive_unwrap",
  "derive_convert_case",

  "derive_display",
  "derive_from_str",

]
derive_default = [

  "derive",
  "derive_nightly",

  "derive_add_assign",
  "derive_add",
  "derive_as_mut",
  "derive_as_ref",
  "derive_constructor",
  "derive_deref",
  "derive_deref_mut",
  "derive_error",
  "derive_from",
  "derive_from_str",
  "derive_index",
  "derive_index_mut",
  "derive_into",
  "derive_into_iterator",
  "derive_iterator",
  "derive_mul_assign",
  "derive_mul",
  "derive_not",
  "derive_sum",
  "derive_try_into",
  "derive_is_variant",
  "derive_unwrap",
  "derive_convert_case",

  "derive_display",
  "derive_from_str",

]
derive_nightly = [
  "derive_tools/nightly"
]

derive_enable_track_caller = [
  "derive_tools/enable_track_caller"
]

derive_more = [ "derive_tools/derive_more" ]
derive_add_assign = [ "derive_tools/derive_add_assign" ]
derive_add = [ "derive_tools/derive_add" ]
derive_as_mut = [ "derive_tools/derive_as_mut" ]
derive_as_ref = [ "derive_tools/derive_as_ref" ]
derive_constructor = [ "derive_tools/derive_constructor" ]
derive_deref = [ "derive_tools/derive_deref" ]
derive_deref_mut = [ "derive_tools/derive_deref_mut" ]
derive_error = [ "derive_tools/derive_error" ]
derive_from = [ "derive_tools/derive_from" ]
derive_index = [ "derive_tools/derive_index" ]
derive_index_mut = [ "derive_tools/derive_index_mut" ]
derive_into = [ "derive_tools/derive_into" ]
derive_into_iterator = [ "derive_tools/derive_into_iterator" ]
derive_iterator = [ "derive_tools/derive_iterator" ]
derive_mul_assign = [ "derive_tools/derive_mul_assign" ]
derive_mul = [ "derive_tools/derive_mul" ]
derive_not = [ "derive_tools/derive_not" ]
derive_sum = [ "derive_tools/derive_sum" ]
derive_try_into = [ "derive_tools/derive_try_into" ]
derive_is_variant = [ "derive_tools/derive_is_variant" ]
derive_unwrap = [ "derive_tools/derive_unwrap" ]
derive_convert_case = [ "derive_tools/derive_convert_case" ]

derive_display = [ "derive_tools/derive_display", "parse-display" ]
derive_from_str = [ "derive_tools/derive_from_str", "parse-display", "derive_from_str_std", "derive_from_str_regex", "derive_from_str_once_cell" ]
derive_from_str_std = [ "parse-display/std" ]
derive_from_str_regex = [ "parse-display/regex" ]
derive_from_str_once_cell = [ "parse-display/once_cell" ]

# dt

dt = [ "data_type" ]
dt_default = [ "data_type/default" ]
dt_all = [ "data_type/all" ]
dt_either = [ "data_type/either" ]
dt_type_constructor = [ "data_type/type_constructor" ]
dt_make = [ "data_type/make" ]
dt_internal = [ "data_type/interval" ]

# diagnostics

diagnostics = [ "diagnostics_tools" ]
diagnostics_all = [ "diagnostics", "diagnostics_tools/all" ]
diagnostics_default = [ "diagnostics", "diagnostics_tools/default" ]
diagnostics_runtime_assertions = [ "diagnostics_tools/runtime_assertions" ]
diagnostics_compiletime_assertions = [ "diagnostics_tools/compiletime_assertions" ]

nightly = [
  "typing_nightly",
  "derive_nightly"
]

all = [
  "typing_all",
  "time_all",
  "string_all",
  "error_all",
  "derive_all",
  "dt_all",
  "diagnostics_all",
]

default = [
  "iter_default",
  "meta_default",
  "typing_default",
  "time_default",
  "string_default",
  "error_default",
  "derive_default",
  "dt_default",
  "diagnostics_default",
]

[package.metadata.docs.rs]
all-features = true
# rustdoc-args = []

[dependencies]

# iter
iter_tools = { version = "~0.1", path = "../../rust/iter_tools", optional = true, default-features = false }

# meta
meta_tools = { version = "~0.2", path = "../../rust/meta_tools", optional = true, default-features = false }
impls_index = { version = "~0.1", path = "../../rust/impls_index" }
# despite impls_index is imported by meta_tools it should also be imported immediatly

# typing
typing_tools = { version = "~0.1", path = "../../rust/typing_tools", optional = true, default-features = false }

# time
time_tools = { version = "~0.1", path = "../../rust/time_tools", optional = true, default-features = false }

# sting
wstring_tools = { version = "~0.1", path = "../../rust/wstring_tools", optional = true, default-features = false }

# err
werror = { version = "~0.1", path = "../../rust/werror", optional = true, default-features = false }

# derive
derive_tools = { version = "~0.1", path = "../../rust/derive_tools", optional = true, default-features = false }
parse-display = { version = "~0.5", optional = true, default-features = false }
# have to be here because of problem with FromStr

# data_type
data_type = { version = "~0.1", path = "../../rust/data_type", optional = true, default-features = false }

# diagnostics
diagnostics_tools = { version = "~0.1", path = "../../rust/diagnostics_tools", optional = true }

[dev-dependencies]
test_tools = { version = "~0.1", path = "../../rust/test_tools" }
