
( function _library_() { // begin of library

( function _StarterWare_() { // begin of starterware

  // --
  // own
  // --

  

  let _global = undefined;
  if( !_global && typeof Global !== 'undefined' && Global.Global === Global ) _global = Global;
  if( !_global && typeof global !== 'undefined' && global.global === global ) _global = global;
  if( !_global && typeof window !== 'undefined' && window.window === window ) _global = window;
  if( !_global && typeof self   !== 'undefined' && self.self === self ) _global = self;
  let _realGlobal = _global._realGlobal_ = _global;
  let _wasGlobal = _global._global_ || _global;
  _global = _wasGlobal;
  _global._global_ = _wasGlobal;

  if( !_global_.Config )
  _global_.Config = {}
  if( _global_.Config.platform === undefined )
  _global_.Config.platform = ( ( typeof module !== 'undefined' ) && ( typeof process !== 'undefined' ) ) ? 'nodejs' : 'browser';
  if( _global_.Config.isWorker === undefined )
  _global_.Config.isWorker = !!( typeof self !== 'undefined' && self.self === self && typeof importScripts !== 'undefined' );

  if( _global._starter_ )
  return;

  let _nodejsInclude = require;
  let _nodejsResolve = require.resolve;
  let _starter_ = _global._starter_ = _global._starter_ || Object.create( null );
  let _ = _starter_;
  let preloadedFilesMap = _starter_.preloadedFilesMap = _starter_.preloadedFilesMap || Object.create( null );
  let openedFilesMap = _starter_.openedFilesMap = _starter_.openedFilesMap || Object.create( null );
  let path = _starter_.path = _starter_.path || Object.create( null );

  //

  function ScriptFile( o )
  {
    if( !( this instanceof ScriptFile ) )
    return new ScriptFile( o );

    if( o.isScript === undefined )
    o.isScript = true;

    // o.filePath = _starter_._pathResolve( null, o.filePath );
    o.filePath = _starter_.path.canonizeTolerant( o.filePath );

    this.filePath = o.filePath;
    this.dirPath = o.dirPath;
    this.nakedCall = o.nakedCall;
    this.isScript = o.isScript;

    this.filename = o.filePath;
    this.exports = undefined;
    this.parent = null;
    this.error = null;
    this.state = o.nakedCall ? 'preloaded' : 'created';

    this.starter = _starter_;
    this.include = _starter_._fileInclude.bind( _starter_, this );
    this.resolve = _starter_._fileResolve.bind( _starter_, this );
    this.include.resolve = this.resolve;
    this.include.scriptFile = this;

    this._nodejsInclude = _nodejsInclude;
    this._nodejsResolve = _nodejsResolve;

    /* nodejs compatibility */

    this.path = [ '/' ];
    this.loaded = false;
    this.id = o.filePath;

    Object.preventExtensions( this );

    _starter_.preloadedFilesMap[ o.filePath ] = this;

    return this;
  }

  //

  function _pathResolve( scriptFile, filePath )
  {
    let basePath = null;
    if( _starter_.strIs( scriptFile ) )
    {
      basePath = scriptFile;
    }
    else if( scriptFile )
    {
      basePath = scriptFile.dirPath;
    }

    if( !basePath )
    {
      debugger;
      throw 'Base path is not specified';
    }

    filePath = _starter_.path.canonizeTolerant( filePath );
    if( filePath[ 0 ] !== '/' )
    filePath = _starter_.path.canonizeTolerant( basePath + '/' + filePath );
    return filePath;
  }

  //

  function _fileIncludeAct( parentScriptFile, childScriptFile )
  {
    try
    {

      if( childScriptFile.state === 'opened' )
      return childScriptFile.exports;

      childScriptFile.parent = parentScriptFile || null;
      childScriptFile.nakedCall.call( childScriptFile );
      childScriptFile.loaded = true;
      childScriptFile.state = 'opened';
      _starter_.openedFilesMap[ childScriptFile.filePath ] = childScriptFile;
    }
    catch( err )
    {
      err.message += '\nError including ' + childScriptFile.filePath;
      childScriptFile.error = err;
      childScriptFile.state = 'errored';
      throw err;
    }
    return childScriptFile.exports;
  }

  //

  function _fileInclude( parentScriptFile, filePath )
  {
    let childScriptFile = _starter_._fileGet.apply( this, arguments );

    let _nodejsInclude;
    if( _starter_.strIs( parentScriptFile ) )
    {
      _nodejsInclude = _starter_._nodejsInclude;
      parentScriptFile = null;
    }
    else if( parentScriptFile )
    {
      _nodejsInclude = parentScriptFile._nodejsInclude;
    }
    else
    {
      _nodejsInclude = _starter_._nodejsInclude;
    }

    if( !childScriptFile )
    return _nodejsInclude( filePath );
    if( _starter_.strIs( parentScriptFile ) )
    parentScriptFile = null;
    return _starter_._fileIncludeAct( parentScriptFile, childScriptFile );
  }

  //

  function _fileResolve( parentScriptFile, filePath )
  {
    let childScriptFile = _starter_._fileGet.apply( this, arguments );

    let _nodejsResolve;
    if( _starter_.strIs( parentScriptFile ) )
    {
      _nodejsResolve = _starter_._nodejsResolve;
      parentScriptFile = null;
    }
    else if( parentScriptFile )
    {
      _nodejsResolve = parentScriptFile._nodejsResolve;
    }
    else
    {
      _nodejsResolve = _starter_._nodejsResolve;
    }

    if( !childScriptFile )
    return _nodejsResolve( filePath );
    return childScriptFile.filePath;
  }

  //

  function _fileGet( parentScriptFile, filePath )
  {

    let basePath = null;
    if( _starter_.strIs( parentScriptFile ) )
    {
      basePath = parentScriptFile;
    }
    else if( parentScriptFile )
    {
      basePath = parentScriptFile.dirPath;
    }

    if( filePath[ 0 ] !== '.' )
    return null;

    resolvedFilePath = _starter_._pathResolve( basePath, filePath );
    let childScriptFile = _starter_.preloadedFilesMap[ resolvedFilePath ];
    if( childScriptFile )
    return childScriptFile;

    return null;
  }

  //

  function _fileCreate( filePath, dirPath, nakedCall )
  {
    let r = ScriptFile({ filePath, dirPath, nakedCall });
    return r;
  }

  //

  function assert()
  {
  }

  //

  function assertRoutineOptions()
  {
  }

;

  // --
  // imported
  // --

  _.strIs = function strIs( src )
  {
    let result = Object.prototype.toString.call( src ) === '[object String]';
    return result;
  };

//

  _._strBeginOf = function _strBeginOf( src, begin )
  {
  
    _.assert( _.strIs( src ), 'Expects string' );
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
  
    if( _.strIs( begin ) )
    {
      if( src.lastIndexOf( begin, 0 ) === 0 )
      return begin;
    }
    else if( _.regexpIs( begin ) )
    {
      let matched = begin.exec( src );
      if( matched && matched.index === 0 )
      return matched[ 0 ];
    }
    else _.assert( 0, 'Expects string-like ( string or regexp )' );
  
    return false;
  };

//

  _._strEndOf = function _strEndOf( src, end )
  {
  
    _.assert( _.strIs( src ), 'Expects string' );
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
  
    if( _.strIs( end ) )
    {
      if( src.indexOf( end, src.length - end.length ) !== -1 )
      return end;
    }
    else if( _.regexpIs( end ) )
    {
      // let matched = end.exec( src );
      let newEnd = RegExp( end.toString().slice(1, -1) + '$' );
      let matched = newEnd.exec( src );
      debugger;
      //if( matched && matched.index === 0 )
      if( matched && matched.index + matched[ 0 ].length === src.length )
      return matched[ 0 ];
    }
    else _.assert( 0, 'Expects string-like ( string or regexp )' );
  
    return false;
  };

//

  _._strRemovedBegin = function _strRemovedBegin( src, begin )
  {
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
    _.assert( _.strIs( src ), 'Expects string {-src-}' );
  
    let result = src;
    let beginOf = _._strBeginOf( result, begin );
    if( beginOf !== false )
    result = result.substr( beginOf.length, result.length );
  
    return result;
  };

//

  _._strRemovedEnd = function _strRemovedEnd( src, end )
  {
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
    _.assert( _.strIs( src ), 'Expects string {-src-}' );
  
    let result = src;
    let endOf = _._strEndOf( result, end );
    if( endOf !== false )
    result = result.substr( 0, result.length - endOf.length );
  
    return result;
  };

//

  _.strBegins = function strBegins( src, begin )
  {
  
    _.assert( _.strIs( src ), 'Expects string {-src-}' );
    _.assert( _.strIs( begin ) || _.regexpIs( begin ) || _.longIs( begin ), 'Expects string/regexp or array of strings/regexps {-begin-}' );
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
  
    if( !_.longIs( begin ) )
    {
      let result = _._strBeginOf( src, begin );
      return result === false ? result : true;
    }
  
    for( let b = 0, blen = begin.length ; b < blen; b++ )
    {
      let result = _._strBeginOf( src, begin[ b ] );
      if( result !== false )
      return true;
    }
  
    return false;
  };

//

  _.strEnds = function strEnds( src, end )
  {
  
    _.assert( _.strIs( src ), 'Expects string {-src-}' );
    _.assert( _.strIs( end ) || _.regexpIs( end ) || _.longIs( end ), 'Expects string/regexp or array of strings/regexps {-end-}' );
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
  
    if( !_.longIs( end ) )
    {
      let result = _._strEndOf( src, end );
      return result === false ? result : true;
    }
  
    for( let b = 0, blen = end.length ; b < blen; b++ )
    {
      let result = _._strEndOf( src, end[ b ] );
      if( result !== false )
      return true;
    }
  
    return false;
  };

//

  _.strRemoveBegin = function strRemoveBegin( src, begin )
  {
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
    _.assert( _.longIs( src ) || _.strIs( src ), 'Expects string or array of strings {-src-}' );
    _.assert( _.longIs( begin ) || _.strIs( begin ) || _.regexpIs( begin ), 'Expects string/regexp or array of strings/regexps {-begin-}' );
  
    let result = [];
    let srcIsArray = _.longIs( src );
  
    if( _.strIs( src ) && !_.longIs( begin ) )
    return _._strRemovedBegin( src, begin );
  
    src = _.arrayAs( src );
    begin = _.arrayAs( begin );
    for( let s = 0, slen = src.length ; s < slen ; s++ )
    {
      let beginOf = false;
      let src1 = src[ s ]
      for( let b = 0, blen = begin.length ; b < blen ; b++ )
      {
        beginOf = _._strBeginOf( src1, begin[ b ] );
        if( beginOf !== false )
        break;
      }
      if( beginOf !== false )
      src1 = src1.substr( beginOf.length, src1.length );
      result[ s ] = src1;
    }
  
    if( !srcIsArray )
    return result[ 0 ];
  
    return result;
  };

//

  _.strRemoveEnd = function strRemoveEnd( src, end )
  {
    _.assert( arguments.length === 2, 'Expects exactly two arguments' );
    _.assert( _.longIs( src ) || _.strIs( src ), 'Expects string or array of strings {-src-}' );
    _.assert( _.longIs( end ) || _.strIs( end ) || _.regexpIs( end ), 'Expects string/regexp or array of strings/regexps {-end-}' );
  
    let result = [];
    let srcIsArray = _.longIs( src );
  
    if( _.strIs( src ) && !_.longIs( end ) )
    return _._strRemovedEnd( src, end );
  
    src = _.arrayAs( src );
    end = _.arrayAs( end );
  
    for( let s = 0, slen = src.length ; s < slen ; s++ )
    {
      let endOf = false;
      let src1 = src[ s ]
      for( let b = 0, blen = end.length ; b < blen ; b++ )
      {
        endOf = _._strEndOf( src1, end[ b ] );
        if( endOf !== false )
        break;
      }
      if( endOf !== false )
      src1 = src1.substr( 0, src1.length - endOf.length );
      result[ s ] = src1;
    }
  
    if( !srcIsArray )
    return result[ 0 ];
  
    return result;
  };

//

  _.regexpIs = function regexpIs( src )
  {
    return Object.prototype.toString.call( src ) === '[object RegExp]';
  };

//

  _.longIs = function longIs( src )
  {
    if( _.primitiveIs( src ) )
    return false;
    if( _.routineIs( src ) )
    return false;
    if( _.objectIs( src ) )
    return false;
    if( _.strIs( src ) )
    return false;
  
    if( Object.propertyIsEnumerable.call( src, 'length' ) )
    return false;
    if( !_.numberIs( src.length ) )
    return false;
  
    return true;
  };

//

  _.primitiveIs = function primitiveIs( src )
  {
    if( !src )
    return true;
    let t = Object.prototype.toString.call( src );
    return t === '[object Symbol]' || t === '[object Number]' || t === '[object BigInt]' || t === '[object Boolean]' || t === '[object String]';
  };

//

  path.refine = function refine( src )
  {
  
    _.assert( arguments.length === 1, 'Expects single argument' );
    _.assert( _.strIs( src ) );
  
    let result = src;
  
    if( result[ 1 ] === ':' )
    {
      if( result[ 2 ] === '\\' || result[ 2 ] === '/' )
      {
        if( result.length > 3 )
        result = '/' + result[ 0 ] + '/' + result.substring( 3 );
        else
        result = '/' + result[ 0 ]
      }
      else if( result.length === 2 )
      {
        result = '/' + result[ 0 ];
      }
    }
  
    result = result.replace( /\\/g, '/' );
  
    return result;
  };

//

  path._normalize = function _normalize( o )
  {
    let debug = 0;
    if( 0 )
    debug = 1;
  
    _.assertRoutineOptions( _normalize, arguments );
    _.assert( _.strIs( o.src ), 'Expects string' );
  
    if( !o.src.length )
    return '';
  
    let result = o.src;
  
    result = this.refine( result );
  
    if( debug )
    console.log( 'normalize.refined : ' + result );
  
    /* detrailing */
  
    if( o.tolerant )
    {
      /* remove "/" duplicates */
      result = result.replace( this._delUpDupRegexp, this._upStr );
    }
  
    let endsWithUp = false;
    let beginsWithHere = false;
  
    /* remove right "/" */
  
    if( result !== this._upStr && !_.strEnds( result, this._upStr + this._upStr ) && _.strEnds( result, this._upStr ) )
    {
      endsWithUp = true;
      result = _.strRemoveEnd( result, this._upStr );
    }
  
    /* undoting */
  
    while( !_.strBegins( result, this._hereUpStr + this._upStr ) && _.strBegins( result, this._hereUpStr ) )
    {
      beginsWithHere = true;
      result = _.strRemoveBegin( result, this._hereUpStr );
    }
  
    /* remove second "." */
  
    if( result.indexOf( this._hereStr ) !== -1 )
    {
  
      while( this._delHereRegexp.test( result ) )
      result = result.replace( this._delHereRegexp, function( match, postSlash )
      {
        return postSlash || '';
      });
      if( result === '' )
      result = this._upStr;
  
    }
  
    /* remove .. */
  
    if( result.indexOf( this._downStr ) !== -1 )
    {
  
      while( this._delDownRegexp.test( result ) )
      result = result.replace( this._delDownRegexp, ( match, notBegin, split, preSlash, postSlash ) =>
      {
        if( preSlash === '' )
        return notBegin;
        if( !notBegin )
        return notBegin + preSlash;
        else
        return notBegin + ( postSlash || '' );
      });
  
    }
  
    /* nothing left */
  
    if( !result.length )
    result = '.';
  
    /* dot and trail */
  
    if( o.detrailing )
    if( result !== this._upStr && !_.strEnds( result, this._upStr + this._upStr ) )
    result = _.strRemoveEnd( result, this._upStr );
  
    if( !o.detrailing && endsWithUp )
    if( result !== this._rootStr )
    result = result + this._upStr;
  
    if( !o.undoting && beginsWithHere )
    result = this.dot( result );
  
    if( debug )
    console.log( 'normalize.result : ' + result );
  
    return result;
  };

//

  path.canonizeTolerant = function canonizeTolerant( src )
  {
    _.assert( _.strIs( src ),'Expects string' );
  
    let result = this._normalize({ src, tolerant : true, detrailing : true, undoting : true });
  
    _.assert( arguments.length === 1, 'Expects single argument' );
    _.assert( result === this._upStr || _.strEnds( result, this._upStr ) || !_.strEnds( result, this._upStr + this._upStr ) );
    _.assert( result.lastIndexOf( this._upStr + this._hereStr + this._upStr ) === -1 );
    _.assert( !_.strEnds( result, this._upStr + this._hereStr ) );
  
    if( Config.debug )
    {
      _.assert( !this._delUpDupRegexp.test( result ) );
    }
  
    return result;
  };

//


  path._rootStr = `/`;

//
  path._upStr = `/`;

//
  path._hereStr = `.`;

//
  path._downStr = `..`;

//
  path._hereUpStr = `./`;

//
  path._downUpStr = `../`;

//
  path._delHereRegexp = /\/\.(\/|$)/;

//
  path._delDownRegexp = /((?:.|^))(?:(?:\/\/)|(((?:^|\/))(?!\.\.(?:\/|$))(?:(?!\/).)+\/))\.\.((?:\/|$))/;

//
  path._delUpDupRegexp = /\/{2,}/g;

//
  path.currentAtBegin = `/C/pro/web/Port/package/wTools`;

//


  // --
  // declare
  // --

  

  //

  let Extend =
  {

    ScriptFile,

    _pathResolve,
    _nodejsInclude,

    _fileIncludeAct,
    _fileInclude,
    _fileResolve,
    _fileGet,
    _fileCreate,

    assert,
    assertRoutineOptions,

    path,

  }

  Object.assign( _starter_, Extend );

;

})(); // end of starterware

let _libraryFilePath_ = _starter_.path.canonizeTolerant( __filename );
let _libraryDirPath_ = _starter_.path.canonizeTolerant( __dirname );

( function Diagnostics_test_s() { // == begin of file Diagnostics_test_s
function Diagnostics_test_s_naked() {
( function _Diagnostics_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

//

function _err( test )
{

  var errObj1 = new Error( 'err obj for tesst' );
  var errMsg2 = errObj1.message;

  var errMsg1 = 'some error message',
    strName = 'Diagnostics.test.s',
    errObj2 = new Error( 'Error #3' ),
    errMsg3 = errObj2.message,
    optionsObj3 =
  {
      level : 1,
      args : [ errObj1 ]
  },

    optionsObj4 =
  {
      level : 3,
      args : [ errMsg1, errObj2 ]
  };

  /* - */

  test.case = 'single string passed as args property : result should be Error obj';
  var optionsObj2 =
  {
    level : 1,
    args : [ errMsg1 ]
  };
  var got = _._err( optionsObj2 );
  test.identical( got instanceof Error, true );

  test.case = 'single string passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg1 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single string passed as args property : result message should contains file name';
  var expectFileName = new RegExp( strName );
  test.identical( expectFileName.test( got.message ), true );

  test.case = 'single error instance passed as args property : result should be Error obj';
  var got = _._err( optionsObj3 );
  test.identical( got instanceof Error, true );

  test.case = 'single error instance passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg2 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single error instance passed as args property : result message should contains file name';
  test.identical( _.strHas( got.message, errObj1.location.path ), true );

  /* - */

  test.open( 'several error instances/messages passed as args property' );
  var got = _._err( optionsObj4 );
  test.identical( got instanceof Error, true );

  test.case = 'result message should contains all passed string';
  var expectMsg1 = new RegExp( errMsg3 );
  var expectMsg2 = new RegExp( errMsg1 );
  test.identical( [ expectMsg1.test( got.message ), expectMsg2.test( got.message ) ], [ true, true ] );

  test.case = 'result message should contains file name';
  var expectFileName = new RegExp( strName );
  test.identical( expectFileName.test( got.message ), true );

  test.close( 'several error instances/messages passed as args property' );

  /* - */

  var optionsObj1 =
  {
    level : 1,
    args : null
  };

  if( !Config.debug )
  return;

  test.case = 'missed argument';
  test.shouldThrowError( function( )
  {
    _._err( );
  } );

  test.case = 'extra argument';
  test.shouldThrowError( function( )
  {
    _._err( optionsObj1, optionsObj2 );
  } );

  test.case = 'options.args not array';
  test.shouldThrowError( function( )
  {
    _._err( optionsObj1 );
  } );

}

//

function err( test )
{
  var errMsg1 = 'some error message',
    strName = 'Diagnostics.test.s',
    errObj1 = new Error( 'err obj for tesst' ),
    errMsg2 = errObj1.message,
    errObj2 = new Error( 'Error #3' ),
    errMsg3 = errObj2.message;

  test.case = 'single string passed as args property : result should be Error obj';
  var got = _.err( errMsg1 );
  test.identical( got instanceof Error, true );

  test.case = 'single string passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg1 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single string passed as args property : result message should contains file name';
  var expectFileName = new RegExp( strName );
  test.identical( expectFileName.test( got.message ), true );

  test.case = 'single error instance passed as args property : result should be Error obj';
  var got = _.err( errObj1 );
  test.identical( got instanceof Error, true );

  test.case = 'single error instance passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg2 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single error instance passed as args property : result message should contains file name';
  test.identical( _.strHas( got.message,errObj1.location.path ), true );

  test.case = 'several error instances/messages passed as args property : result should be Error obj';
  var got = _.err( errObj2, errMsg1 );
  test.identical( got instanceof Error, true );

  test.case = 'several error instances/messages passed as args : result message should contains all ' +
    'passed string';
  var expectMsg1 = new RegExp( errMsg3 ),
    expectMsg2 = new RegExp( errMsg1 );
  test.identical( [ expectMsg1.test( got.message ), expectMsg2.test( got.message ) ], [ true, true ] );

  test.case = 'several error instances/messages passed as args property : result message should contains ' +
    'file name';
  var expectFileName = new RegExp( strName );
  test.identical( expectFileName.test( got.message ), true );

};

//

function errLog( test )
{
  var errMsg1 = 'some error message',
    strName = 'Diagnostics.test.s',
    errObj1 = new Error( 'err obj for tesst' ),
    errMsg2 = errObj1.message;


  test.case = 'single string passed as args property : result should be Error obj';
  var got = _.errLog( errMsg1 );
  test.identical( got instanceof Error, true );

  test.case = 'single string passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg1 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single string passed as args property : result message should contains file name';
  var expectFileName = new RegExp( strName );
  test.identical( expectFileName.test( got.message ), true );

  test.case = 'single error instance passed as args property : result should be Error obj';
  var got = _.errLog( errObj1 );
  test.identical( got instanceof Error, true );

  test.case = 'single error instance passed as args property : result message should contains passed string';
  var expectMsg = new RegExp( errMsg2 );
  test.identical( expectMsg.test( got.message ), true );

  test.case = 'single error instance passed as args property : result message should contains file name';
  test.identical( _.strHas( got.message,errObj1.location.path ), true );

}
    
//
    
function sureMapHasExactly( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.sureMapHasExactly( srcMap, screenMap ), true );
  test.identical( _.sureMapHasExactly( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapHasExactly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapHasExactly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
  
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasExactly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
    
function sureMapOwnExactly( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.sureMapOwnExactly( srcMap, screenMap ), true );
  test.identical( _.sureMapOwnExactly( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapOwnExactly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapOwnExactly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnExactly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}

//
    
function sureMapHasOnly( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.sureMapHasOnly( srcMap, screenMap ), true );
  test.identical( _.sureMapHasOnly( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapHasOnly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapHasOnly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasOnly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}

//
  
function sureMapOwnOnly( test )
{    
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.sureMapOwnOnly( srcMap, screenMap ), true );
  test.identical( _.sureMapOwnOnly( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapOwnOnly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapOwnOnly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapOwnOnly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
  
function sureMapHasAll( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.sureMapHasAll( srcMap, screenMap ), true );
  test.identical( _.sureMapHasAll( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapHasAll( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapHasAll( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have fields : "name"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "name"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "name"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "name"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "name"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  try
  {
    _.sureMapHasAll( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
  
function sureMapOwnAll( test )
{ 
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.sureMapOwnAll( srcMap, screenMap ), true );
  test.identical( _.sureMapOwnAll( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapOwnAll( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapOwnAll( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own fields : "name"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "name"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "name"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "name"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "name"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnAll( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
  
function sureMapHasNone( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'e' : 13, 'f' : 77, 'g' : 3, 'h' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.sureMapHasNone( srcMap, screenMap ), true );
  test.identical( _.sureMapHasNone( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapHasNone( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapHasNone( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.sureMapHasNone( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasNone( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "a", "b", "c"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasNone( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasNone( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasNone( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "a", "b", "c"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapHasNone( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
  
function sureMapOwnNone( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'e' : 13, 'f' : 77, 'g' : 3, 'h' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.sureMapOwnNone( srcMap, screenMap ), true );
  test.identical( _.sureMapOwnNone( srcMap, screenMap, msg ), true );
  test.identical( _.sureMapOwnNone( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.sureMapOwnNone( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "a", "b", "c"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "a", "b", "c"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.sureMapOwnNone( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}

//
  
function sureMapHasNoUndefine( test )
{        
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + srcMap.b };
  test.identical( _.sureMapHasNoUndefine( srcMap), true );
  test.identical( _.sureMapHasNoUndefine( srcMap, msg ), true );
  test.identical( _.sureMapHasNoUndefine( srcMap, msg, 'msg' ), true );
  test.identical( _.sureMapHasNoUndefine( srcMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var otherMap = { 'd' : undefined };
  try
  {
    _.sureMapHasNoUndefine( otherMap )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no undefines, but has : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.sureMapHasNoUndefine( otherMap, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );    
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var otherMap = { 'd' : undefined };
  try
  {
    _.sureMapHasNoUndefine( otherMap, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.sureMapHasNoUndefine( otherMap, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.sureMapHasNoUndefine( otherMap, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, four or more arguments';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.sureMapHasNoUndefine( srcMap, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects one, two or three arguments' ), true );
}
    
//
    
function assertMapHasFields( test )
{
  // in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapHasFields( srcMap, screenMaps ), true );
  }
    
  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.assertMapHasFields( srcMap, screenMap ), true );
  test.identical( _.assertMapHasFields( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapHasFields( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapHasFields( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
  
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.assertMapHasFields( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasFields( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasFields( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasFields( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasFields( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasFields( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true ); 
}
    
//
    
function assertMapOwnFields( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapOwnFields( srcMap, screenMaps ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.assertMapOwnFields( srcMap, screenMap ), true );
  test.identical( _.assertMapOwnFields( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapOwnFields( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapOwnFields( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
  
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnFields( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );  
}
    
//
    
function assertMapHasOnly( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapHasOnly( srcMap, screenMaps ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.assertMapHasOnly( srcMap, screenMap ), true );
  test.identical( _.assertMapHasOnly( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapHasOnly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapHasOnly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
  
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasOnly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );   
}
    
//
    
function assertMapOwnOnly( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapOwnOnly( srcMap, screenMaps ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b };
  test.identical( _.assertMapOwnOnly( srcMap, screenMap ), true );
  test.identical( _.assertMapOwnOnly( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapOwnOnly( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapOwnOnly( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
  
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnOnly( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );   
}
    
//

function assertMapHasNone( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapHasNone( srcMap, screenMaps ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'e' : 13, 'f' : 77, 'g' : 3, 'h' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.assertMapHasNone( srcMap, screenMap ), true );
  test.identical( _.assertMapHasNone( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapHasNone( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapHasNone( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  try
  {
    _.assertMapHasNone( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no fields : "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasNone( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "a", "b", "c"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasNone( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasNone( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasNone( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "a", "b", "c"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapHasNone( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
  
function assertMapOwnNone( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
    var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
    test.identical( _.assertMapOwnNone( srcMap, screenMaps ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMap = { 'e' : 13, 'f' : 77, 'g' : 3, 'h' : 'Mikle' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  test.identical( _.assertMapOwnNone( srcMap, screenMap ), true );
  test.identical( _.assertMapOwnNone( srcMap, screenMap, msg ), true );
  test.identical( _.assertMapOwnNone( srcMap, screenMap, msg, 'msg' ), true );
  test.identical( _.assertMapOwnNone( srcMap, screenMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should own no fields : "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, '90 "a", "b", "c"' ), true ); 
    
  test.case = 'check error message, msg string';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "a", "b", "c"' ), true );
    
  test.case = 'check error message, msg routine';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "a", "b", "c"' ), true );
    
  test.case = 'check error message, five or more arguments';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Hello' };
  var msg = function(){ return srcMap.a + screenMaps.b }; 
  try
  {
    _.assertMapOwnNone( srcMap, screenMaps, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects two, three or four arguments' ), true );
}
    
//
    
function assertMapHasNoUndefine( test )
{
// in normal mode this test should throw error. The routine return true when Config.debug === false
  if( !Config.debug )
  {
    test.case = 'Config.debug === false';
    var otherMap = { 'd' : undefined };
    test.identical( _.assertMapHasNoUndefine( otherMap ), true );
  }

  test.case = 'correct input';
  var srcMap = { 'a' : 13, 'b' : 77, 'c' : 3, 'd' : 'Mikle' };
  var msg = function(){ return srcMap.a + srcMap.b };
  test.identical( _.assertMapHasNoUndefine( srcMap), true );
  test.identical( _.assertMapHasNoUndefine( srcMap, msg ), true );
  test.identical( _.assertMapHasNoUndefine( srcMap, msg, 'msg' ), true );
  test.identical( _.assertMapHasNoUndefine( srcMap, () => 'This is ' + 'explanation' ), true ); 
    
  test.case = 'check error message, no msg';
  var otherMap = { 'd' : undefined };
  try
  {
    _.assertMapHasNoUndefine( otherMap )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Object should have no undefines, but has : "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.assertMapHasNoUndefine( otherMap, msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );    
  test.identical( _.strHas( err.message, '90 "d"' ), true ); 
    
  test.case = 'check error message, msg string';
  var otherMap = { 'd' : undefined };
  try
  {
    _.assertMapHasNoUndefine( otherMap, 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg "d"' ), true );
    
  test.case = 'check error message, msg string & msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.assertMapHasNoUndefine( otherMap, 'msg', msg )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'msg 90 "d"' ), true );
    
  test.case = 'check error message, msg routine';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.assertMapHasNoUndefine( otherMap, () => 'This is ' + 'explanation' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'This is explanation "d"' ), true );
    
  test.case = 'check error message, four or more arguments';
  var otherMap = { 'd' : undefined };
  var msg = function(){ return srcMap.a + srcMap.b };
  try
  {
    _.assertMapHasNoUndefine( srcMap, msg, 'msg', 'msg' )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );
  test.identical( _.strHas( err.message, 'Expects one, two or three arguments' ), true );
}
    
//

function assert( test )
{
  var err;
  var msg1 = 'short error description';
  var rgMsg1 = new RegExp( msg1 );

  test.case = 'assert successful condition';
  var got = _.assert( 5 === 5 );
  test.identical( got, true );

  test.case = 'passed failure condition : should generates exception';
  try
  {
    _.assert( 5 != 5 )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( err instanceof Error, true );

  test.case = 'passed failure condition with passed message : should generates exception with message';
  try
  {
    _.assert( false, msg1 )
  }
  catch ( e )
  {
    err = e;
  }
  test.identical( rgMsg1.test( err.message ), true );
};

//

function diagnosticStack( test )
{
  function function1( )
  {
    return function2( );
  }

  function function2( )
  {
    return function3( );
  }

  function function3( )
  {
    debugger;
    return _.diagnosticStack();
  }

  /* - */

  test.case = 'trivial';
  var expectedTrace = [ 'function3', 'function2', 'function1', 'Diagnostics.test.s' ];
  var got = function1();
  got = got.split( '\n' );
  debugger;
  expectedTrace.forEach( function( expectedStr, i )
  {
    var expectedRegexp = new RegExp( expectedStr );
    test.description = expectedStr;
    test.identical( expectedRegexp.test( got[ i ] ), true );
  });
  debugger;

  /* - */

  // test.case = 'second';
  // var got = function1();
  // debugger;
  // got = got.split( '\n' ).slice( -5, -1 ).join( '\n' );
  // debugger;
  // expectedTrace.forEach( function( expectedStr, i )
  // {
  //   var expectedRegexp = new RegExp( expectedStr );
  //   test.identical( expectedRegexp.test( got[ i ] ), true );
  // });

};

//

var Self =
{

  name : 'Tools/base/l1/Diagnostics',
  silencing : 1,

  tests :
  {

    _err   : _err,
    err    : err,
    errLog,
    
    // test sureMap*
      
    sureMapHasExactly,
    sureMapOwnExactly,
      
    sureMapHasOnly,
    sureMapOwnOnly,
      
    sureMapHasAll,
    sureMapOwnAll,
      
    sureMapHasNone,
    sureMapOwnNone,
      
    sureMapHasNoUndefine,
    
    // test assertMap*  
      
    assertMapHasFields,
    assertMapOwnFields,
      
    assertMapHasOnly,
    assertMapOwnOnly,
    
    assertMapHasNone,
    assertMapOwnNone,
      
    assertMapHasNoUndefine,
      
    //

    assert,
    diagnosticStack  : diagnosticStack

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

} )( );
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Diagnostics.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Diagnostics_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Diagnostics_test_s

( function Entity_test_s() { // == begin of file Entity_test_s
function Entity_test_s_naked() {
( function _Entity_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{

  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );

}

var _global = _global_;
var _ = _global_.wTools;
var Self = {};

// --
// routines
// --

function eachSample( test )
{
  test.case = 'empty sets';
  var got = _.eachSample( [] );
  var expected = [ [] ];
  test.identical( got, expected );

  var got = _.eachSample( { sets : {} } );
  var expected = [ {} ];
  test.identical( got, expected );

  var got = _.eachSample( {}, null );
  var expected = [ {} ];
  test.identical( got, expected );

  test.case = 'empty sets and unroll, Array';
  var got = _.eachSample( _.unrollMake( [] ) );
  var expected = [ [] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.eachSample( new Array() );
  var expected = [ [] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var src = _.arrayFrom( new Float32Array() )
  var got = _.eachSample( src );
  var expected = [ [] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( _.argumentsArrayMake( 0 ), null );
  var expected = [ [] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  /* - */

  test.case = 'sets with primitive';
  var got = _.eachSample( [ 1 ] );
  var expected = [ [ 1 ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : 1 }, null );
  var expected = [ { a : 1 } ];
  test.identical( got, expected );

  var got = _.eachSample( [ 1, 2, null ] );
  var expected = [ [ 1, 2, null ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : 1, b : 2, c : null }, null );
  var expected = [ { a : 1, b : 2, c : null } ];
  test.identical( got, expected );

  test.case = 'sets with primitive and unroll, Array';
  var got = _.eachSample( _.unrollMake( [ 1 ] ) );
  var expected = [ [ 1 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.eachSample( new Array( [ 1 ] ) );
  var expected = [ [ 1 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var src = _.arrayFrom( new Float32Array( [ 1 ] ) );
  var got = _.eachSample( src );
  var expected = [ [ 1 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( _.argumentsArrayMake( [ 1 ] ), null );
  var expected = [ [ 1 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  /* - */

  test.case = 'sets with empty array, empty map';
  var got = _.eachSample( [ [] ] );
  var expected = [ [ undefined ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : [] }, null );
  var expected = [ { a : undefined } ];
  test.identical( got, expected );

  var got = _.eachSample( [ [], [] ] );
  var expected = [ [ undefined, undefined ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : [], b : [] }, null );
  var expected = [ { a : undefined, b : undefined } ];
  test.identical( got, expected );

  var got = _.eachSample( [ [], [], [] ] );
  var expected = [ [ undefined, undefined, undefined ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : [], b : [], c : [] }, null );
  var expected = [ { a : undefined, b : undefined, c : undefined } ];
  test.identical( got, expected );

  test.case = 'sets with empty unrolls, Arrays';
  var got = _.eachSample( _.unrollMake( [ [], [] ] ) );
  var expected = [ [ undefined, undefined ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( new Array( [ [], [], [] ] ) );
  var expected = [ [ [] ], [ [] ], [ [] ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var src = _.arrayFrom( new Float32Array( [ [], [], [] ] ) );
  var got = _.eachSample( src );
  var expected = [ [ 0, 0, 0 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( _.argumentsArrayMake( [ [], [] ] ) );
  var expected = [ [ undefined, undefined ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  /* - */

  test.case = 'sets with primitive, result : null';

  var got = _.eachSample( { sets : [ 1, 2, 3 ], result : 0 } );
  var expected = 0;
  test.identical( got, expected );

  var got = _.eachSample( { sets : { a : 1, b : 2, c : null }, result : 0 } );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'sets with unroll, Array, result : null';
  var got = _.eachSample( { sets : _.unrollMake( [ 1, 2, 3 ] ), result : 0 } );
  var expected = 0;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var got = _.eachSample( { sets : new Array( [ 1, 2, 3 ] ), result : 0 } );
  var expected = 2;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var src = _.arrayFrom( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.eachSample( { sets : src, result : 0 } );
  var expected = 0;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var got = _.eachSample( { sets : _.argumentsArrayMake( [ 1, 2, 3 ] ), result : 0 } );
  var expected = 0;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  /* - */

  test.case = 'sets with single not empty array, single not empty map';
  var got = _.eachSample( [ [ 1, 2, null, 'str' ] ] );
  var expected = [ [ 1 ], [ 2 ], [ null ], [ 'str' ] ];
  test.identical( got, expected );

  var got = _.eachSample( { a : [ 1, 2, null, 'str' ] }, null );
  var expected =
  [
    { a : 1 },
    { a : 2 },
    { a : null },
    { a : 'str' }
  ];
  test.identical( got, expected );

  test.case = 'sets with single not empty unroll, Array';
  var got = _.eachSample( _.unrollMake( [ [ 1, 2, null, 'str' ] ] ) );
  var expected = [ [ 1 ], [ 2 ], [ null ], [ 'str' ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( _.argumentsArrayMake( [ [ 1, 2, null, 'str' ] ] ) );
  var expected = [ [ 1 ], [ 2 ], [ null ], [ 'str' ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample( new Array( [ [ 1, 2, null, 'str' ] ] ) );
  var expected = [ [ [ 1, 2, null, 'str' ] ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var src = _.arrayFrom( new Float32Array( [ [ 1, 2, 3 ] ] ) );
  var got = _.eachSample( src );
  test.notIdentical( got, [ [ [ 1, 2, 3 ] ] ] );
  test.is( _.arrayIs( got ) );

  /* - */

  test.case = 'simplest, leftToRight : 1';

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ] ]
    });
  var expected =
  [
    [ 0, 2 ], [ 1, 2 ],
    [ 0, 3 ], [ 1, 3 ],
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ] }
    });
  var expected =
  [
    { a : 0, b : 2 }, { a : 1, b : 2 },
    { a : 0, b : 3 }, { a : 1, b : 3 }
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ], 6 ]
    });
  var expected =
  [
    [ 0, 2, 6 ], [ 1, 2, 6 ],
    [ 0, 3, 6 ], [ 1, 3, 6 ],
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ],  c : 6 }
    });
  var expected =
  [
    { a : 0, b : 2, c : 6 },
    { a : 1, b : 2, c : 6 },
    { a : 0, b : 3, c : 6 },
    { a : 1, b : 3, c : 6 }
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ], [ 6, null ] ]
    });
  var expected =
  [
    [ 0, 2, 6 ], [ 1, 2, 6 ],
    [ 0, 3, 6 ], [ 1, 3, 6 ],
    [ 0, 2, null ], [ 1, 2, null ],
    [ 0, 3, null ], [ 1, 3, null ],
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ], c: [ 6, null ] }
    });
  var expected =
  [
    { a : 0, b : 2, c : 6 }, { a : 1, b : 2, c : 6 },
    { a : 0, b : 3, c : 6 }, { a : 1, b : 3, c : 6 },
    { a : 0, b : 2, c : null }, { a : 1, b : 2, c : null },
    { a : 0, b : 3, c : null }, { a : 1, b : 3, c : null },
  ];
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : [ _.argumentsArrayMake( [ 0, 1 ] ), _.argumentsArrayMake( [ 2, 3 ] ) ]
    });
  var expected =
  [
    [ 0, 2 ], [ 1, 2 ],
    [ 0, 3 ], [ 1, 3 ],
  ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample(
    {
      sets : [ new Array( [ 0, 1 ] ), new Array( [ 2, 3 ] ) ]
    });
  var expected = [ [ [ 0, 1 ], [ 2, 3 ] ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  var a = _.arrayFrom( new Float32Array( [ 0, 1 ] ) );
  var b = _.arrayFrom( new Float32Array( [ 2, 3 ] ) );
  var got = _.eachSample(
    {
      sets : [ a, b ]
    });
  var expected =
  [
    [ 0, 2 ], [ 1, 2 ],
    [ 0, 3 ], [ 1, 3 ],
  ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );

  /* - */

  test.case = 'simplest leftToRight : 0';

  var got = _.eachSample
  ({
    sets : [ [ 0, 1 ], [ 5, 6 ] ],
    leftToRight : 0,
  });
  var expected =
  [
    [ 0, 5 ],[ 0, 6 ],
    [ 1, 5 ],[ 1, 6 ]
  ];
  test.identical( got, expected );

  var got = _.eachSample
  ({
    sets : { a : [ 0, 1 ], b : [ 5, 6 ] },
    leftToRight : 0,
  });
  var expected =
  [
    { a : 0, b : 5 }, { a : 0, b : 6 },
    { a : 1, b : 5 }, { a : 1, b : 6 }
  ];
  test.identical( got, expected );

  var got = _.eachSample
  ({
    sets : [ [ 0, 1 ], [ 'str', null ], [ true, 2 ] ],
    leftToRight : 0,
  });
  var expected =
  [
    [ 0, 'str', true ], [ 0, 'str', 2 ],
    [ 0, null, true ], [ 0, null, 2 ],
    [ 1, 'str', true ], [ 1, 'str', 2 ],
    [ 1, null, true ], [ 1, null, 2 ]
  ];
  test.identical( got, expected );

  /* - */

  test.case = 'simplest, leftToRight : 1, result : 0';

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ] ],
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ] },
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ], 6 ],
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ],  c : 6 },
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : [ [ 0, 1 ], [ 2, 3 ], [ 6, null ] ],
      result : 0,
    });
  var expected = 7;
  test.identical( got, expected );

  var got = _.eachSample(
    {
      sets : { a : [ 0, 1 ], b : [ 2, 3 ], c: [ 6, null ] },
      result : 0,
    });
  var expected = 7;
  test.identical( got, expected );

  test.case = 'simplest, leftToRight : 1, unroll, Array';
  var got = _.eachSample(
    {
      sets : [ _.unrollMake( [ 0, 1 ] ), _.unrollMake( [ 2, 3 ] ) ],
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var got = _.eachSample(
    {
      sets : [ _.argumentsArrayMake( [ 0, 1 ] ), _.argumentsArrayMake( [ 2, 3 ] ) ],
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var got = _.eachSample(
    {
      sets : [ new Array( [ 0, 1 ] ), new Array( [ 2, 3 ] ) ],
      result : 0,
    });
  var expected = 0;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  var a = _.arrayFrom( new Float32Array( [ 0, 1 ] ) );
  var b = _.arrayFrom( new Float32Array( [ 2, 3 ] ) );
  var got = _.eachSample(
    {
      sets : [ a, b ],
      result : 0,
    });
  var expected = 3;
  test.identical( got, expected );
  test.is( _.primitiveIs( got ) );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'not argument, extra arguments';
  test.shouldThrowErrorSync( () => _.eachSample() );
  test.shouldThrowErrorSync( () => _.eachSample( [ [ 1 ], [ 2 ] ], null, [ 1 ] ) );

  test.case = 'o.sets is not arraylike, not mapLike';
  test.shouldThrowErrorSync( () => _.eachSample( {} ) );
  test.shouldThrowErrorSync( () => _.eachSample( 1 ) );
  test.shouldThrowErrorSync( () => _.eachSample( 'str', null ) );

  test.case = 'onEach is not a routine or null';
  test.shouldThrowErrorSync( () => _.eachSample( [ [ 1 ], [ 2 ] ], 'str' ) );

  test.case = 'o.base has a value';
  var o = {};
  o.sets = [ [ 1, 0 ], [ 2, 3 ] ];
  o.base = [ 5 ];
  test.shouldThrowErrorSync( () => _.eachSample( o ) );

  test.case = 'o.add has a value';
  var o = {};
  o.sets = [ [ 1, 0 ], [ 2, 3 ] ];
  o.add = [ 5 ];
  test.shouldThrowErrorSync( () => _.eachSample( o ) );
}

//

function eachSampleExperiment( test )
{
  debugger;

  var got = _.eachSample
  ({
    sets : [ [ 0, 1 ], [ 2, 3 ] ]
  });
  var expected =
  [
    [ 0, 2 ], [ 1, 2 ],
    [ 0, 3 ], [ 1, 3 ],
  ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = _.eachSample
  ({
    sets : [ _.unrollMake( [ 0, 1 ] ), _.unrollMake( [ 2, 3 ] ) ]
  });
  var expected =
  [
    [ 0, 2 ], [ 1, 2 ],
    [ 0, 3 ], [ 1, 3 ],
  ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

}
eachSampleExperiment.experimental = 1;

//

function entityEach( test )
{
  test.open( 'src is an ArrayLike');

  test.case = 'empty arrayLike objects';
  var got;
  var src = [];
  _.entityEach( src, ( v ) => got = typeof v );
  test.identical( got, undefined );

  var got = [];
  var src = _.unrollMake( 0 );
  _.entityEach( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = _.argumentsArrayMake( 0 );
  _.entityEach( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = new Array( 0 );
  _.entityEach( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, src );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = new Float32Array( 0 );
  _.entityEach( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  //

  test.case = 'not empty arrayLike objects';

  var got = [];
  var src = [ 0, 1, 2 ];
  _.entityEach( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );

  var got = [];
  var src = _.unrollMake( [ 0, 1, _.unrollMake( [ 2 ] ) ] );
  _.entityEach( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( src ) );

  var got = [];
  var src = _.argumentsArrayMake( [ 0, 1, 2 ] );
  _.entityEach( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Array( 0, 1, 2 );
  _.entityEach( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Float32Array( [ 0, 1, 2 ] );
  _.entityEach( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  //

  test.case = 'routine counter';

  var onEach = function( v, i )
  {
    if( _.strIs( v ) && i >= 0 )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEach( 1, onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEach( 'abc', onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEach( [ 'abc', 1, 'ab', 'a' ], onEach );
  test.identical( got, 29 );

  var got = 0;
  _.entityEach( [ { a : 1 }, { b : 2 } ], onEach );
  test.identical( got, -2 );

  var got = 0;
  var src = _.unrollFrom( [ 1, 'str', _.unrollMake( [ 2, 'str' ] ) ] );
  _.entityEach( src, onEach );
  test.identical( got, 18 );

  var got = 0;
  var src = _.argumentsArrayMake( [ 1, 'str', [ 2, 'str' ] ] );
  _.entityEach( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Array( 1, 'str', [ 2, 'str' ] );
  _.entityEach( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Float32Array( [ 1, 1, [ 2 ] ] );
  _.entityEach( src, onEach );
  test.identical( got, -3 );

  test.case = 'Third argument in onEach'
  var onEach = function( v, i, src )
  {
    if( _.longIs( src ) )
    got = src;
    else
    got += 10;
  }

  var got;
  var src = [ 0, 1, 3, 5 ];
  _.entityEach( src, onEach );
  test.identical( got, src );

  var got;
  var src = _.unrollMake( [ 0, 1, _.unrollFrom( [ 3, 5 ] ) ] );
  _.entityEach( src, onEach );
  test.identical( got, [ 0, 1, 3, 5 ] );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got;
  var src = _.argumentsArrayMake( [ 0, 1, [ 3, 5 ] ] );
  _.entityEach( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Array( 1, 2, null, true );
  _.entityEach( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Float32Array( [ 1, 2, 1, 3 ] );
  _.entityEach( src, onEach );
  test.equivalent( got, [ 1, 2, 1, 3 ] );
  test.is( _.longIs( got ) );

  test.close( 'src is an ArrayLike');

  /* - */

  test.open( 'src is an object' );

  var got = {};
  _.entityEach( {}, ( v ) => got = v );
  test.identical( got, {} );

  var got = {};
  _.entityEach( Object.create( null ), ( v, k ) => got[ k ] = v + k );
  test.identical( got, {} );

  var got = {};
  _.entityEach( { a : 1, b : 3, c : 5 }, ( v, k ) => got[ k ] = v * v + k );
  test.identical( got, { a : '1a', b : '9b', c : '25c' } );

  //

  test.case = 'routine counter';

  var onEach = function( v, k )
  {
    if( _.strIs( v ) && k )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEach( 'abc', onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEach( { a : 'abc', b : { a : 1 }, c : [ null ], d : undefined }, onEach );
  test.identical( got, 7 );

  var got = 0;
  _.entityEach( { a : 'abc', b : 1, c : 'ab', d : 'a' }, onEach );
  test.identical( got, 29 );

  //

  test.case = 'Third argument in onEach'
  var onEach = function( v, k, src )
  {
    if( _.objectIs( src ) )
    got = src;
    else
    got += 10;
  }

  var got = {};
  var src = { a : 1, b : 2, c : 3 };
  _.entityEach( src, onEach );
  test.identical( got, src );

  test.close( 'src is an object' );

  /* - */

  test.case = 'src is not ArrayLike or ObjectLike';

  var got;
  _.entityEach( null, ( v ) => got = typeof v );
  test.identical( got, 'object' );

  var got;
  _.entityEach( 1, ( v ) => got = typeof v );
  test.identical( got, 'number' );

  var got;
  _.entityEach( 'a', ( v ) => got = v + 2 );
  test.identical( got, 'a2' );

  var got;
  _.entityEach( function b(){ return 'a'}, ( v ) => got = typeof v );
  test.identical( got, 'function' );

  var got;
  _.entityEach( function b(){ return 'a'}, ( v, i ) => got = typeof v + ' ' + typeof i );
  test.identical( got, 'function undefined' );

  //

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityEach() );

  test.case = 'only one argument';
  test.shouldThrowErrorSync( () => _.entityEach( [ 'a' ] ) );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityEach( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three args';
  test.shouldThrowErrorSync( () => _.entityEach( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityEach( { a : 2 }, [] ) );
}

//

function entityEachKey( test )
{
  test.open( 'src is an ArrayLike');

  test.case = 'empty arrayLike objects'
  var got;
  var src = [];
  _.entityEachKey( src, ( v ) => got = typeof v );
  test.identical( got, undefined );

  var got = [];
  var src = _.unrollMake( 0 );
  _.entityEachKey( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = _.argumentsArrayMake( 0 );
  _.entityEachKey( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Array( 0 );
  _.entityEachKey( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, src );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Float32Array( 0 );
  _.entityEachKey( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );

  //

  test.case = 'not empty arrayLike objects';

  var got = [];
  var src = [ 0, 1, 2 ];
  _.entityEachKey( src, ( v, u, i ) => got[ i ] = v * v );
  test.identical( got, [ 0, 1, 4 ] );

  var got = [];
  var src = _.unrollMake( [ 0, 1, _.unrollMake( [ 2 ] ) ] );
  _.entityEachKey( src, ( v, u, i ) => got[ i ] = v * v );
  test.identical( got, [ 0, 1, 4 ] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( src ) );

  var got = [];
  var src = _.argumentsArrayMake( [ 0, 1, 2 ] );
  _.entityEachKey( src, ( v, u, i ) => got[ i ] = v * v );
  test.identical( got, [ 0, 1, 4 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Array( 0, 1, 2 );
  _.entityEachKey( src, ( v, u, i ) => got[ i ] = v * v );
  test.identical( got, [ 0, 1, 4 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Float32Array( [ 0, 1, 2 ] );
  _.entityEachKey( src, ( v, u, i ) => got[ i ] = v * v );
  test.identical( got, [ 0, 1, 4 ] );
  test.is( _.longIs( src ) );

  //

  test.case = 'routine counter';

  var onEach = function( v, u )
  {
    if( _.strIs( v ) && u === undefined )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEachKey( 1, onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEachKey( 'abc', onEach );
  test.identical( got, 10 );

  var got = 0;
  _.entityEachKey( [ 'abc', 1, 'ab', 'a',  { a : 1 } ], onEach );
  test.identical( got, 28 );

  var got = 0;
  var src = _.unrollFrom( [ 1, 'str', _.unrollMake( [ { a : 'abc' }, 'str' ] ) ] );
  _.entityEachKey( src, onEach );
  test.identical( got, 18 );

  var got = 0;
  var src = _.argumentsArrayMake( [ 1, 'str', [ [ 'abc' ], 'str' ] ] );
  _.entityEachKey( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Array( 1, 'str', [ 2, 'str' ] );
  _.entityEachKey( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Float32Array( [ 1, 1, [ 2 ] ] );
  _.entityEachKey( src, onEach );
  test.identical( got, -3 );

  test.case = 'Third argument in onEach'
  var onEach = function( v, u, i )
  {
    if( _.longIs( arguments[ 3 ] ) )
    got = src;
    else
    got += 10;
  }

  var got;
  var src = [ 0, 1, 3, 5 ];
  _.entityEachKey( src, onEach );
  test.identical( got, src );

  var got;
  var src = _.unrollMake( [ 0, 1, _.unrollFrom( [ 3, 5 ] ) ] );
  _.entityEachKey( src, onEach );
  test.identical( got, [ 0, 1, 3, 5 ] );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got;
  var src = _.argumentsArrayMake( [ 0, 1, [ 3, 5 ] ] );
  _.entityEachKey( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Array( 1, 2, null, true );
  _.entityEachKey( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Float32Array( [ 1, 2, 1, 3 ] );
  _.entityEachKey( src, onEach );
  test.equivalent( got, [ 1, 2, 1, 3 ] );
  test.is( _.longIs( got ) );

  test.close( 'src is an ArrayLike');

  /* - */

  test.open( 'src is an ObjectLike' );

  test.case = 'not onEach';
  var got = {};
  _.entityEachKey( {}, ( v ) => got = v );
  test.identical( got, {} );

  var got = {};
  _.entityEachKey( Object.create( null ), ( v, k ) => got[ k ] = v + k );
  test.identical( got, {} );

  var got = {};
  _.entityEachKey( { a : 1, b : 3, c : 5 }, ( k, v ) => got[ k ] = v * v + k );
  test.identical( got, { a : '1a', b : '9b', c : '25c' } );

  //

  test.case = 'routine counter';
  var onEach = function( k, v )
  {
    if( _.strIs( v ) && k )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEachKey( 'abc', onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEachKey( { a : 'abc' }, onEach );
  test.identical( got, 10 );

  var got = 0;
  _.entityEachKey( { a : 'abc', b : 1, c : 'ab', d : null }, onEach );
  test.identical( got, 18 );

  var got = 0;
  _.entityEachKey( { a : [ 'a', 'b' ], b : { e : 1 } }, onEach );
  test.identical( got, -2 );

  //

  test.case = 'Third argument in onEach'
  var onEach = function( v, k, i )
  {
    got[ i ] = v + k;
  }

  var got = {};
  _.entityEachKey( { a : 1, b : 2, c : 3 }, onEach );
  test.identical( got, { 0 : 'a1', 1 : 'b2', 2 : 'c3' } );

  test.close( 'src is an ObjectLike' );

  /* - */

  test.case = 'src is not ArrayLike or ObjectLike';

  var got;
  _.entityEachKey( null, ( v ) => got = typeof v );
  test.identical( got, 'object' );

  var got;
  _.entityEachKey( 1, ( v ) => got = typeof v );
  test.identical( got, 'number' );

  var got;
  _.entityEachKey( 'a', ( v ) => got = v + 2 );
  test.identical( got, 'a2' );

  var got;
  _.entityEachKey( function b(){ return 'a'}, ( v, i ) => got = typeof v + ' ' + typeof i );
  test.identical( got, 'function undefined' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityEachKey() );

  test.case = 'only one argument';
  test.shouldThrowErrorSync( () => _.entityEachKey( [ 'a' ] ) );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityEachKey( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three arg';
  test.shouldThrowErrorSync( () => _.entityEachKey( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityEachKey( { a : 2 }, [] ) );
}

//

function entityEachOwn( test )
{
  test.open( 'src is an ArrayLike');

  test.case = 'empty arrayLike objects';
  var got;
  var src = [];
  _.entityEachOwn( src, ( v ) => got = typeof v );
  test.identical( got, undefined );

  var got = [];
  var src = _.unrollMake( 0 );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = _.argumentsArrayMake( 0 );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = new Array( 0 );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, src );
  test.is( _.arrayIs( got ) );

  var got = [];
  var src = new Float32Array( 0 );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v + i );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  //

  test.case = 'not empty arrayLike objects';

  var got = [];
  var src = [ 0, 1, 2 ];
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );

  var got = [];
  var src = _.unrollMake( [ 0, 1, _.unrollMake( [ 2 ] ) ] );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( src ) );

  var got = [];
  var src = _.argumentsArrayMake( [ 0, 1, 2 ] );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Array( 0, 1, 2 );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  var got = [];
  var src = new Float32Array( [ 0, 1, 2 ] );
  _.entityEachOwn( src, ( v, i ) => got[ i ] = v * v + i );
  test.identical( got, [ 0, 2, 6 ] );
  test.is( _.longIs( src ) );

  //

  test.case = 'routine counter';

  var onEach = function( v, i )
  {
    if( _.strIs( v ) && i >= 0 )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEachOwn( 1, onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEachOwn( 'abc', onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEachOwn( [ 'abc', 1, 'ab', 'a' ], onEach );
  test.identical( got, 29 );

  var got = 0;
  _.entityEachOwn( [ { a : 1 }, { b : 2 } ], onEach );
  test.identical( got, -2 );

  var got = 0;
  var src = _.unrollFrom( [ 1, 'str', _.unrollMake( [ 2, 'str' ] ) ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, 18 );

  var got = 0;
  var src = _.argumentsArrayMake( [ 1, 'str', [ 2, 'str' ] ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Array( 1, 'str', [ 2, 'str' ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = new Float32Array( [ 1, 1, [ 2 ] ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, -3 );

  test.case = 'Third argument in onEach'
  var onEach = function( v, i, src )
  {
    if( _.longIs( src ) )
    got = src;
    else
    got += 10;
  }

  var got;
  var src = [ 0, 1, 3, 5 ];
  _.entityEachOwn( src, onEach );
  test.identical( got, src );

  var got;
  var src = _.unrollMake( [ 0, 1, _.unrollFrom( [ 3, 5 ] ) ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, [ 0, 1, 3, 5 ] );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  var got;
  var src = _.argumentsArrayMake( [ 0, 1, [ 3, 5 ] ] );
  _.entityEachOwn( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Array( 1, 2, null, true );
  _.entityEachOwn( src, onEach );
  test.identical( got, src );
  test.is( _.longIs( got ) );

  var got;
  var src = new Float32Array( [ 1, 2, 1, 3 ] );
  _.entityEachOwn( src, onEach );
  test.equivalent( got, [ 1, 2, 1, 3 ] );
  test.is( _.longIs( got ) );

  test.close( 'src is an ArrayLike');

  /* - */

  test.open( 'src is an ObjectLike' );

  var got ={};
  _.entityEachOwn( {}, ( v ) => got = v );
  test.identical( got, {} );

  var got = {};
  var src = Object.create( null );
  var src2 = Object.create( src );
  _.entityEachOwn( src, ( v, k ) => got[ k ] = v + k );
  test.identical( got, {} );
  _.entityEachOwn( src2, ( v, k ) => got[ k ] = v + k );
  test.identical( got, {} );

  var got = {};
  var src = Object.create( null );
  src.a = 1;
  src.b = 3;
  var src2 = Object.create( src );
  _.entityEachOwn( src2, ( v, k ) => got[ k ] = v * v + k );
  test.identical( got, {} );
  _.entityEachOwn( src, ( v, k ) => got[ k ] = v * v + k );
  test.identical( got, { a : '1a', b : '9b' } );

  test.case = 'routine counter';

  var onEach = function( v, k )
  {
    if( _.strIs( v ) && k )
    got += 10;
    else
    got -= 1;
  }

  var got = 0;
  _.entityEachOwn( 1, onEach );
  test.identical( got, -1 );

  var got = 0;
  _.entityEachOwn( { a : 'abc', b : 1, c : 'ab', d : null }, onEach );
  test.identical( got, 18 );

  var got = 0;
  var src = { name : 'object', toString : 1, toSource : null };
  var src2 = Object.create( src );
  _.entityEachOwn( src2, onEach );
  test.identical( got, 0 );
  _.entityEachOwn( src, onEach );
  test.identical( got, 8 );

  var got = 0;
  var src = Object.create( null );
  src.a = [ 'a', 'b' ];
  src.b = { a : 1 };
  var src2 = Object.create( src );
  src2.c = 'str';
  test.identical( src.a, src2.a );
  test.identical( src.b, src2.b );
  _.entityEachOwn( src, onEach );
  test.identical( got, -2 );
  _.entityEachOwn( src2, onEach );
  test.identical( got, 8 );

  test.case = 'Third argument in onEach'
  var onEach = function( v, k, src )
  {
    if( _.objectIs( src ) )
    got = src;
    else
    got += 10;
  }

  var got = {};
  var src = Object.create( null );
  src.a = 'str';
  var src2 = Object.create( src );
  _.entityEachOwn( src2, onEach );
  test.identical( got, {} );
  _.entityEachOwn( src, onEach );
  test.identical( got, src );

  test.close( 'src is an ObjectLike' );

  /* - */

  test.case = 'src is not ArrayLike or ObjectLike';

  var got;
  _.entityEachOwn( null, ( v ) => got = typeof v );
  test.identical( got, 'object' );

  var got;
  _.entityEachOwn( 1, ( v ) => got = typeof v );
  test.identical( got, 'number' );

  var got;
  _.entityEachOwn( 'a', ( v ) => got = v + 2 );
  test.identical( got, 'a2' );

  var got;
  _.entityEachOwn( function b(){ return 'a'}, ( v, i ) => got = typeof v + ' ' + typeof i );
  test.identical( got, 'function undefined' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityEachOwn() );

  test.case = 'only one argument';
  test.shouldThrowErrorSync( () => _.entityEachOwn( [ 'a' ] ) );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityEachOwn( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three arg';
  test.shouldThrowErrorSync( () => _.entityEachOwn( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityEachOwn( { a : 2 }, [] ) );
}

//

function entityAll( test )
{
  test.open( 'onEach is routine' );

  test.case = 'array';

  var got = _.entityAll( [ 1, 'str', undefined ], ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var got = _.entityAll( [ 1, 'str', { a : 2 }, 4 ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, true );

  var got = _.entityAll( [ 1, 'str', { a : 2 }, false ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, false );

  var got = _.entityAll( [ 1, 'str', 3, null ], () => undefined );
  test.identical( got, undefined );

  test.case = 'unroll';

  var src = _.unrollFrom( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), undefined, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAll( src, () => undefined );
  test.identical( got, undefined );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], false, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAll( src, () => undefined );
  test.identical( got, undefined );

  test.case = 'Array';

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Array( 1, 2, [ 'str' ], false, 4 );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAll( src, () => undefined );
  test.identical( got, undefined );

  test.case = 'Float32Array';

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Float32Array( [ 1, 2, [ 8 ], false, 4 ] );
  var got = _.entityAll( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAll( src, () => undefined );
  test.identical( got, undefined );

  test.case = 'ObjectLike';

  var got = _.entityAll( { 1 : 2, c : 4, a : undefined }, ( v, k ) => v === k );
  test.identical( got, false );

  var got = _.entityAll( { 'a' : 'a', '4' : '4', 'true' : 'true' }, ( v, k ) => v === k );
  test.identical( got, true );

  var got = _.entityAll( { 1 : 2, 2 : 3, a : null }, ( v, k ) => v !== k );
  test.identical( got, true );

  var got = _.entityAll( { a : 1, b : 3, c : true }, ( v, k ) => v !== k );
  test.identical( got, true );

  var got = _.entityAll( { 'a' : 'a', 'b' : 'str' }, ( v, k ) => typeof v === typeof k );
  test.identical( got, true );

  var got = _.entityAll( { a : 1, b : false }, ( v, k ) => v === k );
  test.identical( got, false );

  var got = _.entityAll( { a : 1, b : false }, ( v, k, src ) => src.length !== k );
  test.identical( got, true );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityAll( undefined, ( src, u ) => src !== u );
  test.identical( got, false );

  var got = _.entityAll( null, ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAll( 1, ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAll( 'str', ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAll( false, ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAll( true, ( src, u ) => src !== u );
  test.identical( got, true );

  var got = _.entityAll( true, ( src, u, u2 ) => src !== u2 );
  test.identical( got, true );

  test.close( 'onEach is routine' );

  /* - */

  test.open( 'onEach is null' );

  test.case = 'array';

  var got = _.entityAll( [ 1, 'str', undefined ] );
  test.identical( got, undefined );

  var got = _.entityAll( [ 1, 'str', { a : 2 }, 4 ] );
  test.identical( got, true );

  var got = _.entityAll( [ 1, 'str', { a : 2 }, false ] );
  test.identical( got, false );

  test.case = 'unroll';

  var src = _.unrollFrom( [ 1, 2, _.unrollFrom( [ 'str' ] ), null, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, null );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, true );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), false, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, false );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], undefined, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, undefined );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, true );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], false, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, false );

  test.case = 'Array';

  var src = new Array( 1, 2, [ 'str' ], null, 4 );
  var got = _.entityAll( src );
  test.identical( got, null );

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAll( src );
  test.identical( got, true );

  var src = new Array( 1, 2, [ 'str' ], false, 4 );
  var got = _.entityAll( src );
  test.identical( got, false );

  test.case = 'Float32Array';

  var src = new Float32Array( [ null, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, 0 );

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAll( src );
  test.identical( got, true );

  var src = new Float32Array( [ 1, 2, [ 8 ], 'str', 4 ] );
  var got = _.entityAll( src );
  test.identical( got, NaN );

  test.case = 'ObjectLike';

  var got = _.entityAll( { 1 : 2, c : 4, a : undefined } );
  test.identical( got, undefined );

  var got = _.entityAll( { 1 : 2, 2 : 3, a : null } );
  test.identical( got, null );

  var got = _.entityAll( { a : 1, b : 3, c : true } );
  test.identical( got, true );

  var got = _.entityAll( { a : 'a', b : 'str' } );
  test.identical( got, true );

  var got = _.entityAll( { a : 1, b : false } );
  test.identical( got, false );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityAll( undefined );
  test.identical( got, undefined );

  var got = _.entityAll( null );
  test.identical( got, null );

  var got = _.entityAll( 1 );
  test.identical( got, true );

  var got = _.entityAll( 'str' );
  test.identical( got, true );

  var got = _.entityAll( false );
  test.identical( got, false );

  var got = _.entityAll( true );
  test.identical( got, true );

  test.close( 'onEach is null' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityAll() );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityAll( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three arg';
  test.shouldThrowErrorSync( () => _.entityAll( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityAll( { a : 2 }, [] ) );
}

//

function entityAny( test )
{
  test.open( 'onEach is routine' );

  test.case = 'array';

  var got = _.entityAny( [ 1, 'str', undefined ], ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, true );

  var got = _.entityAny( [ false, false, undefined ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, false );

  var got = _.entityAny( [ 1, 'str', { a : 2 }, false ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, true );

  var got = _.entityAny( [ 1, 'str', 3, null ], () => undefined );
  test.identical( got, false );

  test.case = 'unroll';

  var src = _.unrollFrom( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, true );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( null ) ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( [ 'str' ] ) ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAny( src, () => undefined );
  test.identical( got, false );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, true );

  var src = _.argumentsArrayMake( [ false, null, undefined ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], false, 4 ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAny( src, () => undefined );
  test.identical( got, false );

  test.case = 'Array';

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, true );

  var src = new Array( false, undefined, null );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Array( 1, 2, [ 'str' ], false, 4 );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityAny( src, () => undefined );
  test.identical( got, false );

  test.case = 'Float32Array';

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, true );

  var src = new Float32Array( [ 'a', undefined, false, null ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Float32Array( [ 1, 2, [ 8 ], false, 4 ] );
  var got = _.entityAny( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityAny( src, () => undefined );
  test.identical( got, false );

  test.case = 'ObjectLike';

  var got = _.entityAny( { 1 : 2, c : 4, a : undefined }, ( v, k ) => v === k );
  test.identical( got, false );

  var got = _.entityAny( { 'a' : false, '4' : false, 'true' : 'true' }, ( v, k ) => v === k );
  test.identical( got, true );

  var got = _.entityAny( { 1 : 2, 2 : 3, a : null }, ( v, k ) => typeof v === typeof k );
  test.identical( got, false );

  var got = _.entityAny( { 'a' : [], 'b' : 'str' }, ( v, k ) => typeof v === typeof k );
  test.identical( got, true );

  var got = _.entityAny( { a : 1, b : false }, ( v, k ) => v === k );
  test.identical( got, false );

  var got = _.entityAny( { a : 1, b : false }, ( v, k, u ) => v !== u );
  test.identical( got, true );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityAny( undefined, ( src, u ) => src !== u );
  test.identical( got, false );

  var got = _.entityAny( null, ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAny( 1, ( src, u ) => src !== u );
  test.identical( got, true );

  var got = _.entityAny( 'str', ( src, u ) => src === u );
  test.identical( got, false );

  var got = _.entityAny( false, ( src, u ) => src !== u );
  test.identical( got, true );

  var got = _.entityAny( true, ( src, u ) => src !== u );
  test.identical( got, true );

  var got = _.entityAny( true, ( src, u, u2 ) => src !== u2 );
  test.identical( got, true );

  test.close( 'onEach is routine' );

  /* - */

  test.open( 'onEach is null' );

  test.case = 'array';

  var got = _.entityAny( [ 1, 'str', undefined ] );
  test.identical( got, 1 );

  var got = _.entityAny( [ 'str', 1, { a : 2 }, 4 ] );
  test.identical( got, 'str' );

  var got = _.entityAny( [ false, null, undefined ] );
  test.identical( got, false );

  test.case = 'unroll';

  var src = _.unrollFrom( [ false, 2, _.unrollFrom( [ 'str' ] ), null, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, 2 );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, 'str' );

  var src = _.unrollMake( [ null, undefined, false ] );
  var got = _.entityAny( src );
  test.identical( got, false );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ null, false, [ 'str' ], undefined, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, [ 'str' ] );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, 1 );

  var src = _.argumentsArrayMake( [ null, false, undefined ] );
  var got = _.entityAny( src );
  test.identical( got, false );

  test.case = 'Array';

  var src = new Array( false, 'ab', [ 'str' ], null, 4 );
  var got = _.entityAny( src );
  test.identical( got, 'ab' );

  var src = new Array( null, 22, [ 'str' ], 3, 4 );
  var got = _.entityAny( src );
  test.identical( got, 22 );

  var src = new Array( null, false, undefined );
  var got = _.entityAny( src );
  test.identical( got, false );

  test.case = 'Float32Array';

  var src = new Float32Array( [ 5, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, 5 );

  var src = new Float32Array( [ undefined, [ 8 ], 3, 4 ] );
  var got = _.entityAny( src );
  test.identical( got, 8 );

  var src = new Float32Array( [ 'str', undefined, { a : 2 } ] );
  var got = _.entityAny( src );
  test.identical( got, false );

  test.case = 'ObjectLike';

  var got = _.entityAny( { 1 : 2, c : 4, a : undefined } );
  test.identical( got, 2 );

  var got = _.entityAny( { 1 : 2, 2 : 3, a : null } );
  test.identical( got, 2 );

  var got = _.entityAny( { a : false, b : null, c : undefined } );
  test.identical( got, false );

  var got = _.entityAny( { a : 'a', b : 'str' } );
  test.identical( got, 'a' );

  var got = _.entityAny( { a : 1, b : false } );
  test.identical( got, 1 );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityAny( undefined );
  test.identical( got, false );

  var got = _.entityAny( null );
  test.identical( got, false );

  var got = _.entityAny( 1 );
  test.identical( got, 1 );

  var got = _.entityAny( 'str' );
  test.identical( got, 'str' );

  var got = _.entityAny( false );
  test.identical( got, false );

  var got = _.entityAny( true );
  test.identical( got, true );

  test.close( 'onEach is null' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityAny() );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityAny( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three arg';
  test.shouldThrowErrorSync( () => _.entityAny( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityAny( { a : 2 }, [] ) );
}

//

function entityNone( test )
{
  test.open( 'onEach is routine' );

  test.case = 'array';

  var got = _.entityNone( [ 1, 'str', undefined ], ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var got = _.entityNone( [ false, false, undefined ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, true );

  var got = _.entityNone( [ 1, 'str', { a : 2 }, false ], ( v, i ) => !!v && i + 2 < 6 );
  test.identical( got, false );

  var got = _.entityNone( [ 1, 'str', 3, null ], () => undefined );
  test.identical( got, true );

  test.case = 'unroll';

  var src = _.unrollFrom( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( null ) ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( [ 'str' ] ) ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.unrollMake( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityNone( src, () => undefined );
  test.identical( got, true );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ false, null, undefined ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], false, 4 ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityNone( src, () => undefined );
  test.identical( got, true );

  test.case = 'Array';

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = new Array( false, undefined, null );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Array( 1, 2, [ 'str' ], false, 4 );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityNone( src, () => undefined );
  test.identical( got, true );

  test.case = 'Float32Array';

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 4 );
  test.identical( got, false );

  var src = new Float32Array( [ 'a', undefined, false, null ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, true );

  var src = new Float32Array( [ 1, 2, [ 8 ], false, 4 ] );
  var got = _.entityNone( src, ( v, i ) => !!v && i + 2 < 7 );
  test.identical( got, false );

  var src = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityNone( src, () => undefined );
  test.identical( got, true );

  test.case = 'ObjectLike';

  var got = _.entityNone( { 1 : 2, c : 4, a : undefined }, ( v, k ) => v === k );
  test.identical( got, true );

  var got = _.entityNone( { 'a' : false, '4' : false, 'true' : 'true' }, ( v, k ) => v === k );
  test.identical( got, false );

  var got = _.entityNone( { 1 : 2, 2 : 3, a : null }, ( v, k ) => typeof v === typeof k );
  test.identical( got, true );

  var got = _.entityNone( { 'a' : [], 'b' : 'str' }, ( v, k ) => typeof v === typeof k );
  test.identical( got, false );

  var got = _.entityNone( { a : 1, b : false }, ( v, k ) => v === k );
  test.identical( got, true );

  var got = _.entityNone( { a : 1, b : false }, ( v, k, src ) => src.length === v );
  test.identical( got, true );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityNone( undefined, ( src, u ) => src !== u );
  test.identical( got, true );

  var got = _.entityNone( null, ( src, u ) => src === u );
  test.identical( got, true );

  var got = _.entityNone( 1, ( src, u ) => src !== u );
  test.identical( got, false );

  var got = _.entityNone( 'str', ( src, u ) => src === u );
  test.identical( got, true );

  var got = _.entityNone( false, ( src, u ) => src !== u );
  test.identical( got, false );

  var got = _.entityNone( true, ( src, u ) => src !== u );
  test.identical( got, false );

  var got = _.entityNone( true, ( src, u, u2 ) => src !== u2 );
  test.identical( got, false );

  test.close( 'onEach is routine' );

  /* - */

  test.open( 'onEach is undefined' );

  test.case = 'array';

  var got = _.entityNone( [ 1, 'str', undefined ] );
  test.identical( got, false );

  var got = _.entityNone( [ 'str', 1, { a : 2 }, 4 ] );
  test.identical( got, false );

  var got = _.entityNone( [ false, null, undefined ] );
  test.identical( got, true );


  test.case = 'unroll';

  var src = _.unrollFrom( [ false, 2, _.unrollFrom( [ 'str' ] ), null, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = _.unrollMake( [ undefined, false, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = _.unrollMake( [ null, undefined, false ] );
  var got = _.entityNone( src );
  test.identical( got, true );

  test.case = 'argument array';

  var src = _.argumentsArrayMake( [ null, false, [ 'str' ], undefined, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = _.argumentsArrayMake( [ null, false, undefined ] );
  var got = _.entityNone( src );
  test.identical( got, true );

  test.case = 'Array';

  var src = new Array( false, 'ab', [ 'str' ], null, 4 );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = new Array( null, 22, [ 'str' ], 3, 4 );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = new Array( null, false, undefined );
  var got = _.entityNone( src );
  test.identical( got, true );

  test.case = 'Float32Array';

  var src = new Float32Array( [ 5, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = new Float32Array( [ undefined, [ 8 ], 3, 4 ] );
  var got = _.entityNone( src );
  test.identical( got, false );

  var src = new Float32Array( [ 'str', undefined, { a : 2 } ] );
  var got = _.entityNone( src );
  test.identical( got, true );

  test.case = 'ObjectLike';

  var got = _.entityNone( { 1 : 2, c : 4, a : undefined } );
  test.identical( got, false );

  var got = _.entityNone( { 1 : 2, 2 : 3, a : null } );
  test.identical( got, false );

  var got = _.entityNone( { a : false, b : null, c : undefined } );
  test.identical( got, true );

  var got = _.entityNone( { a : 'a', b : 'str' } );
  test.identical( got, false );

  var got = _.entityNone( { a : 1, b : false } );
  test.identical( got, false );

  test.case = 'no ArrayLike, no ObjectLike'

  var got = _.entityNone( undefined );
  test.identical( got, true );

  var got = _.entityNone( null );
  test.identical( got, true );

  var got = _.entityNone( 1 );
  test.identical( got, false );

  var got = _.entityNone( 'str' );
  test.identical( got, false );

  var got = _.entityNone( false );
  test.identical( got, true );

  var got = _.entityNone( true );
  test.identical( got, false );

  test.close( 'onEach is undefined' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'without arguments';
  test.shouldThrowErrorSync( () => _.entityNone() );

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( () => _.entityNone( [ 'a' ], ( a ) => a, ( b ) => b ) );

  test.case = 'onEach has more then three arguments';
  test.shouldThrowErrorSync( () => _.entityNone( [ 1 ], ( a, b, c, d ) => a + b + c + d ) );

  test.case = 'onEach is not a routine';
  test.shouldThrowErrorSync( () => _.entityNone( { a : 2 }, [] ) );
}

//

function entityMap( test )
{
  test.open( 'src is arrayLike' );

  test.case = 'simple test with mapping array by sqr';
  var got = _.entityMap( [ 3, 4, 5 ], ( v, i, ent ) => v * v );
  test.identical( got,[ 9, 16, 25 ] );

  test.case = 'array';
  var src1 = [ 1, 2, null, 'str' ];
  var got = _.entityMap( src1, ( v, i, s ) => v + i );
  test.identical( got, [ 1, 3, 2, 'str3' ] );

  test.case = 'unroll';
  var src1 = _.unrollFrom( [ 1, 2, _.unrollFrom( [ 'str' ] ), 3, 4 ] );
  var got = _.entityMap( src1, ( v, i, s ) => v + i );
  test.identical( got, [ 1, 3, 'str2', 6, 8 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'argument array';
  var src1 = _.argumentsArrayMake( [ 1, 2, [ 'str' ], 3, 4 ] );
  var got = _.entityMap( src1, ( v, i, s ) => v + i );
  test.identical( got, [ 1, 3, 'str2', 6, 8 ] );
  test.is( _.arrayIs( got ) );

  test.case = 'Array';
  var src1 = new Array( 1, 2, [ 'str' ], 3, 4 );
  var got = _.entityMap( src1, ( v, i, s ) => v + i );
  test.identical( got, [ 1, 3, 'str2', 6, 8 ] );
  test.is( _.arrayIs( got ) );

  test.case = 'Float32Array';
  var src1 = new Float32Array( [ 1, 2, [ 8 ], 3, 4 ] );
  var got = _.entityMap( src1, ( v, i, s ) => v + i );
  test.equivalent( got, [ 1, 3, 10, 6, 8 ] );
  test.is( _.longIs( got ) );

  test.close( 'src is arrayLike' );

  /* - */

  test.open( 'src is objectLike' );

  test.case = 'simple test with mapping object by sqr';
  var got = _.entityMap( { '3' : 3, '4' : 4, '5' : 5 }, ( v, i, ent ) => v * v );
  test.identical( got,{ '3' : 9, '4' : 16, '5' : 25 } );
  test.is( _.mapIs( got ) );

  var src1 = { a : 1, b : 2, c : null, d : 'str' };
  var got = _.entityMap( src1, ( v, k, s ) => v + k );
  test.identical( got, { a : '1a', b : '2b', c : 'nullc', d : 'strd' } );
  test.is( _.mapIs( got ) );

  test.case = 'routine constructor';
  function constr()
  {
    this.a = 1;
    this.b = 3;
    this.c = 4;
  }
  var got = _.entityMap( new constr(), ( v, i, ent ) => v * v + i );
  test.identical( got, { a : '1a', b : '9b', c : '16c' } );
  test.is( !( got instanceof constr ) );
  test.is( _.mapIs( got ) );

  test.case = 'simple test with mapping object by sqr : check callback arguments';
  var callback = function( v, i, ent )
  {
    if( externEnt )
    externEnt = ent;
    return v * v + i;
  };
  var externEnt = {};
  var got = _.entityMap( Object.assign( {}, { 'a' : 1, 'b' : 3, 'c' : 4 } ), callback );
  test.identical( externEnt, { 'a' : 1, 'b' : 3, 'c' : 4 } );

  test.case = 'mapping object by sqr : source object should be unmodified';
  test.identical( Object.is( got, Object.assign( {}, { 'a' : 1, 'b' : 3, 'c' : 4 } ) ), false );

  test.close( 'src is objectLike' );

  /* - */

  test.case = 'no ArrayLike, no ObjectLike';
  var got = _.entityMap( 2, ( v, u, u2 ) => v + v );
  test.identical( got, 4 );

  var got = _.entityMap( 'a', ( v, u, u2 ) => v + v );
  test.identical( got, 'aa' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( () => _.entityMap() );

  test.case = 'extra argument';
  test.shouldThrowError( () => _.entityMap( [ 1,3 ], callback1, callback2 ) );

  test.case = 'passed argument has undefines';
  test.shouldThrowError( () => _.entityMap( [ 1, undefined ], ( v, i ) => v ) );
  test.shouldThrowError( () => _.entityMap( { a : 2, b : undefined }, ( v, i ) => v ) );
  test.shouldThrowError( () => _.entityMap( undefined, ( v, i ) => v ) );

  test.case = 'second argument is not routine';
  test.shouldThrowError( () => _.entityMap( [ 1, 2 ], {} ) );
}

//
  //TODO : need to check actuality of this test
  // it works correctly

function entityFilter( test )
{
  test.open( 'onEach is routine' );

  var callback = function( v, i, ent )
  {
    if( v < 0 ) return;
    return Math.sqrt( v );
  };

  test.case = 'number';
  var got = _.entityFilter( 3, callback );
  test.identical( got, Math.sqrt( 3 ) );

  test.case = 'string';
  var got = _.entityFilter( 'str', ( v ) => v + ' ' + v );
  test.identical( got, 'str str' );

  test.case = 'simple test with mapping array by sqrt';
  var got = _.entityFilter( [ 9, -16, 25, 36, -49 ], callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );

  var src = _.unrollMake( [ 9, _.unrollMake( [ -16, 25, _.unrollFrom( [ 36, -49 ] ) ] ) ] );
  var got = _.entityFilter( src, callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );
  test.isNot( _.unrollIs( got) );

  var src = _.argumentsArrayMake( [ 9, -16, 25, 36, -49 ] );
  var got = _.entityFilter( src, callback );
  test.identical( got, [ 3, 5, 6 ] );

  var src = new Array( 9, -16, 25, 36, -49 );
  var got = _.entityFilter( src, callback );
  test.identical( got, [ 3, 5, 6 ] );

  var src = new Float32Array( [ 9, -16, 25, 36, -49 ] );
  var src = Array.from( src );
  var got = _.entityFilter( src, callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );

  test.case = 'simple test with mapping object by sqrt';
  var got = _.entityFilter( { '3' : 9, '4' : 16, '5' : 25, '6' : -36 }, callback );
  test.identical( got, { '3' : 3, '4' : 4, '5' : 5 } );
  test.notIdentical( got, { '3' : 3, '4' : 4, '5' : 5, '6' : 6 } );

  test.case = 'callback in routine';
  var testFn1 = function()
  {
    return _.entityFilter( arguments, callback );
  }
  var got = testFn1( 9, -16, 25, 36, -49 );
  test.identical( got, [ 3, 5, 6 ] );

  test.case = 'src is array, filter make unrolls';
  var onEach = ( e, i, s ) => _.unrollMake( [ e ] );
  var src = [ 1, [ 2, 3 ], [ 'str', null, undefined ] ];
  var got = _.entityFilter( src, onEach );
  test.identical( got, [ 1, [ 2, 3 ], [ 'str', null, undefined ] ] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  test.case = 'src is array, filter check equality';
  var onEach = ( e, i, s ) => e === i;
  var src = [ 0, 2, 2, [ 'str', null ], undefined ];
  var got = _.entityFilter( src, onEach );
  test.identical( got, [ true, false, true, false, false ] );
  test.notIdentical( got, [ true, false, true, false, false, false ] );
  test.is( _.arrayIs( got ) );

  test.close( 'onEach is routine' );

  /* - */

  test.case = 'onEach is objectLike - condition, one entry';
  var callback = { '3' : 9 };
  var got = _.entityFilter( { a : { '3' : 9 }, b : { '3' : 4 } }, callback );
  test.identical( got, { a : { '3' : 9 } } );

  test.case = 'onEach is objectLike - condition, a few entry';
  var callback = { '3' : 9 };
  var src = { a : { '3' : 9 }, b : { '3' : 4 }, c : { '3' : 9 }, d : { '3' : 9 } };
  var got = _.entityFilter( src, callback );
  test.identical( got, { a : { '3' : 9 }, c : { '3' : 9 }, d : { '3' : 9 } } );

  test.case = 'onEach is objectLike - condition, entry nested to next level';
  var callback = { '3' : 9 };
  var src = { a : { b : { '3' : 9 } } };
  var got = _.entityFilter( src, callback );
  test.identical( got, {} );
  test.notIdentical( got, { a : { b : { '3' : 9 } } } );

  test.case = 'onEach is objectLike - routine, entry nested to next level';
  var onEach = function( e )
  {
    return true;
  }
  var callback = { '3' : onEach };
  var src = { a : { '3' : 9 } };
  var got = _.entityFilter( src, callback );
  test.identical( got, {} );
  test.notIdentical( got, { a : { '3' : 9 } } );

  test.case = 'onEach is objectLike - condition, identical entry';
  var onEach = function( e )
  {
    return true;
  }
  var callback = { '3' : onEach };
  var src = { a : { '3' : onEach } };
  var got = _.entityFilter( src, callback );
  test.identical( got, { a : { '3' : onEach } } );
  test.notIdentical( got, {} );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowErrorSync( () => _.entityFilter() );

  test.case = 'extra argument';
  test.shouldThrowErrorSync( () => _.entityFilter( [ 1,3 ], () => true, 1 ) );

  test.case = 'onEach is not routine';
  test.shouldThrowErrorSync( () => _.entityFilter( [ 1,3 ], 'callback' ) );

  test.case = 'src is undefined';
  test.shouldThrowErrorSync( () => _.entityFilter( undefined, callback1 ) );
};

//

function entityFilterDeep( test )
{
  test.open( 'onEach is routine' );

  var callback = function( v, i, ent )
  {
    if( v < 0 ) return;
    return Math.sqrt( v );
  };

  test.case = 'simple test with mapping array by sqrt';
  var got = _.entityFilterDeep( [ 9, -16, 25, 36, -49 ], callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );

  var src = _.unrollMake( [ 9, _.unrollMake( [ -16, 25, _.unrollFrom( [ 36, -49 ] ) ] ) ] );
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );
  test.isNot( _.unrollIs( got) );

  var src = _.argumentsArrayMake( [ 9, -16, 25, 36, -49 ] );
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, [ 3, 5, 6 ] );

  var src = new Array( 9, -16, 25, 36, -49 );
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, [ 3, 5, 6 ] );

  var src = new Float32Array( [ 9, -16, 25, 36, -49 ] );
  var src = Array.from( src );
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, [ 3, 5, 6 ] );
  test.notIdentical( got, [ 3, 4, 5, 6, 7 ] );

  test.case = 'simple test with mapping object by sqrt';
  var got = _.entityFilterDeep( { '3' : 9, '4' : 16, '5' : 25, '6' : -36 }, callback );
  test.identical( got, { '3' : 3, '4' : 4, '5' : 5 } );
  test.notIdentical( got, { '3' : 3, '4' : 4, '5' : 5, '6' : 6 } );

  test.case = 'callback in routine';
  var testFn1 = function()
  {
    return _.entityFilterDeep( arguments, callback );
  }
  var got = testFn1( 9, -16, 25, 36, -49 );
  test.identical( got, [ 3, 5, 6 ] );

  test.case = 'src is array, filter make unrolls';
  var onEach = ( e, i, s ) => _.unrollMake( [ e ] );
  var src = [ 1, [ 2, 3 ], [ 'str', null, undefined ] ];
  var got = _.entityFilterDeep( src, onEach );
  test.identical( got, [ 1, [ 2, 3 ], [ 'str', null, undefined ] ] );
  test.isNot( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );

  test.case = 'src is array, filter check equality';
  var onEach = ( e, i, s ) => e === i;
  var src = [ 0, 2, 2, [ 'str', null ], undefined ];
  var got = _.entityFilterDeep( src, onEach );
  test.identical( got, [ true, false, true, false, false ] );
  test.notIdentical( got, [ true, false, true, false, false, false ] );
  test.is( _.arrayIs( got ) );

  test.close( 'onEach is routine' );

  /* - */

  test.case = 'onEach is objectLike - condition, one entry';
  var callback = { '3' : 9 };
  var got = _.entityFilterDeep( { a : { '3' : 9 }, b : { '3' : 4 } }, callback );
  test.identical( got, { a : { '3' : 9 } } );

  test.case = 'onEach is objectLike - condition, a few entry';
  var callback = { '3' : 9 };
  var src = { a : { '3' : 9 }, b : { '4' : 4 }, c : { '3' : 9 }, d : { '3' : 9 } };
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, { a : { '3' : 9 }, c : { '3' : 9 }, d : { '3' : 9 } } );

  test.case = 'onEach is objectLike - condition, entry nested to next levels';
  var callback = { '3' : 9 };
  var src = { a : { a : { b : { c : { '3' : 9, '4' : 6 } } } } };
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, {} );
  test.notIdentical( got, { a : { a : { b : { c : { '3' : 9, '4' : 6 } } } } } );

  test.case = 'onEach is objectLike - routine, entry nested to next level';
  var onEach = function( e )
  {
    return true;
  }
  var callback = { '3' : onEach };
  var src = { a : { b : { '3' : 9 } } };
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, { a : { b : { '3' : 9 } } } );
  test.notIdentical( got, {} );

  test.case = 'onEach is objectLike - routine, entry nested to next level';
  var onEach = function( e )
  {
    for( let k in e )
    {
      e[ k ] = e[ k ] + 5;
      if( e[ k ] !== 10 )
      return false;
    }
    return true;
  }
  var callback = { '3' : onEach };
  var src = { a : { b : 5, c : 5, d : 5 } };
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, { a : { b : 5, c : 5, d : 5 } } );
  test.notIdentical( got, {} );

  test.case = 'onEach is objectLike - condition, identical entry';
  var onEach = function( e )
  {
    return true;
  }
  var callback = { '3' : onEach };
  var src = { a : { '3' : onEach } };
  var got = _.entityFilterDeep( src, callback );
  test.identical( got, { a : { '3' : onEach } } );
  test.notIdentical( got, {} );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowErrorSync( () => _.entityFilterDeep() );

  test.case = 'extra argument';
  test.shouldThrowErrorSync( () => _.entityFilterDeep( [ 1,3 ], () => true, 1 ) );

  test.case = 'onEach is not routine';
  test.shouldThrowErrorSync( () => _.entityFilterDeep( [ 1,3 ], 'callback' ) );

  test.case = 'src is not arrayLike or mapLike';
  test.shouldThrowErrorSync( () => _.entityFilterDeep( undefined, callback1 ) );
}

//

function enityExtend( test )
{
  test.case = 'src and dst is ArrayLike';

  var got = _.enityExtend( [ 9, -16 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 5, 6 ] );

  var got = _.enityExtend( [], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 5, 6 ] );

  test.case = 'src and dst is ObjectLike';

  var got = _.enityExtend( { a : 1 }, { a : 3, b : 5, c : 6 } );
  test.identical( got, { a : 3, b : 5, c : 6 } );

  var got = _.enityExtend( {}, { a : 3, b : 5, c : 6 } );
  test.identical( got, { a : 3, b : 5, c : 6 } );

  var got = _.enityExtend( { d : 4 }, { a : 3, b : 5, c : 6 } );
  test.identical( got, { d : 4, a : 3, b : 5, c : 6 } );

  test.case = 'dst is ObjectLike, src is ArrayLike';

  var got = _.enityExtend( {}, [ 3, 5, 6 ] );
  test.identical( got, { 0 : 3, 1 : 5, 2 : 6 } );

  var got = _.enityExtend( { a : 1 }, [ 3, 5, 6 ] );
  test.identical( got, { a : 1, 0 : 3, 1 : 5, 2 : 6 } );

  test.case = 'src is ObjectLike, dst is ArrayLike';

  var got = _.enityExtend( [ 9, -16 ], { a : 3, b : 5, c : 6 } );
  test.identical( got, [ 9, -16 ] );

  var got = _.enityExtend( [], { a : 3, b : 5, c : 6 } );
  test.identical( got, [] );

  var got = _.enityExtend( [ 1, 2, -3], { 0 : 3, 1 : 5, 2 : 6 } );
  test.identical( got, [ 3, 5, 6 ] );

  test.case = 'src is not ObjectLike or ArrayLike';

  var got = _.enityExtend( [ 9, -16 ], 1 );
  test.identical( got, 1 );

  var got = _.enityExtend( [], 'str' );
  test.identical( got, 'str' );

  var got = _.enityExtend( { a : 1 }, 1 );
  test.identical( got, 1 );

  var got = _.enityExtend( {}, 'str' );
  test.identical( got, 'str' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( function()
  {
    _.enityExtend();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _.enityExtend( [ 1,3 ], [ 1,3 ], [ 1,3 ] );
  });

  test.case = 'dst is undefined';
  test.shouldThrowError( function()
  {
    _.enityExtend( undefined, [ 0, 1 ] );
  });

  test.shouldThrowError( function()
  {
    _.enityExtend( undefined, { a : 1, b : 2 } );
  });

  test.shouldThrowError( function()
  {
    _.enityExtend( null, [ 0, 1 ] );
  });

  test.shouldThrowError( function()
  {
    _.enityExtend( null, { a : 1, b : 2 } );
  });
};

//

function entityAssign( test )
{
  test.case = 'src null';
  var dst = new String( 'string' );
  var src = null;
  var got = _.entityAssign( dst, src  );
  var expected = null;
  test.identical( got, expected );

  test.case = 'dst.copy';
  var dst = { copy : function( src ) { for( var i in src ) this[ i ] = src[ i ] } };
  var src = { src : 'string', num : 123 }
  _.entityAssign( dst, src  );
  var got = dst;
  var expected =
  {
    copy : dst.copy,
    src : 'string',
    num : 123

  };
  test.identical( got, expected );

  test.case = 'src.clone';
  var dst = 1;
  // var src = { src : 'string', num : 123, clone : function() { var clone = _.cloneObject( { src : this } ); return clone; } }
  var src = { src : 'string', num : 123, clone : function() { return { src : 'string', num : 123 } } }
  var got = _.entityAssign( dst, src  );
  var expected = { src : 'string', num : 123 };
  test.identical( got, expected );
  test.is( got !== expected );
  test.is( got !== src );

  test.case = 'src.slice returns copy of array';
  var dst = [ ];
  var src = [ 1, 2 ,3 ];
  var got = _.entityAssign( dst, src  );
  var expected = src;
  test.identical( got, expected );

  test.case = 'dst.set ';
  var dst = { set : function( src ){ this.value = src[ 'value' ]; } };
  var src = { value : 100 };
  _.entityAssign( dst, src  );
  var got = dst;
  var expected = { set : dst.set, value : 100 };
  test.identical( got, expected );

  test.case = 'onRecursive ';
  var dst = { };
  var src = { value : 100, a : {  b : 101 } };
  function onRecursive( dstContainer,srcContainer,key )
  {
    _.assert( _.strIs( key ) );
    dstContainer[ key ] = srcContainer[ key ];
  };
  _.entityAssign( dst, src, onRecursive  );
  var got = dst;
  var expected = src;
  test.identical( got, expected );

  test.case = 'atomic ';
  var src = 2;
  var got = _.entityAssign( null, src );
  var expected = src;
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( function()
  {
    _.entityAssign( );
  });

  test.case = 'src.clone throws "unexpected"';
  test.shouldThrowError( function()
  {
    var dst = {};
    var src = { src : 'string', num : 123, clone : function() { var clone = _.cloneObject( { src : this } ); return clone; } }
    _.entityAssign( dst, src  );
  });

}

//

function entityAssignFieldFromContainer( test )
{

  test.case = 'non recursive';
  var dst ={};
  var src = { a : 'string' };
  var name = 'a';
  var got = _.entityAssignFieldFromContainer(dst, src, name );
  var expected = dst[ name ];
  test.identical( got, expected );

  test.case = 'undefined';
  var dst ={};
  var src = { a : undefined };
  var name = 'a';
  var got = _.entityAssignFieldFromContainer(dst, src, name );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'recursive';
  var dst ={};
  var src = { a : 'string' };
  var name = 'a';
  function onRecursive( dstContainer,srcContainer,key )
  {
    _.assert( _.strIs( key ) );
    dstContainer[ key ] = srcContainer[ key ];
  };
  var got = _.entityAssignFieldFromContainer(dst, src, name,onRecursive );
  var expected = dst[ name ];
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'argument missed';
  test.shouldThrowError( function()
  {
    _.entityAssignFieldFromContainer( );
  });

}

//

function _entityMost( test )
{

  var args1 = [ 3, 1, 9, 0, 5 ],
    args2 = [3, -4, 9, -16, 5, -2],
    args3 = { a : 25, b : 16, c : 9 },
    expected1 = { index : 2, key : 2, value : 9, element : 9 },
    expected2 = { index : 3, key : 3, value : 0, element : 0 },
    expected3 = { index : 3, key : 3, value : 256, element : -16 },
    expected4 = args2.slice(),
    expected5 = { index : 5, key : 5, value : 4, element : -2 },
    expected6 = { index : 0, key : 'a', value : 25, element : 25  },
    expected7 = { index : 2, key : 'c', value : 3, element : 9  };

  function sqr( v )
  {
    return v * v;
  };

  test.case = 'test entityMost with array and default onElement and returnMax = true';
  var got = _._entityMost( args1, undefined, true );
  test.identical( got, expected1 );

  test.case = 'test entityMost with array and default onElement and returnMax = false';
  var got = _._entityMost( args1, undefined, false );
  test.identical( got, expected2 );

  test.case = 'test entityMost with array simple onElement function and returnMax = true';
  var got = _._entityMost( args2, sqr, true );
  test.identical( got, expected3 );

  test.case = 'test entityMost with array : passed array should be unmodified';
  test.identical( args2, expected4 );

  test.case = 'test entityMost with array simple onElement function and returnMax = false';
  var got = _._entityMost( args2, sqr, false );
  test.identical( got, expected5 );

  test.case = 'test entityMost with map and default onElement and returnMax = true';
  var got = _._entityMost( args3, undefined, true );
  test.identical( got, expected6 );

  test.case = 'test entityMost with map and returnMax = false';
  var got = _._entityMost( args3, Math.sqrt, false );
  test.identical( got, expected7 );

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( function()
  {
    _._entityMost();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _._entityMost( [ 1,3 ], sqr, true, false );
  });

  test.case = 'second argument is not routine';
  test.shouldThrowError( function()
  {
    _._entityMost( [ 1,3 ], 'callback', true );
  });

};

//

function entityMin( test )
{
  var args1 = [ 3, 1, 9, 0, 5 ],
    args2 = [ 3, -4, 9, -16, 5, -2 ],
    args3 = { a : 25, b : 16, c : 9 },
    expected1 = { index : 3, key : 3, value : 0, element : 0 },
    expected2 = { index : 5, key : 5, value : 4, element : -2 },
    expected3 = args2.slice(),
    expected4 = { index : 2, key : 'c', value : 9, element : 9  };

  function sqr(v)
  {
    return v * v;
  };

  test.case = 'test entityMin with array and without onElement callback';
  var got = _.entityMin( args1 );
  test.identical( got, expected1 );



  test.case = 'test entityMin with array simple onElement function';
  var got = _.entityMin( args2, sqr );
  test.identical( got, expected2 );

  test.case = 'test entityMin with array : passed array should be unmodified';
  test.identical( args2, expected3 );



  test.case = 'test entityMin with map';
  var got = _.entityMin( args3 );
  test.identical( got, expected4 );

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( function()
  {
    _.entityMin();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _.entityMin( [ 1,3 ], sqr, true );
  });

  test.case = 'second argument is not routine';
  test.shouldThrowError( function()
  {
    _.entityMin( [ 1,3 ], 'callback' );
  });

};

//

function entityMax( test )
{

  var args1 = [ 3, 1, 9, 0, 5 ],
    args2 = [ 3, -4, 9, -16, 5, -2 ],
    args3 = { a : 25, b : 16, c : 9 },
    expected1 = { index : 2, key : 2, value : 9, element : 9 },
    expected2 = args2.slice(),
    expected3 = { index : 3, key : 3, value : 256, element : -16 },
    expected4 = { index : 0, key : 'a', value : 5, element : 25 };

  function sqr( v )
  {
    return v * v;
  };

  test.case = 'test entityMax with array';
  var got = _.entityMax( args1 );
  test.identical( got, expected1 );

  test.case = 'test entityMax with array and simple onElement function';
  var got = _.entityMax( args2, sqr );
  test.identical( got, expected3 );

  test.case = 'test entityMax with array : passed array should be unmodified';
  test.identical( args2, expected2 );

  test.case = 'test entityMax with map';
  var got = _.entityMax( args3, Math.sqrt );
  test.identical( got, expected4 );

  if( !Config.debug )
  return;

  test.case = 'missed arguments';
  test.shouldThrowError( function()
  {
    _.entityMax();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _.entityMax( [ 1,3 ], sqr, true );
  });

  test.case = 'second argument is not routine';
  test.shouldThrowError( function()
  {
    _.entityMax( [ 1,3 ], 'callback' );
  });

};

//

function entityLength( test )
{

  var x1 = undefined,
    x2 = 34,
    x3 = 'hello',
    x4 = [ 23, 17, , 34 ],
    x5 = [ 0, 1, [ 2, 4 ] ],
    x6 = { a : 1, b : 2, c : 3},
    x7 = { a : 1, b : { e : 2, c : 3} },
    x8 = ( function(){ return arguments } )( 0, 1, 2, 4 ); // array like entity

  function Constr1()
  {
    this.a = 34;
    this.b = 's';
    this[100] = 'sms';
  };

  Constr1.prototype.toString = function()
  {
    console.log('some message');
  }

  Constr1.prototype.c = 99;

  var x9 = new Constr1(),
    x10 = {};

  Object.defineProperties( x10, // add properties, only one is enumerable
    {
      "property1" : {
        value : true,
        writable : true
      },
      "property2" : {
        value : "Hello",
        writable : true
      },
      "property3" : {
        enumerable : true,
        value : "World",
        writable : true
      }
  });

  var expected1 = 0,
    expected2 = 1,
    expected3 = 1,
    expected4 = 4,
    expected5 = 3,
    expected6 = 3,
    expected7 = 2,
    expected8 = 4,
    expected9 = 3,
    expected10 = 1;

  test.case = 'entity is undefined';
  var got = _.entityLength( x1 );
  test.identical( got, expected1 );

  test.case = 'entity is number';
  var got = _.entityLength( x2 );
  test.identical( got, expected2 );

  test.case = 'entity is string';
  var got = _.entityLength( x3 );
  test.identical( got, expected3 );

  test.case = 'entity is array';
  var got = _.entityLength( x4 );
  test.identical( got, expected4 );

  test.case = 'entity is nested array';
  var got = _.entityLength( x5 );
  test.identical( got, expected5 );

  test.case = 'entity is object';
  var got = _.entityLength( x6 );
  test.identical( got, expected6 );

  test.case = 'entity is nested object';
  var got = _.entityLength( x7 );
  test.identical( got, expected7 );

  test.case = 'entity is array like';
  var got = _.entityLength( x8 );
  test.identical( got, expected8 );

  test.case = 'entity is array like';
  var got = _.entityLength( x8 );
  test.identical( got, expected8 );

  console.log( _.toStr( x9 ) );

  test.case = 'entity is created instance of class';
  var got = _.entityLength( x9 );
  test.identical( got, expected9 );

  test.case = 'some properties are non enumerable';
  var got = _.entityLength( x10 );
  test.identical( got, expected10 );

};

//

function entitySize( test )
{

  test.case = 'string';
  var got = _.entitySize( 'str' );
  var expected = 3 ;
  test.identical( got, expected );

// wrong because routine has this code
// if( _.numberIs( src ) )
// return 8;
// so, expected should be 8

  test.case = 'atomic type';
  var got = _.entitySize( 6 );
  var expected = 8;
  test.identical( got, expected );

  test.case = 'buffer';
  var got = _.entitySize( new ArrayBuffer( 10 ) );
  var expected = 10;
  test.identical( got, expected );

// wrong because routine has code
// if( _.longIs( src ) )
// {
//   let result = 0;
//   for( let i = 0; i < src.length; i++ )
//   {
//     result += _.entitySize( src[ i ] );
//     if( isNaN( result ) )
//     break;
//   }
//   return result;
// }
// so, expected should be 3 * 8 = 24

  test.case = 'arraylike';
  var got = _.entitySize( [ 1, 2, 3 ] );
  var expected = 24;
  test.identical( got, expected );

  // wrong because routine has code
  // if( _.mapIs( src ) )
  // {
  //   let result = 0;
  //   for( let k in src )
  //   {
  //     result += _.entitySize( k );
  //     result += _.entitySize( src[ k ] );
  //     if( isNaN( result ) )
  //     break;
  //   }
  //   return result;
  // }
  // so, expected should be 1 + 8 + 1 + 8 = 18

  test.case = 'object';
  var got = _.entitySize( { a : 1, b : 2 } );
  var expected = 18;
  test.identical( got, expected );

  // wrong because routine has code
  // if( !_.definedIs( src ) )
  // return 8;
  // so, expected should be 8

  test.case = 'empty call';
  var got = _.entitySize( undefined );
  var expected = 8;
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.entitySize();
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _.entitySize( 1,2 );
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _.entitySize( 1,undefined );
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _.entitySize( [],undefined );
  });

};

//

var Self =
{

  name : 'Tools/base/l1/Entity',
  silencing : 1,
  // verbosity : 4,
  // importanceOfNegative : 3,

  tests :
  {

    eachSample,
    eachSampleExperiment,

    entityEach,
    entityEachKey,
    entityEachOwn,

    entityAll,
    entityAny,
    entityNone,

    entityMap,
    entityFilter,
    entityFilterDeep,

    enityExtend,

    entityAssign,
    entityAssignFieldFromContainer,

    _entityMost,
    entityMin,
    entityMax,

    //

    entityLength,
    entitySize,

  }

};

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Entity.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Entity_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Entity_test_s

( function Long_test_s() { // == begin of file Long_test_s
function Long_test_s_naked() {
( function _Long_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _ = wTools;

// --
// buffer
// --

function bufferFrom( test )
{
  /*src: number,str,array,raw,typed,node */
  /*bufferConstructor: typed,raw,node */

  /* typed buffer */

  test.case = 'src:number,bufferConstructor:typed buffer';
  var src = 1;
  var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
  var expected = new Uint8Array([ src ]);
  test.identical( got, expected );

  test.case = 'src:str,bufferConstructor:typed buffer';
  var src = 'abc';
  var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  test.case = 'src:array,bufferConstructor:typed buffer';
  var src = [ 97,98,99 ];
  var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  test.case = 'src:raw buffer,bufferConstructor:typed buffer';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
  var expected = new Uint8Array([ 0, 0, 0 ]);
  test.identical( got, expected );

  test.case = 'src:typed,bufferConstructor:typed buffer';
  var src = new Int32Array([ 97,98,99 ]);
  var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  if( Config.platform === 'nodejs' )
  {
    test.case = 'src:node buffer,bufferConstructor:typed buffer';
    var src = Buffer.from([ 97,98,99 ]);
    var got = _.bufferFrom({ src, bufferConstructor : Uint8Array });
    var expected = new Uint8Array([ 97,98,99 ]);
    test.identical( got, expected );
  }

  /* raw buffer */

  test.case = 'src:number,bufferConstructor:raw buffer';
  var src = 1;
  var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
  var expected = new Uint8Array([ 1 ]).buffer;
  test.identical( got, expected );

  test.case = 'src:str,bufferConstructor:raw buffer';
  var src = 'abc';
  var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
  var expected = new Uint8Array([ 97,98,99 ]).buffer;
  test.identical( got, expected );

  test.case = 'src:array,bufferConstructor:raw buffer';
  var src = [ 97,98,99 ];
  var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
  var expected = new Uint8Array([ 97,98,99 ]).buffer;
  test.identical( got, expected );

  test.case = 'src:raw buffer,bufferConstructor:raw buffer';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
  var expected = src;
  test.identical( got, expected );

  test.case = 'src:typed,bufferConstructor:raw buffer';
  var src = new Int32Array([ 97,98,99 ]);
  var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
  var expected = new Int32Array([ 97,98,99 ]).buffer;
  test.identical( got, expected );

  if( Config.platform === 'nodejs' )
  {
    test.case = 'src:node buffer,bufferConstructor:raw buffer';
    var src = Buffer.from([ 97,98,99 ]);
    var got = _.bufferFrom({ src, bufferConstructor : ArrayBuffer });
    var expected = new Uint8Array([ 97,98,99 ]).buffer;
    test.identical( got, expected );
  }

  if( !Config.platform === 'nodejs' )
  return;

  /* node buffer */

  test.case = 'src:number,bufferConstructor:node buffer';
  var src = 1;
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = Buffer.from( [ src ] );
  test.identical( got, expected );

  test.case = 'src:str,bufferConstructor:node buffer';
  var src = 'abc';
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = Buffer.from( src );
  test.identical( got, expected );

  test.case = 'src:array,bufferConstructor:node buffer';
  var src = [ 97,98,99 ];
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = Buffer.from( src );
  test.identical( got, expected );

  test.case = 'src:raw buffer,bufferConstructor:node buffer';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = Buffer.from( src );
  test.identical( got, expected );

  test.case = 'src:typed,bufferConstructor:node buffer';
  var src = new Int32Array([ 97,98,99 ]);
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = Buffer.from( src.buffer, src.buteOffset, src.byteLength );
  test.identical( got, expected );

  test.case = 'src:node buffer,bufferConstructor:node buffer';
  var src = Buffer.from([ 97,98,99 ]);
  var got = _.bufferFrom({ src, bufferConstructor : Buffer });
  var expected = src;
  test.identical( got, expected );

}

//

function bufferRelen( test )
{

  test.case = 'second argument is more than ints.length';
  var ints = new Int8Array( [ 3, 7, 13 ] );
  var got = _.bufferRelen( ints, 4 );
  var expected = got; // [ 3, 7, 13, 0 ];
  test.identical( got, expected );

  test.case = 'second argument is less than ints2.length';
  var ints2 = new Int16Array( [ 3, 7, 13, 33, 77 ] );
  var got = _.bufferRelen( ints2, 3 );
  var expected = got; // [ 3, 7, 13 ];
  test.identical( got, expected );

  test.case = 'invalid values are replaced by zero';
  var ints3 = new Int32Array( [ 3, 'a', 13, 'b', 77 ] );
  var got = _.bufferRelen( ints3, 6 );
  var expected = got; // [ 3, 0, 13, 0, 77, 0 ];
  test.identical( got, expected );

  test.case = 'returns the initial typed array';
  var floats = new Float32Array( [ 3.35, 7.5, 13.35, 33.75, 77.25 ] );
  var got = _.bufferRelen( floats, 5 );
  var expected = got; // [ 3.3499999046325684, 7.5, 13.350000381469727, 33.75, 77.25 ];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.bufferRelen();
  });

};

//

function bufferRetype( test )
{

  test.case = 'converts and returns the new type of Int16Array';
  var view1 = new Int8Array( [ 1, 2, 3, 4, 5, 6 ] );
  var got = _.bufferRetype(view1, Int16Array);
  var expected = got; // [ 513, 1027, 1541 ];
  test.identical( got, expected );

  test.case = 'converts and returns the new type of Int8Array';
  var view1 = new Int16Array( [ 513, 1027, 1541 ] );
  var got = _.bufferRetype(view1, Int8Array);
  var expected = got; // [ 1, 2, 3, 4, 5, 6 ];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.bufferRetype();
  });

  test.case = 'arguments are wrong';
  test.shouldThrowErrorSync( function()
  {
    _.bufferRetype( 'wrong argument', 'wrong argument' );
  });

};

//

function bufferRawFrom( test )
{
  test.case = 'typed';
  var src = new Uint8Array( 3 );
  var got = _.bufferRawFrom( src );
  var expected = new ArrayBuffer( 3 );
  test.identical( got, expected );

  test.case = 'raw';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferRawFrom( src );
  var expected = src;
  test.identical( got, expected );

  test.case = 'view';
  var buffer = new ArrayBuffer( 10 );
  var src = new DataView( buffer );
  var got = _.bufferRawFrom( src );
  var expected = buffer;
  test.identical( got, expected );

  test.case = 'str';
  var src = 'abc';
  var got = _.bufferRawFrom( src );
  var expected = new Uint8Array([ 97,98,99 ]).buffer;
  test.identical( got, expected );

  if( Config.platform === 'nodejs' )
  {
    test.case = 'node-buffer';
    var src = Buffer.from( 'abc' );
    var got = _.bufferRawFrom( src );
    var expected = new Uint8Array([ 97,98,99 ]).buffer;
    test.identical( got, expected );
  }

  /* - */

  if( !Config.debug )
  return;

  test.case = 'unknown source';
  test.shouldThrowErrorSync( () => _.bufferRawFrom( 5 ) );
  test.shouldThrowErrorSync( () => _.bufferRawFrom( {} ) );
}

//

function bufferBytesFrom( test )
{
  test.case = 'raw';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferBytesFrom( src );
  var expected = new Uint8Array([ 0,0,0 ]);
  test.identical( got, expected );

  test.case = 'arr';
  var src = [ 97,98,99 ];
  var got = _.bufferBytesFrom( src );
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  test.case = 'typed';
  var src = new Int8Array([ 97,98,99 ]);
  var got = _.bufferBytesFrom( src );
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  test.case = 'view';
  var buffer = new ArrayBuffer( 3 );
  var src = new DataView( buffer );
  var got = _.bufferBytesFrom( src );
  var expected = new Uint8Array([ 0,0,0 ]);
  test.identical( got, expected );

  test.case = 'str';
  var src = 'abc';
  var got = _.bufferBytesFrom( src );
  var expected = new Uint8Array([ 97,98,99 ]);
  test.identical( got, expected );

  if( Config.platform === 'nodejs' )
  {
    test.case = 'node';
    var src = Buffer.from( 'abc' );
    var got = _.bufferBytesFrom( src );
    var expected = new Uint8Array([ 97,98,99 ]);
    test.identical( got, expected );
  }

  /* - */

  if( !Config.debug )
  return;

  test.case = 'unknown source';
  test.shouldThrowErrorSync( () => _.bufferBytesFrom( 5 ) );
  // test.shouldThrowErrorSync( () => _.bufferBytesFrom( [] ) );
  test.shouldThrowErrorSync( () => _.bufferBytesFrom( {} ) );

}

//

function bufferNodeFrom( test )
{
  if( Config.platform !== 'nodejs' )
  return;

  test.case = 'raw';
  var src = new ArrayBuffer( 3 );
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from([ 0,0,0 ])
  test.identical( got, expected );

  test.case = 'typed';
  var src = new Int8Array([ 97,98,99 ]);
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from([ 97,98,99 ]);
  test.identical( got, expected );

  test.case = 'view';
  var buffer = new ArrayBuffer( 3 );
  var src = new DataView( buffer );
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from([ 0,0,0 ]);
  test.identical( got, expected );

  test.case = 'str';
  var src = 'abc';
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from( src );
  test.identical( got, expected );

  test.case = 'node';
  var src = Buffer.from( 'abc' );
  var got = _.bufferNodeFrom( src );
  var expected = src
  test.identical( got, expected );

  test.case = 'empty raw';
  var src = new ArrayBuffer( 0 );
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.alloc( 0 );
  test.identical( got, expected );

  test.case = 'empty typed';
  var src = new Int8Array([]);
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.alloc( 0 );
  test.identical( got, expected );

  test.case = 'empty node';
  var src = Buffer.alloc( 0 );
  var got = _.bufferNodeFrom( src );
  var expected = src;
  test.identical( got, expected );

  test.case = 'array';
  var src = [ 97,98,99 ];
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from( src );
  test.identical( got, expected );

  test.case = 'object';
  var src = new String( 'abc' );
  var got = _.bufferNodeFrom( src );
  var expected = Buffer.from([ 97,98,99 ]);
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'unknown source';
  test.shouldThrowErrorSync( () => _.bufferNodeFrom( 5 ) );
  // test.shouldThrowErrorSync( () => _.bufferNodeFrom( [] ) );
  test.shouldThrowErrorSync( () => _.bufferNodeFrom( {} ) );

}

//

function bufferRawFromTyped( test )
{

  var buffer1 = new ArrayBuffer(10);
  var view1 = new Int8Array( buffer1 );
  test.case = 'returns the same length of typed array';
  var got = _.bufferRawFromTyped( view1 );
  var expected = got; // [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
  test.identical( got, expected );

  var buffer2 = new ArrayBuffer(10);
  var view2 = new Int8Array( buffer2, 2 );
  test.case = 'returns the new sub typed array';
  var got = _.bufferRawFromTyped( view2 );
  var expected = got; // [ 0, 0, 0, 0, 0, 0 ]
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.bufferRawFromTyped();
  });

  test.case = 'arguments are wrong';
  test.shouldThrowErrorSync( function()
  {
    _.bufferRawFromTyped( 'wrong argument' );
  });

}

//

function arrayIs( test )
{

  test.case = 'an empty array';
  var got = _.arrayIs( [  ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'an array';
  var got = _.arrayIs( [ 1, 2, 3 ] );
  var expected  = true;
  test.identical( got, expected );

  test.case = 'object';
  var got = _.arrayIs( {  } );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'number';
  var got = _.arrayIs( 6 );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'string';
  var got = _.arrayIs( 'abc' );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'boolean';
  var got = _.arrayIs( true );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'function';
  var got = _.arrayIs( function() {  } );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'a pseudo array';
  var got = ( function() {
    return _.arrayIs( arguments );
  } )('Hello there!');
  var expected = false;
  test.identical( got, expected );

  test.case = 'no argument';
  var got = _.arrayIs();
  var expected  = false;
  test.identical( got, expected );

  test.case = 'null';
  var got = _.arrayIs();
  var expected  = false;
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

}

//

function longIs( test )
{

  test.case = 'an empty array';
  var got = _.longIs( [  ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'an array';
  var got = _.longIs( [ 1, 2, 3 ] );
  var expected  = true;
  test.identical( got, expected );

  test.case = 'a pseudo array';
  var got = _.longIs( arguments );
  var expected = true;
  test.identical( got, expected );

  test.case = 'raw array buffer';
  var got = _.longIs( new ArrayBuffer( 10 ) );
  var expected = false;
  test.identical( got, expected );

  test.case = 'typed array buffer';
  var got = _.longIs( new Float32Array( 10 ) );
  var expected = true;
  test.identical( got, expected );

  test.case = 'no argument';
  var got = _.longIs();
  var expected  = false;
  test.identical( got, expected );

  test.case = 'null';
  var got = _.longIs( null );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'function';
  var got = _.longIs( function() {} );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'string';
  var got = _.longIs( 'x' );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'number';
  var got = _.longIs( 1 );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'boolean';
  var got = _.longIs( true );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'object';
  var got = _.longIs( {} );
  var expected  = false;
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

}

//

function constructorLikeArray( test )
{

  test.case = 'an array';
  var got = _.constructorLikeArray( [  ].constructor );
  var expected = true;
  test.identical( got, expected );

  test.case = 'arguments, not possible to say yes by constructor';
  var got = _.constructorLikeArray( arguments.constructor );
  var expected = false;
  test.identical( got, expected );

  test.case = 'raw array buffer';
  debugger;
  var got = _.constructorLikeArray( new ArrayBuffer( 10 ).constructor );
  var expected = false;
  test.identical( got, expected );

  test.case = 'typed array buffer';
  var got = _.constructorLikeArray( new Float32Array( 10 ).constructor );
  var expected = true;
  test.identical( got, expected );

  test.case = 'no argument';
  var got = _.constructorLikeArray();
  var expected  = false;
  test.identical( got, expected );

  test.case = 'null';
  var got = _.constructorLikeArray( null );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'number';
  var got = _.constructorLikeArray( 1 );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'function';
  var got = _.constructorLikeArray( (function() {}).constructor );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'string';
  var got = _.constructorLikeArray( 'x'.constructor );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'string';
  var got = _.constructorLikeArray( 'x' );
  var expected  = false;
  test.identical( got, expected );

  test.case = 'object';
  var got = _.constructorLikeArray( {}.constructor );
  var expected  = false;
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

}

//

function hasLength( test )
{

  test.case = 'an empty array';
  var got = _.hasLength( [  ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'an array';
  var got = _.hasLength( [ 1, 2, 3 ] );
  var expected  = true;
  test.identical( got, expected );

  test.case = 'a pseudo array';
  var got = ( function() {
    return _.hasLength( arguments );
  } )('Hello there!');
  var expected = true;
  test.identical( got, expected );

  test.case = 'an array-like';
  var got = _.hasLength( { '0' : 1, '1' : 2, '2' : 3, 'length' : 3 } );
  var expected = true;
  test.identical( got, expected );

  test.case = 'a Function.length';
  function fn( a, b, c ) { };
  var got = _.hasLength( fn );
  var expected = true;
  test.identical( got, expected );

  test.case = 'a "string".length';
  var got = _.hasLength( 'Hello there!' );
  var expected = true;
  test.identical( got, expected );

  test.case = 'no arguments';
  var got = _.hasLength();
  var expected = false;
  test.identical( got, expected );

  test.case = 'null';
  var got = _.hasLength();
  var expected = false;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

};

// --
// producer
// --

function argumentsArrayMake( test )
{

  test.case = 'empty';
  var src = [];
  var got = _.argumentsArrayMake( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'single number';
  var src = [ 0 ];
  var got = _.argumentsArrayMake( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'single string';
  var src = [ 'a' ];
  var got = _.argumentsArrayMake( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1,2,3 ];
  var got = _.argumentsArrayMake( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'zero length';
  var got = _.argumentsArrayMake( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'length';
  var got = _.argumentsArrayMake( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake();
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake( 1,3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayMake( '1' );
  });

}

//

function argumentsArrayFrom( test )
{

  test.case = 'empty';
  var src = [];
  var got = _.argumentsArrayFrom( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'single number';
  var src = [ 0 ];
  var got = _.argumentsArrayFrom( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'single string';
  var src = [ 'a' ];
  var got = _.argumentsArrayFrom( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1,2,3 ];
  var got = _.argumentsArrayFrom( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'zero length';
  var got = _.argumentsArrayFrom( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  test.case = 'length';
  var got = _.argumentsArrayFrom( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src !== got );

  /* */

  test.case = 'preserving empty';
  var src = _.argumentsArrayMake([]);
  var got = _.argumentsArrayFrom( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving single number';
  var src = _.argumentsArrayMake([ 0 ]);
  var got = _.argumentsArrayFrom( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving single string';
  var src = _.argumentsArrayMake([ 'a' ]);
  var got = _.argumentsArrayFrom( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving several';
  var src = _.argumentsArrayMake([ 1,2,3 ]);
  var got = _.argumentsArrayFrom( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.argumentsArrayIs( got ) );
  test.is( src === got );

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom();
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom( 1,3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.argumentsArrayFrom( '1' );
  });

}

//

/* qqq : implement bufferMakeSimilar */

function longMake( test )
{

  test.case = 'an empty array';
  var got = _.longMake( [  ], 0 );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'length = 1';
  var got = _.longMake( [  ], 1 );
  var expected = [ ,  ];
  test.identical( got, expected );

  test.case = 'length = 2';
  var got = _.longMake( [ 1, 2, 3 ], 2 );
  var expected = [ , , ];
  test.identical( got, expected );

  test.case = 'length = 4';
  var got = _.longMake( [ 1, 2, 3 ], 4 );
  var expected = [ , , , , ];
  test.identical( got, expected );

  test.case = 'same length';

  var ins = [ 1, 2, 3 ];
  var got = _.longMake( ins );
  test.identical( got.length, 3 );
  test.is( got !== ins );

  var ins = [];
  var src = _.arrayFillWhole( Buffer.alloc( 5 ), 1 );
  var got = _.longMake( ins, Array.from( src ) );
  test.identical( got.length, 5 );
  test.is( _.arrayIs( got ) );
  test.identical( got, [ 1,1,1,1,1 ] );

  // var ins = [];
  // var src = new ArrayBuffer( 5 )
  // var got = _.longMake( ins, src );
  // test.identical( got.length, 5 );
  // test.is( _.arrayIs( got ) );

  var ins = new Uint8Array( 5 );
  ins[ 0 ] = 1;
  var got = _.longMake( ins );
  test.is( _.bufferTypedIs( got ) );
  test.identical( got.length, 5 );
  test.is( got !== ins );

  var ins = new Uint8Array( 5 );
  var src = [ 1, 2, 3, 4, 5 ];
  var got = _.longMake( ins,src );
  test.is( _.bufferTypedIs( got ) );
  test.is( got instanceof Uint8Array );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'typedArray';
  var ins = new Uint8Array( 5 );
  ins[ 0 ] = 1;
  var got = _.longMake( ins, 4 );
  test.is( _.bufferTypedIs( got ) );
  test.identical( got.length, 4 );
  test.is( got !== ins );

  test.case = 'ArrayBuffer';
  var ins = new ArrayBuffer( 5 );
  var got = _.longMake( ins, 4 );
  test.is( _.bufferRawIs( got ) );
  test.identical( got.byteLength, 4 );

  test.case = 'NodeBuffer'
  var got = _.longMake( Buffer.alloc( 5 ) );
  test.is( _.bufferNodeIs( got ) );
  test.identical( got.length, 5 );

  test.case = 'NodeBuffer and src'
  var src = _.arrayFillWhole( new Uint8Array( 5 ), 1 );
  var got = _.longMake( Buffer.alloc( 5 ), src );
  test.is( _.bufferNodeIs( got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'NodeBuffer as src'
  var src = Buffer.alloc(10);
  for( var i = 0; i < src.length; i++ )
  src[ i ] = i;
  var got = _.longMake( [], Array.from( src ) );
  test.is( _.arrayIs( got ) );
  test.identical( got.length, src.length );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'ins as Array';
  var got = _.longMake( Array, 5 );
  test.is( _.arrayIs(  got ) );
  test.identical( got.length, 5 );

  test.case = 'ins as Array';
  var src = [ 1,2,3 ];
  var got = _.longMake( Array, src );
  test.is( _.arrayIs(  got ) );
  test.identical( got.length, 3 );
  test.identical( got, src );

  test.case = 'ins as Array';
  var src = _.arrayFillWhole( new Float32Array( 5 ), 1 );
  var got = _.longMake( Array, src );
  test.is( _.arrayIs(  got ) );
  test.identical( got.length, 5 );
  test.identical( got, [ 1, 1, 1, 1, 1 ] );

  test.case = 'ins as Buffer';
  var src = _.arrayFillWhole( new Float32Array( 5 ), 1 );
  var got = _.longMake( Buffer, src );
  test.is( _.bufferNodeIs(  got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'ins as Array';
  var src = _.arrayFillWhole( Buffer.alloc( 5 ), 1 );
  var got = _.longMake( Array, src );
  test.is( _.arrayIs(  got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'ins as TypedArray';
  var src = [ 1,2,3 ];
  var got = _.longMake( Uint8Array, src );
  test.is( _.bufferTypedIs(  got ) );
  test.identical( got.length, 3 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  test.case = 'ins as TypedArray';
  var src = _.arrayFillWhole( Buffer.alloc( 5 ), 1 );
  var got = _.longMake( Float32Array, src );
  test.is( _.bufferTypedIs(  got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < src.length; i++ )
  isEqual = got[ i ] !== src[ i ] ? false : true;
  test.is( isEqual );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.longMake();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.longMake('wrong argument');
  });

  test.case = 'arguments[1] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.longMake( [ 1, 2, 3 ], 'wrong type of argument' );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.longMake( [ 1, 2, 3 ], 4, 'redundant argument' );
  });

  test.case = 'argument is not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.longMake( 1, 2, 3, 4 );
  });
};

//

/*

qqq : implement bufferMakeZeroed routine and test routine

*/

function longMakeZeroed( test )
{
  test.case = 'Array';
  var got = _.longMakeZeroed( Array, 1 );
  var expected = [ 0 ];
  test.identical( got, expected );

  //

  test.case = 'Array';
  var got = _.longMakeZeroed( Array, new Float32Array( 2 ) );
  var expected = [ 0, 0 ];
  test.identical( got, expected );

  //

  test.case = 'ArrayBuffer';
  var got = _.longMakeZeroed( ArrayBuffer, 3 );
  test.is( _.bufferRawIs( got ) );
  test.identical( got.byteLength, 3 );

  //

  test.case = 'Uint8Array';
  var got = _.longMakeZeroed( Uint8Array, [ 1, 2, 3 ] );
  test.is( _.bufferTypedIs( got ) );
  test.identical( got.length, 3 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  // test.case = 'Uint8Array';
  // var got = _.longMakeZeroed( Buffer, new ArrayBuffer( 3) );
  // test.is( _.bufferNodeIs( got ) );
  // test.identical( got.length, 3 );
  // var isEqual = true;
  // for( var i = 0; i < got.length; i++ )
  // isEqual = got[ i ] === 0 ? true : false;
  // test.is( isEqual );

  //

  test.case = 'an empty array';
  var got = _.longMakeZeroed( [  ], 0 );
  var expected = [  ];
  test.identical( got, expected );

  //

  test.case = 'length = 1';
  var got = _.longMakeZeroed( [  ], 1 );
  var expected = [ 0 ];
  test.identical( got, expected );

  //

  test.case = 'length = 2';
  var got = _.longMakeZeroed( [ 1, 2, 3 ], 2 );
  var expected = [ 0, 0 ];
  test.identical( got, expected );

  //

  test.case = 'length = 4';
  var got = _.longMakeZeroed( [ 1, 2, 3 ], 4 );
  var expected = [ 0, 0, 0, 0 ];
  test.identical( got, expected );

  //

  test.case = 'same length';
  var ins = [ 1, 2, 3 ];
  var got = _.longMakeZeroed( ins );
  test.identical( got.length, 3 );
  test.identical( got, [ 0, 0, 0 ] )

  //

  // test.case = 'same length';
  // var ins = new ArrayBuffer(5);
  // var got = _.longMakeZeroed( ins );
  // test.is( _.bufferRawIs( got ) );
  // test.identical( got.byteLength, 5 );

  //

  test.case = 'same length';
  var got = _.longMakeZeroed( ArrayBuffer, 5 );
  test.is( _.bufferRawIs( got ) );
  test.identical( got.byteLength, 5 );

  //

  test.case = 'same length, ins is a typed array';
  var ins = _.arrayFillWhole( new Uint8Array( 5 ), 1 );
  var got = _.longMakeZeroed( ins );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  test.case = 'same length, ins is a node buffer';
  var ins = _.arrayFillWhole( Buffer.alloc( 5 ), 1 );
  var got = _.longMakeZeroed( ins );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  var ins = [];
  var src = _.arrayFillWhole( Buffer.alloc( 5 ), 1 );
  var got = _.longMakeZeroed( ins, src );
  test.identical( got.length, 5 );
  test.is( _.arrayIs( got ) );
  test.identical( got, [ 0,0,0,0,0 ] );

  //

  var ins = new Uint8Array( 5 );
  ins[ 0 ] = 1;
  var got = _.longMakeZeroed( ins );
  test.is( _.bufferTypedIs( got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  test.case = 'typedArray';
  var ins = new Uint8Array( 5 );
  ins[ 0 ] = 1;
  var got = _.longMakeZeroed( ins, 4 );
  test.is( _.bufferTypedIs( got ) );
  test.identical( got.length, 4 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  test.case = 'ArrayBuffer';
  var ins = new ArrayBuffer( 5 );
  var got = _.longMakeZeroed( ins, 4 );
  test.is( _.bufferRawIs( got ) );
  test.identical( got.byteLength, 4 );
  got = new Uint8Array( got );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  // test.case = 'ArrayBuffer';
  // var ins = [];
  // var src = new ArrayBuffer( 5 );
  // var got = _.longMakeZeroed( ins, src );
  // test.is( _.arrayIs( got ) );
  // test.identical( got.length, 5 );
  // var isEqual = true;
  // for( var i = 0; i < got.length; i++ )
  // isEqual = got[ i ] === 0 ? true : false;
  // test.is( isEqual );

  //

  test.case = 'NodeBuffer'
  var got = _.longMakeZeroed( Buffer.alloc( 5 ) );
  test.is( _.bufferNodeIs( got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  //

  test.case = 'NodeBuffer and src'
  var src = new Int8Array(5);
  for( var i = 0; i < src.length; i++ )
  src[ i ] = i;
  var got = _.longMakeZeroed( Buffer.alloc( 5 ), src );
  test.is( _.bufferNodeIs( got ) );
  test.identical( got.length, 5 );
  var isEqual = true;
  for( var i = 0; i < got.length; i++ )
  isEqual = got[ i ] === 0 ? true : false;
  test.is( isEqual );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.longMakeZeroed();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.longMakeZeroed('wrong argument');
  });

  test.case = 'arguments[1] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.longMakeZeroed( [ 1, 2, 3 ], 'wrong type of argument' );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.longMakeZeroed( [ 1, 2, 3 ], 4, 'redundant argument' );
  });

  test.case = 'argument is not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.longMakeZeroed( 1, 2, 3, 4 );
  });

}

//

function arrayMake( test )
{

  test.case = 'empty';
  var src = [];
  var got = _.arrayMake( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'single number';
  var src = [ 0 ];
  var got = _.arrayMake( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'single string';
  var src = [ 'a' ];
  var got = _.arrayMake( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1,2,3 ];
  var got = _.arrayMake( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'zero length';
  var got = _.arrayMake( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'length';
  var got = _.arrayMake( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from empty Float32';
  var src = new Float32Array();
  var got = _.arrayMake( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from Float32';
  var src = new Float32Array([ 1,2,3 ]);
  var got = _.arrayMake( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from empty arguments array';
  var src = _.argumentsArrayMake([]);
  var got = _.arrayMake( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from arguments array';
  var src = _.argumentsArrayMake([ 1,2,3 ]);
  var got = _.arrayMake( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from empty unroll';
  var src = _.unrollMake([]);
  var got = _.arrayMake( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'from unroll';
  var src = _.unrollMake([ 1,2,3 ]);
  var got = _.arrayMake( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake();
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake( 1,3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayMake( '1' );
  });

}

//

function arrayFrom( test )
{

  test.case = 'empty';
  var src = new Float32Array([]);
  var got = _.arrayFrom( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'single number';
  var src = new Float32Array([ 0 ]);
  var got = _.arrayFrom( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'single string';
  var src = _.argumentsArrayMake([ 'a' ]);
  var got = _.arrayFrom( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = new Float32Array([ 1,2,3 ]);
  var got = _.arrayFrom( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'zero length';
  var got = _.arrayFrom( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'length';
  var got = _.arrayFrom( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  /* */

  test.case = 'preserving empty';
  var src = _.arrayMake([]);
  var got = _.arrayFrom( src );
  var expected = [];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving single number';
  var src = _.arrayMake([ 0 ]);
  var got = _.arrayFrom( src );
  var expected = [ 0 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving single string';
  var src = _.arrayMake([ 'a' ]);
  var got = _.arrayFrom( src );
  var expected = [ 'a' ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src === got );

  test.case = 'preserving several';
  var src = _.arrayMake([ 1,2,3 ]);
  var got = _.arrayFrom( src );
  var expected = [ 1,2,3 ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( src === got );

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom();
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom( 1,3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFrom( '1' );
  });

}

//

function arrayFromCoercing( test )
{

  test.case = 'an array';
  var got = _.arrayFromCoercing( [ 3, 7, 13, 'abc', false, undefined, null, {} ] );
  var expected = [ 3, 7, 13, 'abc', false, undefined, null, {} ];
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.arrayFromCoercing( { a : 3, b : 7, c : 13 } );
  var expected = [ [ 'a', 3 ], [ 'b', 7 ], [ 'c', 13 ] ];
  test.identical( got, expected );

  test.case = 'a string';
  var got = _.arrayFromCoercing( "3, 7, 13, 3.5abc, 5def, 7.5ghi, 13jkl" );
  var expected = [ 3, 7, 13, 3.5, 5, 7.5, 13 ];
  test.identical( got, expected );

  test.case = 'arguments[...]';
  var args = ( function() {
    return arguments;
  } )( 3, 7, 13, 'abc', false, undefined, null, { greeting: 'Hello there!' } );
  var got = _.arrayFromCoercing( args );
  var expected = [ 3, 7, 13, 'abc', false, undefined, null, { greeting: 'Hello there!' } ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromCoercing();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromCoercing( 6 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromCoercing( true );
  });

}

//

function scalarAppend( test )
{

  test.case = 'none arguments';
  var got = _.scalarAppend();
  test.identical( got, [] );

  test.case = 'single undefined';
  var got = _.scalarAppend( undefined );
  test.identical( got, [] );

  test.case = 'two undefined';
  var got = _.scalarAppend( undefined, undefined );
  test.identical( got, [] );

  test.case = 'three undefined';
  var got = _.scalarAppend( undefined, undefined, undefined );
  test.identical( got, [] );

  test.case = 'dstArray is undefined, src is scalar';
  var got = _.scalarAppend( undefined, 1 );
  test.identical( got, 1 );

  test.case = 'dstArray is undefined, src is array';
  var src = [ 1 ];
  var got = _.scalarAppend( undefined, src );
  test.identical( got, [ 1 ] );
  test.is( src !== got );

  test.case = 'dstArray is scalar, src is undefined';
  var got = _.scalarAppend( 1, undefined );
  test.identical( got, 1 );

  test.case = 'dstArray is array, src is undefined';
  var dst = [ 1 ];
  var got = _.scalarAppend( dst, undefined );
  test.identical( got, [ 1 ] );
  test.is( dst === got );

  test.case = 'dstArray is null, src is scalar';
  var got = _.scalarAppend( null, 1 );
  test.identical( got, [ null, 1 ] );

  test.case = 'dstArray is null, src is array';
  var src = [ 1 ];
  var got = _.scalarAppend( null, src );
  test.identical( got, [ null, 1 ] );
  test.is( src !== got );

  test.case = 'nothing';
  var got = _.scalarAppend( [], [] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.scalarAppend( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.scalarAppend( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.scalarAppend( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.scalarAppend( dst, [ 1 ], [ 2 ], [ 3, [ 5 ] ] );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3, [ 5 ] ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 5 ] ] ];
  var got = _.scalarAppend( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 1 ], [ 2 ], [ 3, [ 5 ] ] ] );
  test.is( got === dst );

  test.case = 'arguments are not arrays';
  var dst = [];
  var got = _.scalarAppend( dst, [ 1, 2, 3 ]);
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.scalarAppend( dst, insArray );
  test.identical( dst, [  1, 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.scalarAppend( dst, 'a', 1, [ { a : 1 } ], { b : 2 } );
  test.identical( dst, [  1, 'a', 1, { a : 1 }, { b : 2 } ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  var got = _.scalarAppend( dst, undefined );
  test.identical( dst, [ 1 ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [];
  var got = _.scalarAppend( dst, [ 1 ], [ 3 ] );
  test.identical( dst, [ 1, 3 ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 0 ];
  var got = _.scalarAppend( dst, [ 1 ], [ 3 ] );
  test.identical( dst, [ 0, 1, 3 ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [];
  var got = _.scalarAppend( dst, undefined );
  test.identical( dst, [] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.scalarAppend( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1, undefined, 2 ] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var got = _.scalarAppend( 1, [ 2 ] );
  test.identical( got, [ 1, 2 ] );

  /**/

  if( !Config.debug )
  return;

  // test.case = 'no arguments';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.scalarAppend();
  // });

}

//

function arrayMakeRandom( test )
{

  test.case = 'an empty object';
  var got = _.arrayMakeRandom( {  } );
  test.identical( got.length, 1 );
  test.is( got[ 0 ] >= 0 && got[ 0 ]<= 1 );

  test.case = 'a number';
  var got = _.arrayMakeRandom( 5 );
  var expected = got;
  test.identical( got.length, 5 );

  var got = _.arrayMakeRandom( -1 );
  var expected = [];
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.arrayMakeRandom( {
    length : 5,
    range : [ 1, 9 ],
    int : true
  } );
  var expected = got;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMakeRandom();
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMakeRandom( 'wrong argument' );
  });

};

//

function scalarToVector( test )
{

  test.case = 'nothing';
  var got = _.scalarToVector( [  ], 0 );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'static array';
  var got = _.scalarToVector( 3, 7 );
  var expected = [ 3, 3, 3, 3, 3, 3, 3 ];
  test.identical( got, expected );

  test.case = 'original array';
  var got = _.scalarToVector( [ 3, 7, 13 ], 3 );
  var expected = [ 3, 7, 13 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector( [ 1, 2, 3 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector( [ 1, 2, 3 ], 3, 'redundant argument' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector('wrong argument', 'wrong argument');
  });

  test.case = 'second argument too much';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector( [ 1, 2, 3 ], 4 );
  });

  test.case = 'first three arguments are not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.scalarToVector( 1, 2, 3, 3 );
  });

};

//

function arrayFromRange( test )
{

  test.case = 'single zero';
  var got = _.arrayFromRange( [ 0, 1 ] );
  var expected = [ 0 ];
  test.identical( got,expected );

  test.case = 'nothing';
  var got = _.arrayFromRange( [ 1, 1 ] );
  var expected = [  ];
  test.identical( got,expected );

  test.case = 'single not zero';
  var got = _.arrayFromRange( [ 1, 2 ] );
  var expected = [ 1 ];
  test.identical( got,expected );

  test.case = 'couple of elements';
  var got = _.arrayFromRange( [ 1, 3 ] );
  var expected = [ 1, 2 ];
  test.identical( got,expected );

  test.case = 'single number as argument';
  var got = _.arrayFromRange( 3 );
  var expected = [ 0, 1, 2 ];
  test.identical( got,expected );

  test.case = 'complex case';
  var got = _.arrayFromRange( [ 3, 9 ] );
  var expected = [ 3, 4, 5, 6, 7, 8 ];
  test.identical( got,expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromRange( [ 1, 3 ],'wrong arguments' );
  });

  test.case = 'argument not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromRange( 1, 3 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromRange( 'wrong arguments' );
  });

  test.case = 'no arguments'
  test.shouldThrowErrorSync( function()
  {
    _.arrayFromRange();
  });

};

//

function arrayAs( test )
{
  test.case = 'an empty array';
  var got = _.arrayAs( [  ] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'null';
  var got = _.arrayAs( null );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'array contains an object';
  var got = _.arrayAs( { a : 1, b : 2 } );
  var expected = [ { a : 1, b : 2 } ];
  test.identical( got, expected );

  test.case = 'array contains boolean';
  var got = _.arrayAs( true );
  var expected = [ true ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'nothing';
  test.shouldThrowErrorSync( () => _.arrayAs() );

  test.case = 'undefined';
  test.shouldThrowErrorSync( () => _.arrayAs( undefined ) );
};

//

function arrayToMap( test )
{

  test.case = 'an empty object';
  var got = _.arrayToMap( [  ] );
  var expected = {  };
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.arrayToMap( [ 3, [ 1, 2, 3 ], 'abc', false, undefined, null, {} ] );
  var expected = { '0' : 3, '1' : [ 1, 2, 3 ], '2' : 'abc', '3' : false, '4' : undefined, '5' : null, '6' : {} };
  test.identical( got, expected );

  test.case = 'arguments[...]';
  var args = ( function() {
    return arguments;
  } )( 3, 'abc', false, undefined, null, { greeting: 'Hello there!' } );
  var got = _.arrayToMap( args );
  var expected = { '0' : 3, '1' : 'abc', '2' : false, '3' : undefined, '4' : null, '5' : { greeting: 'Hello there!' } };
  test.identical( got, expected );

  test.case = 'longIs';
  var arr = [];
  arr[ 'a' ] = 1;
  var got = _.arrayToMap( arr );
  var expected = {};
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToMap();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToMap( 'wrong argument' );
  });

};

//

function arrayToStr( test )
{

  test.case = 'nothing';
  var got = _.arrayToStr( [  ] );
  var expected = "";
  test.identical( got, expected );

  test.case = 'returns the string';
  var got = _.arrayToStr( 'abcdefghijklmnopqrstuvwxyz', { type : 'int' } );
  var expected = "a b c d e f g h i j k l m n o p q r s t u v w x y z ";
  test.identical( got, expected );

  test.case = 'returns a single string representing the integer values';
  var got = _.arrayToStr( [ 1, 2, 3 ], { type : 'int' } );
  var expected = "1 2 3 ";
  test.identical( got, expected );

  test.case = 'returns a single string representing the float values';
  var got = _.arrayToStr( [ 3.5, 13.77, 7.33 ], { type : 'float', precission : 4 } );
  var expected = "3.500 13.77 7.330";
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToStr();
  });

  test.case = 'in second argument property (type) is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToStr( [ 1, 2, 3 ], { type : 'wrong type' } );
  });

  test.case = 'in second argument property (type) is not provided';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToStr( [ 1, 2, 3 ], { precission : 4 } );
  });

  test.case = 'first argument is string';
  test.shouldThrowErrorSync( function()
  {
    _.arrayToStr( 'wrong argument', {  type : 'float' } );
  });

}

// --
// unroll
// --

function unrollIs( test )
{
  test.case = 'unroll from empty array';

  var src = [];
  var got = _.unrollMake( src );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'unroll from not empty array';

  var src = [ 1 ];
  var got = _.unrollMake( src );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  var src = [ 'str' ];
  var got = _.unrollFrom( src );
  test.is( _.unrollIs( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'not unroll';

  var got = new Float32Array( [3, 1, 2] );
  test.identical( _.unrollIs( got ), false );

  test.identical( _.unrollIs( [] ), false );

  test.identical( _.unrollIs( 1 ), false );

  test.identical( _.unrollIs( 'str' ), false );

  test.case = 'second argument is unroll';

  var got = _.unrollMake( [ 2, 4 ] );
  test.identical( _.unrollIs( [ 1, 'str' ], got ), false );
  test.is( _.arrayIs( got ) );

  var got = _.unrollFrom( [ 2, 4 ] );
  test.identical( _.unrollIs( 1, got ), false );
  test.is( _.arrayIs( got ) );

  var got = _.unrollMake( [ 2, 4 ] );
  test.identical( _.unrollIs( 'str', got ), false );
  test.is( _.arrayIs( got ) );
}

//

function unrollIsPopulated( test )
{
  test.case = 'unroll from not empty array';

  var src = [ 1 ];
  var got = _.unrollMake( src );
  test.is( _.unrollIsPopulated( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  var src = [ 'str' ];
  var got = _.unrollFrom( src );
  test.is( _.unrollIsPopulated( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  var src = [ [] ];
  var got = _.unrollFrom( src );
  test.is( _.unrollIsPopulated( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  var src = [ null ];
  var got = _.unrollMake( src );
  test.is( _.unrollIsPopulated( got ) );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'unroll from empty array';
  var src = [];
  var got = _.unrollFrom( src );
  test.identical( _.unrollIsPopulated( got ), false );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );

  test.case = 'not unroll';

  var got = new Float32Array( [ 3, 1, 2 ] );
  test.identical( _.unrollIs( got ), false );

  test.identical( _.unrollIsPopulated( [] ), false );

  test.identical( _.unrollIsPopulated( 1 ), false );

  test.identical( _.unrollIsPopulated( 'str' ), false );

  test.case = 'second argument is unroll';

  var got = _.unrollMake( [ 2, 4 ] );
  test.identical( _.unrollIsPopulated( [ 1, 'str' ], got ), false );
  test.is( _.arrayIs( got ) );

  var got = _.unrollFrom( [ 2, 4 ] );
  test.identical( _.unrollIsPopulated( 1, got ), false );
  test.is( _.arrayIs( got ) );

  var got = _.unrollMake( [ 2, 4 ] );
  test.identical( _.unrollIsPopulated( 'str', got ), false );
  test.is( _.arrayIs( got ) );
}

//

function unrollMake( test )
{
  test.case = 'null';
  var got = _.unrollMake( null );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'empty';
  var src = [];
  var got = _.unrollMake( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'single number';
  var src = [ 0 ];
  var got = _.unrollMake( src );
  test.equivalent( got, [ 0 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'single string';
  var src = [ 'a' ];
  var got = _.unrollMake( src );
  test.equivalent( got, [ 'a' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1, 2, 3 ];
  var got = _.unrollMake( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'zero length';
  var got = _.unrollMake( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  test.case = 'length';
  var got = _.unrollMake( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  test.case = 'from empty Float32';
  var src = new Float32Array();
  var got = _.unrollMake( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from Float32';
  var src = new Float32Array([ 1, 2, 3 ]);
  var got = _.unrollMake( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from empty arguments array';
  var src = _.argumentsArrayMake( [] );
  var got = _.unrollMake( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from arguments array';
  var src = _.argumentsArrayMake( [ 1, 2, 3 ] );
  var got = _.unrollMake( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from empty array';
  var src = _.arrayMake( [] );
  var got = _.unrollMake( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from array';
  var src = _.arrayMake( [ 1, 2, 3 ] );
  var got = _.unrollMake( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake();
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake( 1, 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollMake( '1' );
  });
}

//

/*
qqq : split all groups of test cases by / * - * / for all test routines
*/

/*
qqq : test routine unrollFrom is poor
*/

function unrollFrom( test )
{
  test.case = 'null';
  var got = _.unrollFrom( null );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'src is unroll';
  var src = _.unrollMake( 0 );
  var got = _.unrollFrom( src );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( got !== [] );

  var src = _.unrollMake( 2 );
  var got = _.unrollFrom( src );
  test.identical( got, [ undefined, undefined ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var src = _.unrollMake( [ 1, 'str', 3 ] );
  var got = _.unrollFrom( src );
  test.identical( got, [ 1, 'str', 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( got !== [ 1, 'str', 3 ] );

  test.case = 'from empty';
  var src = [];
  var got = _.unrollFrom( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from array with single element';
  var src = [ 0 ];
  var got = _.unrollFrom( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1, 2, 'str' ];
  var got = _.unrollFrom( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'unroll from number';
  var got = _.unrollFrom( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  var got = _.unrollFrom( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  test.case = 'from Float32';
  var src = new Float32Array();
  var got = _.unrollFrom( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  var src = new Float32Array( [ 1, 2, 3 ] );
  var got = _.unrollFrom( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from arguments array';
  var src = _.argumentsArrayMake( [] );
  var got = _.unrollFrom( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  var src = _.argumentsArrayMake( [ 1, 2, 3 ] );
  var got = _.unrollFrom( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom();
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom( 1, 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom( [], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom( [], [] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom( {} );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollFrom( '1' );
  });
}

//

function unrollsFrom( test )
{
  test.case = 'src has null';
  var got = _.unrollsFrom( null );
  test.equivalent( got, [[]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );

  var got = _.unrollsFrom( 1, [], null, [ 1, { a : 2 } ] );
  var expected = [ [ undefined ], [], [], [ 1, { a : 2 } ] ];
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( _.unrollIs( got[ 3 ] ) );
  test.is( got !== expected );

  test.case = 'src has unroll';
  var src = _.unrollMake( 0 );
  var got = _.unrollsFrom( src );
  test.identical( got, [[]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( got !== [[]] );

  var src = _.unrollMake( 2 );
  var got = _.unrollsFrom( src );
  test.identical( got, [[ undefined, undefined ]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );

  var src = _.unrollMake( [ 1, 'str', 3 ] );
  var got = _.unrollsFrom( src );
  test.identical( got, [[ 1, 'str', 3 ]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( got !== [[ 1, 'str', 3 ]] );

  var src = _.unrollMake( [ 1, 'str', 3 ] );
  var got = _.unrollsFrom( 1, [], src );
  var expected = [ [ undefined ], [], [ 1, 'str', 3 ] ];
  test.identical( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( _.unrollIs( got[ 2 ] ) );
  test.is( got !== expected );

  test.case = 'src has unrolls from Array';
  var src = new Array( 0 );
  var got = _.unrollsFrom( src );
  test.equivalent( got, [ src ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = new Array( 3 );
  var got = _.unrollsFrom( src );
  test.equivalent( got, [ src ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = new Array( 3 );
  var got = _.unrollsFrom( 1, [], [ 'str', {} ], src );
  test.equivalent( got, [ [ undefined ], [], [ 'str', {} ], src ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( _.unrollIs( got[ 3 ] ) );
  test.is( [ src ] !== got );

  test.case = 'src has unroll from Float32';
  var src = new Float32Array();
  var got = _.unrollsFrom( src );
  test.equivalent( got, [[]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = new Float32Array( [ 1, 2, 3 ] );
  var got = _.unrollsFrom( src );
  test.equivalent( got, [ [ 1, 2, 3 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = new Float32Array( [ 1, 2, 3 ] );
  var got = _.unrollsFrom( [], 1, src );
  test.equivalent( got, [ [], [ undefined ], [ 1, 2, 3 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( _.unrollIs( got[ 1 ] ) );
  test.is( _.unrollIs( got[ 2 ] ) );
  test.is( [ src ] !== got );

  test.case = 'from arguments array';
  var src = _.argumentsArrayMake( [] );
  var got = _.unrollsFrom( src );
  test.equivalent( got, [[]] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = _.argumentsArrayMake( [ 1, 2, 3 ] );
  var got = _.unrollsFrom( src );
  test.equivalent( got, [ [ 1, 2, 3 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( [ src ] !== got );

  var src = _.argumentsArrayMake( [ 1, 2, 3 ] );
  var got = _.unrollsFrom( [], 1, src );
  test.equivalent( got, [ [], [ undefined ], [ 1, 2, 3 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( _.unrollIs( got[ 0 ] ) );
  test.is( _.unrollIs( got[ 1 ] ) );
  test.is( _.unrollIs( got[ 2 ] ) );
  test.is( [ src ] !== got );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'not argument';
  test.shouldThrowError( function()
  {
    _.unrollsFrom();
  });

  test.case = 'argument is not array, not null';

  test.shouldThrowError( function()
  {
    _.unrollsFrom( {} );
  });

  test.shouldThrowError( function()
  {
    _.unrollsFrom( '1' );
  });

  test.shouldThrowError( function()
  {
    _.unrollsFrom( 2, {} );
  });

  test.shouldThrowError( function()
  {
    _.unrollsFrom( [ '1' ], [ 1, 'str' ], 'abc' );
  });
}

//

function unrollFromMaybe( test )
{
  test.case = 'src is unroll';
  var src = _.unrollMake( 0 );
  var got = _.unrollFromMaybe( src );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( got !== [] );

  var src = _.unrollMake( 2 );
  var got = _.unrollFromMaybe( src );
  test.identical( got, [ undefined, undefined ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var src = _.unrollMake( [ 1, 'str', 3 ] );
  var got = _.unrollFromMaybe( src );
  test.identical( got, [ 1, 'str', 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( got !== [ 1, 'str', 3 ] );

  test.case = 'src is undefined';
  var got = _.unrollFromMaybe( undefined );
  test.identical( got, undefined );

  test.case = 'src is map';
  var got = _.unrollFromMaybe( {} );
  test.identical( got, {} );
  test.is( _.mapIs(got) );

  var got = _.unrollFromMaybe( { a : 0, b : 'str' } );
  test.identical( got, { a : 0, b : 'str' } );
  test.is( _.mapIs(got) );

  test.case = 'src is incompatible primitive';
  var got = _.unrollFromMaybe( 'str' );
  test.identical( got, 'str' );
  test.is( _.primitiveIs( got ) );

  var got = _.unrollFromMaybe( true );
  test.identical( got, true );
  test.is( _.primitiveIs( got ) );

  var got = _.unrollFromMaybe( false );
  test.identical( got, false );
  test.is( _.primitiveIs( got ) );

  test.case = 'from null';
  var got = _.unrollFromMaybe( null );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( [] !== got );

  test.case = 'from empty';
  var src = [];
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from array with single element';
  var src = [ 0 ];
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'several';
  var src = [ 1, 2, 'str' ];
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, src );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'unroll from number';
  var got = _.unrollFromMaybe( 0 );
  var expected = new Array( 0 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  var got = _.unrollFromMaybe( 3 );
  var expected = new Array( 3 );
  test.equivalent( got, expected );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( expected !== got );

  test.case = 'from Float32';
  var src = new Float32Array();
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  var src = new Float32Array( [ 1, 2, 3 ] );
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'from arguments array';
  var src = _.argumentsArrayMake( [] );
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  var src = _.argumentsArrayMake( [ 1, 2, 3 ] );
  var got = _.unrollFromMaybe( src );
  test.equivalent( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );
  test.is( src !== got );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'routine has not argument';
  test.shouldThrowError( function()
  {
    _.unrollFromMaybe();
  });

  test.case = 'many arguments';
  test.shouldThrowError( function()
  {
    _.unrollFromMaybe( 1, 3 );
  });

  test.shouldThrowError( function()
  {
    _.unrollFromMaybe( [], 3 );
  });

  test.shouldThrowError( function()
  {
    _.unrollFromMaybe( [], [] );
  });
}

//

function unrollNormalize( test )
{
  test.case = 'dst is array';
  var got = _.unrollNormalize( [] );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var got = _.unrollNormalize( [ 1, 'str' ] );
  test.identical( got, [ 1, 'str' ] );
  test.is( _.arrayIs( got ) );

  test.case = 'dst is unroll';
  var got = _.unrollNormalize( _.unrollMake( [] ) );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var got = _.unrollNormalize( _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str' ] );
  test.is( _.arrayIs( got ) );

  test.case = 'dst is unroll from array';
  var src = new Array( 0 );
  var got = _.unrollNormalize( _.unrollFrom( src ) );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var src = new Array( [] );
  var got = _.unrollNormalize( _.unrollFrom( src ) );
  test.identical( got, [ [] ] );
  test.is( _.arrayIs( got ) );

  var src = new Array( [ 1, 2, 'str' ] );
  var got = _.unrollNormalize( _.unrollFrom( src ) );
  test.identical( got, [ [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );

  test.case = 'dst is unroll from array';
  var src = new Float32Array( [] );
  var got = _.unrollNormalize( _.unrollFrom( src ) );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );

  var src = new Float32Array( [ 1, 2, 3 ] );
  var got = _.unrollNormalize( _.unrollFrom( src ) );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );

  test.case = 'dst is complex unroll';
  var got = _.unrollNormalize( _.unrollFrom( [ 1, _.unrollFrom ( [2, _.unrollFrom( [ 'str' ] ) ] ) ] ) );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );

  test.case = 'mixed types';
  var a = _.unrollMake( [ 'a', 'b' ] );
  var b = _.unrollFrom( [ 1, 2 ] );
  var got = _.unrollNormalize( [ 0, null, a, b, undefined ] );
  test.identical( got, [ 0, null, 'a', 'b', 1, 2, undefined ] );
  test.is( _.arrayIs( got ) );

  var a = _.unrollMake( [ 'a', 'b' ] );
  var b = _.unrollFrom( [ 1, 2 ] );
  var got = _.unrollNormalize( [ 0, [ null, a ], _.unrollFrom( [ b, undefined ] ) ] );
  test.identical( got, [ 0, [ null, 'a', 'b' ], 1, 2, undefined ] );
  test.is( _.arrayIs( got ) );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'dst is empty';
  test.shouldThrowErrorSync( function()
  {
    _.unrollNormalize();
  });

  test.case = 'two arguments';
  test.shouldThrowErrorSync( function()
  {
    _.unrollNormalize( [], [] );
  });

  test.case = 'dst is not array';
  test.shouldThrowErrorSync( function()
  {
    _.unrollNormalize( null );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollNormalize( 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollNormalize( 'str' );
  });
}

//

/* qqq
unrollAppend, unrollPrepend should have test groups :
- dst is null / unroll / array
- one argument / two arguments / three arguments
- first argument have array / unroll / complex unroll( unroll in unroll in unroll )
- non-first argument have array / unroll / complex unroll( unroll in unroll in unroll / Float32Array / ArgumentsArray

Dmytro: all tests is added
qqq: In unrollPrepend and unrollAppend test cases groups by number of arguments and it includes other test cases - array, unroll, complex unroll.
In previus routines improve unrollMake and unrollFrom tests.
Notice that unrollIs, unrollIsPopulated have not asserts.
*/

//

function unrollPrepend( test )
{
  test.open( 'one argument' );

  test.case = 'dst is null';
  var got = _.unrollPrepend( null );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is unroll';
  var got = _.unrollPrepend( _.unrollMake( [ 1, 2, 'str' ] ) );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is array';
  var got = _.unrollPrepend( [ 1, 2, 'str' ] );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.close( 'one argument' );

  /* - */

  test.open( 'two arguments' );

  test.case = 'dst is null, second arg is null';
  var got = _.unrollPrepend( null, null );
  test.identical( got, [ null ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is unroll';
  var got = _.unrollPrepend( null, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( null, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is complex unroll';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollPrepend( null, _.unrollFrom([ 1, 2, a1, a2, 10 ]) );
  var expected = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is array';
  var got = _.unrollPrepend( null, [ 1, 2, 'str' ] );
  test.identical( got, [ [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollPrepend( null, src );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var got = _.unrollPrepend( null, src );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( src !== got );
  test.isNot( _.unrollIs( got ) );

  //

  test.case = 'dst is array, second arg is null';
  var got = _.unrollPrepend( [ 1 ], null );
  test.identical( got, [ null, 1 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is unroll';
  var got = _.unrollPrepend( [ 1 ], _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str', 1 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( [ 'str', 3 ], src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 'str', 3 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is array';
  var got = _.unrollPrepend( [ 'str', 2 ], [ 1, 2, 'str' ] );
  test.identical( got, [ [ 1, 2, 'str' ], 'str', 2 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollPrepend( [ 'str', 0 ], src );
  test.identical( got, [ 1, 2, 3, 'str', 0 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var got = _.unrollPrepend( [ 'str', 0 ], src );
  test.identical( got, [ 1, 2, 'str', 'str', 0 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  //

  test.case = 'dst is unroll, second arg is null';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollPrepend( dst, null );
  test.identical( got, [ null, 1 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is unroll';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollPrepend( dst, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str', 1 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is complex unroll';
  var dst = _.unrollMake( [ 1 ] );
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is array';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollPrepend( dst, [ 1, 2, 'str' ] );
  test.identical( got, [ [ 1, 2, 'str' ], 1 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var dst = _.unrollMake( [ 'str', 0 ] );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 3, 'str', 0 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var dst = _.unrollMake( [ 'str', 0 ] );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 'str', 'str', 0 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  //

  test.case = 'dst is complex unroll, second arg is null';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( dst, null );
  test.identical( got, [ null, 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is unroll';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( dst, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str', 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is complex unroll';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is array';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollPrepend( dst, [ 1, 2, 'str' ] );
  test.identical( got, [ [ 1, 2, 'str' ], 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg makes from Float32Array';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 3, 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg makes from argumentsArray';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake([ 1, [] ]), _.unrollFrom([ 'str', _.unrollMake([ 'str2']) ]) ]);
  var src = _.unrollMake( _.argumentsArrayMake([ 1, 2, 'str' ]) );
  var got = _.unrollPrepend( dst, src );
  test.identical( got, [ 1, 2, 'str', 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.close( 'two arguments' );

  /* - */

  test.open( 'three arguments or more' );

  test.case = 'dst is null, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollPrepend( null, [ 1, 2, a1 ], [ a2, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, manually unrolled src';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollPrepend( null, 1, 2, a1, a2, 10  );
  var expected = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollPrepend( null, [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollPrepend( null, [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is unroll, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollPrepend( _.unrollFrom( [] ), [ 1, 2 ], a1, [ a2, 10 ] );
  var expected = [ [ 1, 2 ], 3, 4, 5, 6, [[ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollPrepend( _.unrollMake( [ 0 ] ), [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ], 0 ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollPrepend( _.unrollMake( [ 0 ] ), [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ], 0 ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is array, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollPrepend( [], [ 1, 2 ], a1, [ a2, 10 ] );
  var expected = [ [ 1, 2 ], 3, 4, 5, 6, [[ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollPrepend( [ 0 ], [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ], 0 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollPrepend( [ 0 ], [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ], 0 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.close( 'three arguments or more' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.unrollPrepend();
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.unrollPrepend( 1, 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollPrepend( 'str', 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollPrepend( undefined, 1 );
  });
}

//

function unrollAppend( test )
{
  test.open( 'one argument' );

  test.case = 'dst is null';
  var got = _.unrollAppend( null );
  test.identical( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is unroll';
  var got = _.unrollAppend( _.unrollMake( [ 1, 2, 'str' ] ) );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is array';
  var got = _.unrollAppend( [ 1, 2, 'str' ] );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.close( 'one argument' );

  /* - */

  test.open( 'two arguments' );

  test.case = 'dst is null, second arg is null';
  var got = _.unrollAppend( null, null );
  test.identical( got, [ null ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is unroll';
  var got = _.unrollAppend( null, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( null, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is complex unroll';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollAppend( null, _.unrollFrom([ 1, 2, a1, a2, 10 ]) );
  var expected = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg is array';
  var got = _.unrollAppend( null, [ 1, 2, 'str' ] );
  test.identical( got, [ [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollAppend( null, src );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );
  test.is( src !== got );

  test.case = 'dst is null, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var got = _.unrollAppend( null, src );
  test.identical( got, [ 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );
  test.is( src !== got );

  //

  test.case = 'dst is array, second arg is null';
  var got = _.unrollAppend( [ 1 ], null );
  test.identical( got, [ 1, null ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is unroll';
  var got = _.unrollAppend( [ 1 ], _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 1, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is complex unroll';
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( [ 'str', 3 ], src );
  test.identical( got, [ 'str', 3, 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg is array';
  var got = _.unrollAppend( [ 'str', 2 ], [ 1, 2, 'str' ] );
  test.identical( got, [ 'str', 2, [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollAppend( [ 'str', 0 ], src );
  test.identical( got, [ 'str', 0, 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var got = _.unrollAppend( [ 'str', 0 ], src );
  test.identical( got, [ 'str', 0, 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  //

  test.case = 'dst is unroll, second arg is null';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollAppend( dst, null );
  test.identical( got, [ 1, null ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is unroll';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollAppend( dst, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 1, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is complex unroll';
  var dst = _.unrollMake( [ 1 ] );
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 1, 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg is array';
  var dst = _.unrollMake( [ 1 ] );
  var got = _.unrollAppend( dst, [ 1, 2, 'str' ] );
  test.identical( got, [ 1, [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg makes from Float32Array';
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var dst = _.unrollMake( [ 'str', 0 ] );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 'str', 0, 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, second arg makes from argumentsArray';
  var src = _.unrollMake( _.argumentsArrayMake( [ 1, 2, 'str' ] ) );
  var dst = _.unrollMake( [ 'str', 0 ] );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 'str', 0, 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  //

  test.case = 'dst is complex unroll, second arg is null';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( dst, null );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', null ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is unroll';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( dst, _.unrollMake( [ 1, 'str' ] ) );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is complex unroll';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var src = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1, 2, 1, [], 'str', 'str2' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg is array';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var got = _.unrollAppend( dst, [ 1, 2, 'str' ] );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', [ 1, 2, 'str' ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg makes from Float32Array';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake( [ 1, [] ] ), _.unrollFrom( [ 'str', _.unrollMake( [ 'str2'] ) ] ) ] );
  var src = _.unrollMake( new Float32Array( [ 1, 2, 3 ] ) );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1, 2, 3 ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is complex unroll, second arg makes from argumentsArray';
  var dst = _.unrollFrom( [ 1, 2, _.unrollMake([ 1, [] ]), _.unrollFrom([ 'str', _.unrollMake([ 'str2']) ]) ]);
  var src = _.unrollMake( _.argumentsArrayMake([ 1, 2, 'str' ]) );
  var got = _.unrollAppend( dst, src );
  test.identical( got, [ 1, 2, 1, [], 'str', 'str2', 1, 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.close( 'two arguments' );

  /* - */

  test.open( 'three arguments or more' );

  test.case = 'dst is null, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollAppend( null, [ 1, 2, a1 ], [ a2, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, manually unrolled src';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollAppend( null, 1, 2, a1, a2, 10  );
  var expected = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollAppend( null, [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is null, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollAppend( null, [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is unroll, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollAppend( _.unrollFrom( [] ), [ 1, 2 ], a1, [ a2, 10 ] );
  var expected = [ [ 1, 2 ], 3, 4, 5, 6, [[ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollAppend( _.unrollMake( [ 0 ] ), [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ 0, [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is unroll, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollAppend( _.unrollMake( [ 0 ] ), [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ 0, [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.is( _.unrollIs( got ) );

  test.case = 'dst is array, complex unrolls';
  var a1 = _.unrollFrom([ 3, 4, _.unrollFrom([ 5, 6 ]) ]);
  var a2 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var got = _.unrollAppend( [], [ 1, 2 ], a1, [ a2, 10 ] );
  var expected = [ [ 1, 2 ], 3, 4, 5, 6, [[ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, next args have unroll from argumentsArray';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( _.argumentsArrayMake([ 3, 4, _.unrollMake([ 5, 6 ]) ]) );
  var got = _.unrollAppend( [ 0 ], [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ 0, [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is array, next args have unroll from Float32Array';
  var a1 = [ 7, _.unrollFrom([ 8, 9 ]) ];
  var a2 = _.unrollFrom( new Float32Array( [ 3, 4 ] ) );
  var got = _.unrollAppend( [ 0 ], [ 1, 2, a2 ], [ a1, 10 ] );
  var expected = [ 0, [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ];
  test.identical( got, expected );
  test.isNot( _.unrollIs( got ) );

  test.close( 'three arguments or more' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.unrollAppend();
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.unrollAppend( 1, 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollAppend( 'str', 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.unrollAppend( undefined, 1 );
  });
}

//

function unrollRemove( test )
{
  test.case = 'dst is null'
  var got = _.unrollRemove( null, 0 );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( null, 'str' );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( null, null );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( null, [ 1, 2, 'str' ] );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( null, _.unrollMake( [ 1 ] ) );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'dst is unroll from null'
  var got = _.unrollRemove( _.unrollMake( null ), 'str' );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var got = _.unrollRemove( _.unrollMake( null ), _.unrollMake( [ 1 ] ) );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var got = _.unrollRemove( _.unrollMake( null ), _.unrollMake( null ) );
  test.equivalent( got, [] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  /* - */

  test.open( 'dstArray is array' );

  test.case = 'array remove element';
  var got = _.unrollRemove( [ 1, 1, 2, 'str' ], 1 );
  test.equivalent( got, [ 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str' ], 'str' );
  test.equivalent( got, [ 1, 1, 2 ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str', {} ], 0 );
  test.equivalent( got, [ 1, 1, 2, 'str', {} ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'array remove array or object';
  var got = _.unrollRemove( [ 1, 1, 2, 'str', [ 0 ] ], [ 0 ] );
  test.equivalent( got, [ 1, 1, 2, 'str', [ 0 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str', { a : 1, b : 'str' } ], { a : 1, b : 'str' } );
  test.equivalent( got, [ 1, 1, 2, 'str', { a : 1, b : 'str' } ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'array remove elements';
  var got = _.unrollRemove( [ 1, 1, 2, 'str', [ 1 ] ], 1, [ 1 ] );
  test.equivalent( got, [ 2, 'str', [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str', { a : 2 }, 'str' ], 0, { a : 2 }, 4, 'str' );
  test.equivalent( got, [ 1, 1, 2, { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str', { a : 2 } ], null, undefined, 4, [] );
  test.equivalent( got, [ 1, 1, 2, 'str', { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'array remove elements included array or object';
  var got = _.unrollRemove( [ 1, 1, 2, 'str', [ 0 ] ], 1, [ 0 ] );
  test.equivalent( got, [ 2, 'str', [ 0 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 1, 2, 'str', { a : 1, b : 'str' } ], 2, 'str', { a : 1, b : 'str' } );
  test.equivalent( got, [ 1, 1, { a : 1, b : 'str' } ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.case = 'array remove unroll';
  var got = _.unrollRemove( [ 1, 1, 2, 3, 'str', 3 ], _.unrollFrom( [ 1, 3 ] ) );
  test.equivalent( got, [ 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 2, 1, 3, 'str', [ 1 ] ], _.unrollFrom( [ 1, 3, 'str', [ 1 ] ] ) );
  test.equivalent( got, [ 2, [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var got = _.unrollRemove( [ 1, 2, 3, 'str', [ 1 ] ], _.unrollFrom( [ 0, 'a', [ 2 ] ] ) );
  test.equivalent( got, [ 1, 2, 3, 'str', [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  var ins =  _.unrollFrom( [ 1, _.unrollMake( [ 2, 3, _.unrollMake( [ 'str', [ 1 ] ] ) ] ) ] );
  var got = _.unrollRemove( [ 1, 2, 3, 'str', [ 1 ] ], ins );
  test.equivalent( got, [ [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.isNot( _.unrollIs( got ) );

  test.close( 'dstArray is array' );

  /* - */

  test.open( 'dstArray is unroll' );

  test.case = 'unroll remove element';
  var dst = _.unrollMake( [ 1, 1, 2, 'str', [ 1 ] ] );
  var got = _.unrollRemove( dst, 1);
  test.equivalent( got, [ 2, 'str', [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 1, 2, 'str', { a : 2 }, 'str' ] );
  var got = _.unrollRemove( dst, 'str' );
  test.equivalent( got, [ 1, 1, 2, { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 1, 2, 'str', { a : 2 } ] );
  var got = _.unrollRemove( dst, 4 );
  test.equivalent( got, [ 1, 1, 2, 'str', { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'unroll remove elements';
  var dst = _.unrollMake( [ 1, 1, 2, 'str', [ 1 ] ] );
  var got = _.unrollRemove( dst, 1, [ 1 ] );
  test.equivalent( got, [ 2, 'str', [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 1, 2, 'str', { a : 2 }, 'str' ] );
  var got = _.unrollRemove( dst, 0, { a : 2 }, 4, 'str' );
  test.equivalent( got, [ 1, 1, 2, { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 1, 2, 'str', { a : 2 } ] );
  var got = _.unrollRemove( dst, null, undefined, 4, [] );
  test.equivalent( got, [ 1, 1, 2, 'str', { a : 2 } ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.case = 'unroll remove unroll';
  var dst = _.unrollMake( [ 1, 1, 2, 3, 'str', 3 ] );
  var got = _.unrollRemove( dst, _.unrollFrom( [ 1, 3 ] ) );
  test.equivalent( got, [ 2, 'str' ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 2, 1, 3, 'str', [ 1 ] ] );
  var got = _.unrollRemove( dst, _.unrollFrom( [ 1, 3, 'str', [ 1 ] ] ) );
  test.equivalent( got, [ 2, [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var dst = _.unrollMake( [ 1, 2, 3, 'str', [ 1 ] ] );
  var got = _.unrollRemove( dst, _.unrollFrom( [ 0, 'a', [ 2 ] ] ) );
  test.equivalent( got, [ 1, 2, 3, 'str', [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  var ins =  _.unrollFrom( [ 1, _.unrollMake( [ 2, 3, _.unrollMake( [ 'str', [ 1 ] ] ) ] ) ] );
  var got = _.unrollRemove( _.unrollFrom( [ 1, 2, 3, 'str', [ 1 ] ] ), ins );
  test.equivalent( got, [ [ 1 ] ] );
  test.is( _.arrayIs( got ) );
  test.is( _.unrollIs( got ) );

  test.close( 'dstArray is unroll' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowError( function()
  {
    _.unrollRemove();
  });

  test.case = 'dst is not an array';
  test.shouldThrowError( function()
  {
    _.unrollRemove( 1, 1 );
  });

  test.shouldThrowError( function()
  {
    _.unrollRemove( 'str', 1 );
  });

  test.shouldThrowError( function()
  {
    _.unrollRemove( undefined, 1 );
  });
}

// !!!

function longAreRepeatedProbe( test )
{

  _.diagnosticEachLongType( ( make, descriptor ) =>
  {
    _.diagnosticEachElementComparator( make, ( make, evaluate, description ) =>
    {
      if( _.arrayIs( evaluate ) )
      return;
      if( descriptor.isTyped && evaluate )
      return;
      test.open( descriptor.name + ', ' + description );
      group( make, evaluate );
      test.close( descriptor.name + ', ' + description );
    });
  });

  function group( onMake, onEvaluate )
  {

    test.case = 'empty';
    var l1 = onMake( [] );
    var expected = { uniques : 0, condensed : 0, array : [] };
    var got = _.longAreRepeatedProbe( l1, onEvaluate );
    test.identical( got, expected );

    test.case = 'single';
    var l1 = onMake( [ 0 ] );
    var expected = { uniques : 1, condensed : 1, array : [ 0 ] };
    var got = _.longAreRepeatedProbe( l1, onEvaluate );
    test.identical( got, expected );

    test.case = 'two zeros';
    var l1 = onMake( [ 0, 0 ] );
    var expected = { uniques : 0, condensed : 1, array : [ 1,1 ] };
    var got = _.longAreRepeatedProbe( l1, onEvaluate );
    test.identical( got, expected );

    test.case = 'none unique';
    var l1 = onMake( [ 1,2,3,1,2,3 ] );
    var expected = { uniques : 0, condensed : 3, array : [ 1,1,1, 1,1,1 ] };
    var got = _.longAreRepeatedProbe( l1, onEvaluate );
    test.identical( got, expected );

    test.case = 'several uniques';
    var l1 = onMake( [ 0,1,2,3,4,1,2,3,5 ] );
    var expected = { uniques : 3, condensed : 6, array : [ 0, 1,1,1, 0, 1,1,1, 0 ] };
    var got = _.longAreRepeatedProbe( l1, onEvaluate );
    test.identical( got, expected );

  }

}

//

function longAllAreRepeated( test )
{

  var got = _.longAllAreRepeated([]);
  test.identical( got, true );

  var got = _.longAllAreRepeated([ 1, 1 ]);
  test.identical( got, true );

  var got = _.longAllAreRepeated([ 1 ]);
  test.identical( got, false );

  var got = _.longAllAreRepeated([ 1, 2, 2 ]);
  test.identical( got, false );

}

//

function longAnyAreRepeated( test )
{

  var got = _.longAnyAreRepeated([]);
  test.identical( got, false );

  var got = _.longAnyAreRepeated([ 1, 1 ]);
  test.identical( got, true );

  var got = _.longAnyAreRepeated([ 1 ]);
  test.identical( got, false );

  var got = _.longAnyAreRepeated([ 1, 2, 2 ]);
  test.identical( got, true );

}

//

function longNoneAreRepeated( test )
{

  var got = _.longNoneAreRepeated([]);
  test.identical( got, true );

  var got = _.longNoneAreRepeated([ 1, 1 ]);
  test.identical( got, false );

  var got = _.longNoneAreRepeated([ 1 ]);
  test.identical( got, true );

  var got = _.longNoneAreRepeated([ 1, 2, 2 ]);
  test.identical( got, false );

}

//

function arraySub( test )
{

  test.case = 'nothing';
  var got = _.arraySub( [  ], 0, 0 );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'two arguments';
  var got = _.arraySub( [  ], 0 );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'full copy of an array';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ] );
  var expected = [ 1, 2, 3, 4, 5 ];
  test.identical( got, expected );

  test.case = 'an array of two elements';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ], 2, 4 );
  var expected = [ 3, 4 ];
  test.identical( got, expected );

  test.case = 'from second index to the (arr.length - 1)';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ], 2 );
  var expected = [ 3, 4, 5 ];
  test.identical( got, expected );

  test.case = 'an offset from the end of the sequence';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ], -4 );
  var expected = [ 2, 3, 4, 5 ];
  test.identical( got, expected );

  test.case = 'the two negative index';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ], -4, -2 );
  var expected = [ 2, 3 ];
  test.identical( got, expected );

  test.case = 'the third index is negative';
  var got = _.arraySub( [ 1, 2, 3, 4, 5 ], 1, -1 );
  var expected = [ 2, 3, 4 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySub();
  });

  test.case = 'first argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arraySub( 'wrong argument', 1, -1 );
  });

  test.case = 'argument is not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.arraySub( 1, 2, 3, 4, 5, 2, 4 );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySub( [ 1, 2, 3, 4, 5 ], 2, 4, 'redundant argument' );
  });

};

//

//function arrayJoin( test )
//{
//  test.case = 'empty call';
//  test.identical( _.arrayJoin(), null );
//
//  test.case = 'empty arrays';
//  test.identical( _.arrayJoin( [], [] ), null );
//
//  test.case = 'simple';
//
//  var src = [ 1 ];
//  var got = _.arrayJoin( src );
//  var expected = src;
//  test.identical( got, expected );
//
//  var src = [ 1 ];
//  var got = _.arrayJoin( src, src );
//  var expected = [ 1,1 ];
//  test.identical( got, expected );
//
//  test.case = 'array + typedArray';
//  var got = _.arrayJoin( [ 1 ], new Uint8Array([ 1,2 ]) );
//  var expected = [ 1,1,2 ];
//  test.identical( got, expected );
//
//  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), [ 1 ] );
//  var expected = new Uint8Array( [ 1,2,1 ] );
//  test.identical( got, expected );
//
//  test.case = 'typedArray + typedArray';
//  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), new Uint8Array( [ 1,2 ] ) );
//  var expected = new Uint8Array( [ 1,2,1,2 ] );
//  test.identical( got, expected );
//
//  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), new Uint16Array( [ 1,2 ] ) );
//  var expected = new Uint8Array( [ 1,2,1,0,2,0 ] );
//  test.identical( got, expected );
//
//  test.case = 'arrayBuffer + arrayBuffer';
//  var src = new Uint8Array( [ 1,2 ] );
//  var got = _.arrayJoin( src.buffer, src.buffer );
//  test.is( _.bufferRawIs( got ) );
//  var expected = new Uint8Array( [ 1,2,1,2 ] );
//  test.identical( new Uint8Array( got ), expected );
//
//  test.case = 'arrayBuffer + array';
//  var src = new Uint8Array( [ 1,2 ] );
//  var got = _.arrayJoin( src.buffer, [ 1,2 ] );
//  test.is( _.bufferRawIs( got ) );
//  var expected = new Uint8Array( [ 1,2,1,2 ] );
//  test.identical( new Uint8Array( got ), expected );
//
//  test.case = 'arrayBuffer + typedArray';
//  var src = new Uint8Array( [ 1,2 ] );
//  var got = _.arrayJoin( src.buffer, src );
//  test.is( _.bufferRawIs( got ) );
//  var expected = new Uint8Array( [ 1,2,1,2 ] );
//  test.identical( new Uint8Array( got ), expected );
//
//  test.case = 'typedArray + arrayBuffer';
//  var src = new Uint8Array( [ 1,2 ] );
//  var got = _.arrayJoin( src, src.buffer );
//  var expected = new Uint8Array( [ 1,2,1,2 ] );
//  test.identical( got, expected );
//
//  test.case = 'typedArray + arrayBuffer + array';
//  var src = new Uint8Array( [ 1 ] );
//  var got = _.arrayJoin( src, src.buffer, [ 1 ] );
//  var expected = new Uint8Array( [ 1,1,1 ] );
//  test.identical( got, expected );
//
//  test.case = 'array + typedArray + arrayBuffer';
//  var src = new Uint8Array( [ 1 ] );
//  var got = _.arrayJoin( [ 1 ], src, src.buffer );
//  var expected = [ 1,1,1 ];
//  test.identical( got, expected );
//
//  test.case = 'arrayBuffer + array + typedArray';
//  var src = new Uint8Array( [ 1 ] );
//  var got = _.arrayJoin( src.buffer, [ 1 ], src  );
//  test.is( _.bufferRawIs( got ) );
//  var expected = new Uint8Array( [ 1,1,1 ] );
//  test.identical( new Uint8Array( got ), expected );
//
//  if( Config.platform === 'nodejs' )
//  {
//    test.case = 'buffer';
//    var got = _.arrayJoin( Buffer.from( '1' ), [ 1 ] );
//    var expected = Buffer.from( [ 49,1 ] );
//    test.identical( got, expected );
//
//    test.case = 'buffer + arrayBuffer';
//    var raw = new Uint8Array( [ 1 ] ).buffer;
//    var got = _.arrayJoin( Buffer.from( '1' ), raw );
//    var expected = Buffer.from( [ 49,1 ] );
//    test.identical( got, expected );
//
//    test.case = 'buffer + typedArray';
//    var typed = new Uint8Array( [ 1 ] );
//    var got = _.arrayJoin( Buffer.from( '1' ), typed );
//    var expected = Buffer.from( [ 49,1 ] );
//    test.identical( got, expected );
//
//    test.case = 'buffer + typedArray + raw + array';
//    var typed = new Uint8Array( [ 1 ] );
//    var got = _.arrayJoin( Buffer.from( '1' ), typed, typed.buffer, [ 1 ] );
//    var expected = Buffer.from( [ 49,1,1,1 ] );
//    test.identical( got, expected );
//
//    test.case = 'typedArray + buffer + raw + array';
//    var typed = new Uint8Array( [ 1 ] );
//    var got = _.arrayJoin( typed, Buffer.from( '1' ), typed.buffer, [ 1 ] );
//    var expected = new Uint8Array( [ 1,49,1,1 ] );
//    test.identical( got, expected );
//
//    test.case = 'raw + typedArray + buffer + array';
//    var typed = new Uint8Array( [ 1 ] );
//    var got = _.arrayJoin( typed.buffer, typed, Buffer.from( '1' ), [ 1 ] );
//    var expected = new Uint8Array( [ 1,1,49,1 ] );
//    test.identical( new Uint8Array( got ), expected );
//
//    test.case = 'array + raw + typedArray + buffer ';
//    var typed = new Uint8Array( [ 1 ] );
//    var got = _.arrayJoin( [ 1 ], typed.buffer, typed, Buffer.from( '1' )  );
//    var expected = new Uint8Array( [ 1,1,1,49 ] );
//    test.identical( new Uint8Array( got ), expected );
//  }
//
//  if( !Config.debug )
//  return;
//
//  test.shouldThrowErrorSync( () => _.arrayJoin( [ 1 ], '1' ) );
//  test.shouldThrowErrorSync( () => _.arrayJoin( [ 1 ], { byteLength : 5 } ) );
//
//}

//

function arrayGrow( test )
{
  var got,expected;
  var array = [ 1,2,3,4,5 ];

  test.case = 'defaults';

  /* default call returns copy */

  got = _.arrayGrow( array );
  expected = array;
  test.identical( got, expected );

  test.case = 'increase size of array';

  /* without setting value */

  got = _.arrayGrow( array, 0, array.length + 2 );
  expected = array.length + 2;
  test.identical( got.length, expected );

  /* by setting value */

  got = _.arrayGrow( array, 0, array.length + 2, 0 );
  expected = [ 1,2,3,4,5,0,0 ];
  test.identical( got, expected );

  /* by taking only last element of source array */

  got = _.arrayGrow( array, array.length - 1, array.length * 2, 0 );
  expected = [ 5,0,0,0,0,0 ];
  test.identical( got, expected );

  test.case = 'decrease size of array';

  /**/

  got = _.arrayGrow( array, 0, 3 );
  expected = [ 1,2,3 ];
  test.identical( got, expected );

  /* setting value not affects on array */

  got = _.arrayGrow( array, 0, 3, 0 );
  expected = [ 1,2,3 ];
  test.identical( got, expected );

  /* begin index is negative */

  got = _.arrayGrow( array, -1, 3 );
  expected = [ undefined,1,2,3 ];
  test.identical( got, expected );

  /* end index is negative */

  got = _.arrayGrow( array, 0, -1 );
  expected = [];
  test.identical( got, expected );

  /* begin index negative, set value */

  got = _.arrayGrow( array, -1, 3, 0 );
  expected = [ 0, 1,2,3 ];
  test.identical( got, expected );

  //

  if( Config.platform === 'nodejs' )
  {
    test.case = 'buffer';
    var got = _.arrayGrow( Buffer.from( '123' ), 0, 5, 0 );
    var expected = [ 49, 50, 51, 0, 0 ];
    test.identical( got, expected );
  }

  //

  if( !Config.debug )
  return;

  test.case = 'invalid arguments type';

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayGrow( 1 );
  })

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayGrow( array, '1', array.length )
  })

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayGrow( array, 0, '1' )
  })

}

function arrayResize( test )
{
  var got,expected;

  test.case = 'defaults';
  var array = [ 1, 2, 3, 4, 5, 6, 7 ];
  array.src = true;

  /* just pass array */

  got = _.arrayResize( array );
  test.identical( got.src, undefined );
  test.identical( got, array );

  //

  test.case = 'make copy of source';

  /* third argument is not provided */

  got = _.arrayResize( array, 2 );
  test.identical( got.src, undefined );
  expected = [ 3, 4, 5, 6, 7 ];
  test.identical( got, expected );

  /* second argument is undefined */

  got = _.arrayResize( array, undefined, 4  );
  test.identical( got.src, undefined );
  expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );

  /**/

  got = _.arrayResize( array, 0, 3 );
  test.identical( got.src, undefined );
  expected = [ 1,2,3 ];
  test.identical( got, expected );

  /* from two to six */

  test.case = 'from two to six';
  got = _.arrayResize( array, 2, 6 );
  test.identical( got.src, undefined );
  expected = [ 3, 4, 5, 6 ];
  test.identical( got, expected );

  /* rigth bound is negative */

  got = _.arrayResize( array, 0, -1 );
  test.identical( got.src, undefined );
  expected = [];
  test.identical( got, expected );

  /* both bounds are negative */

  got = _.arrayResize( array, -1, -3 );
  test.identical( got.src, undefined );
  expected = [];
  test.identical( got, expected );

  /* TypedArray */

  var arr = new Uint16Array( array );
  arr.src = true;
  got = _.arrayResize( arr, 0, 3 );
  test.identical( got.src, undefined );
  expected = new Uint16Array([ 1, 2, 3 ]);
  test.identical( got, expected );

  /* Buffer */

  if( Config.platform === 'nodejs' )
  {
    test.case = 'buffer';
    var got = _.arrayResize( Buffer.from( '123' ), 0, 5, 0 );
    var expected = [ 49, 50, 51, 0, 0 ];
    test.identical( got, expected );
  }

  /**/

  test.case = 'increase size of array';

  /* rigth bound is out of range */

  got = _.arrayResize( array, 0, array.length + 2 );
  test.identical( got.src, undefined );
  expected = array.slice();
  expected.push( undefined,undefined );
  test.identical( got, expected );

  /* indexes are out of bound */

  got = _.arrayResize( array, array.length + 1, array.length + 3 );
  test.identical( got.src, undefined );
  expected = [ undefined, undefined ];
  test.identical( got, expected );

  /* left bound is negative */

  got = _.arrayResize( array, -1, array.length );
  test.identical( got.src, undefined );
  expected = array.slice();
  expected.unshift( undefined );
  test.identical( got, expected );

  /* without setting value */

  got = _.arrayResize( array, 0, array.length + 2 );
  test.identical( got.src, undefined );
  test.identical( got.length, array.length + 2 );

  /* by setting value */

  got = _.arrayResize( array, 0, array.length + 2, 0 );
  test.identical( got.src, undefined );
  expected = [ 1,2,3,4,5,6,7,0,0 ];
  test.identical( got, expected );

  /* by taking only last element of source array */

  got = _.arrayResize( array, array.length - 1, array.length + 2, 0 );
  test.identical( got.src, undefined );
  expected = [ 7, 0, 0 ];
  test.identical( got, expected );

  test.case = 'decrease size of array';

  /* setting value not affects on array */

  got = _.arrayResize( array, 0, 3, 0 );
  test.identical( got.src, undefined );
  expected = [ 1,2,3 ];
  test.identical( got, expected );

  /* begin index is negative */

  got = _.arrayResize( array, -1, 3, 0 );
  test.identical( got.src, undefined );
  expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  /* end index is negative */

  got = _.arrayResize( array, 0, -1 );
  test.identical( got.src, undefined );
  expected = [];
  test.identical( got, expected );

  /* begin index negative, set value */

  got = _.arrayResize( array, -1, 3, 0 );
  test.identical( got.src, undefined );
  expected = [ 0, 1,2,3 ];
  test.identical( got, expected );

  /* TypedArray */

  var arr = new Uint16Array( array );
  arr.src = true;
  got = _.arrayResize( arr, 0, 4, 4 );
  test.identical( got.src, undefined );
  expected = new Uint16Array([ 1, 2, 3, 4 ]);
  test.identical( got, expected );

  //

  if( Config.platform === 'nodejs' )
  {
    test.case = 'buffer';
    var got = _.arrayResize( Buffer.from( '123' ), 0, 5, 0 );
    var expected = [ 49, 50, 51, 0, 0 ];
    test.identical( got, expected );
  }

  //

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayResize();
  });

  /**/

  test.case = 'invalid arguments type';

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayResize( 1 );
  })

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayResize( array, '1', array.length )
  })

  /**/

  test.shouldThrowErrorSync( function()
  {
    _.arrayResize( array, 0, '1' )
  })

  /**/

  test.case = 'buffer';

  /**/

  got = _.arrayResize( Buffer.from( '123' ), 0, 1 );
  expected = [ 49 ];
  test.identical( got, expected );

  //

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayResize( 'wrong argument', 'wrong argument', 'wrong argument' );
  });

};

//

/*
qqq : improve, add exception checking ceases
*/

function longSlice( test )
{

  test.open( 'Array' );
  runFor( makeArray );
  test.close( 'Array' );

  test.open( 'ArgumentsArray' );
  runFor( makeU8 );
  test.close( 'ArgumentsArray' );

  test.open( 'F32x' );
  runFor( makeF32 );
  test.close( 'F32x' );

  test.open( 'U8x' );
  runFor( makeU8 );
  test.close( 'U8x' );

  /* */

  if( !Config.debug )
  return;

  test.case = 'raw buffer';
  test.shouldThrowErrorSync( function()
  {
    _.longSlice( new ArrayBuffer() );
  });

  /* */

  function makeArray()
  {
    var result = [];
    for( var a = 0 ; a < arguments.length ; a++ )
    result.push( arguments[ a ] );
    return result;
  }

  function makeArgumentsArray()
  {
    return arguments;
  }

  function makeF32()
  {
    var result = new F32x( arguments );
    return result;
  }

  function makeU8()
  {
    var result = new U8x( arguments );
    return result;
  }

  /* */

  function runFor( a )
  {

    test.case = 'empty';

    var srcLong = a();
    var got = _.longSlice( srcLong );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a();
    var got = _.longSlice( srcLong, 0 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a();
    var got = _.longSlice( srcLong, 0, 5 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a();
    var got = _.longSlice( srcLong, -1, 5 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a();
    var got = _.longSlice( srcLong, 0, -1 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'single element';

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong );
    var expected = a( 3 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, 0 );
    var expected = a( 3 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, 0, -1 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, 0, 10 );
    var expected = a( 3 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, 0, -10 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, -1 );
    var expected = a( 3 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, -1, 10 );
    var expected = a( 3 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 3 );
    var got = _.longSlice( srcLong, -1, -2 );
    var expected = a();
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'just pass srcLong';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong );
    var expected = srcLong;
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'make copy of source';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 0 );
    var expected = a( 1, 2, 3, 4, 5, 6, 7 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, -1 );
    var expected = a( 7 );
    test.identical( got, expected );

    test.case = 'third argument is not provided';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 2 );
    var expected = a( 3, 4, 5, 6, 7 );
    test.identical( got, expected );

    test.case = 'second argument is undefined';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, undefined, 4  );
    var expected = a( 1, 2, 3, 4 );
    test.identical( got, expected );

    test.case = 'from two to six';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 2, 6 );
    var expected = a( 3, 4, 5, 6 );
    test.identical( got, expected );

    test.case = 'indexes are out of bound';

    var srcLong = a( 1,2,3 );
    var got = _.longSlice( srcLong, 5, 8 );
    var expected = a();
    test.identical( got, expected );

    test.case = 'left bound is negative';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, -1, srcLong.length );
    var expected = a( 7 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'rigth bound is negative';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 0, -1 );
    var expected = a( 1,2,3,4,5,6 );
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'rigth bound is out of range';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 0, srcLong.length + 2 );
    var expected = srcLong;
    test.identical( got, expected );
    test.is( srcLong !== got );

    test.case = 'etc';

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, srcLong );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 0 );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, srcLong );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var expected = a( 7 );
    var got = _.longSlice( srcLong, -1 );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, expected );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, 0, 1 );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, a( 1 ) );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, srcLong.length, srcLong.length );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, a() );

    var srcLong = a( 1, 2, 3, 4, 5, 6, 7 );
    var got = _.longSlice( srcLong, -1, srcLong.length + 1 );
    test.is( got.constructor === srcLong.constructor );
    test.is( got !== srcLong );
    test.identical( got, a( 7 ) );

    /* */

    if( !Config.debug )
    return;

    test.case = 'no arguments';
    test.shouldThrowErrorSync( function()
    {
      _.longSlice();
    });

    test.case = 'wrong type of argument';
    test.shouldThrowErrorSync( function()
    {
      _.longSlice( 'x' );
    });

    test.case = 'wrong type of argument';
    test.shouldThrowErrorSync( function()
    {
      _.longSlice( [ 1 ], 'x', 1 );
    });

    test.case = 'wrong type of argument';
    test.shouldThrowErrorSync( function()
    {
      _.longSlice( [ 1 ], 0, 'x' );
    });

    test.case = 'wrong type of argument';
    test.shouldThrowErrorSync( function()
    {
      var array = new ArrayBuffer();
      _.longSlice( array );
    });

  }

}

longSlice.timeOut = 20000;

//

function arrayDuplicate( test )
{
  test.case = 'couple of repeats';
  var got = _.arrayDuplicate( [ 'a', 'b', 'c' ] );
  var expected = [ 'a', 'a', 'b', 'b', 'c', 'c' ];
  test.identical( got, expected );

  /* */

  test.case = 'numberOfAtomsPerElement 1 numberOfDuplicatesPerElement 1';
  var options =
  {
    src : [ 10,20 ],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 1
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 10,20 ];
  test.identical( got, expected );

  /* */

  test.case = 'numberOfAtomsPerElement 1 numberOfDuplicatesPerElement 2';
  var options =
  {
    src : [ 10,20 ],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 2
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 10,10,20,20 ];
  test.identical( got, expected );

  /* */

  test.case = 'numberOfAtomsPerElement 2 numberOfDuplicatesPerElement 1';
  var options =
  {
    src : [ 10,20 ],
    numberOfAtomsPerElement : 2,
    numberOfDuplicatesPerElement : 1
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 10,20 ];
  test.identical( got, expected );

  /* */

  test.case = 'numberOfAtomsPerElement 2 numberOfDuplicatesPerElement 2';
  var options =
  {
    src : [ 10,20 ],
    numberOfAtomsPerElement : 2,
    numberOfDuplicatesPerElement : 2
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 10,20,10,20 ];
  test.identical( got, expected );

  /* */

  test.case = 'result provided';
  var options =
  {
    src : [ 10,20 ],
    result : [ 1,1,1,1 ],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 2
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 10,10,20,20 ];
  test.identical( got, expected );

  /* */

  test.case = 'different options';
  var options =
  {
    src : [ 'abc', 'def' ],
    result : new Array( 6 ),
    numberOfAtomsPerElement : 2,
    numberOfDuplicatesPerElement : 3
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 'abc', 'def', 'abc', 'def', 'abc', 'def' ];
  test.identical( got, expected );

  /* */

  test.case = 'different options';
  var options =
  {
    src : [ 'abc', 'def' ],
    result : [],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 1
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 'abc', 'def',  ];
  test.identical( got, expected );

  /* */

  test.case = 'different options';
  var options =
  {
    src : [ 'abc', 'def' ],
    result : [ 1, 2 ],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 1
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 1, 2, 'abc', 'def',  ];
  test.identical( got, expected );

  /* */

  test.case = 'different options';
  var arr = new Uint8Array( 1 );
  arr[ 0 ] = 5;
  var options =
  {
    src : [ 1, 2 ],
    result : arr,
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 1
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 5, 1, 2 ];
  var equal = true;
  for( var i = 0; i < expected.length; i++ )
  {
    if( expected[ i ] !== got[ i ]  )
    equal = false;
  }
  test.is( equal );
  test.identical( got.length, expected.length );

  /* */

  test.case = 'second argument is replaced and non-existent elements from options.src is replaced undefined';
  var options = {
    src : [ 'abc', 'def', undefined ],
    numberOfAtomsPerElement : 3,
    numberOfDuplicatesPerElement : 3
  };
  var got = _.arrayDuplicate( options );
  var expected = [ 'abc', 'def', undefined, 'abc', 'def', undefined, 'abc', 'def', undefined ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayDuplicate();
  });

  test.case = 'second argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayDuplicate( [ 'a', 'b', 'c' ], 'wrong argument' );
  });

  test.case = 'options.src is not provided or "undefined"';
  var options = {
    src : undefined,
    result : [  ],
    numberOfAtomsPerElement : 3,
    numberOfDuplicatesPerElement : 3
  };
  test.shouldThrowErrorSync( function()
  {
    _.arrayDuplicate( options, { a : 13 } );
  });

  test.case = 'result provided, but not enough length';
  var options =
  {
    src : [ 10,20 ],
    result : [],
    numberOfAtomsPerElement : 1,
    numberOfDuplicatesPerElement : 2
  };
  test.shouldThrowErrorSync( function ()
  {
    _.arrayDuplicate( options );
  })


};

//

function arrayMask( test )
{

  test.case = 'nothing';
  var got = _.arrayMask( [ 1, 2, 3, 4 ], [ undefined, null, 0, '' ] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'adds last three values';
  var got = _.arrayMask( [ 'a', 'b', 'c', 4, 5 ], [ 0, '', 1, 2, 3 ] );
  var expected = [ "c", 4, 5 ];
  test.identical( got, expected );

  test.case = 'adds the certain values';
  var got = _.arrayMask( [ 'a', 'b', 'c', 4, 5, 'd' ], [ 3, 7, 0, '', 13, 33 ] );
  var expected = [ "a", 'b', 5, 'd' ];
  test.identical( got, expected );

  /**/


  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( [ 1, 2, 3, 4 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( [ 'a', 'b', 'c', 4, 5 ], [ 0, '', 1, 2, 3 ], 'redundant argument' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( 'wrong argument', 'wrong argument' );
  });

  test.case = 'both arrays are empty';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( [  ], [  ] );
  });

  test.case = 'length of the first array is not equal to the second array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( [ 1, 2, 3 ], [ undefined, null, 0, '' ] );
  });

  test.case = 'length of the second array is not equal to the first array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayMask( [ 1, 2, 3, 4 ], [ undefined, null, 0 ] );
  });

}

//

function longUnduplicate( test )
{

  /* */

  test.case = 'dst=empty, two args';
  var dst = [];
  var src = undefined;
  var got = _.longUnduplicate( dst, src );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'dst=empty, single arg';
  var dst = [];
  var src = undefined;
  var got = _.longUnduplicate( dst );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'src=empty';
  var dst = null;
  var src = [];
  var got = _.longUnduplicate( dst, src );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== dst );
  test.is( got !== src );

  test.case = 'dst=empty, src=empty';
  var dst = [];
  var src = [];
  var got = _.longUnduplicate( dst, src );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  /* */

  test.case = 'dst=array';
  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
  var src = undefined;
  var got = _.longUnduplicate( dst, src );
  var expected = [ 1, 2, 3, 4, 5 ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'src=array';
  var dst = null;
  var src = [ 2, 2, 4, 4, 6, 6 ];
  var got = _.longUnduplicate( dst, src );
  var expected = [ 2, 4, 6 ];
  test.identical( got, expected );
  test.is( got !== dst );
  test.is( got !== src );

  test.case = 'dst=array, src=array';
  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
  var src = [ 2, 2, 4, 4, 6, 6 ];
  var got = _.longUnduplicate( dst, src );
  var expected = [ 1, 2, 3, 4, 5, 6 ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  /* */

  test.case = 'dst=F32x';
  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
  var src = undefined;
  var got = _.longUnduplicate( dst, src );
  var expected = [ 1, 2, 3, 4, 5 ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'src=F32x';
  var dst = null;
  var src = new F32x([ 2, 2, 4, 4, 6, 6 ]);
  var got = _.longUnduplicate( dst, src );
  var expected = new F32x([ 2, 4, 6 ]);
  test.identical( got, expected );
  test.is( got !== dst );
  test.is( got !== src );
  test.is( got instanceof F32x );

  test.case = 'dst=F32x, src=F32x';
  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
  var src = new F32x([ 2, 2, 4, 4, 6, 6 ]);
  var got = _.longUnduplicate( dst, src );
  var expected = [ 1, 2, 3, 4, 5, 6 ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  /* */

  test.case = 'dst=array, with evaluator';
  var dst = null;
  var src = [ { v : 2 }, { v : 2 }, { v : 4 }, { v : 4 }, { v : 6 }, { v : 6 } ];
  var got = _.longUnduplicate( dst, src, evaluator );
  var expected = [ { v : 2 }, { v : 4 }, { v : 6 } ];
  test.identical( got, expected );
  test.is( got !== dst );
  test.is( got !== src );

  test.case = 'dst=array, src=undefined, with evaluator';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = undefined;
  var got = _.longUnduplicate( dst, src, evaluator );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'dst=array, src=undefined, with evaluator in 2th argument';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = undefined;
  var got = _.longUnduplicate( dst, evaluator );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'dst=array, src=array, with evaluator';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = [ { v : 2 }, { v : 2 }, { v : 4 }, { v : 4 }, { v : 6 }, { v : 6 } ];
  var got = _.longUnduplicate( dst, src, evaluator );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 6 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  /* */

  test.case = 'dst=array, with equalizer';
  var dst = null;
  var src = [ { v : 2 }, { v : 2 }, { v : 4 }, { v : 4 }, { v : 6 }, { v : 6 } ];
  var got = _.longUnduplicate( dst, src, equalizer );
  var expected = [ { v : 2 }, { v : 4 }, { v : 6 } ];
  test.identical( got, expected );
  test.is( got !== dst );
  test.is( got !== src );

  test.case = 'dst=array, src=undefined, with equalizer';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = undefined;
  var got = _.longUnduplicate( dst, src, equalizer );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'dst=array, src=undefined, with equalizer in 2th argument';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = undefined;
  var got = _.longUnduplicate( dst, equalizer );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  test.case = 'dst=array, src=array, with equalizer';
  var dst = [ { v : 1 }, { v : 1 }, { v : 2 }, { v : 3 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 5 } ];
  var src = [ { v : 2 }, { v : 2 }, { v : 4 }, { v : 4 }, { v : 6 }, { v : 6 } ];
  var got = _.longUnduplicate( dst, src, equalizer );
  var expected = [ { v : 1 }, { v : 2 }, { v : 3 }, { v : 4 }, { v : 5 }, { v : 6 } ];
  test.identical( got, expected );
  test.is( got === dst );
  test.is( got !== src );

  /* */

  function evaluator( e )
  {
    return e.v;
  }

  function equalizer( e1, e2 )
  {
    return e1.v === e2.v;
  }

}

//

function arraySelect( test )
{

  test.case = 'nothing';
  var got = _.arraySelect( [  ], [  ] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'certain elements';
  var got = _.arraySelect( [ 1, 2, 3, 4, 5 ], [ 2, 3, 4 ] );
  var expected = [ 3, 4, 5 ];
  test.identical( got, expected );

  test.case = 'array of undefined';
  var got = _.arraySelect( [ 1, 2, 3 ], [ 4, 5 ] );
  var expected = [ undefined, undefined ];
  test.identical( got, expected );

  test.case = 'using object';
  var src = [ 1, 1, 2, 2, 3, 3 ];
  var indices = { atomsPerElement : 2, indices : [ 0, 1, 2 ] }
  var got = _.arraySelect( src,indices );
  var expected = [ 1, 1, 2, 2, 3, 3 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySelect();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySelect( [ 1, 2, 3 ] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySelect('wrong argument', 'wrong argument');
  });

  test.case = 'arguments are not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.arraySelect( 1, 2, 3, 4, 5 );
  });

};

//

function arraySwap( test )
{

  test.case = 'an element';
  var got = _.arraySwap( [ 7 ], 0, 0 );
  var expected = [ 7 ];
  test.identical( got, expected );

  test.case = 'reverses first index and last index';
  var got = _.arraySwap( [ 1, 2, 3, 4, 5 ], 0, 4  );
  var expected = [ 5, 2, 3, 4, 1 ];
  test.identical( got, expected );

  test.case = 'swaps first two';
  var got = _.arraySwap( [ 1, 2, 3 ] );
  var expected = [ 2,1,3 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySwap();
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySwap('wrong argument', 'wrong argument', 'wrong argument');
  });

  test.case = 'arguments[1] and arguments[2] are out of bound';
  test.shouldThrowErrorSync( function()
  {
    _.arraySwap( [ 1, 2, 3, 4, 5 ], -1, -4 );
  });

  test.case = 'first five arguments are not wrapped into array';
  test.shouldThrowErrorSync( function()
  {
    _.arraySwap( 1, 2, 3, 4, 5, 0, 4 );
  });

};

//

function arrayCutin( test )
{

  debugger;

  test.case = 'range as single number';

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, 2 );
  var expected = [ 3 ];
  test.identical( got, expected );
  test.identical( dst, [ 1, 2, 4 ] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, -1 );
  var expected = [];
  test.identical( got, expected );
  test.identical( dst, [ 1, 2, 3, 4 ] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, 0, [ 0 ] );
  var expected = [ 1 ];
  test.identical( got, expected );
  test.identical( dst, [ 0, 2, 3, 4 ] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, 0, [] );
  var expected = [ 1 ];
  test.identical( got, expected );
  test.identical( dst, [ 2, 3, 4 ] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, [ 0 ], [] );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.identical( dst, [] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var expected = dst.slice().splice( 1 );
  var got = _.arrayCutin( dst, [ 1 ], [ 5 ] );
  test.identical( got, expected );
  test.identical( dst, [ 1, 5 ] )

  /* */

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayCutin( dst, [ undefined, 1 ], [ 5 ] );
  test.identical( got, [ 1 ] );
  test.identical( dst, [ 5, 2, 3, 4 ] );

  //

  test.case = 'empth';
  var dst = [];
  var cut = _.arrayCutin( [],[],[] );
  test.identical( cut, [] );
  test.identical( dst, [] );

  /* */

  test.case = 'remove two elements';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 1, 3 ], [] );
  var expected = [ 1, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 2, 3 ];
  test.identical( cut, expected );

  /* */

  test.case = 'remove two elements and incut three';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 1, 3 ], [ 11, 22, 33 ] );
  var expected = [ 1, 11, 22, 33, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 2, 3 ];
  test.identical( cut, expected );

  /* */

  test.case = 'pass only begin of range';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 1 ], [ 11, 22, 33 ] );
  var expected = [ 1, 11, 22, 33 ];
  test.identical( dst, expected );
  var expected = [ 2, 3, 4, 5 ];
  test.identical( cut, expected );

  /* */

  test.case = 'pass empty range';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [], [ 11, 22, 33 ] );
  var expected = [ 11, 22, 33 ];
  test.identical( dst, expected );
  var expected = [ 1, 2, 3, 4, 5 ];
  test.identical( cut, expected );

  /* */

  test.case = 'pass number instead of range';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, 1, [ 11, 22, 33 ] );
  var expected = [ 1, 11, 22, 33, 3, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 2 ];
  test.identical( cut, expected );

  /* */

  test.case = 'no source, number istead of range';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, 1 );
  var expected = [ 1, 3, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 2 ];
  test.identical( cut, expected );

  /* */

  test.case = 'no source';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 1, 3 ] );
  var expected = [ 1, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 2, 3 ];
  test.identical( cut, expected );

  /* */

  test.case = 'out of bound, begin';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ -10,2 ],[ 11, 22, 33 ] );
  var expected = [ 11, 22, 33, 3, 4, 5 ];
  test.identical( dst, expected );
  var expected = [ 1, 2 ];
  test.identical( cut, expected );

  /* */

  test.case = 'out of bound, end';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 3,10 ],[ 11, 22, 33 ] );
  var expected = [ 1, 2, 3, 11, 22, 33 ];
  test.identical( dst, expected );
  var expected = [ 4, 5 ];
  test.identical( cut, expected );

  /* */

  test.case = 'out of bound, both sides';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ -10,10 ],[ 11, 22, 33 ] );
  var expected = [ 11, 22, 33 ];
  test.identical( dst, expected );
  var expected = [ 1, 2, 3, 4, 5 ];
  test.identical( cut, expected );

  /* */

  test.case = 'negative, both sides';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ -1, -1 ],[ 11, 22, 33 ] );
  var expected = dst;
  test.identical( dst, expected );
  var expected = [ ];
  test.identical( cut, expected );

  /* */

  test.case = 'zero, both sides';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 0, 0 ],[ 11, 22, 33 ] );
  var expected = dst;
  test.identical( dst, expected );
  var expected = [ ];
  test.identical( cut, expected );

  /* first > last */

  test.case = 'first > last';
  var dst = [ 1, 2, 3, 4, 5 ];
  var cut = _.arrayCutin( dst, [ 9, 0 ],[ 11, 22, 33 ] );
  var expected = dst;
  test.identical( dst, expected );
  var expected = [ ];
  test.identical( cut, expected );

  /* Buffers */

  var list =
  [
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    Float32Array,
    Float64Array,
    ArrayBuffer
  ];

  if( Config.platform === 'nodejs' )
  list.push( Buffer );

  for( var i = 0; i < list.length; i++ )
  {
    test.case = 'buffers: ' + list[ i ].name;

    var array = new list[ i ]( 5 );
    for( var j = 0; j < 5; j++ )
    array[ j ] = j + 1;

    //array [ 1,2,3,4,5 ]

    /* simple cut */

    var got = _.arrayCutin( array, 0 );
    var expected = [ 2, 3, 4, 5 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* simple cut, add one element to begin */

    var got = _.arrayCutin( array, 0, [ 9 ] );
    var expected = [ 9, 2, 3, 4, 5 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* simple cut */

    var got = _.arrayCutin( array, 4 );
    var expected = [ 1, 2, 3, 4 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* range */

    var got = _.arrayCutin( array, [ 0, 1 ] );
    var expected = [ 2, 3, 4, 5 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* range */

    var got = _.arrayCutin( array, [ 2, 5 ] );
    var expected = [ 1, 2 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* single, add new elements to end */

    var got = _.arrayCutin( array, 4, [ 6, 7 ] );
    var expected = [ 1, 2, 3, 4, 6, 7 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* range, add new elements to end */

    var got = _.arrayCutin( array, [ 4, 5 ], [ 6, 7 ] );
    var expected = [ 1, 2, 3, 4, 6, 7 ];
    var expected = _.arrayCutin( new list[ i ]( 1 ), 0, expected );
    test.identical( got,expected );

    /* out of range, returns original */

    var got = _.arrayCutin( array, 10, [ 6, 7 ] );
    var expected = array;
    test.identical( got,expected );

    /* remove all, last index is out of range */

    var got = _.arrayCutin( array, [ 0, 99 ] );
    var expected = new list[ i ]( 0 );
    test.identical( got.byteLength,expected.byteLength );

    /* remove all and fill with new values */

    var got = _.arrayCutin( array, [ 0, 99 ], [ 1, 2, 3, 4, 5 ] );
    var expected = array;
    test.identical( got,expected );

    /* negative */

    var got = _.arrayCutin( array, [ 0, -1 ] );
    var expected = array;
    test.identical( got,expected );

    /* negative */

    var got = _.arrayCutin( array, [ -1, -1 ] );
    var expected = array;
    test.identical( got,expected );

    /* zero, returns original */

    var got = _.arrayCutin( array, [ 0, 0 ], [ 1 ] );
    var expected = array;
    test.identical( got,expected );

    /* empty */

    var got = _.arrayCutin( array, [], [] );
    var got = _.definedIs( got.length ) ? got.length : got.byteLength;
    test.identical( got, 0 );

  }

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCutin();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCutin( [ 1, 2, 3, 4, 5 ] );
  });

  test.case = 'redundant argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCutin( [ 1, 'a', 'b', 'c', 5 ], [ 2, 3, 4 ], 1, 3, 'redundant argument' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCutin( 'wrong argument', 'wrong argument', 'wrong argument', 'wrong argument' );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCutin( [],[ 'x' ],3 );
  });
};

//

function arrayPut( test )
{

  test.case = 'adds after second element';
  var got = _.arrayPut( [ 1, 2, 3, 4, 5, 6, 9 ], 2, 'str', true, [ 7, 8 ] );
  var expected = [ 1, 2, 'str', true, 7, 8, 9 ];
  test.identical( got, expected );

  test.case = 'adds at the beginning';
  var got = _.arrayPut( [ 1, 2, 3, 4, 5, 6, 9 ], 0, 'str', true, [ 7, 8 ] );
  var expected = [ 'str', true, 7, 8, 5, 6, 9 ];
  test.identical( got, expected );

  test.case = 'add to end';
  var got = _.arrayPut( [ 1,2,3 ], 3, 4, 5, 6 );
  var expected = [ 1, 2, 3, 4, 5, 6 ];
  test.identical( got, expected );

  test.case = 'offset is negative';
  var got = _.arrayPut( [ 1,2,3 ], -1, 4, 5, 6 );
  var expected = [ 5, 6, 3 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPut();
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPut( 'wrong argument', 'wrong argument', 'str', true, [ 7, 8 ] );
  });

};

//

function arrayFillTimes( test )
{
  test.case = 'empty array';
  var got = _.arrayFillTimes( [], 1 );
  var expected = [ 0 ];
  test.identical( got, expected );

  test.case = 'times is negative, times = length + times';
  var got = _.arrayFillTimes( [ 0, 0, 0 ], -1, 1 );
  var expected = [ 1, 1, 0 ];
  test.identical( got, expected );

  test.case = 'times is negative';
  var got = _.arrayFillTimes( [ 0, 0 ], -2, 1 );
  var expected = [ 0, 0 ];
  test.identical( got, expected );

  test.case = 'empty array, value passed';
  var got = _.arrayFillTimes( [], 1, 1 );
  var expected = [ 1 ];
  test.identical( got, expected );

  test.case = 'empty array, value is an array';
  var got = _.arrayFillTimes( [], 1, [ 1, 2, 3 ] );
  var expected = [ [ 1, 2, 3 ]];
  test.identical( got, expected );

  test.case = 'times > array.length';
  var got = _.arrayFillTimes( [ 0 ], 3, 1 );
  var expected = [ 1, 1, 1 ];
  test.identical( got, expected );

  test.case = 'times < array.length';
  var got = _.arrayFillTimes( [ 0, 0, 0 ], 1, 1 );
  var expected = [ 1, 0, 0 ];
  test.identical( got, expected );

  test.case = 'TypedArray';
  var arr = new Uint16Array();
  var got = _.arrayFillTimes( arr, 3, 1 );
  var expected = new Uint16Array( [ 1, 1, 1 ] );
  test.identical( got, expected );

  test.case = 'ArrayLike without fill routine';
  var arr = (() => arguments )( 1 );
  var got = _.arrayFillTimes( arr, 3, 1 );
  var expected = [ 1, 1, 1 ];
  test.identical( got, expected );

  test.case = 'no fill routine, times is negative';
  var arr = [ 1, 1, 1 ];
  arr.fill = null;
  var got = _.arrayFillTimes( arr, -1, 3 );
  var expected = [ 3, 3, 1 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillTimes();

  });

  test.case = 'zero';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillTimes( 0 );
  });

  test.case = 'only one argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillTimes( [  ] );
  });

  test.case = 'wrong argument type';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillTimes( new ArrayBuffer(), 1 );
  });

};

function arrayFillWhole( test )
{
  test.case = 'empty array';
  var got = _.arrayFillWhole( [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty array, value passed';
  var got = _.arrayFillWhole( [], 1 );
  var expected = [];
  test.identical( got, expected );

  test.case = 'array with elements';
  var got = _.arrayFillWhole( [ 1, 1, 1 ] );
  var expected = [ 0, 0, 0 ];
  test.identical( got, expected );

  test.case = 'array with elements';
  var got = _.arrayFillWhole( [ 1, 1, 1 ], 5 );
  var expected = [ 5, 5, 5 ];
  test.identical( got, expected );

  test.case = 'array with elements';
  var arr = [];
  arr.length = 3;
  var got = _.arrayFillWhole( arr, 5 );
  var expected = [ 5, 5, 5 ];
  test.identical( got, expected );

  test.case = 'TypedArray';
  var arr = new Uint16Array( 3 );
  var got = _.arrayFillWhole( arr );
  var expected = new Uint16Array( [ 0, 0, 0 ] );
  test.identical( got, expected );

  test.case = 'no fill routine';
  var arr = [ 1, 1, 1 ];
  arr.fill = null;
  var got = _.arrayFillWhole( arr, 2 );
  var expected = [ 2, 2, 2 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillWhole();

  });

  test.case = 'wrong argument type';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFillTimes( new ArrayBuffer(), 1 );
  });

};

//

function arraySupplement( test )
{

  test.case = 'nothing';
  var got = _.arraySupplement( [  ] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'only numbers';
  var got = _.arraySupplement( [ 4, 5 ], [ 1, 2, 3 ], [ 6, 7, 8, true, 9 ], [ 'a', 'b', 33, 13, 'e', 7 ] );
  var expected = [ 4, 5, 33, 13, 9, 7 ];
  test.identical( got, expected );

  test.case = 'only numbers and undefined';
  var got = _.arraySupplement( [ 4, 5 ], [ 1, 2, 3 ], [ 6, 7, true, 9 ], [ 'a', 'b', 33, 13, 'e', 7 ] );
  var expected = [ 4, 5, 33, 13, undefined, 7 ];
  test.identical( got, expected );

  test.case = 'only numbers';
  var got = _.arraySupplement( [ 'a', 'b' ], [ 1, 2, 3 ], [ 6, 7, 8, true, 9 ], [ 'a', 'b', 33, 13, 'e', 7 ] );
  var expected = [ 6, 7, 33, 13, 9, 7 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySupplement();
  });

  test.case = 'arguments are wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arraySupplement( 'wrong argument', 'wrong arguments' );
  });

};

//

function arrayExtendScreening( test )
{

  test.case = 'returns an empty array';
  var got = _.arrayExtendScreening( [  ], [  ], [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'returns the corresponding values by indexes of the first argument';
  var got = _.arrayExtendScreening( [ 1, 2, 3 ], [  ], [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ] );
  var expected = [ 5, 6, 2 ];
  test.identical( got, expected );

  test.case = 'creates a new array and returns the corresponding values by indexes of the first argument';
  var got = _.arrayExtendScreening( [ 1, 2, 3 ], null, [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ] );
  var expected = [ 5, 6, 2 ];
  test.identical( got, expected );

  test.case = 'returns the corresponding values by indexes of the first argument';
  var got = _.arrayExtendScreening( [ 1, 2, 3 ], [ 3, 'abc', 7, 13 ], [ 0, 1, 2 ], [ 3, 4 ], [ 'a', 6 ] );
  var expected = [ 'a', 6, 2, 13 ];
  test.identical( got, expected );

  test.case = 'returns the second argument';
  var got = _.arrayExtendScreening( [  ], [ 3, 'abc', 7, 13 ], [ 0, 1, 2 ], [ 3, 4 ], [ 'a', 6 ] );
  var expected = [ 3, 'abc', 7, 13 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayExtendScreening();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayExtendScreening( [ 1, 2, 3, 'abc', 13 ] );
  });

  test.case = 'next arguments are wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayExtendScreening( [ 1, 2, 3 ], [ 3, 'abc', 7, 13 ], [ 3, 7 ], 'wrong arguments' );
  });

  test.case = 'arguments are wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayExtendScreening( 'wrong argument', 'wrong argument', 'wrong arguments' );
  });

};

//

function arrayCompare( test )
{

  test.case = 'empty arrays';
  var got = _.arrayCompare( [  ], [  ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'first array is empty';
  var got = _.arrayCompare( [  ], [ 1, 2 ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'length of the first array is less than second';
  var got = _.arrayCompare( [ 4 ], [ 1, 2 ] );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'arrays are equal';
  var got = _.arrayCompare( [ 1, 5 ], [ 1, 5 ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'a difference';
  var got = _.arrayCompare( [ 1, 5 ], [ 1, 2 ] );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'a negative difference';
  var got = _.arrayCompare( [ 1, 5 ], [ 1, 6 ] );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'array-like arguments';
  var src1 = function src1() {
    return arguments;
  }( 1, 5 );
  var src2 = function src2() {
    return arguments;
  }( 1, 2 );
  var got = _.arrayCompare( src1, src2 );
  var expected = 3;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare( [ 1, 5 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare( [ 1, 5 ], [ 1, 2 ], 'redundant argument' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare( 'wrong argument', 'wrong argument' );
  });

  test.case = 'second array is empty';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare( [ 1, 5 ], [  ] );
  });

  test.case = 'length of the second array is less than first';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCompare( [ 1, 5 ], [ 1 ] );
  });

};

//

function arraysAreIdentical( test )
{

  test.case = 'empty arrays';
  var got = _.arraysAreIdentical( [  ], [  ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'arrays are equal';
  var got = _.arraysAreIdentical( [ 1, 2, 3 ], [ 1, 2, 3 ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'array-like arguments';
  function src1() {
    return arguments;
  };
  function src2() {
    return arguments;
  };
  var got = _.arraysAreIdentical( src1( 3, 7, 33 ), src2( 3, 7, 13 ) );
  var expected = false;
  test.identical( got, expected );

  test.case = 'arrays are not equal';
  var got = _.arraysAreIdentical( [ 1, 2, 3, 'Hi!' ], [ 1, 2, 3, 'Hello there!' ] );
  var expected = false;
  test.identical( got, expected );

  test.case = 'arrays length are not equal';
  var got = _.arraysAreIdentical( [ 1, 2, 3 ], [ 1, 2 ] );
  var expected = false;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraysAreIdentical();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraysAreIdentical( [ 1, 2, 3 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraysAreIdentical( [ 1, 2, 3 ], [ 1, 2 ], 'redundant argument' );
  });

};

//

function arrayHasAny( test )
{

  test.case = 'false';
  var got = _.arrayHasAny( [  ] );
  var expected = false;
  test.identical( got, expected );

  test.case = 'false';
  var got = _.arrayHasAny( [  ], false, 7 );
  var expected = false;
  test.identical( got, expected );

  test.case = 'true';
  var got = _.arrayHasAny( [ 5, 'str', 42, false ], false, 7 );
  var expected = true;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayHasAny();
  });

  test.case = 'first argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayHasAny( 'wrong argument', false, 7 );
  });

};

//

function arrayLeftIndex( test )
{

  test.case = 'nothing';
  var got = _.arrayLeftIndex( [  ], 3 );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'second index';
  var got = _.arrayLeftIndex( [ 1, 2, 3 ], 3 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'zero index';
  var got = _.arrayLeftIndex( [ 1, 2, 3 ], 3, function( el, ins ) { return el < ins } );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'nothing';
  var got = _.arrayLeftIndex( [ 1, 2, 3 ], 4 );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'nothing';
  var got = _.arrayLeftIndex( [ 1, 2, 3 ], 3, function( el, ins ) { return el > ins } );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'array-like arguments';
  function arr()
  {
    return arguments;
  }
  var _arr = arr( 3, 7, 13 );
  var got = _.arrayLeftIndex( _arr, 13 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayLeftIndex( [ 0,0,0,0 ], 0, 0 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayLeftIndex( [ 0,0,0,0 ], 0, 3 );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayLeftIndex( [ 0,0,0,0 ], 0, -1 );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'fromIndex + evaluator';
  var got = _.arrayLeftIndex( [ 1,1,2,2,3,3 ], 3, 2, function( el, ins ) { return el < ins } );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'fromIndex + evaluator x2';
  var evaluator1 = function( el ) { return el + 1 }
  var evaluator2 = function( ins ) { return ins * 2 }
  var got = _.arrayLeftIndex( [ 6,6,5,5 ], 3, 2, evaluator1, evaluator2 );
  var expected = 2;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'one argument';
  test.shouldThrowErrorSync( function()
  {
    var got = _.arrayLeftIndex( [ 1, 2, 3 ] );
  });

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayLeftIndex();
  });

  test.case = 'third argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayLeftIndex( [ 1, 2, 3 ], 2, 'wrong argument' );
  });

};

//

function arrayRightIndex( test )
{

  test.case = 'nothing';
  var got = _.arrayRightIndex( [  ], 3 );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'second index';
  var got = _.arrayRightIndex( [ 1, 2, 3 ], 3 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'zero index';
  var got = _.arrayRightIndex( [ 1, 2, 3 ], 3, function( el, ins ) { return el < ins } );
  var expected = 1;
  test.identical( got, expected );

  test.case = 'nothing';
  var got = _.arrayRightIndex( [ 1, 2, 3 ], 4 );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'nothing';
  var got = _.arrayRightIndex( [ 1, 2, 3 ], 3, function( el, ins ) { return el > ins } );
  var expected = -1;
  test.identical( got, expected );

  test.case = 'array-like arguments';
  function arr()
  {
    return arguments;
  }
  var _arr = arr( 3, 7, 13 );
  var got = _.arrayRightIndex( _arr, 13 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'fifth index';
  var got = _.arrayRightIndex( 'abcdef', 'e', function( el, ins ) { return el > ins } );
  var expected = 5;
  test.identical( got, expected );

  test.case = 'third index';
  var got = _.arrayRightIndex( 'abcdef', 'd' );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'second index';
  var got = _.arrayRightIndex( 'abcdef', 'c', function( el ) { return el; } );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayRightIndex( [ 0,0,0,0 ], 0, 0 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayRightIndex( [ 0,0,0,0 ], 0, 3 );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayRightIndex( [ 0,1,1,0 ], 0, 1 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'fromIndex';
  var got = _.arrayRightIndex( [ 0,1,1,0 ], 1, 2 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'fromIndex + evaluator';
  var got = _.arrayRightIndex( [ 1,1,2,2,3,3 ], 3, 4, function( el, ins ) { return el < ins } );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'fromIndex + evaluator x2';
  var evaluator1 = function( el ) { return el + 1 }
  var evaluator2 = function( ins ) { return ins * 2 }
  var got = _.arrayRightIndex( [ 6,6,5,5 ], 3, 2, evaluator1, evaluator2 );
  var expected = 2;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'one argument';
  test.shouldThrowErrorSync( function()
  {
    var got = _.arrayRightIndex( [ 1, 2, 3 ] );
  });

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRightIndex();
  });

  test.case = 'third argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRightIndex( [ 1, 2, 3 ], 2, 'wrong argument' );
  });

};

//

function arrayLeft( test )
{

  test.case = 'returns an object';
  var got = _.arrayLeft( [ 1, 2, 3, 4, 5 ], 3 );
  var expected = { index : 2, element : 3 };
  test.identical( got, expected );

  test.case = 'returns an object';
  var got = _.arrayLeft( [ 1, 2, false, 'str', 5 ], 'str', function( a, b ) { return a === b } );
  var expected = { index : 3, element : 'str' };
  test.identical( got, expected );

  test.case = 'returns an object';
  var got = _.arrayLeft( [ 1, 2, false, 'str', 5 ], 5, function( a ) { return a; } );
  var expected = { index : 4, element : 5 };
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayLeft();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayLeft( [] );
  });

  test.case = 'third argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayLeft( [ 1, 2, 3 ], 2, 'wrong argument' );
  });

};

//

function arrayCountElement( test )
{

  test.case = 'Empty array';
  var got = _.arrayCountElement( [  ], 3 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Undefined element';
  var got = _.arrayCountElement( [  ], undefined );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Null element';
  var got = _.arrayCountElement( [  ], null );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'No match';
  var got = _.arrayCountElement( [ 1, 2, 'str', 10, 10, true ], 'hi' );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'One match - bool';
  var got = _.arrayCountElement( [ 1, 2, 'str', 10, 10, true ], true );
  var expected = 1;
  test.identical( got, expected );

  test.case = 'Two matching - number';
  var got = _.arrayCountElement( [ 1, 2, 'str', 10, 10, true ], 10 );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'Three matching - string';
  var got = _.arrayCountElement( [ 'str', 10, 'str', 10, true, 'str' ], 'str' );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'longIs';
  var src = [ 1, 2, 3 ];
  src[ 'a' ] = 1;
  var got = _.arrayCountElement( src, 1 );
  var expected = 1;
  test.identical( got, expected );

  // Evaluators

  test.case = 'Without evaluators - no match';
  var got = _.arrayCountElement( [ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ] ], 0 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'With evaluators - 1 matches';
  var got = _.arrayCountElement( [ [ 1, 3 ], [ 2, 2 ], [ 3, 1 ] ], 1, ( e ) => e[ 1 ], ( e ) => e + 2 );
  var expected = 1;
  test.identical( got, expected );

  test.case = 'With evaluators - 4 matches';
  var got = _.arrayCountElement( [ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ] ], 0, ( e ) => e[ 0 ], ( e ) => e );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'Without equalizer - two matches';
  var got = _.arrayCountElement( [ true, false, true, false ], true );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'With equalizer - 4 matches';
  var got = _.arrayCountElement( [ true, false, true, false ], true, ( a, b ) => _.typeOf( a ) === _.typeOf( b ) );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'With equalizer - 4 matches';
  var got = _.arrayCountElement( [ 1, 2, 'str', 10, 10, true ], 10, ( a, b ) => _.typeOf( a ) === _.typeOf( b ) );
  var expected = 4;
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 1, 2, 3, 'abc', 13 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 1, 2, 3, true ], true, 'redundant argument' );
  });

  test.case = 'first argument is wrong - undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( undefined, true );
  });

  test.case = 'first argument is wrong - null';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( null, true );
  });

  test.case = 'first argument is wrong - string';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( 'wrong argument', true );
  });

  test.case = 'first argument is wrong - number';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( 3, true );
  });

  test.case = 'third argument is wrong - have no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 3, 4, 5, true ], 3, () => 3 );
  });

  test.case = 'third argument is wrong - have three arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 3, 4, 5, true ], 3, ( a, b, c ) => _.typeOf( a ) === _.typeOf( b ) === _.typeOf( c ) );
  });

  test.case = 'fourth element is unnacessary';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 3, 4, 5, true ], 3, ( a, b ) => _.typeOf( a ) === _.typeOf( b ), ( e ) => e );
  });

  test.case = 'fourth argument is wrong - have no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 3, 4, 5, true ], 3, ( a, b ) => _.typeOf( a ) === _.typeOf( b ), () => e );
  });

  test.case = 'fourth argument is wrong - have two arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountElement( [ 3, 4, 5, true ], 3, ( a, b ) => _.typeOf( a ) === _.typeOf( b ), ( a, b ) => e );
  });

};

//

function arrayCountTotal( test )
{
  // Zero

  test.case = 'Empty array';
  var got = _.arrayCountTotal( [] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'null';
  var got = _.arrayCountTotal( [ null ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'several nulls';
  var got = _.arrayCountTotal( [ null, null, null ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Zero';
  var got = _.arrayCountTotal( [ 0 ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Several zeros';
  var got = _.arrayCountTotal( [ 0, 0, 0, 0 ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Mix of nulls and zeros';
  var got = _.arrayCountTotal( [ 0, null, null, 0, 0, 0, null ] );
  var expected = 0;
  test.identical( got, expected );

  // Array elements are numbers

  test.case = 'Sum of no repeated elements';
  var got = _.arrayCountTotal( [ 1, 3, 5, 7, 9 ] );
  var expected = 25;
  test.identical( got, expected );

  test.case = 'Sum of repeated elements';
  var got = _.arrayCountTotal( [ 2, 2, 4, 4, 6, 6 ] );
  var expected = 24;
  test.identical( got, expected );

  test.case = 'Sum with negative numbers';
  var got = _.arrayCountTotal( [ 2, -3, 4, -4, 6, -7, 8 ] );
  var expected = 6;
  test.identical( got, expected );

  test.case = 'Negative result';
  var got = _.arrayCountTotal( [ 2, -3, 4, -4, 6, -7 ] );
  var expected = -2;
  test.identical( got, expected );

  test.case = 'Zero';
  var got = _.arrayCountTotal( [ 2, -2, 4, -4, 6, -6 ] );
  var expected = 0;
  test.identical( got, expected );

  // Array elements are booleans

  test.case = 'All true';
  var got = _.arrayCountTotal( [ true, true, true, true ] );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'All false';
  var got = _.arrayCountTotal( [ false, false, false, false, false ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'Mix of true and false';
  var got = _.arrayCountTotal( [ false, false, true, false, true, false, false, true ] );
  var expected = 3;
  test.identical( got, expected );

  // Array elements are numbers and booleans

  test.case = 'All true and numbers';
  var got = _.arrayCountTotal( [ true, 2, 1, true, true, 0, true ] );
  var expected = 7;
  test.identical( got, expected );

  test.case = 'All false and numbers';
  var got = _.arrayCountTotal( [ 1, false, 0, false, false, 4, 3, false, false ] );
  var expected = 8;
  test.identical( got, expected );

  test.case = 'Mix of true, false and numbers';
  var got = _.arrayCountTotal( [ false, false, 0, true, false, 10, true, false, false, true, 2 ] );
  var expected = 15;
  test.identical( got, expected );

  test.case = 'Mix of true, false, numbers and null';
  var got = _.arrayCountTotal( [ null, false, false, 0, true, null, false, 10, true, false, false, true, 2, null ] );
  var expected = 15;
  test.identical( got, expected );

  test.case = 'Mix of true, false, numbers and null - negative result';
  var got = _.arrayCountTotal( [ null, false, false, 0, true, null, -8, false, 10, true, false, -9, false, true, 2, null ] );
  var expected = -2;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal();
  });

  test.case = 'Too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( [ 1, 2, 3, 'abc', 13 ], [] );
  });

  test.case = 'srcArray is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( undefined );
  });

  test.case = 'srcArray is null';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( null  );
  });

  test.case = 'srcArray is string';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( 'wrong argument' );
  });

  test.case = 'srcArray is number';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( 3 );
  });

  test.case = 'srcArray contains strings';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( [ 1, '2', 3, 'a' ] );
  });

  test.case = 'srcArray contains arrays';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountTotal( [ 1, [ 2 ], 3, [ null ] ] );
  });

};

//

function arrayCountUnique( test )
{

  test.case = 'nothing';
  var got = _.arrayCountUnique( [  ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'nothing';
  var got = _.arrayCountUnique( [ 1, 2, 3, 4, 5 ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'three pairs';
  var got = _.arrayCountUnique( [ 1, 1, 2, 'abc', 'abc', 4, true, true ] );
  var expected = 3;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountUnique();
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountUnique( [ 1, 1, 2, 'abc', 'abc', 4, true, true ], function( e ) { return e }, 'redundant argument' );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountUnique( 'wrong argument', function( e ) { return e } );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayCountUnique( [ 1, 1, 2, 'abc', 'abc', 4, true, true ], 'wrong argument' );
  });

};

//

function arraySum( test )
{

  test.case = 'nothing';
  var got = _.arraySum( [  ] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'returns sum';
  var got = _.arraySum( [ 1, 2, 3, 4, 5 ] );
  var expected = 15;
  test.identical( got, expected );

  test.case = 'returns sum';
  var got = _.arraySum( [ true, false, 13, '33' ], function( e ) { return e * 2 } );
  var expected = 94;
  test.identical( got, expected );

  test.case = 'converts and returns sum';
  var got = _.arraySum( [ 1, 2, 3, 4, 5 ], function( e ) { return e * 2 } );
  var expected = 30;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySum();
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySum( [ 1, 2, 3, 4, 5 ], function( e ) { return e * 2 }, 'redundant argument' );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arraySum( 'wrong argument', function( e ) { return e / 2 } );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arraySum( [ 1, 2, 3, 4, 5 ], 'wrong argument' );
  });

};

// ---
// array transformation
// ---

function arrayPrepend( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrepend( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'dstArray is empty';

  var dst = [];
  var got = _.arrayPrepend( dst, null );
  test.identical( got, [ null ] );
  test.is( got === dst );

  var dst = [];
  var got = _.arrayPrepend( dst, undefined );
  test.identical( got, [ undefined ] );
  test.is( got === dst );

  var dst = [];
  var got = _.arrayPrepend( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [];
  var got = _.arrayPrepend( dst, '1' );
  test.identical( got, [ '1' ] );
  test.is( got === dst );

  var dst = [];
  var got = _.arrayPrepend( dst, [ 1, 2 ] );
  test.identical( got, [ [ 1, 2 ] ] );
  test.is( got === dst );

  test.case = 'simple';

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, 1 );
  test.identical( got, [ 1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrepend( dst, 3 );
  test.identical( got, [ 3, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, undefined );
  test.identical( got, [ undefined, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  test.case = 'Array prepended as an element';

  var dst = [ 1 ];
  var got = _.arrayPrepend( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  var dst = [ 'Choose an option' ];
  var got = _.arrayPrepend( dst, [ 1, 0, - 1 ] );
  test.identical( got, [ [ 1, 0, -1 ], 'Choose an option' ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepend();
  })

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepend( [], 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepend( 1, 1 );
  })
}

//

function arrayPrependOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependOnce( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependOnce( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnce( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnce( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependOnce( dst, 3 );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnce( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnce( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnce( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependOnce( dst, 4,( e ) => e.num, ( e ) => e );
  test.identical( got, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnce( 1, 1, 1 );
  })

}

//

function arrayPrependOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependOnceStrictly( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependOnceStrictly( dst , 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnceStrictly( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnceStrictly( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnceStrictly( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependOnceStrictly( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 2, 3, 3 ];
  var got = _.arrayPrependOnceStrictly( dst, 0 );
  test.identical( got, [ 0, 1, 2, 2, 3, 3 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependOnceStrictly( dst, 4, onEqualize );
  test.identical( got, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayPrependOnceStrictly( [ 1,2,3 ], 3 );
  });

  // test.case = 'onEqualize is not a routine';

  // test.shouldThrowErrorSync( function()
  // {
  //    _.arrayPrependOnceStrictly( [ 1,2,3 ], 3, 3 );
  // });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayPrependOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayPrepended( test )
{

  test.case = 'dstArray is empty';

  var dst = [];
  var got = _.arrayPrepended( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [];
  var got = _.arrayPrepended( dst, null );
  test.identical( dst, [ null ] );
  test.identical( got, 0 );

  var dst = [];
  var got = _.arrayPrepended( dst, undefined );
  test.identical( dst, [ undefined ] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [ 1 ];
  var got = _.arrayPrepended( dst, 1 );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrepended( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1,2,3 ];
  var got = _.arrayPrepended( dst, 3 );
  test.identical( dst, [ 3,1,2,3 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrepended( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrepended( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, 0 );

  test.case = 'Array prepended as an element';

  var dst = [ 1 ];
  var got = _.arrayPrepended( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, 0 );

  var dst = [ 'Choose an option' ];
  var got = _.arrayPrepended( dst, [ 1, 0, - 1 ] );
  test.identical( dst, [ [ 1, 0, -1 ], 'Choose an option' ] );
  test.identical( got, 0 );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepended();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepended( [], 1, 1 );
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrepended( 1, 1 );
  });
}

//

function arrayPrependedOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnce( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedOnce( dst, 3 );
  test.identical( dst, [ 1,2,3 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnce( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnce( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnce( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, 0 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependedOnce( dst, 4, onEqualize );
  test.identical( dst, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependedOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnce();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnce( 1, 1 );
  })
}

//

function arrayPrependedOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedOnceStrictly( dst , 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnceStrictly( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnceStrictly( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnceStrictly( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayPrependedOnceStrictly( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 2, 3, 3 ];
  var got = _.arrayPrependedOnceStrictly( dst, 0 );
  test.identical( dst, [ 0, 1, 2, 2, 3, 3 ] );
  test.identical( got, 0 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependedOnceStrictly( dst, 4, onEqualize );
  test.identical( dst, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayPrependedOnceStrictly( [ 1,2,3 ], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayPrependedOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayPrependElement( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependElement( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependElement( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElement( dst, 1 );
  test.identical( got, [ 1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElement( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependElement( dst, 3 );
  test.identical( got, [ 3,1,2,3 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElement( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElement( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElement( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElement();
  })

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElement( [], 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElement( 1, 1 );
  })
}

//

function arrayPrependElementOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependElementOnce( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [ ];
  var got = _.arrayPrependElementOnce( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnce( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnce( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnce( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnce( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  test.case = 'ins already in srcArray';

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnce( dst, 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependElementOnce( dst, 3 );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ true, false, true ];
  var got = _.arrayPrependElementOnce( dst, false );
  test.identical( got, [ true, false, true ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependElementOnce( dst, 4,( e ) => e.num, ( e ) => e );
  test.identical( got, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnce( 1, 1, 1 );
  })

}

//

function arrayPrependElementOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependElementOnceStrictly( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'dstArray is null';
  var got = _.arrayPrependElementOnceStrictly( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependElementOnceStrictly( dst , 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnceStrictly( dst, 2 );
  test.identical( got, [ 2, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnceStrictly( dst, '1' );
  test.identical( got, [ '1', 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnceStrictly( dst, -1 );
  test.identical( got, [ -1, 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayPrependElementOnceStrictly( dst, [ 1 ] );
  test.identical( got, [ [ 1 ], 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 2, 3, 3 ];
  var got = _.arrayPrependElementOnceStrictly( dst, 0 );
  test.identical( got, [ 0, 1, 2, 2, 3, 3 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependElementOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependElementOnceStrictly( dst, 4, onEqualize );
  test.identical( got, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependElementOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayPrependElementOnceStrictly( [ 1,2,3 ], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayPrependElementOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayPrependedElement( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedElement( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElement( dst, 1 );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElement( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 2 );

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedElement( dst, 3 );
  test.identical( dst, [ 3,1,2,3 ] );
  test.identical( got, 3 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElement( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, '1' );

  var dst = [ 1 ];
  var got = _.arrayPrependedElement( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElement( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, [ 1 ] );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElement();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElement( [], 1, 1 );
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElement( 1, 1 );
  });
}

//

function arrayPrependedElementOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedElementOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnce( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 2 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnce( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, '1' );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnce( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnce( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'ins already in dstArray';

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, undefined );

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedElementOnce( dst, 3 );
  test.identical( dst, [ 1,2,3 ] );
  test.identical( got, undefined );

  var dst = [ false, true, false, true ];
  var got = _.arrayPrependedElementOnce( dst, true );
  test.identical( dst, [ false, true, false, true ] );
  test.identical( got, undefined );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, { num : 4 } );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, undefined );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependedElementOnce( dst, 4, onEqualize );
  test.identical( dst, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 4 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayPrependedElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, undefined );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnce();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnce( 1, 1 );
  })
}

//

function arrayPrependedElementOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedElementOnceStrictly( dst , 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnceStrictly( dst, 2 );
  test.identical( dst, [ 2, 1 ] );
  test.identical( got, 2 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnceStrictly( dst, '1' );
  test.identical( dst, [ '1', 1 ] );
  test.identical( got, '1' );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnceStrictly( dst, -1 );
  test.identical( dst, [ -1, 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayPrependedElementOnceStrictly( dst, [ 1 ] );
  test.identical( dst, [ [ 1 ], 1 ] );
  test.identical( got, [ 1 ] );

  var dst = [ 1, 2, 2, 3, 3 ];
  var got = _.arrayPrependedElementOnceStrictly( dst, 0 );
  test.identical( dst, [ 0, 1, 2, 2, 3, 3 ] );
  test.identical( got, 0 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayPrependedElementOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 4 },{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, { num : 4 } );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayPrependedElementOnceStrictly( dst, 4, onEqualize );
  test.identical( dst, [ 4,{ num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 4 );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedElementOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayPrependedElementOnceStrictly( [ 1,2,3 ], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayPrependedElementOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayPrependArray( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependArray( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';
  var got = _.arrayPrependArray( [], [] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayPrependArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependArray( dst,[ 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependArray( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependArray( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [  'a', 1, [ { a : 1 } ], { b : 2 }, 1  ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArray( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayPrependArray( dst, [ undefined, 2 ] );
  test.identical( dst, [ undefined, 2, 1 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArray( [ 1, 2 ], 2 );
  });
};

//

function arrayPrependArrayOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependArrayOnce( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayPrependArrayOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependArrayOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', [ { a : 1 } ], { b : 2 }, 1  ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArrayOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependArrayOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayPrependArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });
}

//

function arrayPrependArrayOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependArrayOnceStrictly( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayPrependArrayOnceStrictly( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependArrayOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependArrayOnceStrictly( dst, [ 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayPrependArrayOnceStrictly( dst, [ 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3, 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArrayOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependArrayOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnceStrictly();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnceStrictly( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrayOnceStrictly( [ 1, 2 ], 2 );
  });

  test.case = 'one of elements is not unique';

  var dst = [ 1,2,3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArrayOnceStrictly( dst, [ 4, 5, 2 ] );
  })
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArrayOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayPrependArrayOnceStrictly( [ 1, 2 ], [ 2 ], 3 );
  // });
}

//

function arrayPrependedArray( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayPrependedArray( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedArray( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 2, 4, 5, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependedArray( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1, 1 ] );
  test.identical( got, 1 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArray( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 }, 1  ] );
  test.identical( got, 4 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArray( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependedArray( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArray( [ 1, 2 ], 2 );
  });

}

//

function arrayPrependedArrayOnce( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayPrependedArrayOnce( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependedArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArrayOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', [ { a : 1 } ], { b : 2 }, 1  ] );
  test.identical( got, 3 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArrayOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependedArrayOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayPrependedArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });
}

//

function arrayPrependedArrayOnceStrictly( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayPrependedArrayOnceStrictly( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArrayOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only if all elements are unique';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedArrayOnceStrictly( dst, [ 3.5, 4, 5 ] );
  test.identical( dst, [ 3.5, 4, 5, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependedArrayOnceStrictly( dst, [ 0 ] );
  test.identical( dst, [ 0, 1, 1, 1 ] );
  test.identical( got, 1 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArrayOnceStrictly( dst, [ 'a', 0, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', 0, [ { a : 1 } ], { b : 2 }, 1  ] );
  test.identical( got, 4 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArrayOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependedArrayOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnceStrictly();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnceStrictly( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnceStrictly( [ 1, 2 ], 2 );
  });

  test.case = 'One of args is not unique';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnceStrictly( [ 1, 1, 1 ], [ 1 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrayOnceStrictly( [ 1, 2, 3 ], [ 2, 4, 5 ] );
  });

}

// --
//arrayPrependElement*Arrays*
// --

function arrayPrependArrays( test )
{

  test.case = 'dstArray is null';
  var got = _.arrayPrependArrays( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';
  var got = _.arrayPrependArrays( [], [] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayPrependArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependArrays( dst,[ 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependArrays( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.is( got === dst );

  var dst = [];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4 ] ] ];
  var got = _.arrayPrependArrays( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 4 ] ] );
  test.is( got === dst );

  var dst = [];
  var insArray = [ 1, 2, 3 ]
  var got = _.arrayPrependArrays( dst, insArray );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.arrayPrependArrays( dst, insArray );
  test.identical( dst, [  'a', 1, { a : 1 }, { b : 2 }, 1  ] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got;
  var got = _.arrayPrependArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ undefined, 2, 1 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrays();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrays( 1, [ 2 ] );
  });

  test.case = 'second arg is no a ArrayLike';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrays( [], 2 );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArrays( [], [ 1 ], [ 2 ] );
  });

}

//

function arrayPrependArraysOnce( test )
{

  test.case = 'dstArray is null';
  var got = _.arrayPrependArraysOnce( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayPrependArraysOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'should keep sequence';

  var dst = [ 6 ];
  var src = [ [ 1,2 ], 3, [ 6,4,5,1,2,3 ] ];
  var srcCopy = [ [ 1,2 ], 3, [ 6,4,5,1,2,3 ] ];
  var got = _.arrayPrependArraysOnce( dst, src );
  test.identical( dst, [ 1, 2, 3, 4, 5, 6 ] );
  test.identical( src, srcCopy );
  test.is( got === dst );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependArraysOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', { a : 1 }, { b : 2 }, 1  ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4 ], 5 ] ];
  var got = _.arrayPrependArraysOnce( dst, insArray );
  test.identical( dst, [ [ 4 ], 5, 1, 2, 3, 4 ] );
  test.is( got === dst );

  var dst = [ 1, 3 ];
  var got = _.arrayPrependArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( got, [ 2, 1, 3 ] );
  test.identical( dst, got );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 1, 3 ];
  var got = _.arrayPrependArraysOnce( dst, [ 1, 2, 3 ], onEqualize );
  test.identical( got, [ 2, 1, 3 ] );
  test.identical( dst, got );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArraysOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependArraysOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnce();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnce( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnce( [], [ 1, 2, 3 ], {} );
  });

  test.case = 'second arg is no a ArrayLike';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnce( [], 2 );
  });

}

//

function arrayPrependArraysOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayPrependArraysOnceStrictly( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayPrependArraysOnceStrictly( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'should keep sequence';

  var dst = [ 6 ];
  var src = [ [ 1,2 ], 3, [ 4,5 ] ];
  var srcCopy = [ [ 1,2 ], 3, [ 4,5 ] ];
  var got = _.arrayPrependArraysOnceStrictly( dst, src );
  test.identical( dst, [ 1, 2, 3, 4, 5, 6 ] );
  test.identical( src, srcCopy );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ [ 'a' ],[ { a : 1 } ], { b : 2 } ];
  var got = _.arrayPrependArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 'a', { a : 1 }, { b : 2 }, 1  ] );
  test.is( got === dst );

  var dst = [ 0 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ];
  var got = _.arrayPrependArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 4, [ 5 ] ], 0 ] );
  test.is( got === dst );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 4,5 ];
  var got = _.arrayPrependArraysOnceStrictly( dst, [ 1, 2, 3 ], onEqualize )
  test.identical( got, [ 1, 2, 3, 4, 5 ] );
  test.identical( dst, got );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependArraysOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnceStrictly();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnceStrictly( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnceStrictly( [], [ 1,2,3 ], {} );
  });

  test.case = 'Same element in insArray and in dstArray';
  var dst = [ 1, 2, 3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArraysOnceStrictly( dst, [ 4, 2, 5 ] );
  })
  test.identical( dst, [ 4, 5, 1, 2, 3 ] )

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArraysOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependArraysOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is no a ArrayLike';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependArraysOnceStrictly( [], 2 );
  });
}

//

function arrayPrependedArrays( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayPrependedArrays( dst, [] );
  var expected = [ ];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayPrependedArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayPrependedArrays( dst,[ 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependedArrays( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.identical( got, 2 );

  var dst = [];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4 ], 5 ] ];
  var got = _.arrayPrependedArrays( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 4 ], 5 ] );
  test.identical( got, 5 );

  var dst = [];
  var got = _.arrayPrependedArrays( dst, [ 1, 2, 3 ]);
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArrays( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [  'a', 1, { a : 1 }, { b : 2 }, 1  ] );
  test.identical( got, 4 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got;
  var got = _.arrayPrependedArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ undefined, 2, 1 ] );
  test.identical( got, 2 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrays();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrays( 1, [ 2 ] );
  });

  test.case = 'second arg is no a ArrayLike';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrays( [], 2 );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArrays( [], [ 1 ], [ 2 ] );
  });

}

//

function arrayPrependedArraysOnce( test )
{

  test.case = 'nothing';

  var dst = [];
  var got = _.arrayPrependedArraysOnce( dst, [] );
  var expected = [];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'should keep sequence';

  var dst = [ 6 ];
  var src = [ [ 1,2 ], 3, [ 6,4,5,1,2,3 ] ];
  var srcCopy = [ [ 1,2 ], 3, [ 6,4,5,1,2,3 ] ];
  var got = _.arrayPrependedArraysOnce( dst, src );
  test.identical( dst, [ 1, 2, 3, 4, 5, 6 ] );
  test.identical( src, srcCopy );
  test.identical( got, 5 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayPrependedArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArraysOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', { a : 1 }, { b : 2 }, 1  ] );
  test.identical( got, 3 );

  var dst = [];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ];
  var got = _.arrayPrependedArraysOnce( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 4, [ 5 ] ] ] );
  test.identical( got, 4 );

  var dst = [ 1, 3 ];
  var got = _.arrayPrependedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 2, 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }
  var dst = [ 1, 3 ];
  var insArray = [ 1, 2, 3 ]
  var got = _.arrayPrependedArraysOnce( dst, insArray, onEqualize );
  test.identical( dst, [ 2, 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArraysOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependedArraysOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnce();
  });

  // test.case = 'dst is not a array';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayPrependedArraysOnce( 1, [ 2 ] );
  // });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnce( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnce( [ 1 ], 2 );
  });

}

//

function arrayPrependedArraysOnceStrictly( test )
{

  test.case = 'nothing';

  var dst = [];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [] );
  var expected = [];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 4, 5, 6 ] );
  test.identical( dst, [ 4, 5, 6, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 0, 0, 0 ];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 1 ] );
  test.identical( dst, [ 1, 0, 0, 0 ] );
  test.identical( got, 1 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 'a', 0, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 'a', 0,{ a : 1 }, { b : 2 }, 1  ] );
  test.identical( got, 4 );

  var dst = [];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ];
  var got = _.arrayPrependedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 1, 2, 3, [ 4, [ 5 ] ] ] );
  test.identical( got, 4 );

  var dst = [ '1', '3' ];
  var got = _.arrayPrependedArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3, '1', '3' ] );
  test.identical( got, 3 );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }
  var dst = [ 1, 3 ];
  var insArray = [ 0, 2, 4 ]
  var got = _.arrayPrependedArraysOnceStrictly( dst, insArray, onEqualize );
  test.identical( dst, [ 0, 2, 4, 1, 3 ] );
  test.identical( got, 3 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayPrependedArraysOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayPrependedArraysOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ undefined, 2, 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly();
  });

  // test.case = 'dst is not a array';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayPrependedArraysOnceStrictly( 1, [ 2 ] );
  // }); sfkldb fiubds lkfbds gbkdsfb gkldsfg fdsbfkldsfbdsl gbjs,fn kgn d

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly( [ 1 ], 2 );
  });

  test.case = 'Elements must be unique';

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly( [ 1, 1, 1 ], [ [ 1 ] ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly( [ 1, 2, 3 ], [ [ 4, 5 ], 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayPrependedArraysOnceStrictly( [ 6 ], [ [ 1,2 ], 3, [ 6,4,5,1,2,3 ] ] );
  });

}

//

function arrayAppend( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppend( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var got = _.arrayAppend( [], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppend( [ 1 ], 1 );
  test.identical( got, [ 1, 1 ] );

  var got = _.arrayAppend( [ 1 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayAppend( [ 1,2,3 ], 3 );
  test.identical( got, [ 1,2,3,3 ] );

  var got = _.arrayAppend( [ 1 ], '1' );
  test.identical( got, [ 1, '1' ] );

  var got = _.arrayAppend( [ 1 ], -1 );
  test.identical( got, [  1, -1 ] );

  var got = _.arrayAppend( [ 1 ], [ 1 ] );
  test.identical( got, [  1,[ 1 ] ] );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppend();
  })

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppend( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppend( 1, 1 );
  })
}

//

function arrayAppendOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendOnce( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var got = _.arrayAppendOnce( [], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppendOnce( [ 1 ], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppendOnce( [ 1 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayAppendOnce( [ 1,2,3 ], 3 );
  test.identical( got, [ 1,2,3 ] );

  var got = _.arrayAppendOnce( [ 1 ], '1' );
  test.identical( got, [ 1, '1' ] );

  var got = _.arrayAppendOnce( [ 1 ], -1 );
  test.identical( got, [ 1, -1 ] );

  var got = _.arrayAppendOnce( [ 1 ], [ 1 ] );
  test.identical( got, [ 1, [ 1 ] ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendOnce( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayAppendOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnce( 1, 1, 1 );
  })
}

//

function arrayAppendOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendOnceStrictly( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendOnceStrictly( dst , 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendOnceStrictly( dst, 2 );
  test.identical( got, [ 1,2 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendOnceStrictly( dst, '1' );
  test.identical( got, [ 1,'1' ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendOnceStrictly( dst, -1 );
  test.identical( got, [ 1, -1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendOnceStrictly( dst, [ 1 ] );
  test.identical( got, [ 1, [ 1 ] ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendOnceStrictly( dst,{ num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendOnceStrictly( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendOnceStrictly( [ 1,2,3 ], 3 );
  });

  // test.case = 'onEqualize is not a routine';

  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendOnceStrictly( [ 1,2,3 ], 3, 3 );
  // });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayAppendOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayAppended( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppended( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayAppended( dst, 1 );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppended( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 1 );

  var dst = [ 1,2,3 ];
  var got = _.arrayAppended( dst, 3 );
  test.identical( dst, [ 1,2,3,3 ] );
  test.identical( got, 3 );

  var dst = [ 1 ];
  var got = _.arrayAppended( dst, '1' );
  test.identical( dst, [ 1, '1' ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppended( dst, -1 );
  test.identical( dst, [ 1, -1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppended( dst, [ 1 ] );
  test.identical( dst, [ 1, [ 1 ] ] );
  test.identical( got, 1 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppended();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppended( [], 1, 1, 1 );
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppended( 1, 1 );
  });
}

//

function arrayAppendedOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnce( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 1 );

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedOnce( dst, 3 );
  test.identical( dst, [ 1,2,3 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnce( dst, '1' );
  test.identical( dst, [ 1,'1' ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnce( dst, -1 );
  test.identical( dst, [ 1,-1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnce( dst, [ 1 ] );
  test.identical( dst, [ 1,[ 1 ] ] );
  test.identical( got, 1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.identical( got, 3 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendedOnce( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.identical( got, 3 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayAppendedOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnce();
  })

  test.case = 'third is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnce( 1, 1, 1 );
  })
}

//

function arrayAppendedOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedOnceStrictly( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnceStrictly( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnceStrictly( dst, '1' );
  test.identical( dst, [ 1,'1' ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnceStrictly( dst, -1 );
  test.identical( dst, [ 1,-1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedOnceStrictly( dst, [ 1 ] );
  test.identical( dst, [ 1,[ 1 ] ] );
  test.identical( got, 1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.identical( got, 3 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendedOnceStrictly( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.identical( got, 3 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly();
  })

  test.case = 'third is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( 1, 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( [ 1,2,3 ], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayAppendedOnceStrictly( dst, { num : 1 }, onEqualize );
  });
}

//

function arrayAppendElement( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendElement( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var got = _.arrayAppendElement( [], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppendElement( [ 1 ], 1 );
  test.identical( got, [ 1, 1 ] );

  var got = _.arrayAppendElement( [ 1 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayAppendElement( [ 1,2,3 ], 3 );
  test.identical( got, [ 1,2,3,3 ] );

  var got = _.arrayAppendElement( [ 1 ], '1' );
  test.identical( got, [ 1, '1' ] );

  var got = _.arrayAppendElement( [ 1 ], -1 );
  test.identical( got, [  1, -1 ] );

  var got = _.arrayAppendElement( [ 1 ], [ 1 ] );
  test.identical( got, [  1,[ 1 ] ] );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElement();
  })

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElement( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElement( 1, 1 );
  })
}

//

function arrayAppendElementOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendElementOnce( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var got = _.arrayAppendElementOnce( [], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppendElementOnce( [ 1 ], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayAppendElementOnce( [ 1 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayAppendElementOnce( [ 1,2,3 ], 3 );
  test.identical( got, [ 1,2,3 ] );

  var got = _.arrayAppendElementOnce( [ 1 ], '1' );
  test.identical( got, [ 1, '1' ] );

  var got = _.arrayAppendElementOnce( [ 1 ], -1 );
  test.identical( got, [ 1, -1 ] );

  var got = _.arrayAppendElementOnce( [ 1 ], [ 1 ] );
  test.identical( got, [ 1, [ 1 ] ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendElementOnce( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayAppendElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnce( 1, 1, 1 );
  })
}

//

function arrayAppendElementOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendElementOnceStrictly( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendElementOnceStrictly( dst , 1 );
  test.identical( got, [ 1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendElementOnceStrictly( dst, 2 );
  test.identical( got, [ 1,2 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendElementOnceStrictly( dst, '1' );
  test.identical( got, [ 1,'1' ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendElementOnceStrictly( dst, -1 );
  test.identical( got, [ 1, -1 ] );
  test.is( got === dst );

  var dst = [ 1 ];
  var got = _.arrayAppendElementOnceStrictly( dst, [ 1 ] );
  test.identical( got, [ 1, [ 1 ] ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendElementOnceStrictly( dst,{ num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendElementOnceStrictly( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnceStrictly( 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendElementOnceStrictly( [ 1,2,3 ], 3 );
  });

  // test.case = 'onEqualize is not a routine';

  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendOnceStrictly( [ 1,2,3 ], 3, 3 );
  // });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayAppendElementOnceStrictly( dst, { num : 1 }, onEqualize );
  });

}

//

function arrayAppendedElement( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedElement( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElement( dst, 1 );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElement( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 1 );

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedElement( dst, 3 );
  test.identical( dst, [ 1,2,3,3 ] );
  test.identical( got, 3 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElement( dst, '1' );
  test.identical( dst, [ 1, '1' ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElement( dst, -1 );
  test.identical( dst, [ 1, -1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElement( dst, [ 1 ] );
  test.identical( dst, [ 1, [ 1 ] ] );
  test.identical( got, 1 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElement();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElement( [], 1, 1 );
  });

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElement( 1, 1 );
  });
}

//

function arrayAppendedElementOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedElementOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, false );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnce( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 2 );

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedElementOnce( dst, 3 );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, false );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnce( dst, '1' );
  test.identical( dst, [ 1, '1' ] );
  test.identical( got, '1' );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnce( dst, -1 );
  test.identical( dst, [ 1,-1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnce( dst, [ 1 ] );
  test.identical( dst, [ 1,[ 1 ] ] );
  test.identical( got, [ 1 ] );

  var dst = [ 0, 1, 2 ];
  var got = _.arrayAppendedElementOnce( dst, NaN );
  test.identical( dst, [ 0, 1, 2, NaN ] );
  test.identical( got, NaN );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.identical( got, { num : 4 } );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, false );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendedElementOnce( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.identical( got, 4 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayAppendedElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, false );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnce();
  })

  test.case = 'third is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnce( 1, 1, 1 );
  })
}

//

function arrayAppendedElementOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedElementOnceStrictly( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnceStrictly( dst, 2 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 2 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnceStrictly( dst, '1' );
  test.identical( dst, [ 1,'1' ] );
  test.identical( got, '1' );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnceStrictly( dst, -1 );
  test.identical( dst, [ 1,-1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayAppendedElementOnceStrictly( dst, [ 1 ] );
  test.identical( dst, [ 1,[ 1 ] ] );
  test.identical( got, [ 1 ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayAppendedElementOnceStrictly( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 },{ num : 4 } ] );
  test.identical( got, { num : 4 } );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayAppendedElementOnceStrictly( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 }, 4 ] );
  test.identical( got, 4 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnceStrictly();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedOnceStrictly( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnceStrictly( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnceStrictly( 1, 1, 1 );
  })

  test.case = 'ins already exists in dst';

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnceStrictly( [ 1 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedElementOnceStrictly( [ 1,2,3 ], 3 );
  });

  test.shouldThrowErrorSync( function()
  {
    var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayAppendedElementOnceStrictly( dst, { num : 1 }, onEqualize );
  });
}

// //
//
// function arrayAppendArray( test )
// {
//
//   test.case = 'nothing';
//   var got = _.arrayAppendArray( [  ] );
//   var expected = [  ];
//   test.identical( got, expected );
//
//   test.case = 'an argument';
//   var got = _.arrayAppendArray( [ 1, 2, undefined ] );
//   var expected = [ 1, 2, undefined ];
//   test.identical( got, expected );
//
//   test.case = 'an array';
//   var got = _.arrayAppendArray( [ 1, 2 ], 'str', false, { a : 1 }, 42, [ 3, 7, 13 ] );
//   var expected = [ 1, 2, 'str', false, { a : 1 }, 42, 3, 7, 13 ];
//   test.identical( got, expected );
//
//   /**/
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayAppendArray();
//   });
//
//   test.case = 'arguments[0] is wrong, has to be an array';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayAppendArray( 'wrong argument', 'str', false, { a : 1 }, 42, [ 3, 7, 13 ] );
//   });
//
//   test.case = 'arguments[1] is undefined';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayAppendArray( [ 1, 2 ], undefined, false, { a : 1 }, 42, [ 3, 7, 13 ] );
//   });
//
// };

//

function arrayAppendArray( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendArray( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';
  var got = _.arrayAppendArray( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayAppendArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayAppendArray( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendArray( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayAppendArray( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [  1, 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArray( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayAppendArray( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1,undefined, 2 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArray( [ 1, 2 ], 2 );
  });
};

//

function arrayAppendArrayOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendArrayOnce( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayAppendArrayOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'appends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayAppendArrayOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 1, 'a', [ { a : 1 } ], { b : 2 } ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArrayOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendArrayOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1,undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });

}

//

function arrayAppendArrayOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendArrayOnceStrictly( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayAppendArrayOnceStrictly( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendArrayOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayAppendArrayOnceStrictly( dst, [ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArrayOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendArrayOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnceStrictly();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnceStrictly( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrayOnceStrictly( [ 1, 2 ], 2 );
  });

  test.case = 'one of elements is not unique';

  var dst = [ 1,2,3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArrayOnceStrictly( dst, [ 4, 5, 2 ] );
  })
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArrayOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendArrayOnceStrictly( [ 1, 2 ], [ 2 ], 3 );
  // });
}

//

function arrayAppendedArray( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayAppendedArray( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedArray( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 2, 4, 5 ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendedArray( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1, 1 ] );
  test.identical( got, 1 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var got = _.arrayAppendedArray( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 1, 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( got, 4 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArray( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendedArray( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1,undefined, 2, ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArray( [ 1, 2 ], 2 );
  });
}

//

function arrayAppendedArrayOnce( test )
{

  test.case = 'nothing';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendedArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types';

  var dst = [ 1 ];
  var got = _.arrayAppendedArrayOnce( dst, [ 'a', 1, [ { a : 1 } ], { b : 2 } ] );
  test.identical( dst, [ 1, 'a', [ { a : 1 } ], { b : 2 } ] );
  test.identical( got, 3 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendedArrayOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /* */

  if( !Config.debug )
  return;

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrayOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendedArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });

}

//

function arrayAppendedArrayOnceWithSelector( test )
{

  test.case = 'nothing, single equalizer';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [], ( e ) => e.a );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple, single equalizer';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [ { a : 1 }, { a : 2 }, { a : 3 } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 }, { a : 2 }, { a : 3 } ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements, single equalizer';

  var dst = [ { a : 1 }, { a : 2 }, { a : 3 } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { a : 2 }, { a : 3 }, { a : 4 } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 }, { a : 2 }, { a : 3 }, { a : 4 } ] );
  test.identical( got, 1 );

  var dst = [ { a : 1 }, { a : 1 }, { a : 1 } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { a : 1 } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 }, { a : 1 }, { a : 1 } ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types, single equalizer';

  var dst = [ { a : 1 } ];
  var got = _.arrayAppendedArrayOnce( dst,[ { a : 'a' }, { a : 1 }, { a : [{ y : 2 }] } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 },{ a : 'a' },{ a : [{ y : 2 }] } ] );
  test.identical( got, 2 );

  test.case = 'array has undefined, single equalizer';

  var dst = [ { a : 1 } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { a : undefined }, { a : 2 } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 }, { a : undefined }, { a : 2 } ] );
  test.identical( got, 2 );

  var dst = [ { a : 1 }, { a : undefined } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { a : undefined }, { a : 2 } ], ( e ) => e.a );
  test.identical( dst, [ { a : 1 }, { a : undefined }, { a : 2 } ] );
  test.identical( got, 1 );

  /* */

  test.case = 'nothing, two equalizers';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple, two equalizers';

  var dst = [];
  var got = _.arrayAppendedArrayOnce( dst, [ { b : 1 }, { b : 2 }, { b : 3 } ], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [ { b : 1 }, { b : 2 }, { b : 3 } ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements, two equalizers';

  var dst = [ { a : 1 }, { a : 2 }, { a : 3 } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { b : 2 }, { b : 3 }, { b : 4 } ], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [ { a : 1 }, { a : 2 }, { a : 3 }, { b : 4 } ] );
  test.identical( got, 1 );

  var dst = [ { a : 1 }, { a : 1 }, { a : 1 } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { b : 1 } ], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [ { a : 1 }, { a : 1 }, { a : 1 } ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types, two equalizers';

  var dst = [ { a : 1 } ];
  var got = _.arrayAppendedArrayOnce( dst,[ { b : 'a' }, { b : 1 }, { b : [{ y : 2 }] } ], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [ { a : 1 },{ b : 'a' },{ b : [{ y : 2 }] } ] );
  test.identical( got, 2 );

  test.case = 'array has undefined, two equalizers';

  var dst = [ { a : 1 } ];
  var got;
  test.mustNotThrowError( function ()
  {
    var got = _.arrayAppendedArrayOnce( dst, [ { b : undefined }, { b : 2 } ], ( e ) => e.a, ( e ) => e.b );
  });
  test.identical( dst, [ { a : 1 }, { b : undefined }, { b : 2 } ] );
  test.identical( got, 2 );

  var dst = [ { a : 1 }, { a : undefined } ];
  var got = _.arrayAppendedArrayOnce( dst, [ { b : undefined }, { b : 2 } ], ( e ) => e.a, ( e ) => e.b );
  test.identical( dst, [ { a : 1 }, { b : undefined }, { b : 2 } ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrayOnce( dst, undefined, ( e ) => e.a );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnce( [ 1, 2 ], 2, ( e ) => e.a );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayAppendedArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });

}

//

function arrayAppendedArrayOnceStrictly( test )
{
  test.case = 'nothing';

  var got = _.arrayAppendedArrayOnceStrictly( [], [] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedArrayOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayAppendedArrayOnceStrictly( dst, [ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.identical( got, 2 );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrayOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendedArrayOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnceStrictly();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnceStrictly( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrayOnceStrictly( [ 1, 2 ], 2 );
  });

  test.case = 'one of elements is not unique';

  var dst = [ 1,2,3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrayOnceStrictly( dst, [ 4, 5, 2 ] );
  })
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrayOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

}

//

function arrayAppendArrays( test )
{

  test.case = 'dstArray is null, src is scalar';
  var got = _.arrayAppendArrays( null, 1 );
  test.identical( got, [ 1 ] );

  test.case = 'dstArray is null, src is array';
  var got = _.arrayAppendArrays( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  // test.case = 'dstArray is undefined, src is scalar';
  // var got = _.arrayAppendArrays( undefined, 1 );
  // test.identical( got, 1 );
  //
  // test.case = 'dstArray is undefined, src is array';
  // let src = [ 1 ];
  // var got = _.arrayAppendArrays( undefined, src );
  // test.identical( got, [ 1 ] );
  // test.is( src === got );

  test.case = 'nothing';
  var got = _.arrayAppendArrays( [], [] );
  var expected = [  ];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayAppendArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayAppendArrays( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendArrays( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 5 ] ] ]
  var got = _.arrayAppendArrays( dst, insArray );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3, [ 5 ] ] );
  test.is( got === dst );

  test.case = 'arguments are not arrays';
  var dst = [];
  var got = _.arrayAppendArrays( dst, [ 1, 2, 3 ]);
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendArrays( dst, insArray );
  test.identical( dst, [  1, 'a', 1, { a : 1 }, { b : 2 } ] );
  test.is( got === dst );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayAppendArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1, undefined, 2 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrays();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrays( 1, [ 2 ] );
  });

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrays( [], undefined );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArrays( [], [ 1 ], [ 2 ] );
  });
};

//

function arrayAppendArraysOnce( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendArraysOnce( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayAppendArraysOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendArraysOnce( dst, insArray );
  test.identical( dst, [ 1, 'a', { a : 1 }, { b : 2 } ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 5 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ];
  var got = _.arrayAppendArraysOnce( dst, insArray );
  test.identical( dst, [ 1, 2, 3, 5, [ 4, [ 5 ] ], 6 ] );
  test.is( got === dst );

  var dst = [ 1, 3 ];
  var got = _.arrayAppendArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( got, [ 1, 3, 2 ] );
  test.identical( dst, got );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 1, 3 ];
  var got = _.arrayAppendArraysOnce( dst, [ 1, 2, 3 ], onEqualize )
  test.identical( got, [ 1, 3, 2 ] );
  test.identical( dst, got );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendArraysOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnce();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnce( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnce( [], [ 1, 2, 3 ], [] );
  });

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArraysOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

}

//

function arrayAppendArraysOnceStrictly( test )
{
  test.case = 'dstArray is null';
  var got = _.arrayAppendArraysOnceStrictly( null, [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'nothing';

  var got = _.arrayAppendArraysOnceStrictly( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ [ 'a' ],[ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 1, 'a', { a : 1 }, { b : 2 } ] );
  test.is( got === dst );

  var dst = [ 0 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ];
  var got = _.arrayAppendArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 0, 1, 2, 3, [ 4, [ 5 ] ], 6 ] );
  test.is( got === dst );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 4,5 ];
  var got = _.arrayAppendArraysOnceStrictly( dst, [ 1, 2, 3 ], onEqualize );
  test.identical( got, [ 4, 5, 1, 2, 3 ] );
  test.identical( dst, got );

  test.case = 'ins has existing element';

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendArraysOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnceStrictly();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnceStrictly( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnceStrictly( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'One of ins elements is not unique';
  var dst = [ 1, 2, 3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArraysOnceStrictly( dst, [ 4, 2, 5 ] );
  })
  test.identical( dst, [ 1, 2, 3, 4, 5 ] )

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArraysOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendArraysOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendArraysOnceStrictly( [], 1 );
  });

}

//

function arrayAppendedArrays( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayAppendedArrays( dst, [] );
  var expected = [ ];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayAppendedArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayAppendedArrays( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendedArrays( dst, [ 1, 1 ] );
  test.identical( dst, [ 1, 1, 1, 1, 1 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, 5 ], 6 ] ];
  var got = _.arrayAppendedArrays( dst, insArray );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3, [ 4, 5 ], 6 ] );
  test.identical( got, 5 );

  test.case = 'arguments are not arrays';
  var dst = [];
  var got = _.arrayAppendedArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendedArrays( dst, insArray );
  test.identical( dst, [  1, 'a', 1, { a : 1 }, { b : 2 } ] );
  test.identical( got, 4 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayAppendedArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1, undefined, 2 ] );
  test.identical( got, 2 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrays();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrays( 1, [ 2 ] );
  });

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrays( [], undefined );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArrays( [], [ 1 ], [ 2 ] );
  });

}

//

function arrayAppendedArraysOnce( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayAppendedArraysOnce( dst, [] );
  var expected = [];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayAppendedArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayAppendedArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ 'a', 1, [ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendedArraysOnce( dst, insArray );
  test.identical( dst, [  1, 'a', { a : 1 }, { b : 2 } ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3, 5 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ];
  var got = _.arrayAppendedArraysOnce( dst, insArray );
  test.identical( dst, [ 1, 2, 3, 5, [ 4, [ 5 ] ], 6 ] );
  test.identical( got, 2 );

  var dst = [ 1, 3 ];
  var got = _.arrayAppendedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 3, 2 ] );
  test.identical( got, 1 );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 1, 3 ];
  var got = _.arrayAppendedArraysOnce( dst, [ 1, 2, 3 ], onEqualize );
  test.identical( dst, [ 1, 3, 2 ] );
  test.identical( got, 1 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendedArraysOnce( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnce();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnce( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnce( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArraysOnce( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnce( [], undefined );
  });

}

//

function arrayAppendedArraysOnceStrictly( test )
{
  test.case = 'nothing';

  var got = _.arrayAppendedArraysOnceStrictly( [], [] );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayAppendedArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'mixed arguments types';
  var dst = [ 1 ];
  var insArray = [ [ 'a' ],[ { a : 1 } ], { b : 2 } ];
  var got = _.arrayAppendedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 1, 'a', { a : 1 }, { b : 2 } ] );
  test.identical( got, 3 );

  var dst = [ 0 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ];
  var got = _.arrayAppendedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 0, 1, 2, 3, [ 4, [ 5 ] ], 6 ] );
  test.identical( got, 5 );

  test.case = 'onEqualize';

  var onEqualize = function onEqualize( a, b )
  {
    return a === b;
  }

  var dst = [ 4,5 ];
  var got = _.arrayAppendedArraysOnceStrictly( dst, [ 1, 2, 3 ], onEqualize );
  test.identical( dst, [ 4, 5, 1, 2, 3 ] );
  test.identical( got, 3 );

  test.case = 'ins has existing element';

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    _.arrayAppendedArraysOnceStrictly( dst, [ undefined, 2 ] );
  });
  test.identical( dst, [ 1, undefined, 2 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnceStrictly();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnceStrictly( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnceStrictly( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'One of ins elements is not unique';
  var dst = [ 1, 2, 3 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArraysOnceStrictly( dst, [ 4, 2, 5 ] );
  })
  test.identical( dst, [ 1, 2, 3, 4, 5 ] )

  var dst = [ 1, 1, 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArraysOnceStrictly( dst, [ 1 ] );
  })
  test.identical( dst, [ 1, 1, 1 ] );

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayAppendedArraysOnceStrictly( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not a ArrayLike entity';
  test.shouldThrowErrorSync( function()
  {
    _.arrayAppendedArraysOnceStrictly( [], 1 );
  });

}

// --
// arrayRemove
// --

function arrayRemove( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemove( dst, 1 );
  test.identical( dst, [ ] );

  var dst = [ 1 ];
  var got = _.arrayRemove( dst, 1 );
  test.identical( dst, [  ] );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemove( dst, 2 );
  test.identical( dst, [ 1 ] );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemove( dst, 1 );
  test.identical( dst, [ 2,2 ] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemove( dst, 1 );
  test.identical( dst, [ ] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemove( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemove( dst, '1' );
  test.identical( dst, [ 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemove( dst, -1 );
  test.identical( dst, [ 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemove( dst, [ 1 ] );
  test.identical( dst, [ 1 ] );

  var dst = [ { x : 1 } ];
  var got = _.arrayRemove( dst, { x : 1 } );
  test.identical( dst, [ { x : 1 } ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemove( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemove( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayRemove( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemove( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ [ 1 ], [ 1 ], [ 1 ] ];
  var onEqualize = function( a )
  {
    return a[ 0 ];
  }
  var got = _.arrayRemove( dst, [ 1 ], onEqualize );
  test.identical( dst, [ ] );

  test.case = 'equalizer 2 args';

  var dst = [ [ 1 ], [ 1 ], [ 1 ] ];
  var onEqualize = function( a )
  {
    return a[ 0 ];
  }
  var onEqualize2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemove( dst, 1, onEqualize, onEqualize2 );
  test.identical( dst, [ ] );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemove();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemove( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemove( 1, 1 );
  })
}

//

function arrayRemoveOnce( test )
{
  test.case = 'simple';

  var got = _.arrayRemoveOnce( [], 1 );
  test.identical( got, [] );

  var got = _.arrayRemoveOnce( [ 1 ], 1 );
  test.identical( got, [] );

  var got = _.arrayRemoveOnce( [ 1,2,2 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayRemoveOnce( [ 1,3,2,3 ], 3 );
  test.identical( got, [ 1,2,3 ] );

  var got = _.arrayRemoveOnce( [ 1 ], '1' );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveOnce( [ 1 ], -1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveOnce( [ 1 ], [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var onEqualize2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemoveOnce( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 1 },{ num : 3 } ];
  var got = _.arrayRemoveOnce( dst, 1, onEqualize, onEqualize2 );
  test.identical( got, [ { num : 2 },{ num : 1 },{ num : 3 } ] );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnce( 1, 1, 1 );
  })
}

//

function arrayRemoveOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemoveOnceStrictly( dst, 2 );
  test.identical( got, [ 1,3 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveOnceStrictly( dst, { num : 3 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveOnceStrictly( dst, 3, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnceStrictly( 1, 1 );
  })

  test.case = 'ins doesn´t exist';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnceStrictly( [ 1 ], 2 );
  });

  test.case = 'ins is not unique in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnceStrictly( [ 1, 2, 2 ], 2 );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveOnceStrictly( [ 1,2,3 ], 3, 3 );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayRemoveOnceStrictly( dst, { num : 4 }, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )


  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    _.arrayRemoveOnceStrictly( dst, 4, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemoved( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemoved( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemoved( dst, 1 );
  test.identical( dst, [  ] );
  test.identical( got, 1 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemoved( dst, 2 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 2 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemoved( dst, 1 );
  test.identical( dst, [ 2,2 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayRemoved( dst, '1' );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemoved( dst, -1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemoved( dst, [ 1 ] );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoved( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoved( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  var dst = [ { x : 1 } ];
  var got = _.arrayRemoved( dst, { x : 1 } );
  test.identical( dst, [ { x : 1 } ] );
  test.identical( got, 0 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoved( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoved( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 1 );


  test.case = 'evaluator 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var evaluator1 = function( a )
  {
    return a.num;
  }
  var evaluator2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemoved( dst, 4, evaluator1 );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoved( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 1 },{ num : 3 } ];
  var got = _.arrayRemoved( dst, 1, evaluator1, evaluator2 );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 2 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoved();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoved( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoved( 1, 1 );
  })
}

//

function arrayRemovedOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedOnce( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedOnce( dst, 1 );
  test.identical( dst, [  ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedOnce( dst, 3 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 2 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemovedOnce( dst, 2 );
  test.identical( dst, [ 2,1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedOnce( dst, '1' );
  test.identical( dst, [ 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedOnce( dst, -1 );
  test.identical( dst, [  1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedOnce( dst, [ 1 ] );
  test.identical( dst, [  1 ] );
  test.identical( got, -1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayRemovedOnce( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnce();
  })

  test.case = 'third is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnce( 1, 1 );
  })
}

//

function arrayRemovedOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1 ];
  var got = _.arrayRemovedOnceStrictly( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedOnceStrictly( dst, 2 );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedOnceStrictly( dst, { num : 3 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 } ] );
  test.identical( got, 2 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedOnceStrictly( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly();
  })

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [], 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( 1, 1 );
  })

  test.case = 'Simple no match element';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ ], 1 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 1 ], '1' );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 1 ], - 1 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 1 ], [ 1 ] );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 1 ], 2 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 1 ], - 1 );
  })

  test.case = 'Ins several times in srcArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( [ 2, 2, 1 ], 2 );
  })

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedOnceStrictly( dst, { num : 4 }, onEqualize );
  })

}

//

function arrayRemoveElement( test )
{

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemoveElement( dst, 1 );
  test.identical( dst, [ ] );

  var dst = [ 1 ];
  var got = _.arrayRemoveElement( dst, 1 );
  test.identical( dst, [  ] );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemoveElement( dst, 2 );
  test.identical( dst, [ 1 ] );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemoveElement( dst, 1 );
  test.identical( dst, [ 2,2 ] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveElement( dst, 1 );
  test.identical( dst, [ ] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveElement( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemoveElement( dst, '1' );
  test.identical( dst, [ 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemoveElement( dst, -1 );
  test.identical( dst, [ 1 ] );

  var dst = [ 1 ];
  var got = _.arrayRemoveElement( dst, [ 1 ] );
  test.identical( dst, [ 1 ] );

  var dst = [ { x : 1 } ];
  var got = _.arrayRemoveElement( dst, { x : 1 } );
  test.identical( dst, [ { x : 1 } ] );

  var got = _.arrayRemoveElement( [ 1 ], '1' );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveElement( [ 1 ], -1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveElement( [ 1 ], [ 1 ] );
  test.identical( got, [ 1 ] );

  function onEqualize( a, b )
  {
    return a.value === b;
  }
  var got = _.arrayRemoveElement( [ { value : 1 }, { value : 1 }, { value : 2 } ], 1, onEqualize );
  test.identical( got, [ { value : 2 } ] );

  var src = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayRemoveElement( src, 1, 1 );
  test.identical( got, [ 1, 2, 3, 2, 3 ] );
  test.is( src == got )

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveElement( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveElement( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayRemoveElement( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveElement( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 1 arg';

  var dst = [ [ 1 ], [ 1 ], [ 1 ] ];
  var onEqualize = function( a )
  {
    return a[ 0 ];
  }
  var got = _.arrayRemoveElement( dst, [ 1 ], onEqualize );
  test.identical( dst, [ ] );

  test.case = 'equalizer 2 args';

  var dst = [ [ 1 ], [ 1 ], [ 1 ] ];
  var onEqualize = function( a )
  {
    return a[ 0 ];
  }
  var onEqualize2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemoveElement( dst, 1, onEqualize, onEqualize2 );
  test.identical( dst, [ ] );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElement();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElement( 1, 1 );
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElement( [ 1 ], 1, 1, 1 );
  })

}

//

function arrayRemoveElementOnce( test )
{
  test.case = 'simple';

  var got = _.arrayRemoveElementOnce( [], 1 );
  test.identical( got, [] );

  var got = _.arrayRemoveElementOnce( [ 1 ], 1 );
  test.identical( got, [] );

  var got = _.arrayRemoveElementOnce( [ 1,2,2 ], 2 );
  test.identical( got, [ 1,2 ] );

  var got = _.arrayRemoveElementOnce( [ 1,3,2,3 ], 3 );
  test.identical( got, [ 1,2,3 ] );

  var got = _.arrayRemoveElementOnce( [ 1 ], '1' );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveElementOnce( [ 1 ], -1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayRemoveElementOnce( [ 1 ], [ 1 ] );
  test.identical( got, [ 1 ] );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( got, [ { num : 2 },{ num : 3 } ] );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var onEqualize2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemoveElementOnce( dst, 4, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 2 },{ num : 3 } ] );

  var dst = [ { num : 1 },{ num : 2 },{ num : 1 },{ num : 3 } ];
  var got = _.arrayRemoveElementOnce( dst, 1, onEqualize, onEqualize2 );
  test.identical( got, [ { num : 2 },{ num : 1 },{ num : 3 } ] );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnce();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnce( 1, 1 );
  })

  test.case = 'onEqualize is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnce( 1, 1, 1 );
  })
}

//

// function arrayRemoveElementOnce( test ) {
//
//   test.case = 'nothing';
//   var got = _.arrayRemoveElementOnce( [  ], 2 );
//   var expected = [  ];
//   test.identical( got, expected );
//
//   test.case = 'one element left';
//   var got = _.arrayRemoveElementOnce( [ 2, 4 ], 4 );
//   var expected = [ 2 ];
//   test.identical( got, expected );
//
//   test.case = 'two elements left';
//   var got = _.arrayRemoveElementOnce( [ true, false, 6 ], true );
//   var expected = [ false, 6 ];
//   test.identical( got, expected );
//
//   /**/
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayRemoveElementOnce();
//   });
//
//   test.case = 'not enough arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayRemoveElementOnce( [ 2, 4, 6 ] );
//   });
//
//   test.case = 'extra argument';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayRemoveElementOnce( [ 2, 4, 6 ], 2, function( el, ins ) { return el > ins }, 'redundant argument' );
//   });
//
//   test.case = 'arguments[0] is wrong';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayRemoveElementOnce( 'wrong argument', 2 );
//   });
//
//   test.case = 'arguments[2] is wrong';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayRemoveElementOnce( [ 2, 4, 6 ], 2, 'wrong argument' );
//   });
//
// };

//

function arrayRemoveElementOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemoveElementOnceStrictly( dst, 2 );
  test.identical( got, [ 1,3 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveElementOnceStrictly( dst, { num : 3 }, onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveElementOnceStrictly( dst, 3, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnceStrictly( 1, 1 );
  })

  test.case = 'ins doesn´t exist';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnceStrictly( [ 1 ], 2 );
  });

  test.case = 'ins is not unique in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnceStrictly( [ 1, 2, 2 ], 2 );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveElementOnceStrictly( [ 1,2,3 ], 3, 3 );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayRemoveElementOnceStrictly( dst, { num : 4 }, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )


  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    _.arrayRemoveElementOnceStrictly( dst, 4, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemovedElement( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedElement( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, 1 );
  test.identical( dst, [  ] );
  test.identical( got, 1 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemovedElement( dst, 2 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 2 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemovedElement( dst, 1 );
  test.identical( dst, [ 2,2 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, '1' );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, -1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, [ 1 ] );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedElement( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedElement( dst, [ 1 ] );
  test.identical( dst, [ 1, 1, 1 ] );
  test.identical( got, 0 );

  var dst = [ { x : 1 } ];
  var got = _.arrayRemovedElement( dst, { x : 1 } );
  test.identical( dst, [ { x : 1 } ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, '1' );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, -1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElement( dst, [ 1 ] );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  function onEqualize( a, b )
  {
    return a.value === b;
  }
  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayRemovedElement( dst, 1, onEqualize );
  test.identical( dst, [ { value : 2 } ] );
  test.identical( got, 2 );

  var src = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayRemovedElement( src, 1, 1 );
  test.identical( got, 1 );
  test.identical( src, [ 1, 2, 3, 2, 3 ] );;

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedElement( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedElement( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 1 );


  test.case = 'evaluator 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var evaluator1 = function( a )
  {
    return a.num;
  }
  var evaluator2 = function( a )
  {
    return a;
  }
  var got = _.arrayRemovedElement( dst, 4, evaluator1 );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedElement( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 1 },{ num : 3 } ];
  var got = _.arrayRemovedElement( dst, 1, evaluator1, evaluator2 );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 2 );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElement();
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElement( [ 1 ], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElement( 1, 1 );
  })

}

//

function arrayRemovedElementOnce( test )
{
  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedElementOnce( dst, 1 );
  test.identical( dst, [ ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElementOnce( dst, 1 );
  test.identical( dst, [  ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedElementOnce( dst, 3 );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 2 );

  var dst = [ 2,2,1 ];
  var got = _.arrayRemovedElementOnce( dst, 2 );
  test.identical( dst, [ 2,1 ] );
  test.identical( got, 0 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElementOnce( dst, '1' );
  test.identical( dst, [ 1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElementOnce( dst, -1 );
  test.identical( dst, [  1 ] );
  test.identical( got, -1 );

  var dst = [ 1 ];
  var got = _.arrayRemovedElementOnce( dst, [ 1 ] );
  test.identical( dst, [  1 ] );
  test.identical( got, -1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedElementOnce( dst, { num : 4 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedElementOnce( dst, { num : 1 }, onEqualize );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a )
  {
    return a.num;
  }
  var got = _.arrayRemovedElementOnce( dst, 4, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] );
  test.identical( got, -1 );

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedElementOnce( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, 0 );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnce();
  })

  test.case = 'fourth is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnce( [], 1, 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnce( 1, 1 );
  })
}

//

function arrayRemovedElementOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1 ];
  var got = _.arrayRemovedElementOnceStrictly( dst, 1 );
  test.identical( dst, [] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedElementOnceStrictly( dst, 2 );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 2 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedElementOnceStrictly( dst, { num : 3 }, onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 } ] );
  test.identical( got, { num : 3 } );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedElementOnceStrictly( dst, 1, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 },{ num : 3 } ] );
  test.identical( got, { num : 1 } );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly();
  })

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [], 1, 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( 1, 1 );
  })

  test.case = 'Simple no match element';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ ], 1 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 1 ], '1' );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 1 ], - 1 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 1 ], [ 1 ] );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 1 ], 2 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 1 ], - 1 );
  })

  test.case = 'Ins several times in srcArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( [ 2, 2, 1 ], 2 );
  })

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedElementOnceStrictly( dst, { num : 4 }, onEqualize );
  })

}

//

function arrayRemoveArray( test )
{

  test.case = 'nothing';
  var got = _.arrayRemoveArray( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayRemoveArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArray( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArray( dst,[ 1,3 ] );
  test.identical( dst, [ 2 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveArray( dst, [ 1, 1 ] );
  test.identical( dst, [ ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveArray( dst, [ 1 ] );
  test.identical( dst, [ ] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayRemoveArray( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'argument is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArray( [ 1 ], undefined );
  });

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArray( [ 1, 2 ], 2 );
  });
};

//

function arrayRemoveArrayOnce( test )
{
  test.case = 'nothing';

  var got = _.arrayRemoveArrayOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemoveArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.is( got === dst );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemoveArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1,3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1 ] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    var got = _.arrayRemoveArrayOnce( dst, [ undefined, 2 ] );
    test.identical( dst, [ 1 ] );
    test.is( got === dst );
  });

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayRemoveArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });
}

//

function arrayRemoveArrayOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemoveArrayOnceStrictly( dst, [ 2 ] );
  test.identical( got, [ 1,3 ] );
  test.is( got === dst );

  test.case = 'ins has several values';

  var dst = [ 1, 2, 3, 4, 5, 6, 6 ];
  var got = _.arrayRemoveArrayOnceStrictly( dst, [ 1, 3, 5 ] );
  test.identical( got, [ 2, 4, 6, 6 ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemoveArrayOnceStrictly( dst, [ { num : 3 } ], onEqualize );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveArrayOnceStrictly( dst, [ 3 ], ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 1 },{ num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args - ins several values';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemoveArrayOnceStrictly( dst, [ 3, 1 ], ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 2 } ] );
  test.is( got === dst );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnceStrictly( 1, 1 );
  })

  test.case = 'ins not exists';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnceStrictly( [ 1 ], [ 2 ] );
  });

  test.case = 'ins repeated in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnceStrictly( [ 1, 2, 2 ], [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrayOnceStrictly( [ 1,2,3 ], 3, 3 );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayRemoveArrayOnceStrictly( dst, [ { num : 4 } ], onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )


  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    _.arrayRemoveArrayOnceStrictly( dst, [ 4 ], onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemovedArray( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayRemovedArray( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedArray( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemovedArray( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1,3] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedArray( dst, [ 1 ] );
  test.identical( dst, [] );
  test.identical( got, 3 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got;
  var got = _.arrayRemovedArray( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'argument is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArray( [ 1 ], undefined );
  });

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArray();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArray( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArray( [ 1, 2 ], 2 );
  });
}

//

function arrayRemovedArrayOnce( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayRemovedArrayOnce( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedArrayOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemovedArrayOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 3] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedArrayOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    var got = _.arrayRemovedArrayOnce( dst, [ undefined, 2 ] );
    test.identical( dst, [ 1 ] );
    test.identical( got, 0 );
  });

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnce();
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnce( [ 1, 2 ],[ 1 ], [ 2 ] );
  });

  test.case = 'second args is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnce( [ 1, 2 ], 2 );
  });

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayRemovedArrayOnce( [ 1, 2 ], [ 2 ], 3 );
  // });

}

//

function arrayRemovedArrayOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemovedArrayOnceStrictly( dst, [ 2 ] );
  test.identical( dst, [ 1,3 ] );
  test.identical( got, 1 );

  test.case = 'ins has several values';

  var dst = [ 1, 2, 3, 4, 5, 6, 6 ];
  var got = _.arrayRemovedArrayOnceStrictly( dst, [ 1, 3, 5 ] );
  test.identical( dst, [ 2, 4, 6, 6 ] );
  test.identical( got, 3 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var got = _.arrayRemovedArrayOnceStrictly( dst, [ { num : 3 } ], onEqualize );
  test.identical( dst, [ { num : 1 },{ num : 2 } ] );
  test.identical( got, 1 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedArrayOnceStrictly( dst, [ 3 ], ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 1 },{ num : 2 } ] );
  test.identical( got, 1 );

  test.case = 'equalizer 2 args - ins several values';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var got = _.arrayRemovedArrayOnceStrictly( dst, [ 3, 1 ], ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 } ] );
  test.identical( got, 2 );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnceStrictly( 1, 1 );
  })

  test.case = 'ins not exists';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnceStrictly( [ 1 ], [ 2 ] );
  });

  test.case = 'ins repeated in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnceStrictly( [ 1, 2, 2 ], [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrayOnceStrictly( [ 1,2,3 ], 3, 3 );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    _.arrayRemovedArrayOnceStrictly( dst, [ { num : 4 } ], onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )


  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    _.arrayRemovedArrayOnceStrictly( dst, [ 4 ], onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemoveArrays( test )
{
  test.case = 'nothing';
  var got = _.arrayRemoveArrays( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';
  var dst = [];
  var got = _.arrayRemoveArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArrays( dst,[ 4, 5 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArrays( dst,[ 1,3 ] );
  test.identical( dst, [ 2 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1, 2, 2, 2 ];
  var got = _.arrayRemoveArrays( dst, [ [ 1 ], [ 2 ] ] );
  test.identical( dst, [ ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemoveArrays( dst, insArray );
  test.identical( dst, [ 3, 4 ] );
  test.is( got === dst );

  var dst = [ 5 ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemoveArrays( dst, insArray );
  test.identical( dst, [] );
  test.is( got === dst );

  var dst = [ [ 5 ] ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemoveArrays( dst, insArray );
  test.identical( dst, [ [ 5 ] ] );
  test.is( got === dst );

  var dst = [ [ 5 ] ];
  var insArray = [ [ [ 5 ] ] ];
  var got = _.arrayRemoveArrays( dst, insArray );
  test.identical( dst, [ [ 5 ] ] );
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayRemoveArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1 ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArrays();
  });

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemoveArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not longIs entity';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemoveArrays( [], 1 );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemoveArrays( [], [ 1 ], [ 1 ] );
  });

};

//

function arrayRemoveArraysOnce( test )
{
  test.case = 'nothing';

  var got = _.arrayRemoveArraysOnce( [], [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemoveArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemoveArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1,3 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemoveArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( got, [ 1, 3, 3, 4, 5 ] );
  test.is( got === dst );

  var dst = [ 1, 1, 2, 2, 3, 4, 4, 5 ];
  var insArray = [ [ 1, 1 ], 2 , [ 3 ], 4, 4, [ 5 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( dst, [ 2 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( got, [ 3, 4 ] );
  test.is( got === dst );

  var dst = [ 5, 5 ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( got, [ 5 ] );
  test.is( got === dst );

  var dst = [ [ 5 ],[ 5 ] ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( dst, [ [ 5 ],[ 5 ] ] );
  test.is( got === dst );

  var dst = [ [ 5 ], [ 5 ] ];
  var insArray = [ [ [ 5 ] ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray );
  test.identical( dst, [ [ 5 ], [ 5 ] ] );
  test.is( got === dst );

  function onEqualize( a, b ){ return a === b }
  var dst = [ 1, 2, [ 3 ] ];
  var insArray = [ 1, 2, [ 3 ] ];
  var got = _.arrayRemoveArraysOnce( dst, insArray, onEqualize );
  test.identical( got, [ [ 3 ] ]);
  test.is( got === dst );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    var got = _.arrayRemoveArraysOnce( dst, [ undefined, 2 ] );
    test.identical( dst, [ 1 ] );
    test.is( got === dst );
  });

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var insArray = [ [ { num : 3 } ], { num : 1 } ];
  var got = _.arrayRemoveArraysOnce( dst, insArray, onEqualize )
  test.identical( got, [ { num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var insArray = [ [ 3 ], 1  ];
  var got = _.arrayRemoveArraysOnce( dst, insArray, ( e ) => e.num, ( e ) => e )
  test.identical( got, [ { num : 2 } ] );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnce();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnce( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnce( [  ], [ 1, 2, 3 ], [] )
  });

  test.case = 'second arg is not longIs entity';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemoveArraysOnce( [], 1 );
  });
}

//

function arrayRemoveArraysOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, [ 2 ] );
  test.identical( got, [ 1, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( got, [ ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, insArray );
  test.identical( got, [ ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, 3 ], [ 4 ], 5 ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, insArray );
  test.identical( got, [] );
  test.is( got === dst );

  var dst = [ 5, 6, 7, 8 ];
  var insArray = [ [ 5, 6 ], 7 ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, insArray );
  test.identical( got, [ 8 ] );
  test.is( got === dst );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var insArray = [ [ { num : 3 } ], { num : 1 }  ]
  var got = _.arrayRemoveArraysOnceStrictly( dst, insArray, onEqualize )
  test.identical( got, [ { num : 2 } ] );
  test.is( got === dst );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var insArray = [ [ 3 ], 1  ];
  var got = _.arrayRemoveArraysOnceStrictly( dst, insArray, ( e ) => e.num, ( e ) => e );
  test.identical( got, [ { num : 2 } ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly( 1, 1 );
  })

  test.case = 'ins not exists';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly( [ 1 ], [ 2 ] );
  });

  test.case = 'ins repeated in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly( [ 1, 2, 2 ], [ [ 2 ] ] );
  });

  test.case = 'ins element repeated';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly( [ 1, 2, 3, 4, 5 ], [ [ 2, 3 ], 2 ] );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveArraysOnceStrictly( [], [ 1, 2, 3 ], [] );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    var insArray = [ [ { num : 4 } ] ];
    _.arrayRemoveArraysOnceStrictly( dst, insArray, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    var insArray = [ [ 4 ] ];
    _.arrayRemoveArraysOnceStrictly( dst, insArray, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemovedArrays( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayRemovedArrays( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedArrays( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemovedArrays( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1,3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedArrays( dst, [ 1 ] );
  test.identical( dst, [] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3, 4, 5];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [ 3, 4 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], 2 , [ 3 ], 4, [ 5 ] ]
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [] );
  test.identical( got, 5 );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [ 3, 4 ] );
  test.identical( got, 3 );

  var dst = [ 5 ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [] );
  test.identical( got, 1 );

  var dst = [ [ 5 ] ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [ [ 5 ] ] );
  test.identical( got, 0 );

  var dst = [ [ 5 ] ];
  var insArray = [ [ [ 5 ] ] ];
  var got = _.arrayRemovedArrays( dst, insArray );
  test.identical( dst, [ [ 5 ] ] );
  test.identical( got, 0 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  var got = _.arrayRemovedArrays( dst, [ undefined, 2 ] );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArrays();
  });

  test.case = 'argument is undefined';
  var dst = [ 1 ];
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemovedArrays( dst, undefined );
  });
  test.identical( dst, [ 1 ] );

  test.case = 'second arg is not longIs entity';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemovedArrays( [], 1 );
  });

  test.case = 'too many args';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemovedArrays( [], [ 1 ], [ 1 ] );
  });
}

//

function arrayRemovedArraysOnce( test )
{
  test.case = 'nothing';

  var dst = [];
  var got = _.arrayRemovedArraysOnce( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'simple';

  var dst = [];
  var got = _.arrayRemovedArraysOnce( dst, [ 1, 2, 3 ] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'prepends only unique elements';

  var dst = [ 1,2,3 ];
  var got = _.arrayRemovedArraysOnce( dst, [ 2, 4, 5 ] );
  test.identical( dst, [ 1, 3] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayRemovedArraysOnce( dst, [ 1 ] );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 2, 3, 3, 4, 5, 5];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ]
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ 1, 3, 3, 4, 5 ] );
  test.identical( got, 3 );

  var dst = [ 1, 1, 2, 2, 3, 4, 4, 5 ];
  var insArray = [ [ 1, 1 ], 2 , [ 3 ], 4, 4, [ 5 ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ 2 ] );
  test.identical( got, 7 );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ 3, 4 ] );
  test.identical( got, 3 );

  var dst = [ 5, 5 ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ 5 ] );
  test.identical( got, 1 );

  var dst = [ [ 5 ],[ 5 ] ];
  var insArray = [ [ 5 ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ [ 5 ],[ 5 ] ] );
  test.identical( got, 0 );

  var dst = [ [ 5 ], [ 5 ] ];
  var insArray = [ [ [ 5 ] ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray );
  test.identical( dst, [ [ 5 ], [ 5 ] ] );
  test.identical( got, 0 );

  function onEqualize( a, b ){ return a === b }
  var dst = [ 1, 2, [ 3 ] ];
  var insArray = [ 1, 2, [ 3 ] ];
  var got = _.arrayRemovedArraysOnce( dst, insArray, onEqualize );
  test.identical( dst, [ [ 3 ] ]);
  test.identical( got, 2 );

  test.case = 'array has undefined';
  var dst = [ 1 ];
  test.mustNotThrowError( function ()
  {
    var got = _.arrayRemovedArraysOnce( dst, [ undefined, 2 ] );
    test.identical( dst, [ 1 ] );
    test.identical( got, 0 );
  });

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnce();
  });

  test.case = 'dst is not a array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnce( 1, [ 2 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnce( [], [ 1, 2, 3 ], [] )
  });

  test.case = 'second arg is not longIs entity';
  test.shouldThrowErrorSync( function ()
  {
    _.arrayRemovedArraysOnce( [], 1 );
  });
}

//

function arrayRemovedArraysOnceStrictly( test )
{
  test.case = 'simple';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, [ 2 ] );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3, 4 ];
  var insArray = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ ] );
  test.identical( got, 4 );

  var dst = [ 1, 2, 3, 4, 5 ];
  var insArray = [ [ 1 ], [ 2, 3 ], [ 4 ], 5 ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [] );
  test.identical( got, 5 );

  var dst = [ 5, 6, 7, 8 ];
  var insArray = [ [ 5, 6 ], 7 ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, insArray );
  test.identical( dst, [ 8 ] );
  test.identical( got, 3 );

  test.case = 'equalizer 2 args';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var onEqualize = function( a, b )
  {
    return a.num === b.num;
  }
  var insArray = [ [ { num : 3 } ], { num : 1 }  ]
  var got = _.arrayRemovedArraysOnceStrictly( dst, insArray, onEqualize )
  test.identical( dst, [ { num : 2 } ] );
  test.identical( got, 2 );

  test.case = 'equalizer 1 arg';

  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];
  var insArray = [ [ 3 ], 1  ];
  var got = _.arrayRemovedArraysOnceStrictly( dst, insArray, ( e ) => e.num, ( e ) => e );
  test.identical( dst, [ { num : 2 } ] );
  test.identical( got, 2 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly();
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly( 1, 1 );
  })

  test.case = 'ins not exists';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly( [ 1 ], [ 2 ] );
  });

  test.case = 'ins repeated in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly( [ 1, 2, 2 ], [ [ 2 ] ] );
  });

  test.case = 'ins element repeated';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly( [ 1, 2, 3, 4, 5 ], [ [ 2, 3 ], 2 ] );
  });

  test.case = 'onEqualize is not a routine';

  test.shouldThrowErrorSync( function()
  {
    _.arrayRemovedArraysOnceStrictly( [], [ 1, 2, 3 ], [] );
  });

  test.case = 'onEqualize';
  var dst = [ { num : 1 },{ num : 2 },{ num : 3 } ];

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a, b )
    {
      return a.num === b.num;
    }
    var insArray = [ [ { num : 4 } ] ];
    _.arrayRemovedArraysOnceStrictly( dst, insArray, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )

  test.shouldThrowErrorSync( function()
  {
    var onEqualize = function( a )
    {
      return a.num;
    }
    var insArray = [ [ 4 ] ];
    _.arrayRemovedArraysOnceStrictly( dst, insArray, onEqualize );
  });
  test.identical( dst, [ { num : 1 },{ num : 2 },{ num : 3 } ] )
}

//

function arrayRemoveDuplicates( test )
{
  test.case = 'empty';

  var dst = [];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - One element';

  var dst = [ 1 ];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [ 1 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - Several elements';

  var dst = [ 1, 2, 3, '4', '5' ];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [ 1, 2, 3, '4', '5' ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'One duplicated element';

  var dst = [ 1, 2, 2 ];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [ 1, 2 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'One duplicated element - Several elements';

  var dst = [ 1, 2, 1, 1, 1 ];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [ 1, 2 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'Several duplicates several times';

  var dst = [ 1, 2, 3, '4', '4', 1, 2, 1, 5 ];
  var got = _.arrayRemoveDuplicates( dst );
  var expected = [ 1, 2, 3, '4', 5 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'onEqualize';
  var dst = [ 1, 2, 3, '4', '4', 1, 2, 1, 5 ];

  var got  = _.arrayRemoveDuplicates( dst, function( a, b )
  {
    return  a === b;
  });
  var expected = [ 1, 2, 3, '4', 5 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'Evaluator';
  var dst = [ { 'num' : 0 }, { 'num' : 1 }, { 'num' : 2 }, { 'num' : 0 } ];

  var got  = _.arrayRemoveDuplicates( dst, function( a )
  {
    return  a.num;
  });
  var expected = [ { 'num' : 0 }, { 'num' : 1 }, { 'num' : 2 } ];
  test.identical( dst, expected );
  test.identical( got, expected );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveDuplicates();
  })

  // test.case = 'more than two args';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayRemoveDuplicates( [ 1 ], 1, 1 );
  // })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveDuplicates( 1 );
  })

  test.case = 'dst is not an array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveDuplicates( new Uint8Array([1, 2, 3, 4, 5]) );
  })

  test.case = 'second arg is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.arrayRemoveDuplicates( 1, 1 );
  })
}

//

function longRemoveDuplicates( test )
{

  // dst is an array

  test.case = 'empty';

  var dst = [];
  var got = _.longRemoveDuplicates( dst );
  var expected = [];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - One element';

  var dst = [ 1 ];
  var got = _.longRemoveDuplicates( dst );
  var expected = [ 1 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - Several elements';

  var dst = [ 1, 2, 3, '4', '5' ];
  var got = _.longRemoveDuplicates( dst );
  var expected = [ 1, 2, 3, '4', '5' ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'One duplicated element';

  var dst = [ 1, 2, 2 ];
  var got = _.longRemoveDuplicates( dst );
  var expected = [ 1, 2 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'One duplicated element - Several elements';

  var dst = [ 1, 2, 1, 1, 1 ];
  var got = _.longRemoveDuplicates( dst );
  var expected = [ 1, 2 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'Several duplicates several times';

  var dst = [ 1, 2, 3, '4', '4', 1, 2, 1, 5 ];
  var got = _.longRemoveDuplicates( dst );
  var expected = [ 1, 2, 3, '4', 5 ];
  test.identical( dst, expected );
  test.identical( got, expected );

  // dst is a typed array

  test.case = 'empty';

  var dst =  new Uint8Array( 0 );
  var got = _.longRemoveDuplicates( dst );
  var expected = new Uint8Array( [] );
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - One element';

  var dst = new Uint8ClampedArray( [ 300 ] );
  var got = _.longRemoveDuplicates( dst );
  var expected = new Uint8ClampedArray( [ 255 ] );
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'No duplicates - Several elements';

  var dst = new Int8Array( [ 1, 2, 3, '4', '5' ] );
  var got = _.longRemoveDuplicates( dst );
  var expected = new Int8Array( [ 1, 2, 3, '4', '5' ] );
  test.identical( dst, expected );
  test.identical( got, expected );

  test.case = 'One duplicated element - new returned instance';

  var dst = new Int8Array( [ 1, 2, 2 ] );
  var got = _.longRemoveDuplicates( dst );
  var expected = new Int8Array( [ 1, 2 ] );
  test.identical( got, expected );
  test.is( dst !== got );

  test.case = 'One duplicated element - Several elements';

  var dst =  new Uint8ClampedArray( [ -12, 2, - 1, 0, - 11 ] );
  var got = _.longRemoveDuplicates( dst );
  var expected =  new Uint8ClampedArray( [ 0, 2 ] );
  test.identical( got, expected );
  test.is( dst !== got );

  test.case = 'Several duplicates several times';

  var dst = new Int8Array( [ 1, 2, 3, '4', '4', 1, 2, 1, 5 ] );
  var got = _.longRemoveDuplicates( dst );
  var expected = new Int8Array( [ 1, 2, 3, '4', 5 ] );
  test.identical( got, expected );
  test.is( dst !== got );

    // dst is arguments

  function returnArgs( )
  {
    var got = _.longRemoveDuplicates( arguments );
    return got;
  }

  test.case = 'No duplicates';

  var got = returnArgs( 1, '2', 3 );
  var expected = [ 1, '2', 3 ];
  test.identical( got.length, expected.length );
  test.identical( got[ 0 ], expected[ 0 ] );
  test.identical( got[ 1 ], expected[ 1 ] );
  test.identical( got[ 2 ], expected[ 2 ] );

  test.case = 'Duplicates';

  var got = returnArgs( 1, '2', 3, 1, '2', 3 );
  var expected = [ 1, '2', 3 ];
  test.identical( got, expected );

  // Evaluators

  test.case = 'onEqualize';
  var dst =  new Int8Array( [ 1, 2, 3, '4', '4', 1, 2, 1, 5 ] );

  var got  = _.longRemoveDuplicates( dst, function( a, b )
  {
    return  a === b;
  });
  var expected =  new Int8Array( [ 1, 2, 3, '4', 5 ] );
  test.identical( got, expected );
  test.is( dst !== got );

  test.case = 'Evaluator';
  var dst =  new Float32Array( [ 1, 1.1, 1.48483, 1.5782920, 1.9 ] );

  var got  = _.longRemoveDuplicates( dst, function( a )
  {
    return  Math.floor( a );;
  });
  var expected =  new Float32Array( [ 1 ] );
  test.identical( got, expected );
  test.is( dst !== got );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.longRemoveDuplicates();
  })

  // test.case = 'more than two args';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.longRemoveDuplicates( [ 1 ], 1, 1 );
  // })

  test.case = 'dst is not an long';
  test.shouldThrowErrorSync( function()
  {
    _.longRemoveDuplicates( 1 );
  })

  test.case = 'second arg is not a function';
  test.shouldThrowErrorSync( function()
  {
    _.longRemoveDuplicates( 1, 1 );
  })
}

//

function arrayFlatten( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlatten( null, [] );
  test.identical( got, [] );

  var got  = _.arrayFlatten( [], [] );
  test.identical( got, [] );

  var got  = _.arrayFlatten( null, [ 1, 2, 3 ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlatten( [], [ 1, 2, 3 ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlatten( [], [ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlatten( [], [ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlatten( [], [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  var got  = _.arrayFlatten( [], 1, 2, '3'  );
  test.identical( got, [ 1, 2, '3' ] );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlatten( [ 1, 2, 3 ], [ 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlatten( [ 1, 2, 3 ], [ 1, 2, 3 ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlatten( [ 1, 2, 3 ],[ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlatten( [ 1, 2, 3 ],[ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlatten( [ 1 ],[ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, [ 1, 1 ] );

  var got = _.arrayFlatten( [], 1 );
  test.identical( got, [ 1 ] );
  /*
  var got  = _.arrayFlatten( [ 1 ], 2, 3 );
  test.identical( got, [ 1, 2, 3 ] );
  */

  test.case = 'make array flat from multiple arrays as one arg';

  var got  = _.arrayFlatten
  (
    [],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 2, 3, 4 ] );

  test.case = 'make array flat from different inputs -  null dstArray';

  var got  =  _.arrayFlatten( null, 'str', {}, [ 1, 2 ], 5, true );
  test.identical( got, [ 'str', {}, 1, 2, 5, true ] );

  var got = _.arrayFlatten( [ 1,1,3,3, [ 5,5 ] ], 5 );
  var expected = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
  test.identical( got, expected );

  var got = _.arrayFlatten( null, [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1, 1, 3, 3, 5, 5 ];
  test.identical( got, expected );

  var got = _.arrayFlatten( [ [ 0 ], [ [ -1, -2 ] ] ], [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ [ 0 ], [ [ -1, -2 ] ], 1, 1, 3, 3, 5, 5 ];
  test.identical( got, expected );

  //

  test.open( 'another criteria' );

  test.open( 'single argument' ); //

  var got = _.arrayFlatten([ 0,1,2,3 ])
  var expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ 0,1,0,1 ])
  var expected = [ 0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ 0,0 ],[ 1,1 ] ]);
  var expected = [ 0,0,1,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ 0 ],0,1,[ 0,1 ] ]);
  var expected = [ 0,0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ [ 0 ] ] ]);
  var expected = [ 0 ];
  test.identical( got, expected );

  var got = _.arrayFlatten( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,1,3,3,5,5 ];
  test.identical( got, expected );

  test.close( 'single argument' ); //

  test.open( 'two arguments' ); //

  var got = _.arrayFlatten([ 0,1,2,3 ])
  var expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ 0,1,0,1 ])
  var expected = [ 0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ 0,0 ],[ 1,1 ] ]);
  var expected = [ 0,0,1,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ 0 ],0,1,[ 0,1 ] ]);
  var expected = [ 0,0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlatten([ [ [ 0 ] ] ]);
  var expected = [ 0 ];
  test.identical( got, expected );

  var got = _.arrayFlatten( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,1,3,3,5,5 ];
  test.identical( got, expected );

  test.close( 'two arguments' ); //

  test.close( 'another criteria' );

  //

  if( !Config.debug )
  return;

  test.case = 'Empty';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlatten( );
  });
  /*
  test.case = 'Undefined element ina array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlatten( [], [ 1, undefined ] );
  });
  */
}

//

function arrayFlattenOnce( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenOnce( [], [] );
  test.identical( got, [] );

  var got  = _.arrayFlattenOnce( [], [ 1, 1, 2, 2, 3 , 3 ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenOnce( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenOnce( [], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenOnce( [], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenOnce( [ 1, 2, 3, 4 ], [ 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenOnce( [ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenOnce( [ 1, 2, 3 ],[ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenOnce( [ 1, 2, 3 ],[ [ 1, [ 2, [ 3 ] ] ], 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenOnce( [ 1 ],[ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  test.case = 'make array flat from multiple arrays as one arg';

  var got  = _.arrayFlattenOnce
  (
    [ 1, 4 ],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 4, 2, 3 ] );

  test.case = 'onEqualize';
  var got  = _.arrayFlattenOnce( [ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  debugger;
  var got = _.arrayFlattenOnce( [], 1 );
  test.identical( got, [ 1 ] );

  var got = _.arrayFlattenOnce( [ 1, 1, 3, 3, [ 5,5 ] ], 5 );
  var expected = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce( null, [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,3,5 ];
  test.identical( got, expected );

  //

  test.open( 'single argument' );

  var got = _.arrayFlattenOnce([ 0,1,2,3 ]);
  var expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce([ 0,1,0,1 ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce([ [ 0,0 ],[ 1,1 ] ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce([ [ 0 ],0,1,[ 0,1 ] ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce([ 1,[ [ 0 ],1 ],1,0 ]);
  var expected = [ 1,0 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnce( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,3,5 ];
  test.identical( got, expected );

  test.close( 'single argument' );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnce();
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnce( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnce( [], [ 1 ], [] );
  });
}

//

function arrayFlattenOnceStrictly( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenOnceStrictly( [], [] );
  test.identical( got, [] );

  var dst = [];
  var got = _.arrayFlattenOnceStrictly( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );
  test.identical( dst, got );

  var dst = [];
  var got = _.arrayFlattenOnceStrictly( dst, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ]  ] );
  test.identical( got, [ 1, 2, 3, 4 ] );
  test.identical( dst, got );

  var dst = [];
  var got = _.arrayFlattenOnceStrictly( dst, [ [ 1, [ 2, [ 3 ], 4 ] ]  ] );
  test.identical( got, [ 1, 2, 3, 4 ] );
  test.identical( dst, got );

  var dst = [];
  var got = _.arrayFlattenOnceStrictly( dst, [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );
  test.identical( dst, got );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ] );
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  var got  = _.arrayFlattenOnceStrictly( [ 1, 2, 3 ], [ [ [ 4 ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenOnceStrictly( [ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ]  );
  test.identical( got, [ 1, 0, 2, 3 ] );

  test.case = 'make array flat from multiple arrays as one arg';

  var got  = _.arrayFlattenOnceStrictly
  (
    [ 1, 4 ],
    [
      [ [ 2 ] ],
      [ 3, [ [ [ 5 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 4, 2, 3, 5 ] );

  test.case = 'onEqualize';
  var got  = _.arrayFlattenOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  debugger;

  test.case = 'dstArray has sub arrays';
  var got = _.arrayFlattenOnceStrictly( [ 1, 3, [ 5 ] ], 6 );
  var expected = [ 1, 3, [ 5 ], 6 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly( [ [ 1, [ 3, [ 5 ] ] ], 2 ], 6 );
  var expected = [ [ 1, [ 3, [ 5 ] ] ], 2, 6 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly( [ 1, 3, [ 5 ] ], 5 );
  var expected = [ 1, 3, [ 5 ], 5 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly( [], [ 1, 3, [ 5, 6 ] ] );
  var expected = [ 1, 3, 5, 6 ];
  test.identical( got, expected );

  //

  test.open( 'single argument' );

  var got = _.arrayFlattenOnceStrictly([ 0, 1, 2, 3 ]);
  var expected = [ 0, 1, 2, 3 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly([ 0, [ 1 ] ]);
  var expected = [ 0, 1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly([ [ 0 ], [ 1 ] ]);
  var expected = [ 0, 1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]);
  var expected = [ 0, 1, 2, 3, 4 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly([ 0,[ [ 2 ], 1 ], 3, 4 ]);
  var expected = [ 0, 1, 2, 3, 4 ];
  test.identical( got, expected );

  var got = _.arrayFlattenOnceStrictly( [ 1, 3, [ 5, 7 ] ] );
  var expected = [ 1, 3, 5, 7 ];
  test.identical( got, expected );

  test.close( 'single argument' );

  //

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly();
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( 1, [ 1 ] );
  });

  // test.case = 'second is not longIs';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayFlattenOnceStrictly( [], 1 );

  // });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( [], [ 1 ], [] );
  });

  test.case = 'Elements must not be repeated';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( [], [ 1, 1, 2, 2, 3, 3 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( [], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenOnceStrictly( [], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0 ], 0 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0, 1, 1 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0, 1, 1 ], 2 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0 ], [ 1, 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenOnceStrictly( [ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ] );
  });
}

//

function arrayFlattened( test )
{
  test.case = 'make array flat, dst is empty';

  var dst = [];
  var got  = _.arrayFlattened( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  var dst = [];
  var got  = _.arrayFlattened( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got  = _.arrayFlattened( dst, [ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got  = _.arrayFlattened( dst, [ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got  = _.arrayFlattened( dst, [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  test.case = 'make array flat, dst is not empty';

  var dst = [ 1, 2, 3 ];
  var got  = _.arrayFlattened( dst, [ 4 ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got  = _.arrayFlattened( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattened( dst, [ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattened( dst, [ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( dst, [ 1, 2, 3, 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ 1 ];
  var got = _.arrayFlattened( dst, [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( dst, [ 1, 1 ] );
  test.identical( got, 1 );

  var dst = [ 1, [ 2, 3 ] ];
  var got  = _.arrayFlattened( dst, [ 4 ] );
  test.identical( dst, [ 1, [ 2, 3 ], 4 ] );
  test.identical( got, 1 );

  test.case = 'make array flat from multiple arrays as one arg';

  var dst = [];
  var got = _.arrayFlattened
  (
    dst,
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 4 );

  test.case = 'Second is not long';

  var dst = [];
  var got  = _.arrayFlattened( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [];
  var got  = _.arrayFlattened( dst, 1, 2, '3' );
  test.identical( dst, [ 1, 2, '3' ] );
  test.identical( got, 3 );

  var dst = [ 1,1,3,3, [ 5,5 ] ];
  var got = _.arrayFlattened( dst, 5 );
  var expected = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
  test.identical( dst, expected );
  test.identical( got, 1 );

  //

  test.open( 'single argument' );

  var got = _.arrayFlattened([ 0,1,2,3 ]);
  var expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  var got = _.arrayFlattened([ 0,1,0,1 ]);
  var expected = [ 0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattened([ [ 0,0 ],[ 1,1 ] ]);
  var expected = [ 0,0,1,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattened([ [ 0 ],0,1,[ 0,1 ] ]);
  var expected = [ 0,0,1,0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattened([ [ [ 0 ] ] ]);
  var expected = [ 0 ];
  test.identical( got, expected );

  var got = _.arrayFlattened( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,1,3,3,5,5 ];
  test.identical( got, expected );

  var got = _.arrayFlattened( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,1,3,3,5,5 ];
  test.identical( got, expected );

  test.close( 'single argument' );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattened();
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattened( 1, [ 1 ] );
  });

}

//

function arrayFlattenedOnce( test )
{
  test.case = 'make array flat, dst is empty';

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, [ 1, 1, 2, 2, 3 , 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  test.case = 'make array flat, dst is not empty';

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayFlattenedOnce( dst, [ 4 ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnce( dst, [ 1, 2, 3, [ [ 4 ] ] ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnce( dst, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnce( dst, [ [ 1, [ 2, [ 3 ] ] ], 4 ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 1 );

  var dst = [ 1 ];
  var got = _.arrayFlattenedOnce( dst, [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( dst, [ 1 ] );
  test.identical( got, 0 );

  test.case = 'dst contains some inner arrays';

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  var got = _.arrayFlattenedOnce( dst, [ 1, 2, 3 ]  );
  test.identical( dst, [ [ 1 ], [ 2 ], [ 3 ], 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  var got = _.arrayFlattenedOnce( dst, [ 4, 5, 6 ]  );
  test.identical( dst, [ [ 1 ], [ 2 ], [ 3 ], 4, 5, 6 ] );
  test.identical( got, 3 );

  test.case = 'make array flat from multiple arrays as one arg';

  var dst = [ 1, 4 ];
  var got  = _.arrayFlattenedOnce
  (
    dst,
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( dst, [ 1, 4, 2, 3 ] );
  test.identical( got, 2 );

  test.case = 'onEqualize';
  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayFlattenedOnce( dst, [ 1, 4, 2, 5 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( dst, [ 1, 2, 3, 4, 5 ] );
  test.identical( got, 1 );

  //

  test.open( 'single argument' );

  var got = _.arrayFlattenedOnce([ 0,1,2,3 ]);
  var expected = [ 0,1,2,3 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnce([ 0,1,0,1 ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnce([ [ 0,0 ],[ 1,1 ] ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnce([ [ 0 ],0,1,[ 0,1 ] ]);
  var expected = [ 0,1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnce([ 1,[ [ 0 ],1 ],1,0 ]);
  var expected = [ 1,0 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnce( [ 1,1,3,3, [ 5,5 ] ] );
  var expected = [ 1,3,5 ];
  test.identical( got, expected );

  test.close( 'single argument' );

  /*
  test.case = 'Second arg is not long';

  var dst = [];
  var got = _.arrayFlattenedOnce( dst, 2 );
  test.identical( dst, [ undefined ] );
  */
  var dst = [];
  var got = _.arrayFlattenedOnce( dst, 1 );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  var dst = [ 1, 1, 3, 3, [ 5, 5 ] ];
  var got = _.arrayFlattenedOnce( dst, 6 );
  var expected = 1;
  test.identical( dst, [ 1, 1, 3, 3, [ 5, 5 ], 6 ] );
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnce();
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnce( 1, [ 1 ] );
  });

/*
test.case = 'Too many args';
test.shouldThrowErrorSync( function()
{
  _.arrayFlattenedOnce( [ 1 ], 2, 3  );
});
*/

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnce( [], [ 1 ], [] );
  });
}

//

function arrayFlattenedOnceStrictly( test )
{
  test.case = 'make array flat, dst is empty';

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, [ 1, 2, 3 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ 1 ], [ 2 ], 3  ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ 1, [ 2, [ 3, 4 ] ] ]  ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 4 );

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( dst, [ 1 ] );
  test.identical( got, 1 );

  test.case = 'make array flat, dst is not empty';

  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 0 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ [ 4 ] ] ] );
  test.identical( dst, [ 1, 2, 3, 4 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ 4 ], [ 5 ], [ 6 ], [ 7 ] ] );
  test.identical( dst, [ 1, 2, 3, 4, 5, 6, 7 ] );
  test.identical( got, 4 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ 0, [ -1, [ -2 ] ] ], -3 ] );
  test.identical( dst, [ 1, 2, 3, 0, -1, -2, -3 ] );
  test.identical( got, 4 );

  var dst = [ 1 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ [ [ [ [ 2 ] ] ] ] ]  );
  test.identical( dst, [ 1, 2 ] );
  test.identical( got, 1 );

  test.case = 'dst contains some inner arrays';

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  var got = _.arrayFlattenedOnceStrictly( dst, [  [ 1 ], [ 2 ], [ 3 ] ]  );
  test.identical( dst, [ [ 1 ], [ 2 ], [ 3 ], 1, 2, 3 ] );
  test.identical( got, 3 );

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ 4, 5, 6 ]  );
  test.identical( dst, [ [ 1 ], [ 2 ], [ 3 ] , 4, 5, 6 ] );
  test.identical( got, 3 );

  test.case = 'make array flat from multiple arrays as one arg';

  var dst = [ -1, 0 ];
  var got  = _.arrayFlattenedOnceStrictly
  (
    dst,
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( dst, [ -1, 0, 1, 2, 3, 4 ] );
  test.identical( got, 4 );

  test.case = 'onEqualize';
  var dst = [ 1, 2, 3, 4 ];
  var got = _.arrayFlattenedOnceStrictly( dst, [ 5, 6, 7, 8 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( dst, [ 1, 2, 3, 4, 5, 6, 7, 8 ] );
  test.identical( got, 4 );

  test.case = 'Second arg is not long';
  var dst = [ 1, 3, [ 5 ] ];
  var got = _.arrayFlattenedOnceStrictly( dst, 5 );
  var expected = [ 1, 3, [ 5 ], 5 ];
  test.identical( dst, expected );
  test.identical( got, 1 );

  var dst = [ 1, 3, [ 5 ] ];
  var got = _.arrayFlattenedOnceStrictly( dst, 6 );
  var expected = [ 1, 3, [ 5 ], 6 ];
  test.identical( dst, expected );
  test.identical( got, 1 );

  //

  test.open( 'single argument' );

  var got = _.arrayFlattenedOnceStrictly([ 0, 1, 2, 3 ]);
  var expected = [ 0, 1, 2, 3 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnceStrictly([ 0, [ 1 ] ]);
  var expected = [ 0, 1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnceStrictly([ [ 0 ], [ 1 ] ]);
  var expected = [ 0, 1 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]);
  var expected = [ 0, 1, 2, 3, 4 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnceStrictly([ 0, [ [ 1 ], 2 ], 3, 4 ]);
  var expected = [ 0, 2, 1, 3, 4 ];
  test.identical( got, expected );

  var got = _.arrayFlattenedOnceStrictly( [ 1, 3,  [ 5, 7 ] ] );
  var expected = [ 1, 3, 5, 7 ];
  test.identical( got, expected );

  test.close( 'single argument' );


  test.case = 'Second arg is not long';

  var dst = [];
  var got = _.arrayFlattenedOnceStrictly( dst, 2 );
  test.identical( dst, [ 2 ] );
  test.identical( got, 1 );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly();
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( [], [ 1 ], [] );
  });

  test.case = 'Elements must not be repeated';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( [], [ 1, 1, 2, 2, 3 , 3 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( [], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedOnceStrictly( [], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0 ], 0 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0, 1, 1 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0 ], 1 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0, 1, 1 ], 2 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0 ], [ 1, 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedOnceStrictly( [ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ] );
  });

}

//

function arrayFlatten2( test )
{

  test.case = 'array of the passed arguments';
  var got = _.arrayFlatten( [],[ 'str', {}, [ 1, 2 ], 5, true ] );
  var expected = [ 'str', {}, 1, 2, 5, true ];
  test.identical( got, expected );

  test.case = 'without undefined';
  var got = _.arrayFlatten( [ 1, 2, 3 ], [ 13, 'abc', null ] );
  var expected = [ 1, 2, 3, 13, 'abc', null ];
  test.identical( got, expected );

  test.case = 'Args are not long';
  var got = _.arrayFlatten( [ 1, 2 ], 13, 'abc', {} );
  var expected = [ 1, 2, 13, 'abc', {} ];
  test.identical( got, expected );


  test.case = 'bad arguments'; /* */

  if( !Config.debug )
  return;

  test.shouldThrowErrorSync( () => _.arrayFlatten( [ 1, 2, 3 ], [ 13, 'abc', undefined, null ] ) );

}

function arrayFlattenDefined( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenDefined( [], [] );
  test.identical( got, [] );

  var got  = _.arrayFlattenDefined( [], [ 1, 2, 3 ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [], [ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [], [ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [], [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  var got  = _.arrayFlattenDefined( [], 1, 2, '3'  );
  test.identical( got, [ 1, 2, '3' ] );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenDefined( [ 1, 2, 3 ], [ 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenDefined( [ 1, 2, 3 ], [ 1, 2, 3 ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ] ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ] ] );
  test.identical( got, [ 1, 2, 3, 1, 2, 3 ] );

  var got  = _.arrayFlattenDefined( [ 1 ], [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, [ 1, 1 ] );

  var got = _.arrayFlattenDefined( [], 1 );
  test.identical( got, [ 1 ] );

  test.case = 'make array flat from multiple arrays as one arg';

  var got  = _.arrayFlattenDefined
  (
    [],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 2, 3, 4 ] );

  test.case = 'make array flat from different inputs -  null dstArray';

  var got  =  _.arrayFlattenDefined( null, 'str', {}, [ 1, 2 ], 5, true );
  test.identical( got, [ 'str', {}, 1, 2, 5, true ] );

  var got = _.arrayFlattenDefined( [ 1, 1, 3, 3, [ 5, 5 ] ], 5 );
  test.identical( got, [ 1, 1, 3, 3, [ 5, 5 ], 5 ] );

  var got = _.arrayFlattenDefined( null, [ 1, 1, 3, 3, [ 5, 5 ] ] );
  test.identical( got, [ 1, 1, 3, 3, 5, 5 ] );

  var got = _.arrayFlattenDefined( [ [ 0 ], [ [ -1, -2 ] ] ], [ 1, 1, 3, 3, [ 5, 5 ] ] );
  test.identical( got, [ [ 0 ], [ [ -1, -2 ] ], 1, 1, 3, 3, 5, 5 ] );

  //

  test.case = 'single argument';

  var got = _.arrayFlattenDefined( [ 0, 1, 2, 3 ] )
  test.identical( got, [ 0, 1, 2, 3 ] );

  var got = _.arrayFlattenDefined( [ [ 0, 0 ], [ 1, 1 ] ] );
  test.identical( got, [ 0, 0, 1, 1 ] );

  var got = _.arrayFlattenDefined( [ [ 0 ], 0, 1, [ 0, 1 ] ] );
  test.identical( got, [ 0, 0, 1, 0, 1 ] );

  var got = _.arrayFlattenDefined( [ [ [ 0 ] ] ] );
  test.identical( got, [ 0 ] );

  var got = _.arrayFlattenDefined( [ 1, 1, 3, 3, [ 5, 5 ] ] );
  test.identical( got, [ 1, 1, 3, 3, 5, 5 ] );

  //

  if( !Config.debug )
  return;

  test.case = 'Empty';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefined();
  });

  test.case = 'dstArray is not array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefined( 1, [ 1 ] );
  });

  test.case = 'insArray is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefined( [ 1 ], undefined );
  });

}

//

function arrayFlattenDefinedOnce( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenDefinedOnce( [], [] );
  test.identical( got, [] );

  var got  = _.arrayFlattenDefinedOnce( [], [ 1, 1, 2, 2, 3, 3, 3 ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefinedOnce( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefinedOnce( [], [ [ 1, 1, [ 2, 2, 2, [ 3, 3 ] ] ]  ] );
  test.identical( got, [ 1, 2, 3 ] );

  var got  = _.arrayFlattenDefinedOnce( [], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenDefinedOnce( [ 1, 2, 3, 4 ], [ 4, 2 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenDefinedOnce( [ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenDefinedOnce( [ 'a', 2, 3 ], [ [ 1 ], [ 4 ], [ 'a' ], [ 4 ] ] );
  test.identical( got, [ 'a', 2, 3, 1, 4 ] );

  var got  = _.arrayFlattenDefinedOnce( [ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ], 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenDefinedOnce( [ 1 ], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, [ 1 ] );

  test.case = 'make array flat from multiple arrays as one arg';
  var got  = _.arrayFlattenDefinedOnce
  (
    [ 1, 4 ],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 4, 2, 3 ] );

  //

  test.case = 'onEqualize';
  var got  = _.arrayFlattenDefinedOnce( [ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], ( a, b ) =>  a === b );
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  test.case = 'onEvaluate - one evaluator';
  var got  = _.arrayFlattenDefinedOnce( [ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], ( a ) => a );
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  test.case = 'onEvaluate - two evaluator';

  var got  = _.arrayFlattenDefinedOnce( [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5 ], ( a ) => a[ 0 ], ( b ) => b );
  test.identical( got, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], 5 ] );

  var got  = _.arrayFlattenDefinedOnce( [ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5, [ 6 ] ], ( a ) => a[ 0 ], ( b ) => b );
  test.identical( got, [ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ], 5, 6 ] );

  //

  test.case = 'single argument';

  var got = _.arrayFlattenDefinedOnce( [ 0, 1, 2, 3 ] );
  test.identical( got, [ 0, 1, 2, 3 ] );

  var got = _.arrayFlattenDefinedOnce( [ 0, 1, 0, 1 ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenDefinedOnce( [ [ 0, 0 ], [ 1, 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenDefinedOnce( [ [ 0 ], 0, 1, [ 0, 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenDefinedOnce( [ 1, [ [ 0 ], 1 ], 1, 0 ] );
  test.identical( got, [ 1, 0 ] );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnce();
  });

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnce( [], [ 1 ], ( a ) => a, ( a ) => a, ( a ) => a );
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnce( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnce( [], [ 1 ], [] );
  });
}

//

function arrayFlattenDefinedOnceStrictly( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenDefinedOnceStrictly( [], [] );
  test.identical( got, [] );

  var got = _.arrayFlattenDefinedOnceStrictly( [], [ 1, 2, 3, 4 ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [], [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [], [ [ 1, [ 2, [ 3 ], 4 ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [], [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ] );
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1, 2, 3 ], [ [ [ 4 ] ] ] );
  test.identical( got, [ 1, 2, 3, 4 ] );

  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ] );
  test.identical( got, [ 1, 0, 2, 3 ] );

  test.case = 'make array flat from multiple arrays as one arg';
  var got  = _.arrayFlattenDefinedOnceStrictly
  (
    [ 1, 4 ],
    [
      [ [ 2 ] ],
      [ 3, [ [ [ 5 ] ] ] ]
    ]
  );
  test.identical( got, [ 1, 4, 2, 3, 5 ] );

  //

  test.case = 'onEqualize';
  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  test.case = 'onEvaluate - one evaluator';
  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ], ( a ) => a );
  test.identical( got, [ 1, 2, 3, 4, 5 ] );

  test.case = 'onEvaluate - two evaluators';
  var got  = _.arrayFlattenDefinedOnceStrictly( [ 1, 2, 3, 4, 5 ], [ [ 5 ] ], ( a ) => a, ( b ) => b[ 0 ] );
  test.identical( got, [ 1, 2, 3, 4, 5, 5 ] );

  //

  test.case = 'dstArray has sub arrays';

  var got = _.arrayFlattenDefinedOnceStrictly( [ 1, 3, [ 5 ] ], 6 );
  test.identical( got, [ 1, 3, [ 5 ], 6 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [ [ 1, [ 3, [ 5 ] ] ], 2 ], 6 );
  test.identical( got, [ [ 1, [ 3, [ 5 ] ] ], 2, 6 ] );

  test.case = 'single argument';

  var got = _.arrayFlattenDefinedOnceStrictly( [ 0, [ 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [ [ 0 ], [ 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [ [ 0 ], 1, 2, [ 3, 4 ] ] );
  test.identical( got, [ 0, 1, 2, 3, 4 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [ 0, [ [ 2 ], 1 ], 3, 4 ] );
  test.identical( got, [ 0, 1, 2, 3, 4 ] );

  var got = _.arrayFlattenDefinedOnceStrictly( [ 1, 3, [ 7, 5 ] ] );
  test.identical( got, [ 1, 3, 7, 5 ] );

  //

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly();
  });

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ 1 ], ( a ) => a, ( b ) => b, ( c ) => c );
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ 1 ], [] );
  });

  test.case = 'second evaluator is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ 1 ], ( a ) => a, [] );
  });

  test.case = 'Elements must not be repeated';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ 1, 1, 2, 2, 3, 3 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenDefinedOnceStrictly( [], [ [ [ [ [ 1, 1 ] ] ] ] ]  );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenDefinedOnceStrictly( [ 0, 1, 7, 6 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenDefinedOnceStrictly( [ 0 ], 0 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenDefinedOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenDefinedOnceStrictly( [ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ] );
  });
}

//

function arrayFlattenedDefined( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenedDefined( [], [] );
  test.identical( got, 0 );

  var got  = _.arrayFlattenedDefined( [], [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [], [ [ 1 ], [ 2 ], [ 3 ]  ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [], [ [ 1, [ 2, [ 3 ] ] ]  ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [], [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefined( [], 1, 2, '3'  );
  test.identical( got, 3 );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenedDefined( [ 1, 2, 3 ], [ 4 ] );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefined( [ 1, 2, 3 ], [ 1, 2, 3 ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ] ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ] ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefined( [ 1 ], [ [ [ [ [ 1 ] ] ] ] ]  );
  test.identical( got, 1 );

  var got = _.arrayFlattenedDefined( [], 1 );
  test.identical( got, 1 );

  test.case = 'make array flat from multiple arrays as one arg';
  var got  = _.arrayFlattenedDefined
  (
    [],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, 4 );

  test.case = 'make array flat from different inputs';

  var got = _.arrayFlattenedDefined( [ 1, 1, 3, 3, [ 5, 5 ] ], 5 );
  test.identical( got, 1 );

  var got = _.arrayFlattenedDefined( [ [ 0 ], [ [ -1, -2 ] ] ], [ 1, 1, 3, 3, [ 5, 5 ] ] );
  test.identical( got, 6 );

  //

  test.case = 'single argument';

  var got = _.arrayFlattenedDefined( [ 0, 1, 2, 3 ] )
  test.identical( got, [ 0, 1, 2, 3 ] );

  var got = _.arrayFlattenedDefined( [ [ 0, 0 ], [ 1, 1 ] ] );
  test.identical( got, [ 0, 0, 1, 1 ] );

  var got = _.arrayFlattenedDefined( [ [ 0 ], 0, 1, [ 0, 1 ] ] );
  test.identical( got, [ 0, 0, 1, 0, 1 ] );

  var got = _.arrayFlattenedDefined( [ [ [ 0 ] ] ] );
  test.identical( got, [ 0 ] );

  var got = _.arrayFlattenedDefined( [ 1, 1, 3, 3, [ 5, 5 ] ] );
  test.identical( got, [ 1, 1, 3, 3, 5, 5 ] );

  //

  if( !Config.debug )
  return;

  test.case = 'Empty';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefined();
  });

  test.case = 'dstArray is not array';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefined( 1, [ 1 ] );
  });

  test.case = 'insArray is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefined( [ 1 ], undefined );
  });

}

//

function arrayFlattenedDefinedOnce( test )
{
  test.case = 'make array flat, dst is empty or null';

  var got  = _.arrayFlattenedDefinedOnce( [], [] );
  test.identical( got, 0 );

  var got  = _.arrayFlattenedDefinedOnce( [], [ 1, 1, 2, 2, 3, 3, 3 ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefinedOnce( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefinedOnce( [], [ [ 1, 1, [ 2, 2, 2, [ 3, 3 ] ] ]  ] );
  test.identical( got, 3 );

  var got  = _.arrayFlattenedDefinedOnce( [], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, 1 );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenedDefinedOnce( [ 1, 2, 3, 4 ], [ 4, 2 ] );
  test.identical( got, 0 );

  var got  = _.arrayFlattenedDefinedOnce( [ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ] );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefinedOnce( [ 'a', 2, 3 ], [ [ 1 ], [ 4 ], [ 'a' ], [ 4 ] ] );
  test.identical( got, 2 );

  var got  = _.arrayFlattenedDefinedOnce( [ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ], 4 ] );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefinedOnce( [ 1 ],[ [ [ [ [ 1, 1, 1 ] ] ] ] ]  );
  test.identical( got, 0 );

  test.case = 'make array flat from multiple arrays as one arg';
  var got  = _.arrayFlattenedDefinedOnce
  (
    [ 1, 4 ],
    [
      [ 1 ],
      [ [ 2 ] ],
      [ 3, [ [ [ 4 ] ] ] ]
    ]
  );
  test.identical( got, 2 );

  //

  test.case = 'onEqualize';
  var got  = _.arrayFlattenedDefinedOnce( [ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], ( a, b ) =>  a === b );
  test.identical( got, 1 );

  test.case = 'onEvaluate - one evaluator';
  var got  = _.arrayFlattenedDefinedOnce( [ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], ( a ) => a );
  test.identical( got, 1 );

  test.case = 'onEvaluate - two evaluator';

  var got  = _.arrayFlattenedDefinedOnce( [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5 ], ( a ) => a[ 0 ], ( b ) => b );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefinedOnce( [ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5, [ 6 ] ], ( a ) => a[ 0 ], ( b ) => b );
  test.identical( got, 2 );

  //

  test.case = 'single argument';

  var got = _.arrayFlattenedDefinedOnce( [ 0, 1, 2, 3 ] );
  test.identical( got, [ 0, 1, 2, 3 ] );

  var got = _.arrayFlattenedDefinedOnce( [ 0, 1, 0, 1 ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenedDefinedOnce( [ [ 0, 0 ], [ 1, 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenedDefinedOnce( [ [ 0 ], 0, 1, [ 0, 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenedDefinedOnce( [ 1, [ [ 0 ], 1 ], 1, 0 ] );
  test.identical( got, [ 1, 0 ] );

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnce();
  });

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnce( [], [ 1 ], ( a ) => a, ( a ) => a, ( a ) => a );
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnce( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnce( [], [ 1 ], [] );
  });
}

//

function arrayFlattenedDefinedOnceStrictly( test )
{
  test.case = 'make array flat, dst is empty';

  var got  = _.arrayFlattenedDefinedOnceStrictly( [], [] );
  test.identical( got, 0 );

  var got = _.arrayFlattenedDefinedOnceStrictly( [], [ 1, 2, 3, 4 ] );
  test.identical( got, 4 );

  var got = _.arrayFlattenedDefinedOnceStrictly( [], [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ] );
  test.identical( got, 4 );

  var got = _.arrayFlattenedDefinedOnceStrictly( [], [ [ 1, [ 2, [ 3 ], 4 ] ] ] );
  test.identical( got, 4 );

  var got = _.arrayFlattenedDefinedOnceStrictly( [], [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ] );
  test.identical( got, 4 );

  test.case = 'make array flat, dst is not empty';

  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ] );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1, 2, 3 ], [ [ [ 4 ] ] ] );
  test.identical( got, 1 );

  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ] );
  test.identical( got, 3 );

  test.case = 'make array flat from multiple arrays as one arg';
  var got  = _.arrayFlattenedDefinedOnceStrictly
  (
    [ 1, 4 ],
    [
      [ [ 2 ] ],
      [ 3, [ [ [ 5 ] ] ] ]
    ]
  );
  test.identical( got, 3 );

  //

  test.case = 'onEqualize';
  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ], function( a, b )
  {
    return  a === b;
  });
  test.identical( got, 1 );

  test.case = 'onEvaluate - one evaluator';
  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1, 2, 3, 4 ], [ 5 ], ( a ) => a );
  test.identical( got, 1 );

  test.case = 'onEvaluate - two evaluators';
  var got  = _.arrayFlattenedDefinedOnceStrictly( [ 1, 2, 3, 4, 5 ], [ [ 5 ] ], ( a ) => a, ( b ) => b[ 0 ] );
  test.identical( got, 1 );

  //

  test.case = 'dstArray has sub arrays';

  var got = _.arrayFlattenedDefinedOnceStrictly( [ 1, 3, [ 5 ] ], 6 );
  test.identical( got, 1 );

  var got = _.arrayFlattenedDefinedOnceStrictly( [ [ 1, [ 3, [ 5 ] ] ], 2 ], 6 );
  test.identical( got, 1 );

  test.case = 'single argument';

  var got = _.arrayFlattenedDefinedOnceStrictly( [ 0, [ 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenedDefinedOnceStrictly( [ [ 0 ], [ 1 ] ] );
  test.identical( got, [ 0, 1 ] );

  var got = _.arrayFlattenedDefinedOnceStrictly( [ [ 0 ], 1, 2, [ 3, 4 ] ] );
  test.identical( got, [ 0, 1, 2, 3, 4 ] );

  var got = _.arrayFlattenedDefinedOnceStrictly( [ 0, [ [ 2 ], 1 ], 3, 4 ] );
  test.identical( got, [ 0, 1, 2, 3, 4 ] );

  var got = _.arrayFlattenedDefinedOnceStrictly( [ 1, 3, [ 7, 5 ] ] );
  test.identical( got, [ 1, 3, 7, 5 ] );

  //

  if( !Config.debug )
  return;

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly();
  });

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ 1 ], ( a ) => a, ( b ) => b, ( c ) => c );
  });

  test.case = 'first is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ 1 ], [] );
  });

  test.case = 'second evaluator is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ 1 ], ( a ) => a, [] );
  });

  test.case = 'Elements must not be repeated';
  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ 1, 1, 2, 2, 3, 3 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ]  ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayFlattenedDefinedOnceStrictly( [], [ [ [ [ [ 1, 1 ] ] ] ] ]  );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedDefinedOnceStrictly( [ 0, 1, 7, 6 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedDefinedOnceStrictly( [ 0 ], 0 );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedDefinedOnceStrictly( [ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ] );
  });

  test.shouldThrowErrorSync( function()
  {
     _.arrayFlattenedDefinedOnceStrictly( [ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ] );
  });
}

//
// array replace
//

function arrayReplace( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplace( dst, undefined, 0 );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplace( dst, 0, 0 );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplace( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplace( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'Several elements';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplace( dst, false, true );
  var expected = [ true, true, true, true, true, true ];
  test.identical( got, expected );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplace( dst, 1, 0 );
  test.identical( got, [ 0, 0, 0 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplace( dst, 1, 0 );
  test.identical( got, [ 0, 2, 0 ] );
  test.is( got === dst );

  test.case = 'No match';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplace( dst, 4, 0 );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  function onEqualize( a, b )
  {
    return a.value === b;
  };

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplace( dst, 1, { value : 0 }, onEqualize );
  test.identical( got, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
  test.is( got === dst );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplace( );
  })

  test.case = 'first arg is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplace( 1, 1, 1 );
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplace( 1, 1, 1, 1);
  })
}

//

function arrayReplaceOnce( test )
{

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplaceOnce( dst, 0, 0 );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaceOnce( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaceOnce( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplaceOnce( dst, false, true );
  var expected = [ true, true, true, true, true, false ];
  test.is( got === dst );

  test.case = 'element not exists';
  var dst = [ 1,2,3 ];
  var got = _.arrayReplaceOnce( dst, [ 1 ], [ 4 ] );
  var expected = [ 1,2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'replace just first match';
  var dst = [ 0, 0, 0, 0, 0, 0 ];
  var got = _.arrayReplaceOnce( dst, 0, 1 );
  var expected = [ 1, 0, 0, 0, 0, 0 ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'equalize';
  var dst = [ 1,2,3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplaceOnce( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnce();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnce( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnce( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnce( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplaceOnceStrictly( test )
{

  test.case = 'repeated element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaceOnceStrictly( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaceOnceStrictly( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaceOnceStrictly( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplaceOnceStrictly( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'equalize';
  var dst = [ 1,2,3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplaceOnceStrictly( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly();
  });

  test.case = 'nothing';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [], 0, 0 );
  });

  test.case = 'element doesn´t exist';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [ 1,2,3 ], [ 1 ], [ 4 ] );
  });

  test.case = 'element two times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [ 1, 2, 3, 1 ], [ 1 ], [ 4 ] );
  });

  test.case = 'element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [ 0, 0, 0, 0, 0, 0 ], 0, 1 );
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceOnceStrictly( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplaced( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplaced( dst, undefined, 0 );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplaced( dst, 0, 0 );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaced( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'fourth element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaced( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'Several elements';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplaced( dst, false, true );
  var expected = [ true, true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplaced( dst, 1, 0 );
  test.identical( dst, [ 0, 0, 0 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplaced( dst, 1, 0 );
  test.identical( dst, [ 0, 2, 0 ] );
  test.identical( got, 2 );

  test.case = 'No match';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaced( dst, 4, 0 );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  function onEqualize( a, b )
  {
    return a.value === b;
  }

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplaced( dst, 1, { value : 0 }, onEqualize );
  test.identical( dst, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
  test.identical( got, 2 );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaced( );
  })

  test.case = 'first arg is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaced( 1, 1, 1 );
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaced( 1, 1, 1, 1);
  })
}

//

function arrayReplacedOnce( test )
{

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplacedOnce( dst, 0, 0 );
  test.identical( dst, [] );
  test.identical( got, -1 );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplacedOnce( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'fourth element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplacedOnce( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 3 );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedOnce( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, 4 );

  test.case = 'first of several elements';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedOnce( dst, true, false );
  var expected = [ false, true, true, true, false ];
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'element not exists';
  var dst = [ 1,2,3 ];
  var got = _.arrayReplacedOnce( dst, [ 1 ], [ 4 ] );
  var expected = [ 1,2,3 ];
  test.identical( dst, expected );
  test.identical( got, -1 );

  test.case = 'equalize';
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var dst = [ 1,2,3 ];
  var got = _.arrayReplacedOnce( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( dst, expected );
  test.identical( got,0 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnce();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnce( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnce( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnce( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplacedOnceStrictly( test )
{

  test.case = 'first element';
  var dst = [ 1, 2, 3, 4, 5 ];
  var got = _.arrayReplacedOnceStrictly( dst, 1, 2 );
  var expected = [ 2, 2, 3, 4, 5 ] ;
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplacedOnceStrictly( dst, undefined, 2 );
  var expected = [ 1, 2, 3, 4, 5 ] ;
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplacedOnceStrictly( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 3 );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedOnceStrictly( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, 4 );

  test.case = 'equalize';
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedOnceStrictly( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ], 2, 3 ];
  test.identical( dst, expected );
  test.identical( got, 0 );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly();
  });

  test.case = 'nothing';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( [], 0, 0 );
  });

  test.case = 'element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( [ 1, 2, 3, 1, 2, 3 ], 1, 4 );
  });

  test.case = 'element doesn´t exist';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( [ 1, 2, 3 ], [ 1 ], [ 4 ] );
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedOnceStrictly( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplaceElement( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplaceElement( dst, undefined, 0 );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplaceElement( dst, 0, 0 );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaceElement( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaceElement( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'Several elements';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplaceElement( dst, false, true );
  var expected = [ true, true, true, true, true, true ];
  test.identical( got, expected );
  test.is( got === dst );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplaceElement( dst, 1, 0 );
  test.identical( got, [ 0, 0, 0 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplaceElement( dst, 1, 0 );
  test.identical( got, [ 0, 2, 0 ] );
  test.is( got === dst );

  test.case = 'No match';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceElement( dst, 4, 0 );
  test.identical( got, [ 1, 2, 3 ] );

  function onEqualize( a, b )
  {
    return a.value === b;
  };

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplaceElement( dst, 1, { value : 0 }, onEqualize );
  test.identical( got, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
  test.is( got === dst );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( );
  })

  test.case = 'first arg is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( 1, 1, 1 );
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( 1, 1, 1, 1);
  })
}

//

function arrayReplaceElement2( test )
{
  test.case = 'replace all ins with sub';

  var dst = [];
  var got = _.arrayReplaceElement( dst, undefined, 0 );
  test.identical( got, [] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplaceElement( dst, 1, 0 );
  test.identical( got, [ 0, 0, 0 ] );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplaceElement( dst, 1, 0 );
  test.identical( got, [ 0, 2, 0 ] );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceElement( dst, 4, 0 );
  test.identical( got, [ 1, 2, 3 ] );

  function onEqualize( a, b )
  {
    return a.value === b;
  }

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplaceElement( dst, 1, { value : 0 }, onEqualize );
  test.identical( got, [ { value : 0 }, { value : 0 }, { value : 2 } ] );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( );
  });

  test.case = 'first arg is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( 1, 1, 1 );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElement( 1, 1, 1, 1);
  });
}

//

function arrayReplaceElementOnce( test )
{

  test.case = 'nothing';
  var dst = [ ];
  var got = _.arrayReplaceElementOnce( dst, 0, 0 );
  var expected = [];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplaceElementOnce( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaceElementOnce( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplaceElementOnce( dst, false, true );
  var expected = [ true, true, true, true, true, false ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'element not exists';
  var dst = [ 1,2,3 ];
  var got = _.arrayReplaceElementOnce( dst, [ 1 ], [ 4 ] );
  var expected = [ 1,2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'replace just first match';
  var dst = [ 0, 0, 0, 0, 0, 0 ];
  var got = _.arrayReplaceElementOnce( dst, 0, 1 );
  var expected = [ 1, 0, 0, 0, 0, 0 ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'equalize';
  var dst = [ 1,2,3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplaceElementOnce( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnce();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnce( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnce( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnce( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplaceElementOnceStrictly( test )
{

  test.case = 'second element';
  var dst = [ 1, 0, 3, 4, 5 ];
  var got = _.arrayReplaceElementOnceStrictly( dst, 0, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplaceElementOnceStrictly( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplaceElementOnceStrictly( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( got, expected );
  test.is( got === dst );

  test.case = 'equalize';
  var dst = [ 1,2,3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplaceElementOnceStrictly( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( got, expected );
  test.is( got === dst );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly();
  });

  test.case = 'nothing';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [], 0, 0 );
  });

  test.case = 'element doesn´t exist';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [ 1,2,3 ], [ 1 ], [ 4 ] );
  });

  test.case = 'element two times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [ 1, 2, 3, 1 ], [ 1 ], [ 4 ] );
  });

  test.case = 'element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [ 0, 0, 0, 0, 0, 0 ], 0, 1 );
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceElementOnceStrictly( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplacedElement( test )
{
  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplacedElement( dst, undefined, 0 );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplacedElement( dst, 0, 0 );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplacedElement( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'fourth element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplacedElement( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'Several elements';
  var dst = [ true, true, true, true, false, false ];
  var got = _.arrayReplacedElement( dst, false, true );
  var expected = [ true, true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, 2 );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplacedElement( dst, 1, 0 );
  test.identical( dst, [ 0, 0, 0 ] );
  test.identical( got, 3 );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplacedElement( dst, 1, 0 );
  test.identical( dst, [ 0, 2, 0 ] );
  test.identical( got, 2 );

  test.case = 'No match';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedElement( dst, 4, 0 );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  function onEqualize( a, b )
  {
    return a.value === b;
  }

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplacedElement( dst, 1, { value : 0 }, onEqualize );
  test.identical( dst, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
  test.identical( got, 2 );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElement( );
  })

  test.case = 'first arg is not longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElement( 1, 1, 1 );
  })

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElement( 1, 1, 1, 1);
  })
}

//

function arrayReplacedElement2( test )
{
  test.case = 'replace all ins with sub';

  var dst = [];
  var got = _.arrayReplacedElement( dst, undefined, 0 );
  test.identical( got, 0 );
  test.identical( dst, [] );

  var dst = [ 1, 1, 1 ];
  var got = _.arrayReplacedElement( dst, 1, 0 );
  test.identical( got, 3 );
  test.identical( dst, [ 0, 0, 0 ] );

  var dst = [ 1, 2, 1 ];
  var got = _.arrayReplacedElement( dst, 1, 0 );
  test.identical( got, 2 );
  test.identical( dst, [ 0, 2, 0 ] );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedElement( dst, 4, 0 );
  test.identical( got, 0 );
  test.identical( dst, [ 1, 2, 3 ] );

  function onEqualize( a, b )
  {
    return a.value === b;
  }

  var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
  var got = _.arrayReplacedElement( dst, 1, { value : 0 }, onEqualize );
  test.identical( got, 2 );
  test.identical( dst, [ { value : 0 }, { value : 0 }, { value : 2 } ] );

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElement( );
  });

  test.case = 'first arg is not longIs';
  debugger;
  test.shouldThrowErrorSync( function()
  {
    debugger;
    _.arrayReplacedElement( 1, 1, 1 );
  });
  debugger;

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElement( 1, 1, 1, 1 );
  });

}

//

function arrayReplacedElementOnce( test )
{

  test.case = 'nothing';
  var dst = [];
  var got = _.arrayReplacedElementOnce( dst, 0, 0 );
  test.identical( dst, [] );
  test.identical( got, undefined );

  test.case = 'second element';
  var dst = [ 1, undefined, 3, 4, 5 ];
  var got = _.arrayReplacedElementOnce( dst, undefined, 2 );
  var expected = [ 1,2,3,4,5 ] ;
  test.identical( dst, expected );
  test.identical( got, undefined );

  test.case = 'fourth element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplacedElementOnce( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 'Dmitry' );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedElementOnce( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, false );

  test.case = 'first of several elements';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedElementOnce( dst, true, false );
  var expected = [ false, true, true, true, false ];
  test.identical( dst, expected );
  test.identical( got, true );

  test.case = 'element not exists';
  var dst = [ 1,2,3 ];
  var got = _.arrayReplacedElementOnce( dst, [ 1 ], [ 4 ] );
  var expected = [ 1,2,3 ];
  test.identical( dst, expected );
  test.identical( got, undefined );

  test.case = 'equalize';
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var dst = [ 1,2,3 ];
  var got = _.arrayReplacedElementOnce( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ],2,3 ];
  test.identical( dst, expected );
  test.identical( got, [ 1 ] );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnce();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnce( [ 1, 2, undefined, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnce( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnce( 'wrong argument', undefined, 3 );
  });
}

//

function arrayReplacedElementOnceStrictly( test )
{

  test.case = 'first element';
  var dst = [ 1, 2, 3, 4, 5 ];
  var got = _.arrayReplacedElementOnceStrictly( dst, 1, 2 );
  var expected = [ 2, 2, 3, 4, 5 ] ;
  test.identical( dst, expected );
  test.identical( got, 1 );

  test.case = 'second element';
  var dst = [ 1, 0, 3, 4, 5 ];
  var got = _.arrayReplacedElementOnceStrictly( dst, 0, 2 );
  var expected = [ 1, 2, 3, 4, 5 ] ;
  test.identical( dst, expected );
  test.identical( got, 0 );

  test.case = 'third element';
  var dst = [ 'Petre', 'Mikle', 'Oleg', 'Dmitry' ];
  var got = _.arrayReplacedElementOnceStrictly( dst, 'Dmitry', 'Bob' );
  var expected = [ 'Petre', 'Mikle', 'Oleg', 'Bob' ];
  test.identical( dst, expected );
  test.identical( got, 'Dmitry' );

  test.case = 'fourth element';
  var dst = [ true, true, true, true, false ];
  var got = _.arrayReplacedElementOnceStrictly( dst, false, true );
  var expected = [ true, true, true, true, true ];
  test.identical( dst, expected );
  test.identical( got, false );

  test.case = 'equalize';
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedElementOnceStrictly( dst, [ 1 ], [ 4 ], onEqualize );
  var expected = [ [ 4 ], 2, 3 ];
  test.identical( dst, expected );
  test.identical( got, [ 1 ] );
/*
  test.case = 'element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, 3, 4 ], 4, 1 );
  });
*/
  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly();
  });

  test.case = 'nothing';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [], 0, 0 );
  });

  test.case = 'element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, 3, 1, 2, 3 ], 1, 4 );
  });

  test.case = 'element doesn´t exist';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, 3 ], [ 1 ], [ 4 ] );
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, 3, 4, 5 ] );
  });

  test.case = 'fourth argument is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, 0, 4, 5 ], 0, 3, 'argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( 'wrong argument', 0, 3 );
  });

  test.case = 'second argument is undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedElementOnceStrictly( [ 1, 2, undefined, 4, 5 ], undefined, 3, 'argument' );
  });
}

//

function arrayReplaceArray( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArray( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArray( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArray( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArray( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 1 ];
  var got = _.arrayReplaceArray( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ];
  var got = _.arrayReplaceArray( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3, 6, 5, 6, 3, 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArray( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins and dst have undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArray( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArray( dst, [ 1 ], [ undefined ] );
  test.identical( got, [ 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins and sub have mirror elements';
  var dst = [ 0, 0, 0, 1, 1, 1, 0, 1 ];
  var got = _.arrayReplaceArray( dst, [ 1, 0 ], [ 0, 1 ] );
  test.identical( got, [ 1, 1, 1, 0, 0, 0, 1, 0 ] );
  test.is( got === dst );

  var dst = [ 'a', 'b', 'c', false, 'c', 'b', 'a', true, 2 ];
  var got = _.arrayReplaceArray( dst, [ 'a', 'b', 'c', false, true ], [ 'c', 'a', 'b', true, false ] );
  test.identical( got, [ 'c', 'a', 'b', true, 'b', 'a', 'c', false, 2 ] );
  test.is( got === dst );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplaceArray( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( got, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArray();
  })

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArray( [ 1 ], [ 1 ], 1 );
  })

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArray( 1, [ 1 ], [ 1 ] );
  })

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArray( [ 1, 2 ], 1, [ 1 ] );
  })

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayReplaceArray( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  // });

  test.case = 'not equal length of ins and sub';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArray( [ 1, 2, 3 ], [ 1, 2 ], [ 3 ] );
  });

}

//

function arrayReplaceArrayOnce( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArrayOnce( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArrayOnce( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnce( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 1 ];
  var got = _.arrayReplaceArrayOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3, 1 ] );
  test.is( got === dst );

  test.case = 'ins has undefined';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnce( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins and dst has undefined';

  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArrayOnce( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'sub has undefined';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnce( dst, [ 1 ], [ undefined ] );
  test.identical( got, [ 2, 3 ] );
  test.is( got === dst );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplaceArrayOnce( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( got, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  test.case = 'ins and sub have mirror elements';
  var dst = [ 0, 0, 0, 1, 1, 1, 0, 1 ];
  var got = _.arrayReplaceArrayOnce( dst, [ 1, 0 ], [ 0, 1 ] );
  test.identical( got, [ 1, 0, 0, 0, 1, 1, 0, 1 ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnce();
  })

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnce( [ 1 ], [ 1 ], 1 );
  })

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnce( 1, [ 1 ], [ 1 ] );
  })

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnce( [ 1, 2 ], 1, [ 1 ] );
  })

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayReplaceArrayOnce( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  // });

  test.case = 'not equal length of ins and sub';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnce( [ 1, 2, 3 ], [ 1, 2 ], [ 3 ] );
  });

}

//

function arrayReplaceArrayOnceStrictly( test )
{

  test.case = 'trivial';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ 'a', 'b', 'c' ], [ 'x', 'y', undefined ] );
  test.identical( got, [ 'x', 'y', 'd' ] );
  test.is( got === dst );

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'only sub is empty';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ 'a', 'b', 'c' ], [ undefined, undefined, undefined ] );
  test.identical( got, [ 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ 1, 2 ], [ 3, undefined ] );
  test.identical( got, [ 3, 3 ] );
  test.is( got === dst );

  test.case = 'ins and dst has undefined';

  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplaceArrayOnceStrictly( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( got, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly();
  })

  test.shouldThrowErrorSync( function()
  {
    var dst = [ 1, 2, 3 ];
    _.arrayReplaceArrayOnceStrictly( dst, [ undefined ], 0 );
  })

  test.case = 'only one replaced';
  test.shouldThrowErrorSync( function()
  {
    var dst = [ 1, 2, 3 ];
    _.arrayReplaceArrayOnceStrictly( dst, [ 1, 0, 4 ], 3 );
  })

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( [ 1 ], [ 1 ], 1 );
  })

  test.case = 'ins element several times in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( [ 1, 1 ], 1, 2 );
  })
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( [ 1, 2, 3, 4, 1, 2, 3 ], [ 1, 2, 3 ], [ 6, 7, 8 ] );
  })

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( 1, [ 1 ], [ 1 ] );
  })

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
  })

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrayOnceStrictly( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  })

  test.case = 'dst, ins are empty, sub is not, dst does not has ins';

  test.shouldThrowErrorSync( function()
  {
    var dst = [];
    _.arrayReplaceArrayOnceStrictly( dst, [ undefined ], [ 'x' ] );
  });

  test.case = 'dst does not has ins';

  test.shouldThrowErrorSync( function()
  {
    var dst = [ 'b', 'c' ];
    var got = _.arrayReplaceArrayOnceStrictly( dst, [ 'a' ], [ 'x' ] );
  });

  test.case = 'dst, sub are empty, ins is not';

  test.shouldThrowErrorSync( function()
  {
    var dst = [];
    var got = _.arrayReplaceArrayOnceStrictly( dst, [ 'a', 'b' ], [] );
  });

  test.case = 'only ins is empty';

  test.shouldThrowErrorSync( function()
  {
    var dst = [ 'a', 'b', 'c', 'd' ];
    var got = _.arrayReplaceArrayOnceStrictly( dst, [], [ 'x', 'y' ] );
  });

  test.case = 'not equal length of ins and sub';

  test.shouldThrowErrorSync( function()
  {
    var dst = [ 1, 2, 3 ];
    var got = _.arrayReplaceArrayOnceStrictly( dst, [ 1, 2 ], [ 3 ] );
  });

}

//

function arrayReplacedArray( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArray( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArray( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 3, 2, 3 ] );
  test.identical( got, 1 );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3, 2, 2, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplacedArray( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3, 4, 3, 4, 3 ] );
  test.identical( got, 4 );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplacedArray( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ] );
  test.identical( got, 6 );


  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArray( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'Element repeated in ins';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArray( dst, [ 2, 2, 2 ], [ 'a', 'b', 'c' ] );
  test.identical( dst, [ 1, 'c', 3 ] );
  test.identical( got, 3 );

  test.case = 'ins and sub have mirror elements';
  var dst = [ 0, 0, 0, 1, 1, 1 ];
  var got = _.arrayReplacedArray( dst, [ 0, 1 ], [ 1, 0 ] );
  test.identical( dst, [ 1, 1, 1, 0, 0, 0 ] );
  test.identical( got, 6 );

  var dst = [ 0, 0, 0, 1, 1, 1, 0, 1 ];
  var got = _.arrayReplacedArray( dst, [ 1, 0 ], [ 0, 1 ] );
  test.identical( dst, [ 1, 1, 1, 0, 0, 0, 1, 0 ] );
  test.identical( got, 8 );

  var dst = [ 'a', 'b', 'c', false, 'c', 'b', 'a', true, 2 ];
  var got = _.arrayReplacedArray( dst, [ 'a', 'b', 'c', false, true ], [ 'c', 'a', 'b', true, false ] );
  test.identical( dst, [ 'c', 'a', 'b', true, 'b', 'a', 'c', false, 2 ] );
  test.identical( got, 8 );


  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplacedArray( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( dst, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArray();
  })

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArray( [ 1 ], [ 1 ], 1 );
  })

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArray( 1, [ 1 ], [ 1 ] );
  })

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArray( [ 1, 2 ], 1, [ 1 ] );
  })

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayReplacedArray( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  // });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplacedArray( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplacedArrayOnce( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArrayOnce( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArrayOnce( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 3, 2, 3 ] );
  test.identical( got, 1 );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3, 1, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3, 4, 3, 2, 1 ] );
  test.identical( got, 2 );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ] );
  test.identical( got, 3 );

  test.case = 'ins has undefined';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  test.case = 'ins and dst has undefined';

  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnce( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplacedArrayOnce( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( dst, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnce();
  })

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnce( [ 1 ], [ 1 ], 1 );
  })

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnce( 1, [ 1 ], [ 1 ] );
  })

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnce( [ 1, 2 ], 1, [ 1 ] );
  })

  // test.case = 'onEqualize is not a routine';
  // test.shouldThrowErrorSync( function()
  // {
  //   _.arrayReplacedArrayOnce( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  // });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplacedArrayOnce( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplacedArrayOnceStrictly( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  test.case = 'ins and dst have undefined';

  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrayOnceStrictly( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, 3 ] );
  test.identical( got, 1 );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize( a, b )
  {
    return a[ 0 ] === b[ 0 ];
  }
  var got = _.arrayReplacedArrayOnceStrictly( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize );
  test.identical( dst, [ [ 0 ], [ 2 ], [ 3 ] ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'onEqualize is not a routine';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

  test.case = 'Repeated elements in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ] );
  });
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ] );
  });
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });

  test.case = 'Element not found in dstArray';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrayOnceStrictly( [ 1, 2, 3, 4, 3, 2, 1 ], [ undefined ], [ 10 ] );
  });

}

//

function arrayReplaceArrays( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArrays( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArrays( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( got, [ 3, 4, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3 ] );
  test.is( got === dst );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3, 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplaceArrays( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( got, [ 3, 4, 3, 4, 3, 4, 3 ] );
  test.is( got === dst );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplaceArrays( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ] );
  test.is( got === dst );

  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArrays( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArrays( dst, [ 2 ], [ undefined ] );
  test.identical( got, [ 1, undefined, 3 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( got, [ '0', '1', '2', 3, 4, '5', '0' ] );
  test.is( got === dst );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( got, [ 1, 'a', 'b', true, true, 'c', 1 ] );
  test.is( got === dst );

  var dst = [ 0, 0, 0, 2, 1, 0, 0 ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  test.identical( got, [ 1, 1, 1, 2, 0, 1, 1 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays with mirror elements';
  var dst = [ 1, 1, 0, 0 ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 0, 0, 1, 1 ] );
  test.is( got === dst );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 'b', 'a', 'c' ] );
  test.is( got === dst );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ false, true, false, true ] );
  test.is( got === dst );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplaceArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 1, 'b', false, 2, 'c', true, 'a', 0 ] );
  test.is( got === dst );

  test.case = 'onEqualize'

  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  }
  var got = _.arrayReplaceArrays( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( got, [ 0, [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  test.case = 'onEqualize'

  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var got = _.arrayReplaceArrays( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( got, [ [ 0 ], 2, 3 ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrays();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrays( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrays( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArrays( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplaceArrays( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplaceArraysOnce( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArraysOnce( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArraysOnce( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( got, [ 3, 4, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 3, 2, 3 ] );
  test.is( got === dst );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3, 1, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( got, [ 3, 4, 3, 4, 3, 2, 1 ] );
  test.is( got === dst );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( got, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ] );
  test.is( got === dst );

  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 2, 3 ] );
  test.is( got === dst );

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnce( dst, [ 2 ], [ undefined ] );
  test.identical( got, [ 1, undefined, 3 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( got, [ '0', '1', '2', 3, 4, '5', 0 ] );
  test.is( got === dst );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( got, [ 1, 'a', 'b', true, true, 'c', 0 ] );
  test.is( got === dst );

  var dst = [ 0, 0, 0, 2, 1, 0, 0 ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  test.identical( got, [ 1, 0, 0, 2, 0, 0, 0 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays with mirror elements';
  var dst = [ 1, 1, 0, 0 ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 0, 1, 1, 0 ] );
  test.is( got === dst );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 'b', 'a', 'c' ] );
  test.is( got === dst );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ false, true, true, false ] );
  test.is( got === dst );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplaceArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 1, 'b', false, 2, 'c', true, 'a', 0 ] );
  test.is( got === dst );

  test.case = 'onEqualize'
  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  }
  var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( got, [ 0, [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  test.case = 'onEqualize'
  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var got = _.arrayReplaceArraysOnce( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( got, [ [ 0 ], 2, 3 ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnce();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnce( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnce( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnce( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplaceArraysOnce( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplaceArraysOnceStrictly( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [], [] );
  test.identical( got, [] );
  test.is( got === dst );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [], [] );
  test.identical( got, [ 'a', 'b', 'c', 'd' ] );
  test.is( got === dst );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ 1 ], [ 2 ] );
  test.identical( got, [ 2, 2, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( got, [ 3, 4, 3 ] );
  test.is( got === dst );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ 1, 2, 3 ], [ 4, 5, 6 ] );
  test.identical( got, [ 4, 5, 6 ] );
  test.is( got === dst );

  test.case = 'ins has undefined';

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ undefined ], [ 0 ] );
  test.identical( got, [ 1, 0, 3 ] );
  test.is( got === dst );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ 2 ], [ undefined ] );
  test.identical( got, [ 1, undefined, 3 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( got, [ '0', '1', '2', 3, 4, '5', 0 ] );
  test.is( got === dst );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( got, [ 1, 'a', 'b', true, true, 'c', 0 ] );
  test.is( got === dst );

  test.case = 'ins and sub Array of arrays with mirror elements';

  var dst = [ 1, 0 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 0, 1 ] ], [ [ 1, 0 ] ] );
  test.identical( got, [ 0, 1 ] );
  test.is( got === dst );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 'a', 'b' ] ], [ [ 'b', 'a' ] ] );
  test.identical( got, [ 'b', 'a', 'c' ] );
  test.is( got === dst );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ true, false ] ], [ [ false, true ] ] );
  test.identical( got, [ false, true, true, false ] );
  test.is( got === dst );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( got, [ 1, 'b', false, 2, 'c', true, 'a', 0 ] );
  test.is( got === dst );

  test.case = 'onEqualize'
  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  };
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( got, [ 0, [ 2 ], [ 3 ] ] );
  test.is( got === dst );

  test.case = 'onEqualize'
  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( got, [ [ 0 ], 2, 3 ] );
  test.is( got === dst );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

  test.case = 'ins element is not in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1, 2, 3 ], [ undefined ], [ 0 ] );
  });

  test.case = 'Repeated elements in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplaceArraysOnceStrictly( [ 0, 0, 0, 2, 1, 0, 0 ], [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  });

}

//

function arrayReplacedArrays( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArrays( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArrays( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 3, 2, 3 ] );
  test.identical( got, 1 );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3, 2, 2, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplacedArrays( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3, 4, 3, 4, 3 ] );
  test.identical( got, 4 );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplacedArrays( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ] );
  test.identical( got, 6 );


  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArrays( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArrays( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, undefined, 3 ] );
  test.identical( got, 1 );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( dst, [ '0', '1', '2', 3, 4, '5', '0' ] );
  test.identical( got, 5 );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( dst, [ 1, 'a', 'b', true, true, 'c', 1 ] );
  test.identical( got, 3 );

  var dst = [ 0, 0, 0, 2, 1, 0, 0 ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  test.identical( dst, [ 1, 1, 1, 2, 0, 1, 1 ] );
  test.identical( got, 11 );

  test.case = 'ins and sub Array of arrays with mirror elements';
  var dst = [ 1, 1, 0, 0 ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 0, 0, 1, 1 ] );
  test.identical( got, 4 );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 'b', 'a', 'c' ] );
  test.identical( got, 2 );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ false, true, false, true ] );
  test.identical( got, 4 );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplacedArrays( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 1, 'b', false, 2, 'c', true, 'a', 0 ] );
  test.identical( got, 6 );

  test.case = 'onEqualize'
  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  }
  var got = _.arrayReplacedArrays( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( dst, [ 0, [ 2 ], [ 3 ] ] );
  test.identical( got, 1 );

  test.case = 'onEqualize'
  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var got = _.arrayReplacedArrays( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( dst, [ [ 0 ], 2, 3 ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrays();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrays( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrays( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArrays( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplacedArrays( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplacedArraysOnce( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArraysOnce( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArraysOnce( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 3, 2, 3 ] );
  test.identical( got, 1 );

  test.case = 'Repeated elements in dstArray';

  var dst = [ 1, 2, 3, 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3, 1, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3, 4, 3, 2, 1 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3, 4, 3, 2, 1 ] );
  test.identical( got, 2 );

  var dst = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 1, 0, 4 ], [ 3, 5, 6 ] );
  test.identical( dst, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ] );
  test.identical( got, 3 );


  test.case = 'ins has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 2, 3 ] );
  test.identical( got, 0 );

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnce( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, undefined, 3 ] );
  test.identical( got, 1 );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( dst, [ '0', '1', '2', 3, 4, '5', 0 ] );
  test.identical( got, 4 );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( dst, [ 1, 'a', 'b', true, true, 'c', 0 ] );
  test.identical( got, 2 );

  var dst = [ 0, 0, 0, 2, 1, 0, 0 ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  test.identical( dst, [ 1, 0, 0, 2, 0, 0, 0 ] );
  test.identical( got, 3 );

  test.case = 'ins and sub Array of arrays with mirror elements';
  var dst = [ 1, 1, 0, 0 ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 0, 1, 1, 0 ] );
  test.identical( got, 2 );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 'b', 'a', 'c' ] );
  test.identical( got, 2 );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ false, true, true, false ] );
  test.identical( got, 2 );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplacedArraysOnce( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 1, 'b', false, 2, 'c', true, 'a', 0 ] );
  test.identical( got, 6 );

  test.case = 'onEqualize'
  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  }
  var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( dst, [ 0, [ 2 ], [ 3 ] ] );
  test.identical( got, 1 );

  test.case = 'onEqualize'
  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  }
  var got = _.arrayReplacedArraysOnce( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( dst, [ [ 0 ], 2, 3 ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnce();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnce( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnce( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnce( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
     _.arrayReplacedArraysOnce( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

}

//

function arrayReplacedArraysOnceStrictly( test )
{

  test.case = 'dst, ins, sub are empty';

  var dst = [];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [], [] );
  test.identical( dst, [] );
  test.identical( got, 0 );

  test.case = 'ins, sub are empty, dst is not';

  var dst = [ 'a', 'b', 'c', 'd' ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [], [] );
  test.identical( dst, [ 'a', 'b', 'c', 'd' ] );
  test.identical( got, 0 );

  test.case = 'other';

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ 1 ], [ 2 ] );
  test.identical( dst, [ 2, 2, 3 ] );
  test.identical( got, 1 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ 1, 2 ], [ 3, 4 ] );
  test.identical( dst, [ 3, 4, 3 ] );
  test.identical( got, 2 );

  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ 1, 2, 3 ], [ 4, 5, 6 ] );
  test.identical( dst, [ 4, 5, 6 ] );
  test.identical( got, 3  );

  test.case = 'ins has undefined';

  test.case = 'ins and dst has undefined';
  var dst = [ 1, undefined, 3 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ undefined ], [ 0 ] );
  test.identical( dst, [ 1, 0, 3 ] );
  test.identical( got, 1 );

  test.case = 'sub has undefined';
  var dst = [ 1, 2, 3 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ 2 ], [ undefined ] );
  test.identical( dst, [ 1, undefined, 3 ] );
  test.identical( got, 1 );

  test.case = 'ins and sub Array of arrays';
  var dst = [ 0, 1, 2, 3, 4, 5, 0 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 0, 1 ], 2, [ 5 ] ], [ [ '0', '1' ], '2', [ '5' ] ] );
  test.identical( dst, [ '0', '1', '2', 3, 4, '5', 0 ] );
  test.identical( got, 4 );

  var dst = [ 0, 'a', 'b', false, true, 'c', 0 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 0, false ] ], [ [ 1, true ] ] );
  test.identical( dst, [ 1, 'a', 'b', true, true, 'c', 0 ] );
  test.identical( got, 2 );

  test.case = 'ins and sub Array of arrays with mirror elements';

  var dst = [ 1, 0 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 0, 1 ] ], [ [ 1, 0 ] ] );
  test.identical( dst, [ 0, 1 ]  );
  test.identical( got, 2 );

  var dst = [ 'a', 'b', 'c' ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 'a', 'b' ] ], [ [ 'b', 'a' ] ] );
  test.identical( dst, [ 'b', 'a', 'c' ]  );
  test.identical( got, 2 );

  var dst = [ true, false, true, false ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ true, false ] ], [ [ false, true ] ] );
  test.identical( dst, [ false, true, true, false ]  );
  test.identical( got, 2 );

  var dst = [ 0, 'a', true, 2, 'c', false, 'b', 1 ];
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 0, 1 ], [ 'a', 'b' ], [ true, false ] ], [ [ 1, 0 ], [ 'b', 'a' ], [ false, true ] ] );
  test.identical( dst, [ 1, 'b', false, 2, 'c', true, 'a', 0 ]  );
  test.identical( got, 6 );

  test.case = 'onEqualize'
  var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
  function onEqualize1( a, b )
  {
    return a[ 0 ] === b;
  };
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ 1 ] ], [ [ 0 ] ], onEqualize1 );
  test.identical( dst, [ 0, [ 2 ], [ 3 ] ]  );
  test.identical( got, 1 );

  test.case = 'onEqualize'
  var dst = [ 1, 2, 3 ];
  function onEqualize( a, b )
  {
    return a === b[ 0 ];
  };
  var got = _.arrayReplacedArraysOnceStrictly( dst, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], onEqualize );
  test.identical( dst, [ [ 0 ], 2, 3 ] );
  test.identical( got, 1 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly();
  });

  test.case = 'sub is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1 ], [ 1 ], 1 );
  });

  test.case = 'dstArray is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( 1, [ 1 ], [ 1 ] );
  });

  test.case = 'ins is not a longIs';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
  });

  test.case = 'ins and sub don´t have the same length ';
  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 'a', 'b', 'c', 'd' ], [ 'a', 'b', 'c' ], [ 'x', 'y' ] );
  });

  test.case = 'ins element is not in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1, 2, 3 ], [ undefined ], [ 0 ] );
  });

  test.case = 'Repeated elements in dstArray';

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ] );
  });

  test.shouldThrowErrorSync( function()
  {
    _.arrayReplacedArraysOnceStrictly( [ 0, 0, 0, 2, 1, 0, 0 ], [ [ 0, 1 ], 0 ], [ [ 1, 0 ], '0' ] );
  });

}

// //
//
// function arrayReplaceArraysOnce( test )
// {
//   test.case = 'replace elements from arrays from ins with relevant values from sub';
//
//   var dst = [];
//   var got = _.arrayReplaceArraysOnce( dst, [ [] ], [ [] ] );
//   test.identical( got, [] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ] ], [ [ 3 ] ] );
//   test.identical( got, [ 3, 2, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
//   test.identical( got, [ 3, 4, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ [ 1 ] ] ], [ 0 ] );
//   test.identical( got, [ 1, 2, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
//   test.identical( got, [ 0, 2, 0 ] );
//
//   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
//   function onEqualize( a, b )
//   {
//     return a[ 0 ] === b[ 0 ];
//   }
//   var got = _.arrayReplaceArraysOnce( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
//   test.identical( got, [ [ 0 ], [ 0 ], [ 0 ] ] );
//
//   //
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce();
//   })
//
//   test.case = 'dstArray is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( 1, [ [ 1 ] ], [ 1 ] );
//   })
//
//   test.case = 'ins is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1, 2 ], 1, [ 1 ] );
//   })
//
//   test.case = 'ins must be array of arrays';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1, 2 ],[ 1 ], [ 1 ] );
//   })
//
//   test.case = 'onEqualize is not a routine';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
//   })
//
//   test.case = 'ins and sub length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
//   })
//
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
//   })
//
//   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
//   })
// }
//
// //
//
// function arrayReplaceArraysOnceStrictly( test )
// {
//   test.case = 'replace elements from arrays from ins with relevant values from sub';
//
//   var dst = [];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [] ], [ [] ] );
//   test.identical( got, [] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ] ], [ [ 3 ] ] );
//   test.identical( got, [ 3, 2, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
//   test.identical( got, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
//   test.identical( got, [ 3, 4, 3 ] );
//
//   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
//   function onEqualize( a, b )
//   {
//     return a[ 0 ] === b[ 0 ];
//   }
//   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
//   test.identical( got, [ [ 0 ], [ 0 ], [ 0 ] ] );
//
//   //
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly();
//   })
//
//   test.shouldThrowErrorSync( function()
//   {
//     var dst = [ 1, 2, 3 ];
//     _.arrayReplaceArraysOnceStrictly( dst, [ [ [ 1 ] ] ], [ 0 ] );
//   })
//
//   test.case = 'one element is not replaced';
//   test.shouldThrowErrorSync( function()
//   {
//     var dst = [ 1, 2, 3 ];
//     _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
//   })
//
//   test.case = 'dstArray is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( 1, [ [ 1 ] ], [ 1 ] );
//   })
//
//   test.case = 'ins is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
//   })
//
//   test.case = 'ins must be array of arrays';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ],[ 1 ], [ 1 ] );
//   })
//
//   test.case = 'onEqualize is not a routine';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
//   })
//
//   test.case = 'ins and sub length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
//   })
//
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
//   })
//
//   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
//   })
// }
//
// //
//
// function arrayReplacedArraysOnce( test )
// {
//   test.case = 'replace elements from arrays from ins with relevant values from sub';
//
//   var dst = [];
//   var got = _.arrayReplacedArraysOnce( dst, [ [] ], [ [] ] );
//   test.identical( got, 0 );
//   test.identical( dst, [] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ] ], [ [ 3 ] ] );
//   test.identical( got, 1 );
//   test.identical( dst, [ 3, 2, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
//   test.identical( got, 2 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
//   test.identical( got, 2 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
//   test.identical( got, 2 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
//   test.identical( got, 3 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
//   test.identical( got, 3 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
//   test.identical( got, 3 );
//   test.identical( dst, [ 3, 3, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
//   test.identical( got, 2 );
//   test.identical( dst, [ 3, 4, 3 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ [ 1 ] ] ], [ 0 ] );
//   test.identical( dst, [ 1, 2, 3 ] );
//   test.identical( got, 0 );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
//   test.identical( dst, [ 0, 2, 0 ] );
//   test.identical( got, 2 );
//
//   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
//   function onEqualize( a, b )
//   {
//     return a[ 0 ] === b[ 0 ];
//   }
//   var got = _.arrayReplacedArraysOnce( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
//   test.identical( dst, [ [ 0 ], [ 0 ], [ 0 ] ] );
//   test.identical( got, 3 );
//
//   //
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce();
//   })
//
//   test.case = 'dstArray is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( 1, [ [ 1 ] ], [ 1 ] );
//   })
//
//   test.case = 'ins is not a longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1, 2 ], 1, [ 1 ] );
//   })
//
//   test.case = 'ins must be array of arrays';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1, 2 ],[ 1 ], [ 1 ] );
//   })
//
//   test.case = 'onEqualize is not a routine';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
//   })
//
//   test.case = 'ins and sub length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
//   })
//
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
//   })
//
//   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
//   })
// }
//
//
//
// function arrayReplaceAll( test )
// {
//   test.case = 'replace all ins with sub';
//
//   var dst = [];
//   var got = _.arrayReplaceAll( dst, undefined, 0 );
//   test.identical( got, [] );
//
//   var dst = [ 1, 1, 1 ];
//   var got = _.arrayReplaceAll( dst, 1, 0 );
//   test.identical( got, [ 0, 0, 0 ] );
//
//   var dst = [ 1, 2, 1 ];
//   var got = _.arrayReplaceAll( dst, 1, 0 );
//   test.identical( got, [ 0, 2, 0 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplaceAll( dst, 4, 0 );
//   test.identical( got, [ 1, 2, 3 ] );
//
//   function onEqualize( a, b )
//   {
//     return a.value === b;
//   }
//
//   var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
//   var got = _.arrayReplaceAll( dst, 1, { value : 0 }, onEqualize );
//   test.identical( got, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no args';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceAll( );
//   });
//
//   test.case = 'first arg is not longIs';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceAll( 1, 1, 1 );
//   });
//
//   test.case = 'fourth argument is not a routine';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplaceAll( 1, 1, 1, 1);
//   });
// }
//
// //
//
// function arrayReplacedAll( test )
// {
//   test.case = 'replace all ins with sub';
//
//   var dst = [];
//   var got = _.arrayReplacedAll( dst, undefined, 0 );
//   test.identical( got, 0 );
//   test.identical( dst, [] );
//
//   var dst = [ 1, 1, 1 ];
//   var got = _.arrayReplacedAll( dst, 1, 0 );
//   test.identical( got, 3 );
//   test.identical( dst, [ 0, 0, 0 ] );
//
//   var dst = [ 1, 2, 1 ];
//   var got = _.arrayReplacedAll( dst, 1, 0 );
//   test.identical( got, 2 );
//   test.identical( dst, [ 0, 2, 0 ] );
//
//   var dst = [ 1, 2, 3 ];
//   var got = _.arrayReplacedAll( dst, 4, 0 );
//   test.identical( got, 0 );
//   test.identical( dst, [ 1, 2, 3 ] );
//
//   function onEqualize( a, b )
//   {
//     return a.value === b;
//   }
//
//   var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
//   var got = _.arrayReplacedAll( dst, 1, { value : 0 }, onEqualize );
//   test.identical( got, 2 );
//   test.identical( dst, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no args';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedAll( );
//   });
//
//   test.case = 'first arg is not longIs';
//   debugger;
//   test.shouldThrowErrorSync( function()
//   {
//     debugger;
//     _.arrayReplacedAll( 1, 1, 1 );
//   });
//   debugger;
//
//   test.case = 'fourth argument is not a routine';
//   test.shouldThrowErrorSync( function()
//   {
//     _.arrayReplacedAll( 1, 1, 1, 1 );
//   });
//
// }

//

function arrayUpdate( test )
{

  test.case = 'add a new element';
  var got = _.arrayUpdate( [  ], 1, 1 );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'add a new element';
  var got = _.arrayUpdate( [ 1, 2, 3, 4, 5 ], 6, 6 );
  var expected = 5;
  test.identical( got, expected );

  test.case = 'add a new element';
  var got = _.arrayUpdate( [ 'Petre', 'Mikle', 'Oleg' ], 'Dmitry', 'Dmitry' );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'change the fourth element';
  var got = _.arrayUpdate( [ true, true, true, true, false ], false, true );
  var expected = 4;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayUpdate();
  });

  test.case = 'not enough arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arrayUpdate( [ 1, 2, 3, 4, 5 ] );
  });

  test.case = 'extra argument';
  test.shouldThrowErrorSync( function()
  {
    _.arrayUpdate( [ 1, 2, 3, 4, 5 ], 6, 6, 'redundant argument' );
  });

  test.case = 'arguments[0] is wrong';
  test.shouldThrowErrorSync( function()
  {
    _.arrayUpdate( 'wrong argument', 6, 6 );
  });

}

// --
// array set
// --

function arraySetDiff( test )
{

  test.case = 'first argument has single extra element, second argument has single extra element either';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetDiff( a, b );
  var expected = [ 15, 5 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetDiff( a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'second argument is an empty array';
  var a = [ 1, 2, 3, 4 ];
  var b = [];
  var got = _.arraySetDiff( a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'both arguments are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetDiff( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'all of the elements is present in both arrays';
  var a = [ 3, 3, 3 ];
  var b = [ 3, 3, 3, 3 ];
  var got = _.arraySetDiff( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  /* */

  test.case = 'extra';

  var cases =
  [
    { src1 : [], src2 : [], expected : [] },
    { src1 : [ 1, 2, 3 ], src2 : [], expected : [ 1, 2, 3 ] },
    { src1 : [], src2 : [ 1, 2, 3 ], expected : [ 1, 2, 3 ] },
    { src1 : [ 1, 2, 3 ], src2 : [ 4, 5, 6 ], expected : [ 1, 2, 3, 4, 5, 6 ] },
    { src1 : [ 1, 2, 3 ], src2 : [ 3, 4, 5 ], expected : [ 1, 2, 4, 5 ] },
    { src1 : [ 1, 1, 2, 2, 3, 3 ], src2 : [ 1, 2, 3 ], expected : [] },
    { src1 : [ 1, 1, 2, 3, 3 ], src2 : [ 3, 3, 4, 5, 5 ], expected : [ 1, 1, 2, 4, 5, 5 ] },
    { src1 : 1, src2 : 1, error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.error )
    test.shouldThrowErrorSync( () => _.arraySetDiff( c.src1, c.src2 ) );
    else
    test.identical( _.arraySetDiff( c.src1, c.src2 ), c.expected );
  }

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff();
  });

  test.case = 'too few arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff([ 1, 2, 3, 4 ]);
  });

  test.case = 'too many arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff([ 1, 2, 3, 4 ], [ 5, 7, 8, 9 ], [ 13, 15, 17 ]);
  });


  test.case = 'one or both arguments are not longIs entities, numeric arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( 10, 15 );
  });

  test.case = 'one or both arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( 'a', 'c' );
  });

  test.case = 'one or both arguments are not longIs entities, map arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( { a : 1 }, { b : 3, c : 8 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( [ 1, 2, 3 ], "wrong argument" );
  });

  test.case = 'both arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( null, null );
  });

  test.case = 'both arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetDiff( undefined, undefined );
  });

}

//

function arraySetBut( test )
{

  test.case = 'first argument has single extra element, second argument has single extra element either';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetBut( a, b );
  var expected = [ 15 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument has single extra element, second argument has single extra element either';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetBut( null, a, b );
  var expected = [ 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first argument has several elements that are not present in second argument';
  var a = [ 1, 4, 9 ];
  var b = [ 2, 5 ];
  var got = _.arraySetBut( a, b );
  var expected = [ 1, 4, 9 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument has several elements that are not present in second argument';
  var a = [ 1, 4, 9 ];
  var b = [ 2, 5 ];
  var got = _.arraySetBut( null, a, b );
  var expected = [ 1, 4, 9 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first argument is the same as second';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetBut( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument is the same as second';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetBut( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetBut( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetBut( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'second argument is an empty array';
  var a = [ 1, 2, 3, 4 ];
  var b = [];
  var got = _.arraySetBut( a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'second argument is an empty array';
  var a = [ 1, 2, 3, 4 ];
  var b = [];
  var got = _.arraySetBut( null, a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first array has the same element as the second ';
  var a = [ 1, 1, 1 ];
  var b = [ 1 ];
  var got = _.arraySetBut( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first array has the same element as the second ';
  var a = [ 1, 1, 1 ];
  var b = [ 1 ];
  var got = _.arraySetBut( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'both arguments are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetBut( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'both arguments are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetBut( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'single empty argument';
  var a = [];
  var got = _.arraySetBut( a );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );

  test.case = 'single empty argument';
  var a = [];
  var got = _.arraySetBut( null, a );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );

  test.case = 'single not empty argument';
  var a = [ 3,4,5 ];
  var got = _.arraySetBut( a );
  var expected = [ 3,4,5 ];
  test.identical( got, expected );
  test.is( got === a );

  test.case = 'single not empty argument';
  var a = [ 3,4,5 ];
  var got = _.arraySetBut( null, a );
  var expected = [ 3,4,5 ];
  test.identical( got, expected );
  test.is( got !== a );

  test.case = 'three arguments, same elements';
  var a = [ 3,4,5 ];
  var b = [ 3,4,5 ];
  var c = [ 3,4,5 ];
  var got = _.arraySetBut( a,b,c );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, same elements';
  var a = [ 3,4,5 ];
  var b = [ 3,4,5 ];
  var c = [ 3,4,5 ];
  var got = _.arraySetBut( null,a,b,c );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, differet elements';
  var a = [ 3,4,5 ];
  var b = [ 5 ];
  var c = [ 3 ];
  var got = _.arraySetBut( a,b,c );
  var expected = [ 4 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, differet elements';
  var a = [ 3,4,5 ];
  var b = [ 5 ];
  var c = [ 3 ];
  var got = _.arraySetBut( null,a,b,c );
  var expected = [ 4 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, no elements in the second and third';
  var a = [ 3,4,5 ];
  var b = [];
  var c = [];
  var got = _.arraySetBut( a,b,c );
  var expected = [ 3,4,5 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, no elements in the second and third';
  var a = [ 3,4,5 ];
  var b = [];
  var c = [];
  var got = _.arraySetBut( null,a,b,c );
  var expected = [ 3,4,5 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, no elements in the first';
  var a = [];
  var b = [ 3,4,5 ];
  var c = [ 3,4,5 ];
  var got = _.arraySetBut( a,b,c );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'three arguments, no elements in the first';
  var a = [];
  var b = [ 3,4,5 ];
  var c = [ 3,4,5 ];
  var got = _.arraySetBut( null,a,b,c );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'complex case';
  var got = _.arraySetBut( [ 1, 10, 0, 5 ], [ 5, 8, 2 ], [ 3, 1, 6, 4 ], [ 0 ] );
  var expected = [ 10 ];
  test.identical( got, expected );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetBut( null, a );
  var expected = [ 1, 1, 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetBut( a );
  var expected = [ 1, 1, 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 null';
  var got = _.arraySetBut( null );
  var expected = [];
  test.identical( got, expected );

  /* */

  var cases =
  [
    { src : [], but : [], expected : [] },
    { src : [ 1, 2, 3 ], but : [], expected : [ 1, 2, 3 ] },
    { src : [], but : [ 1, 2, 3 ], expected : [ ] },
    { src : [ 1, 1, 1 ], but : [ 1 ], expected : [] },
    { src : [ 1, 2, 3 ], but : [ 3, 2, 1 ], expected : [] },
    { src : [ 1, 2, 3 ], but : [ 3 ], expected : [ 1, 2 ] },
    { src : [ 1, 2, 3 ], but : [ 4, 5, 6 ], expected : [ 1, 2, 3 ] },
    { src : 1, but : 1, error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.error )
    test.shouldThrowErrorSync( () => _.arraySetBut( c.src, c.but ) );
    else
    test.identical( _.arraySetBut( c.src, c.but ), c.expected );
  }

  /* */

  if( !Config.debug )
  return;

  /* bad arguments */

  test.case = 'not array';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( '3' );
  });

  test.case = 'no arguments, the count of arguments doesn\'t match 2';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut();
  });

  test.case = 'one or both arguments are not longIs entities, numerical arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( 5, 8 );
  });

  test.case = 'one or both arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( 'a', 'c' );
  });

  test.case = 'one or both arguments are not longIs entities, map like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( { a : 1 }, { b : 3, c : 8 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( [ 1, 2, 3 ], "wrong argument" );
  });

  test.case = 'both arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( null, null );
  });

  test.case = 'both arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetBut( undefined, undefined );
  });

}

//

function arraySetIntersection( test )
{

  test.case = 'second argument has extra element, third argument has two extra elements';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetIntersection( a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'second argument has extra element, third argument has two extra elements';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetIntersection( null, a, b );
  var expected = [ 1, 2, 3, 4 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'single array argument';
  var a = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetIntersection( a );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );

  test.case = 'single array argument';
  var a = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetIntersection( null,a );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetIntersection( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetIntersection( null,a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first and second argument are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetIntersection( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first and second argument are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetIntersection( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = '3 arguments, nothing in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var c = [ 15, 16, 17 ];
  var got = _.arraySetIntersection( a, b, c );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, nothing in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var c = [ 15, 16, 17 ];
  var got = _.arraySetIntersection( null, a, b, c );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, something in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5, ];
  var c = [ 3, 15, 16, 17, 1 ];
  var got = _.arraySetIntersection( null, a, b, c );
  var expected = [ 1, 3 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, something in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 3, ];
  var c = [ 1, 3 ];
  var got = _.arraySetIntersection( null, a, b, c );
  var expected = [ 3 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var b = [ 3, 1 ];
  var c = [ 1, 3 ];
  var got = _.arraySetIntersection( null, a, b, c );
  var expected = [ 1, 1, 1, 3 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetIntersection( null, a );
  var expected = [ 1, 1, 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetIntersection( a );
  var expected = [ 1, 1, 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 null';
  var got = _.arraySetIntersection( null );
  var expected = [];
  test.identical( got, expected );

  /* extra */

  var cases =
  [
    { args : [ [] ], expected : [] },
    { args : [ [ 1 ], [ ] ], expected : [] },
    { args : [ [ ], [ 1 ] ], expected : [] },
    { args : [ [ 1 ], [ 2 ] ], expected : [] },
    { args : [ [ 1, 2, 3 ], [ 2 ] ], expected : [ 2 ] },
    { args : [ [ 1, 2, 3 ], [ 2 ], [ 1 ], [ 3 ] ], expected : [] },
    { args : [ [ 1, 1, 1 ], [ 1 ] ], expected : [ 1, 1, 1 ] },
    { args : [ [ 1, 2, 3 ], [ 0 ], [ 4 ], [ 0, 0, 3 ] ], expected : [] },
    { args : [ [ 1, 2, 3 ], [ 0 ], 1, [ 3 ] ], error : true },
    { args : [ 1 ], error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];
    if( c.error )
    test.shouldThrowErrorSync( () => _.arraySetIntersection.apply( _,c.args ) );
    else
    test.identical( _.arraySetIntersection.apply( _,c.args ) , c.expected );
  }
  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection();
  });

  test.case = 'one or several arguments are not longIs entities, numerical arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( 10, 15, 25 );
  });

  test.case = 'one or both arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( 'a', 'c' );
  });

  test.case = 'one or both arguments are not longIs entities, map arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( { a : 1 }, { b : 3, c : 8 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( [ 1, 2, 3 ], "wrong argument" );
  });

  test.case = 'one or more arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( null, null );
  });

  test.case = 'one or more arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIntersection( undefined, undefined );
  });

}

//

function arraySetUnion( test )
{

  test.case = 'second argument has extra element, third argument has two extra elements';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetUnion( a, b );
  var expected = [ 1, 2, 3, 4, 15, 5 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'second argument has extra element, third argument has two extra elements';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var got = _.arraySetUnion( null, a, b );
  var expected = [ 1, 2, 3, 4, 15, 5 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'single array argument';
  var a = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetUnion( a );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );

  test.case = 'single array argument';
  var a = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetUnion( null,a );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetUnion( a, b );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3, 4, 15 ];
  var got = _.arraySetUnion( null,a, b );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first and second argument are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetUnion( a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );

  test.case = 'first and second argument are empty arrays';
  var a = [];
  var b = [];
  var got = _.arraySetUnion( null, a, b );
  var expected = [];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = '3 arguments, nothing in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var c = [ 15, 16, 17 ];
  var got = _.arraySetUnion( a, b, c );
  var expected = [ 1, 2, 3, 4, 15, 5, 16, 17 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, nothing in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5 ];
  var c = [ 15, 16, 17 ];
  var got = _.arraySetUnion( null, a, b, c );
  var expected = [ 1, 2, 3, 4, 15, 5, 16, 17 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, something in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 1, 2, 3, 4, 5, ];
  var c = [ 3, 15, 16, 17, 1 ];
  var got = _.arraySetUnion( null, a, b, c );
  var expected = [ 1, 2, 3, 4, 15, 5, 16, 17 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, something in common';
  var a = [ 1, 2, 3, 4, 15 ];
  var b = [ 3, ];
  var c = [ 1, 3 ];
  var got = _.arraySetUnion( null, a, b, c );
  var expected = [ 1, 2, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '3 arguments, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var b = [ 3, 1 ];
  var c = [ 1, 3 ];
  var got = _.arraySetUnion( null, a, b, c );
  var expected = [ 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetUnion( null, a );
  var expected = [ 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetUnion( a );
  var expected = [ 1, 1, 1, 3, 4, 15 ];
  test.identical( got, expected );
  test.is( got === a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = '1 null';
  var got = _.arraySetUnion( null );
  var expected = [];
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion();
  });

  test.case = 'one or several arguments are not longIs entities, numerical arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( 10, 15, 25 );
  });

  test.case = 'one or both arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( 'a', 'c' );
  });

  test.case = 'one or both arguments are not longIs entities, map arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( { a : 1 }, { b : 3, c : 8 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( [ 1, 2, 3 ], "wrong argument" );
  });

  test.case = 'one or more arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( null, null );
  });

  test.case = 'one or more arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetUnion( undefined, undefined );
  });

}

//

function arraySetContainAll( test )
{

  test.case = '1 argument, empty';
  var a = [];
  var got = _.arraySetContainAll( a );
  var expected = true;
  test.identical( got, expected );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetContainAll( a );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, empty';
  var a = [];
  var b = [];
  var got = _.arraySetContainAll( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, src empty';
  var a = [];
  var b = [ 1 ];
  var got = _.arraySetContainAll( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = '2 arguments, ins empty';
  var a = [ 1 ];
  var b = [];
  var got = _.arraySetContainAll( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = 'bigger second argument';
  var a = [ 1, 3 ];
  var b = [ 1, 1, 1, 1 ];
  var got = _.arraySetContainAll( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = 'bigger third argument';
  var a = [ 1, 3 ];
  var b = [ 1, 1 ];
  var c = [ 1, 1, 1, 1 ];
  var got = _.arraySetContainAll( a,b,c );
  var expected = true;
  test.identical( got, expected );

  test.case = '4 arguments';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAll( a,b,c,d );
  var expected = true;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 0 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAll( a,b,c,d );
  var expected = false;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 0, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAll( a,b,c,d );
  var expected = false;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 0 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAll( a,b,c,d );
  var expected = false;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 0, 2 ];
  var got = _.arraySetContainAll( a,b,c,d );
  var expected = false;
  test.identical( got, expected );


  test.case = 'Second argument contains all the same values as in the (src), and new ones';
  var a = [ 1, 'b', 'c', 4 ];
  var b = [ 1, 2, 3, 4, 5, 'b', 'c' ];
  var got = _.arraySetContainAll( a, b );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'length of the first argument is more than second argument';
  var a = [ 1, 2, 3, 4, 5 ];
  var b = [ 1, 2, 3, 4 ];
  var got = _.arraySetContainAll( a, b );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'length of the first argument is more than second argument';
  var a = [ 'abc', 'def', true, 26 ];
  var b = [ 1, 2, 3, 4 ];
  var c = [ 26, 'abc', 'def', true ];
  var got = _.arraySetContainAll( a, b, c );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'second argument is an empty array';
  var a = [ 1, 2, 3 ];
  var b = [];
  var got = _.arraySetContainAll( a, b );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 2, 3 ];
  var got = _.arraySetContainAll( a, b );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'both arguments are empty';
  var a = [];
  var b = [];
  var got = _.arraySetContainAll( a, b );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  /* */

  var cases =
  [
    { args : [ [], [] ], expected : true },
    { args : [ [ 1 ], [] ], expected : true },
    { args : [ [ 1 ], [ 1 ] ], expected : true },
    { args : [ [ 1, 1 ], [ 1, 1, 1 ] ], expected : true },
    { args : [ [ 1, 1, 1 ], [ 1, 1 ] ], expected : true },
    { args : [ [ 1 ], [ 1 ], [ 1 ], [] ], expected : true },
    { args : [ [ 1 ], [ 1 ], [ 1 ], [ 1, 1, 1 ] ], expected : true },
    { args : [ [ 1 ], [ 0, 1 ], [ 3, 2, 1 ], [ 1 ] ], expected : false },
    { args : [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 3, 2, 1 ], [ 1, 2 ] ], expected : true },
    { args : [ [], [ 1, 2, 3 ], [ 3, 2, 1 ], [ 1, 2 ] ], expected : false },
    { args : [ [], 1, [ 3, 2, 1 ], [ 1, 2 ] ], error : true },
    { args : [ 1 ], error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var _case = cases[ i ];
    console.log( _.toStr( _case,{ levels : 3 } ) );
    if( _case.error )
    test.shouldThrowErrorSync( () => _.arraySetContainAll.apply( _,_case.args ) );
    else
    test.identical( _.arraySetContainAll.apply( _,_case.args ) , _case.expected );
  }

  /* special cases */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll();
  });

  test.case = 'one or both arguments are not longIs entities, numerical arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( 5, 8 );
  });

  test.case = 'one or both arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( 'a', 'c' );
  });

  test.case = 'one or both arguments are not longIs entities, map like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( { a : 1, b : 2 }, { c : 3 } );
  });

  test.case = 'wrong arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( [ 1, 2, 3, 4 ], 'wrong arguments' );
  });

  test.case = 'both arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( null, null );
  });

  test.case = 'both arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAll( undefined, undefined );
  });
}

//

function arraySetContainAny( test )
{

  test.case = '1 argument, empty';
  var a = [];
  var got = _.arraySetContainAny( a );
  var expected = true;
  test.identical( got, expected );

  test.case = '1 argument, repeats';
  var a = [ 1, 1, 1, 3, 4, 15 ];
  var got = _.arraySetContainAny( a );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, empty';
  var a = [];
  var b = [];
  var got = _.arraySetContainAny( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, src empty';
  var a = [];
  var b = [ 1 ];
  var got = _.arraySetContainAny( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, ins empty';
  var a = [ 1 ];
  var b = [];
  var got = _.arraySetContainAny( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = 'bigger second argument';
  var a = [ 1, 3 ];
  var b = [ 1, 1, 1, 1 ];
  debugger;
  var got = _.arraySetContainAny( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = 'bigger third argument';
  var a = [ 1, 3 ];
  var b = [ 1, 1 ];
  var c = [ 1, 1, 1, 1 ];
  var got = _.arraySetContainAny( a,b,c );
  var expected = true;
  test.identical( got, expected );

  test.case = '3 arguments, the first is empty';
  var a = [];
  var b = [ 1 ];
  var c = [ 2, 3];
  var got = _.arraySetContainAny( a,b,c );
  var expected = true;
  test.identical( got, expected );

  test.case = '4 arguments';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAny( a,b,c,d );
  var expected = true;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 0 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAny( a,b,c,d );
  var expected = false;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 0, 1 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAny( a,b,c,d );
  var expected = true;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 0 ];
  var d = [ 4, 1, 3, 2 ];
  var got = _.arraySetContainAny( a,b,c,d );
  var expected = true;
  test.identical( got, expected );

  test.case = 'one argument have redundant element';
  var a = [ 1, 2, 3, 4 ];
  var b = [ 1 ];
  var c = [ 3, 1 ];
  var d = [ 4, 1, 0, 2 ];
  var got = _.arraySetContainAny( a,b,c,d );
  var expected = true;
  test.identical( got, expected );

  test.case = 'second and third arrays contains several values from (src) array';
  var a = [ 33, 4, 5, 'b', 'c' ];
  var b = [ 1, 'b', 'c', 4 ];
  var c = [ 33, 13, 3 ];
  var got = _.arraySetContainAny( a, b, c );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'second array is empty, third array contains elements from (src) array';
  var a = [ 33, 4, 5, 'b', 'c' ];
  var b = [];
  var c = [ 33 ];
  var got = _.arraySetContainAny( a, b, c );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'second and third arrays doesn\'t contains matching elemets from (src) array';
  var a = [ 33, 4, 5, 'b', 'c' ];
  var b = [ 1, 'bcda', 'ce', 8 ];
  var c = [ 45, 13, 3 ];
  var got = _.arraySetContainAny( a, b, c );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'first argument is an empty array';
  var a = [];
  var b = [ 1, 'bcda', 'ce', 8 ];
  var c = [ 45, 13, 3 ];
  var got = _.arraySetContainAny( a, b, c );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'following array are empty, (src) array is not empty';
  var a = [ 33, 4, 5, 'b', 'c' ];
  var b = [];
  var c = [];
  var got = _.arraySetContainAny( a, b, c );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'all the array are empty';
  var a = [];
  var b = [];
  var c = [];
  var got = _.arraySetContainAny( a, b, c );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );
  test.is( got !== c );

  test.case = 'single argument';
  var got = _.arraySetContainAny([ 33, 4, 5, 'b', 'c' ]);
  var expected = true;
  test.identical( got, expected );

  /**/

  var cases =
  [
    { args : [ [], [] ], expected : true },
    { args : [ [ 1, 2, 3 ], [ 1 ] ], expected : true },
    { args : [ [ 1, 2, 3 ], [], [ 3 ] ], expected : false },
    { args : [ [ 1, 2, 3 ], [ 0, 1 ], [ 9, 3 ] ], expected : true },
    { args : [ [ 1, 2, 3 ], [ 4 ], [ 3 ] ], expected : false },
    { args : [ [], [ 0 ], [ 4 ], [ 3 ] ], expected : true },
    { args : [ [ 1, 2, 3 ], [ 4 ], [ 5 ]  ], expected : false },
    { args : [ [ 0, 0, 0, 1 ], [ 5 ], [ 6 ], [ 2, 1 ]  ], expected : false },
    { args : [ [ 1, 2, 3 ], [ 4 ], 1  ], error : true },
    { args : [ 1, [ 4 ], 1  ], error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.error )
    test.shouldThrowErrorSync( () => _.arraySetContainAny.apply( _,c.args ) );
    else
    test.identical( _.arraySetContainAny.apply( _,c.args ) , c.expected );
  }

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAny();
  });

  test.case = 'one or several arguments are not longIs entities,numeric arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAny( [ 33, 4, 5, 'b', 'c' ], 15, 25 );
  });

  test.case = 'one or several arguments are not longIs entities,string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAny( [ 33, 4, 5, 'b', 'c' ], 'dfdf', 'ab' );
  });

  test.case = 'one or several arguments are not longIs entities,map like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAny( [ 33, 4, 5, 'b', 'c' ], { a : 33 }, { b : 44 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetContainAny( [ 1, 2, 3 ], "wrong argument" );
  });

}

//

function arraySetIdentical( test )
{

  console.log( 'xxx' );

  test.case = '2 arguments, empty';
  var a = [];
  var b = [];
  var got = _.arraySetIdentical( a,b );
  var expected = true;
  test.identical( got, expected );

  test.case = '2 arguments, src empty';
  var a = [];
  var b = [ 1 ];
  var got = _.arraySetIdentical( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = '2 arguments, ins empty';
  var a = [ 1 ];
  var b = [];
  var got = _.arraySetIdentical( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = 'repeats, bigger second argument';
  var a = [ 1 ];
  var b = [ 1, 1, 1, 1 ];
  var got = _.arraySetIdentical( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = 'repeats, bigger first argument';
  var a = [ 1, 1, 1, 1 ];
  var b = [ 1 ];
  var got = _.arraySetIdentical( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = 'repeats';
  var a = [ 1, 3 ];
  var b = [ 1, 1, 1, 1 ];
  var got = _.arraySetIdentical( a,b );
  var expected = false;
  test.identical( got, expected );

  test.case = 'arguments have the same elements but the order is differ';
  var a = [ 1, 2, 4, 7, 5 ];
  var b = [ 4, 2, 1, 5, 7 ];
  var got = _.arraySetIdentical( a, b );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'argument length mismatch';
  var a = [ 1, 2, 4, 7, 5 ];
  var b = [ 1, 5, 7 ];
  var got = _.arraySetIdentical( a, b );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'arguments have the same elements have inner arrays';
  var a = [ 1, 2, [ 1, 3], 7, 5 ];
  var b = [ [ 1, 3], 2, 1, 5, 7 ];
  var got = _.arraySetIdentical( a, b );
  var expected = false;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  test.case = 'both arrays are empty';
  var a = [];
  var b = [];
  var got = _.arraySetIdentical( a, b );
  var expected = true;
  test.identical( got, expected );
  test.is( got !== a );
  test.is( got !== b );

  /* */

  var cases =
  [
    { args : [ [], [] ], expected : true },
    { args : [ [ 1 ], [] ], expected : false },
    { args : [ [ 1 ], [ 1 ] ], expected : true },
    { args : [ [ 1, 1 ], [ 1 ] ], expected : false },
    { args : [ [ 1 ], [ 1, 1 ] ], expected : false },
    { args : [ [ 1, 2, 3 ], [ 1, 2, 4 ] ], expected : false },
    { args : [ [ 1, 2, 3 ], [ 3, 2, 1 ] ], expected : true },
    { args : [ [ 1, 2, 3 ], [ 3, 2, 1 ] ], expected : true },
    { args : [ [ [ 1 ], 2, 3 ], [ 3, 2, [ 1 ] ] ], expected : false },
    { args : [ 1, [ 1 ] ], error : true },
    { args : [ [ 1 ], 1 ], error : true },
  ]

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.error )
    test.shouldThrowErrorSync( () => _.arraySetIdentical.apply( _,c.args ) );
    else
    test.identical( _.arraySetIdentical.apply( _,c.args ) , c.expected );
  }

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical();
  });

  test.case = 'one or 2 arguments are not longIs entities, numeric argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( [ 1, 2, 4, 7, 5 ], 15 );
  });

  test.case = 'one or 2 arguments are not longIs entities, string like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( 'a', 'a' );
  });

  test.case = 'one or 2 arguments are not longIs entities, map like arguments';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( { a : 1 }, { b : 3, c : 8 } );
  });

  test.case = 'wrong argument';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( [ 1, 2, 4, 7, 5 ], "wrong argument" );
  });

  test.case = 'both arguments are null';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( null, null );
  });

  test.case = 'both arguments are undefined';
  test.shouldThrowErrorSync( function()
  {
    _.arraySetIdentical( undefined, undefined );
  });

}

//

var Self =
{

  name : 'Tools/base/l1/Long',
  silencing : 1,
  enabled : 1,
  // verbosity : 9,
  // routine : 'bufferRelen',

  tests :
  {

    // buffer

    bufferFrom,
    bufferRelen,
    bufferRetype,
    bufferRawFrom,
    bufferBytesFrom,
    bufferNodeFrom,
    bufferRawFromTyped,

    // type test

    arrayIs,
    longIs,
    constructorLikeArray,
    hasLength,

    // producer

    argumentsArrayMake,
    argumentsArrayFrom,

    longMake,
    longMakeZeroed,

    arrayMake,
    arrayFrom,
    arrayFromCoercing,

    scalarAppend,

    arrayMakeRandom,
    scalarToVector,
    arrayFromRange,
    arrayAs,

    arrayToMap,
    arrayToStr,

    // unroll

    unrollIs,
    unrollIsPopulated,

    unrollMake,
    unrollFrom,
    unrollsFrom,
    unrollFromMaybe,
    unrollNormalize,

    unrollPrepend,
    unrollAppend,
    unrollRemove,

    // long

    longAreRepeatedProbe,
    longAllAreRepeated,
    longAnyAreRepeated,
    longNoneAreRepeated,

    // array transformer

    arraySub,
    // arrayJoin,
    arrayGrow,
    arrayResize,
    longSlice,
    arrayDuplicate,

    arrayMask,

    longUnduplicate,
    arraySelect,

    // array manipulator

    arraySwap,
    arrayCutin,
    arrayPut,
    // arrayFill,
    arrayFillTimes,
    arrayFillWhole,

    arraySupplement,
    arrayExtendScreening,

    // array checker

    arrayCompare,
    arraysAreIdentical,

    arrayHasAny,

    // array sequential search

    arrayLeftIndex,
    arrayRightIndex,

    arrayLeft,

    arrayCountElement,
    arrayCountTotal,
    arrayCountUnique,

    // array etc

    arraySum,

    // array prepend

    arrayPrepend,
    arrayPrependOnce,
    arrayPrependOnceStrictly,
    arrayPrepended,
    arrayPrependedOnce,
    arrayPrependedOnceStrictly,

    arrayPrependElement,
    arrayPrependElementOnce,
    arrayPrependElementOnceStrictly,
    arrayPrependedElement,
    arrayPrependedElementOnce,
    arrayPrependedElementOnceStrictly,

    arrayPrependArray,
    arrayPrependArrayOnce,
    arrayPrependArrayOnceStrictly,
    arrayPrependedArray,
    arrayPrependedArrayOnce,
    arrayPrependedArrayOnceStrictly,

    arrayPrependArrays,
    arrayPrependArraysOnce,
    arrayPrependArraysOnceStrictly,
    arrayPrependedArrays,
    arrayPrependedArraysOnce,
    arrayPrependedArraysOnceStrictly,

    // array append

    arrayAppend,
    arrayAppendOnce,
    arrayAppendOnceStrictly,
    arrayAppended,
    arrayAppendedOnce,
    arrayAppendedOnceStrictly,

    arrayAppendElement,
    arrayAppendElementOnce,
    arrayAppendElementOnceStrictly,
    arrayAppendedElement,
    arrayAppendedElementOnce,
    arrayAppendedElementOnceStrictly,

    arrayAppendArray,
    arrayAppendArrayOnce,
    arrayAppendArrayOnceStrictly,
    arrayAppendedArray,
    arrayAppendedArrayOnce,
    arrayAppendedArrayOnceWithSelector,
    arrayAppendedArrayOnceStrictly,

    arrayAppendArrays,
    arrayAppendArraysOnce,
    arrayAppendArraysOnceStrictly,
    arrayAppendedArrays,
    arrayAppendedArraysOnce,
    arrayAppendedArraysOnceStrictly,

    // array remove

    arrayRemove,
    arrayRemoveOnce,
    arrayRemoveOnceStrictly,
    arrayRemoved,
    arrayRemovedOnce,
    arrayRemovedOnceStrictly,

    arrayRemoveElement,
    arrayRemoveElementOnce,
    arrayRemoveElementOnceStrictly,
    arrayRemovedElement,
    arrayRemovedElementOnce,
    arrayRemovedElementOnceStrictly,

    // arrayRemovedOnceStrictly,
    // arrayRemovedElementOnce2,
    // arrayRemovedOnceElementStrictly,

    arrayRemoveArray,
    arrayRemoveArrayOnce,
    arrayRemoveArrayOnceStrictly,
    arrayRemovedArray,
    arrayRemovedArrayOnce,
    arrayRemovedArrayOnceStrictly,

    arrayRemoveArrays,
    arrayRemoveArraysOnce,
    arrayRemoveArraysOnceStrictly,
    arrayRemovedArrays,
    arrayRemovedArraysOnce,
    arrayRemovedArraysOnceStrictly,

    arrayRemoveDuplicates,
    longRemoveDuplicates,

    // array flatten

    arrayFlatten,
    arrayFlattenOnce,
    arrayFlattenOnceStrictly,
    arrayFlattened,
    arrayFlattenedOnce,
    arrayFlattenedOnceStrictly,

    arrayFlatten2,

    arrayFlattenDefined,
    arrayFlattenDefinedOnce,
    arrayFlattenDefinedOnceStrictly,
    arrayFlattenedDefined,
    arrayFlattenedDefinedOnce,
    arrayFlattenedDefinedOnceStrictly,

    // array replace

    arrayReplace,
    arrayReplaceOnce,
    arrayReplaceOnceStrictly,
    arrayReplaced,
    arrayReplacedOnce,
    arrayReplacedOnceStrictly,

    arrayReplaceElement,
    arrayReplaceElement2,
    arrayReplaceElementOnce,
    arrayReplaceElementOnceStrictly,
    arrayReplacedElement,
    arrayReplacedElement2,
    arrayReplacedElementOnce,
    arrayReplacedElementOnceStrictly,

    arrayReplaceArray,
    arrayReplaceArrayOnce,
    arrayReplaceArrayOnceStrictly,
    arrayReplacedArray,
    arrayReplacedArrayOnce,
    arrayReplacedArrayOnceStrictly,

    arrayReplaceArrays,
    arrayReplaceArraysOnce,
    arrayReplaceArraysOnceStrictly,
    arrayReplacedArrays,
    arrayReplacedArraysOnce,
    arrayReplacedArraysOnceStrictly,

    // arrayReplaceAll,
    // arrayReplacedAll,

    arrayUpdate,

    // array set

    arraySetDiff,

    arraySetBut,
    arraySetIntersection,
    arraySetUnion,

    arraySetContainAll,
    arraySetContainAny,
    arraySetIdentical,

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Long.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Long_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Long_test_s

( function Map_test_s() { // == begin of file Map_test_s
function Map_test_s_naked() {
( function _Map_test_s( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

//

function mapIs( test )
{

  test.case = 'an empty object';
  var got = _.mapIs( {} );
  var expected = true;
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.mapIs( { a : 7, b : 13 } );
  var expected = true;
  test.identical( got, expected );

  test.case = 'no argument';
  var got = _.mapIs();
  var expected = false;
  test.identical( got, expected );

  test.case = 'an array';
  var got = _.mapIs( [  ] );
  var expected = false;
  test.identical( got, expected );

  test.case = 'a string';
  var got = _.mapIs( 'str' );
  var expected = false;
  test.identical( got, expected );

  test.case = 'a number';
  var got = _.mapIs( 13 );
  var expected = false;
  test.identical( got, expected );

  test.case = 'a boolean';
  var got = _.mapIs( true );
  var expected = false;
  test.identical( got, expected );

  test.case = 'a function';
  var got = _.mapIs( function() {  } );
  var expected = false;
  test.identical( got, expected );

  test.case = 'a string';
  var got = _.mapIs( Object.create( { a : 7 } ) );
  var expected = false;
  test.identical( got, expected );

}

//

function mapCloneAssigning( test )
{

  test.case = 'an Example';
  function Example() {
    this.name = 'Peter';
    this.age = 27;
  };
  var srcMap = new Example();
  var dstMap = { sex : 'Male' };
  var got = _.mapCloneAssigning({ srcMap, dstMap });
  var expected = { sex : 'Male', name : 'Peter', age : 27 };
  test.is( dstMap === got );
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapCloneAssigning();
  });

  test.case = 'redundant argument';
  test.shouldThrowError( function()
  {
    _.mapCloneAssigning( {}, {}, 'wrong arguments' );
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapCloneAssigning( [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapCloneAssigning( 'wrong arguments' );
  });

}

//

function mapExtendConditional( test )
{

  test.case = 'an unique object';
  debugger;
  var got = _.mapExtendConditional( _.field.mapper.dstNotHas, { a : 1, b : 2 }, { a : 1 , c : 3 } );
  var expected = { a : 1, b : 2, c : 3 };
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapExtendConditional();
  });

  test.case = 'few argument';
  test.shouldThrowError( function()
  {
    _.mapExtendConditional( _.field.mapper.dstNotHas );
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapExtendConditional( [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapExtendConditional( 'wrong arguments' );
  });

}

//

function mapExtend( test )
{

  /* */

  test.open( 'first argument is null' );

  test.case = 'trivial'; /* */
  var src1 = { a : 1, b : 2 };
  var src1Copy = { a : 1, b : 2 };
  var src2 = { c : 3, d : 4 };
  var src2Copy = { c : 3, d : 4 };
  var got = _.mapExtend( null, src1, src2 );
  var expected = { a : 1, b : 2, c : 3, d : 4 };
  test.will = 'return';
  test.identical( got, expected );
  test.will = 'preserve src1';
  test.identical( src1, src1Copy );
  test.will = 'preserve src2';
  test.identical( src2, src2Copy );
  test.will = 'return not src1';
  test.is( got !== src1 );
  test.will = 'return not src2';
  test.is( got !== src2 );

  test.case = 'rewriting'; /* */
  var src1 = { a : 1, b : 2 };
  var src1Copy = { a : 1, b : 2 };
  var src2 = { b : 22, c : 3, d : 4 };
  var src2Copy = { b : 22, c : 3, d : 4 };
  var got = _.mapExtend( null, src1, src2 );
  var expected = { a : 1, b : 22, c : 3, d : 4 };
  test.will = 'return';
  test.identical( got, expected );
  test.will = 'preserve src1';
  test.identical( src1, src1Copy );
  test.will = 'preserve src2';
  test.identical( src2, src2Copy );
  test.will = 'return not src1';
  test.is( got !== src1 );
  test.will = 'return not src2';
  test.is( got !== src2 );

  test.close( 'first argument is null' );

  /* */

  test.open( 'first argument is dst' );

  test.case = 'trivial'; /* */
  var dst = { a : 1, b : 2 };
  var src2 = { c : 3, d : 4 };
  var src2Copy = { c : 3, d : 4 };
  var got = _.mapExtend( dst, src2 );
  var expected = { a : 1, b : 2, c : 3, d : 4 };
  test.will = 'return';
  test.identical( got, expected );
  test.will = 'preserve src2';
  test.identical( src2, src2Copy );
  test.will = 'return dst';
  test.is( got === dst );
  test.will = 'return not src2';
  test.is( got !== src2 );

  test.case = 'rewriting'; /* */
  var dst = { a : 1, b : 2 };
  var src2 = { b : 22, c : 3, d : 4 };
  var src2Copy = { b : 22, c : 3, d : 4 };
  var got = _.mapExtend( dst, src2 );
  var expected = { a : 1, b : 22, c : 3, d : 4 };
  test.will = 'return';
  test.identical( got, expected );
  test.will = 'preserve src2';
  test.identical( src2, src2Copy );
  test.will = 'return not dst';
  test.is( got === dst );
  test.will = 'return not src2';
  test.is( got !== src2 );

  test.close( 'first argument is dst' );

  /* */

  test.case = 'trivial, first argument';
  var src1 = { a : 7, b : 13 };
  var src1Copy = { a : 7, b : 13 };
  var src2 = { c : 3, d : 33 };
  var src2Copy = { c : 3, d : 33 };
  var got = _.mapExtend( src1, src2 );
  var expected = { a : 7, b : 13, c : 3, d : 33 };
  test.identical( got, expected );
  test.identical( src2, src2Copy );
  test.is( got === src1 );
  test.is( got !== src2 );

  test.case = 'complex, first argument is null';
  var src1 = { a : 1, b : 1, c : 1, z : 1 };
  var src1Copy = { a : 1, b : 1, c : 1, z : 1 };
  var src2 = { a : 2, c : 2, d : 2 };
  var src2Copy = { a : 2, c : 2, d : 2 };
  var src3 = { a : 3, b : 3, e : 3 };
  var src3Copy = { a : 3, b : 3, e : 3 };
  var got = _.mapExtend( null, src1, src2, src3 );
  var expected = { a : 3, b : 3, c : 2, d : 2, e : 3, z : 1 };
  test.identical( got, expected );
  test.identical( src1, src1Copy );
  test.identical( src2, src2Copy );
  test.identical( src3, src3Copy );
  test.is( got !== src1 );
  test.is( got !== src2 );
  test.is( got !== src3 );

  test.case = 'complex, first argument is not null';
  var src1 = { a : 1, b : 1, c : 1, z : 1 };
  var src1Copy = { a : 1, b : 1, c : 1, z : 1 };
  var src2 = { a : 2, c : 2, d : 2 };
  var src2Copy = { a : 2, c : 2, d : 2 };
  var src3 = { a : 3, b : 3, e : 3 };
  var src3Copy = { a : 3, b : 3, e : 3 };
  var got = _.mapExtend( src1, src2, src3 );
  var expected = { a : 3, b : 3, c : 2, d : 2, e : 3, z : 1 };
  test.identical( got, expected );
  test.identical( src2, src2Copy );
  test.identical( src3, src3Copy );
  test.is( got === src1 );
  test.is( got !== src2 );
  test.is( got !== src3 );

  test.case = 'extend pure map by empty strings, first argument is null';
  var src1 = Object.create( null );
  src1.a = '1';
  src1.b = '1';
  src1.c = '1';
  src1.z = '1';
  var src1Copy = Object.create( null );
  src1Copy.a = '1';
  src1Copy.b = '1';
  src1Copy.c = '1';
  src1Copy.z = '1';
  var src2 = Object.create( null );
  src2.a = '';
  src2.c = '';
  src2.d = '';
  src2.e = '2';
  var src2Copy = Object.create( null );
  src2Copy.a = '';
  src2Copy.c = '';
  src2Copy.d = '';
  src2Copy.e = '2';
  var got = _.mapExtend( null, src1, src2 );
  var expected = { a : '', b : '1', c : '', d : '', e : '2', z : '1' };
  test.identical( got, expected );
  test.identical( src1, src1Copy );
  test.identical( src2, src2Copy );
  test.is( got !== src1 );
  test.is( got !== src2 );

  test.case = 'extend pure map by empty strings, first argument is not null';
  var src1 = Object.create( null );
  src1.a = '1';
  src1.b = '1';
  src1.c = '1';
  src1.z = '1';
  var src1Copy = Object.create( null );
  src1Copy.a = '1';
  src1Copy.b = '1';
  src1Copy.c = '1';
  src1Copy.z = '1';
  var src2 = Object.create( null );
  src2.a = '';
  src2.c = '';
  src2.d = '';
  src2.e = '2';
  var src2Copy = Object.create( null );
  src2Copy.a = '';
  src2Copy.c = '';
  src2Copy.d = '';
  src2Copy.e = '2';
  var got = _.mapExtend( src1, src2 );
  var expected = { a : '', b : '1', c : '', d : '', e : '2', z : '1' };
  test.identical( got, expected );
  test.identical( src2, src2Copy );
  test.is( got === src1 );
  test.is( got !== src2 );

  test.case = 'object like array';
  var got = _.mapExtend( null, [ 3, 7, 13, 73 ] );
  var expected = { 0 : 3, 1 : 7, 2 : 13, 3 : 73 };
  test.identical( got, expected );

  /**/

  test.case = 'extend complex map by complex map';

  var dst = Object.create( null );
  dst.x1 = '1';
  dst.x2 = 2;
  dst = Object.create( dst );
  dst.x3 = 3;
  dst.x4 = 4;

  var src = Object.create( null );
  src.x1 = '11';
  src.y2 = 12;
  src = Object.create( src );
  src.x3 = 13;
  src.y4 = 14;

  var expected = Object.create( null );
  expected.x1 = '1';
  expected.x2 = 2;
  expected = Object.create( expected );
  expected.x4 = 4;
  expected.x1 = '11';
  expected.y2 = 12;
  expected.x3 = 13;
  expected.y4 = 14;

  var got = _.mapExtend( dst, src );
  test.identical( got, expected );
  test.is( got === dst );

  /**/

  return;
  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapExtend();
  });

  test.case = 'few arguments';
  test.shouldThrowError( function()
  {
    _.mapExtend( {} );
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapExtend( [] );
  });

  test.case = 'wrong type of number';
  test.shouldThrowError( function()
  {
    _.mapExtend( 13 );
  });

  test.case = 'wrong type of boolean';
  test.shouldThrowError( function()
  {
    _.mapExtend( true );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowError( function()
  {
    _.mapExtend( 'wrong argument' );
  });

}

//

function mapSupplement( test )
{

  test.case = 'an object';
  var got = _.mapSupplement( { a : 1, b : 2 }, { a : 1, c : 3 } );
  var expected = { a : 1, b : 2, c : 3 };
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapSupplement();
  });

  // test.case = 'wrong type of array';
  // test.shouldThrowError( function()
  // {
  //   _.mapSupplement( [] );
  // });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapSupplement( 'wrong arguments' );
  });

}

//

function mapComplement( test )
{

  test.case = 'an object';
  var got = _.mapComplement( { a : 1, b : 'ab' }, { a : 12 , c : 3 } );
  var expected = { a : 1, b : 'ab', c : 3 };
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapComplement();
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapComplement( [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapComplement( 'wrong arguments' );
  });

}

//

function mapMake( test )
{

  test.case = 'empty'; /**/

  var got = _.mapMake();
  var expected = {};
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );

  var got = _.mapMake( null );
  var expected = {};
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );

  var got = _.mapMake( undefined );
  var expected = {};
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );

  test.case = 'empty map'; /**/

  var src1 = {};
  var src1Copy = _.mapExtend( null, src1 );
  var got = _.mapMake( src1 );
  var expected = {};
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );
  test.identical( src1, src1Copy );
  test.is( got !== src1 );

  test.case = 'single map'; /**/

  var src1 = { a : 7, b : 13 };
  var src1Copy = _.mapExtend( null, src1 );
  var got = _.mapMake( src1 );
  var expected = { a : 7, b : 13 };
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );
  test.identical( src1, src1Copy );
  test.is( got !== src1 );

  test.case = 'trivial'; /**/

  var src1 = { a : 7, b : 13 };
  var src2 = { a : 77, c : 3, d : 33 };
  var src3 = { a : 'x', e : 77 };
  var src1Copy = _.mapExtend( null, src1 );
  var src2Copy = _.mapExtend( null, src2 );
  var src3Copy = _.mapExtend( null, src3 );
  var got = _.mapMake( src1, src2, src3 );
  var expected = { a : 'x', b : 13, c : 3, d : 33, e : 77 };
  test.identical( got, expected );
  test.is( _.mapIsPure( got ) );
  test.identical( src1, src1Copy );
  test.identical( src2, src2Copy );
  test.identical( src3, src3Copy );
  test.is( got !== src1 );
  test.is( got !== src2 );
  test.is( got !== src3 );

  /* */

  test.case = 'bad arguments'; /**/

  test.shouldThrowError( function()
  {
    _.mapMake( '' );
  });

  test.case = 'bad arguments'; /**/

  test.shouldThrowError( function()
  {
    _.mapMake( 'x' );
  });

  test.case = 'bad arguments'; /**/

  test.shouldThrowError( function()
  {
    _.mapMake( null, 'x' );
  });

  test.case = 'bad arguments'; /**/

}

//
// map manipulator
//

function mapSetWithKeys( test )
{
  test.case = 'dstMap is null or empty';

  var got = _.mapSetWithKeys( null, [], 2  );
  test.identical( got, {} );

  var got = _.mapSetWithKeys( {}, [], 2  );
  test.identical( got, {} );

  var got = _.mapSetWithKeys( null, 'a', 2  );
  test.identical( got, { 'a' : 2 } );

  var got = _.mapSetWithKeys( {}, 'a', 2  );
  test.identical( got, { 'a' : 2 } );

  var got = _.mapSetWithKeys( null, [ 'a', 'b' ], 2  );
  test.identical( got, { 'a' : 2, 'b' : 2 } );

  var got = _.mapSetWithKeys( {}, [ 'a', 'b' ], 2  );
  test.identical( got, { 'a' : 2, 'b' : 2 } );

  var got = _.mapSetWithKeys( {}, [ 1, 2 ], 2  );
  test.identical( got, { 1 : 2, 2 : 2 } );

  test.case = 'dstMap is not null';

  var got = _.mapSetWithKeys( { 'a' : 2 }, 'a', 'abc'  );
  test.identical( got, { 'a' : 'abc' } );

  var got = _.mapSetWithKeys( { 'a' : 2 }, 'b', 3  );
  test.identical( got, { 'a' : 2, 'b' : 3 } );

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ 'b', 'c' ], 3 );
  test.identical( got, { 'a' : 2, 'b' : 3, 'c' : 3 } );

  var got = _.mapSetWithKeys( { 0 : 0 }, [ 1, 2 ], 2  );
  test.identical( got, { 0 : 0, 1 : 2, 2 : 2 } );

  test.case = 'val is array';

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ 'b', 'c' ], [ 3 ] );
  test.identical( got, { 'a' : 2, 'b' : [ 3 ], 'c' : [ 3 ] } );

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ 'b', 'c' ], [ 3, 'aa' ] );
  test.identical( got, { 'a' : 2, 'b' : [ 3, 'aa' ], 'c' : [ 3, 'aa' ] } );

  var got = _.mapSetWithKeys( { 0 : 0 }, [ 0, 2 ], [ 3, 'aa' ]  );
  test.identical( got, { 0 : [ 3, 'aa' ], 2 : [ 3, 'aa' ] } );

  test.case = 'val is object';

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ 'b', 'c' ], { 'cc' : 1 } );
  test.identical( got, { 'a' : 2, 'b' : { 'cc' : 1 }, 'c' : { 'cc' : 1 } } );

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ 'b', 'c' ], { 'd' : undefined } );
  test.identical( got, { 'a' : 2, 'b' : { 'd' : undefined }, 'c' : { 'd' : undefined } } );

  var got = _.mapSetWithKeys( { 0 : 0 }, [ 0, 2 ], { 3 : 'aa' } );
  test.identical( got, { 0 : { 3 : 'aa' }, 2 : { 3 : 'aa' } } );

  test.case = 'src has null or undefined values';

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ null, 'c' ], 'aa' );
  test.identical( got, { 'a' : 2, 'b' : 1, 'c' : 'aa', null : 'aa' } );

  var got = _.mapSetWithKeys( { 'a' : 2, 'b' : 1, 'c' : 'a' }, [ undefined, 'c' ], 'aa' );
  test.identical( got, { 'a' : 2, 'b' : 1, 'c' : 'aa', undefined : 'aa' } );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments'
  test.shouldThrowErrorSync( () => _.mapSetWithKeys() );

  test.case = 'too many arguments'
  test.shouldThrowErrorSync( () => _.mapSetWithKeys( {}, 'a', 'a', 1 ) );

  test.case = 'dstMap is not object or null'
  test.shouldThrowErrorSync( () => _.mapSetWithKeys( [], 'a', 'a' ) );

  test.case = 'src is not array of strings or string'

  test.shouldThrowErrorSync( () => _.mapSetWithKeys( { 'a' : 1 }, 1, 'a' ) );

  test.shouldThrowErrorSync( () => _.mapSetWithKeys( { 'a' : 1 }, { 'k' : 2 }, 'a' ) );
}

//

function mapFirstPair( test )
{

  test.case = 'first pair [ key, value ]';
  var got = _.mapFirstPair( { a : 3, b : 13 } );
  var expected = [ 'a', 3 ];
  test.identical( got, expected );

  test.case = 'undefined';
  var got = _.mapFirstPair( {} );
  var expected = [];
  test.identical( got, expected );

  test.case = 'pure map';
  var obj = Object.create( null );
  obj.a = 7;
  var got = _.mapFirstPair( obj );
  var expected = [ 'a', 7 ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapFirstPair();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapFirstPair( 'wrong argument' );
  });

}

//

function mapValWithIndex( test )
{

  test.case = 'second index';
  var got = _.mapValWithIndex( { 0 : 3, 1 : 13, 2 : 'c', 3 : 7 }, 2 );
  var expected = 'c';
  test.identical( got, expected );

  test.case = 'an element';
  var got = _.mapValWithIndex( { 0 : [ 'a', 3 ] }, 0 );
  var expected = [ 'a', 3 ];
  test.identical( got, expected );

  test.case = 'a list of arrays';
  var got = _.mapValWithIndex( { 0 : [ 'a', 3 ], 1 : [ 'b', 13 ], 2 : [ 'c', 7 ] }, 2 );
  var expected = ['c', 7];
  test.identical( got, expected );

  test.case = 'a list of objects';
  var got = _.mapValWithIndex( { 0 : { a : 3 }, 1 : { b : 13 }, 2 : { c : 7 } }, 2 );
  var expected = {c: 7};
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function() {
    _.mapValWithIndex();
  });

  test.case = 'few argument';
  test.shouldThrowError( function()
  {
    _.mapValWithIndex( [ [] ] );
  });

  test.case = 'first the four argument not wrapped into array';
  test.shouldThrowError( function()
  {
    _.mapValWithIndex( 3, 13, 'c', 7 , 2 );
  });

  test.case = 'redundant argument';
  test.shouldThrowError( function()
  {
    _.mapValWithIndex( [ [] ], 2, 'wrong arguments' );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapValWithIndex( 'wrong argumetns' );
  });

}

//

function mapKeyWithIndex( test )
{

  test.case = 'last key';
  var got = _.mapKeyWithIndex( { 'a': 3, 'b': 13, 'c': 7 }, 2 );
  var expected = 'c';
  test.identical( got, expected );

  test.case = 'first key';
  var got = _.mapKeyWithIndex( { 0 : { a : 3 },  1 : 13, 2 : 'c', 3 : 7 }, 3 );
  var expected = '3';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapKeyWithIndex();
  });

  test.case = 'few arguments';
  test.shouldThrowError( function()
  {
    _.mapKeyWithIndex( [] );
  });

  test.case = 'redundant argument';
  test.shouldThrowError( function()
  {
    _.mapKeyWithIndex( [  ], 2, 'wrong arguments' );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapKeyWithIndex( 'wrong argumetns' );
  });

}

//

function mapToStr( test )
{

  test.case = 'returns an empty string';
  var got = _.mapToStr({ src : [  ], keyValDelimeter : ' : ',  entryDelimeter : '; '});
  var expected = '';
  test.identical( got, expected );

  test.case = 'returns a string representing an object';
  var got = _.mapToStr({ src : { a : 1, b : 2, c : 3, d : 4 }, keyValDelimeter : ' : ',  entryDelimeter : '; ' });
  var expected = 'a : 1; b : 2; c : 3; d : 4';
  test.identical( got, expected );

  test.case = 'returns a string representing an array';
  var got = _.mapToStr({ src : [ 1, 2, 3 ], keyValDelimeter : ' : ',  entryDelimeter : '; ' });
  var expected = '0 : 1; 1 : 2; 2 : 3';
  test.identical( got, expected );

  test.case = 'returns a string representing an array-like object';
  function args() { return arguments };
  var got = _.mapToStr({ src : args(  1, 2, 3, 4, 5 ), keyValDelimeter : ' : ',  entryDelimeter : '; ' });
  var expected = '0 : 1; 1 : 2; 2 : 3; 3 : 4; 4 : 5';
  test.identical( got, expected );

  test.case = 'returns a string representing a string';
  var got = _.mapToStr({ src : 'abc', keyValDelimeter : ' : ',  entryDelimeter : '; ' });
  var expected = '0 : a; 1 : b; 2 : c';
  test.identical( got, expected );


  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapToStr();
  });

  test.case = 'wrong type of number';
  test.shouldThrowError( function()
  {
    _.mapToStr( 13 );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapToStr( true );
  });

}

//

function mapsFlatten( test )
{

  test.case = 'empty map';
  var src = {};
  var expected = {}
  var got = _.mapsFlatten({ src });
  test.identical( got, expected );

  test.case = 'empty array';
  var src = [];
  var expected = {}
  var got = _.mapsFlatten( src );
  test.identical( got, expected );

  test.case = 'array of empty maps';
  var src = [ {}, {} ];
  var expected = {}
  var got = _.mapsFlatten( src );
  test.identical( got, expected );

  test.case = 'trivial';
  var src = [ { a : 1, b : { c : 1, d : 1 } }, { e : 2, f : { g : { h : 2 } } } ];
  var expected = { a : 1, 'b/c' : 1, 'b/d' : 1, e : 2, 'f/g/h' : 2 }
  var got = _.mapsFlatten( src );
  test.identical( got, expected );

  test.case = 'delimeter : .';
  var src = [ { a : 1, dir : { b : 2 } }, { c : 3 } ];
  var expected = { 'a' : 1, 'dir.b' : 2, 'c' : 3 }
  var got = _.mapsFlatten({ src, delimeter : '.' });
  test.identical( got, expected );

  test.case = 'delimeter : ';
  var src = [ { a : 1, dir : { b : 2 } }, { c : 3 } ];
  var expected = { 'a' : 1, 'dirb' : 2, 'c' : 3 }
  var got = _.mapsFlatten({ src, delimeter : '' });
  test.identical( got, expected );

  test.case = 'delimeter : 0';
  var src = [ { a : 1, dir : { b : 2 } }, { c : 3 } ];
  var expected = { 'a' : 1, 'b' : 2, 'c' : 3 }
  var got = _.mapsFlatten({ src, delimeter : 0 });
  test.identical( got, expected );

  test.case = 'delimeter : false';
  var src = [ { a : 1, dir : { b : 2 } }, { c : 3 } ];
  var expected = { 'a' : 1, 'b' : 2, 'c' : 3 }
  var got = _.mapsFlatten({ src, delimeter : false });
  test.identical( got, expected );

  test.case = 'allowingCollision : 1';
  var src = [ { a : 1, dir : { b : 2 } }, { a : 3, dir : { b : 4, c : 5 } } ];
  var expected = { 'a' : 3, 'dir/b' : 4, 'dir/c' : 5 }
  var got = _.mapsFlatten({ src, allowingCollision : 1 });
  test.identical( got, expected );

  test.case = 'delimeter : 0, allowingCollision : 1';
  var src = [ { a : 1, dir : { b : 2 } }, { a : 3, dir : { b : 4, c : 5 } } ];
  var expected = { 'a' : 3, 'b' : 4, 'c' : 5 }
  var got = _.mapsFlatten({ src, delimeter : 0, allowingCollision : 1 });
  test.identical( got, expected );

  test.case = 'delimeter : 0, allowingCollision : 1';
  var dst = { a : 0, d : 6 }
  var src = [ { a : 1, dir : { b : 2 } }, { a : 3, dir : { b : 4, c : 5 } } ];
  var expected = { 'a' : 3, 'b' : 4, 'c' : 5, 'd' : 6 }
  var got = _.mapsFlatten({ src, dst, delimeter : 0, allowingCollision : 1 });
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'collision';

  test.shouldThrowErrorSync( () =>
  {
    var dst = { 'dir/a' : 1 }
    var src = { dir : { a : 2 } };
    var got = _.mapsFlatten({ src, dst });
  });

  test.shouldThrowErrorSync( () =>
  {
    var src = [ { dir : { a : 2 } }, { dir : { a : 2 } } ];
    var got = _.mapsFlatten({ src });
  });

  test.shouldThrowErrorSync( () =>
  {
    var src = [ { dir : { a : 2 } }, { dir : { a : 2 } } ];
    var got = _.mapsFlatten({ src, allowingCollision : 0 });
  });

  test.shouldThrowErrorSync( () =>
  {
    var src = [ { dir : { a : 2 } }, { dir : { a : 2 } } ];
    var got = _.mapsFlatten({ src, delimeter : 0 });
  });

  test.shouldThrowErrorSync( () =>
  {
    var src = [ { dir : { a : 2 } }, { dir : { a : 2 } } ];
    var got = _.mapsFlatten({ src, delimeter : 0, allowingCollision : 0 });
  });

  test.case = 'bad arguments';

  test.shouldThrowErrorSync( () => _.mapsFlatten() );
  test.shouldThrowErrorSync( () => _.mapsFlatten( {} ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( {}, {} ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( 'a' ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( 1 ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( null ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( [ 'a' ] ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( [ 1 ] ) );
  test.shouldThrowErrorSync( () => _.mapsFlatten( [ null ] ) );

  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : undefined }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : 'a' }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : 1 }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : null }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : [ 'a' ] }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : [ 1 ] }) );
  test.shouldThrowErrorSync( () => _.mapsFlatten({ src : [ null ] }) );

}

//

function mapKeys( test )
{

  test.case = 'trivial';

  var got = _.mapKeys( {} );
  var expected = [];
  test.identical( got, expected );

  var got = _.mapKeys( { a : 1, b : undefined } );
  var expected = [ 'a', 'b' ];
  test.identical( got, expected );

  var got = _.mapKeys( { a : 7, b : 13 } );
  var expected = [ 'a', 'b' ];
  test.identical( got, expected );

  var got = _.mapKeys( { 7 : 'a', 3 : 'b', 13 : 'c' } );
  var expected = [ '3', '7', '13' ];
  test.identical( got, expected );

  var f = function(){};
  Object.setPrototypeOf( f, String );
  f.a = 1;
  var got = _.mapKeys( f );
  var expected = [ 'a' ];
  test.identical( got, expected );

  var got = _.mapKeys( new Date );
  var expected = [ ];
  test.identical( got, expected );

  //

  test.case = 'options';
  var a = { a : 1 }
  var b = { b : 2 }
  Object.setPrototypeOf( a, b );

  /* own off */

  var got = _.mapKeys( a );
  var expected = [ 'a', 'b' ];
  test.identical( got, expected );

  /* own on */

  var o = { own : 1 };
  var got = _.mapKeys.call( o, a );
  var expected = [ 'a' ];
  test.identical( got, expected );

  /* enumerable/own off */

  var o = { enumerable : 0, own : 0 };
  Object.defineProperty( b, 'k', { enumerable : 0 } );
  var got = _.mapKeys.call( o, a );
  var expected = _.mapAllKeys( a );
  test.identical( got, expected );

  /* enumerable off, own on */

  var o = { enumerable : 0, own : 1 };
  Object.defineProperty( a, 'k', { enumerable : 0 } );
  var got = _.mapKeys.call( o, a );
  var expected = [ 'a', 'k' ]
  test.identical( got, expected );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapKeys();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapKeys( 'wrong arguments' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    debugger;
    _.mapKeys.call( { x : 1 }, {} );
    debugger;
  });

}

//

function mapOwnKeys( test )
{
  test.case = 'empty'
  var got = _.mapOwnKeys( {} );
  var expected = [];
  test.identical( got, expected )

  //

  test.case = 'simplest'

  var got = _.mapOwnKeys( { a : '1', b : '2' } );
  var expected = [ 'a', 'b' ];
  test.identical( got, expected )

  var got = _.mapOwnKeys( new Date );
  var expected = [ ];
  test.identical( got, expected )

  //

  test.case = ''

  var a = { a : 1 };
  var b = { b : 2 };
  var c = { c : 3 };
  Object.setPrototypeOf( a, b );
  Object.setPrototypeOf( b, c );

  var got = _.mapOwnKeys( a );
  var expected = [ 'a' ];
  test.identical( got, expected )

  var got = _.mapOwnKeys( b );
  var expected = [ 'b' ];
  test.identical( got, expected )

  var got = _.mapOwnKeys( c );
  var expected = [ 'c' ];
  test.identical( got, expected );

  //

  test.case = 'enumerable on/off';
  var a = { a : '1' };

  var got = _.mapOwnKeys( a );
  var expected = [ 'a' ]
  test.identical( got, expected );

  Object.defineProperty( a, 'k', { enumerable : false } );
  var o = { enumerable : 0 };
  var got = _.mapOwnKeys.call( o, a );
  var expected = [ 'a', 'k' ]
  test.identical( got, expected );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowError( function()
  {
    _.mapOwnKeys();
  })

  test.case = 'invalid type';
  test.shouldThrowError( function()
  {
    _.mapOwnKeys( 1 );
  })

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapOwnKeys.call( { own : 0 }, {} );
  })

}

//

function mapAllKeys( test )
{
  var _expected =
  [
    '__defineGetter__',
    '__defineSetter__',
    'hasOwnProperty',
    '__lookupGetter__',
    '__lookupSetter__',
    'propertyIsEnumerable',
    '__proto__',
    'constructor',
    'toString',
    'toLocaleString',
    'valueOf',
    'isPrototypeOf'
  ]

  //

  test.case = 'empty'
  var got = _.mapAllKeys( {} );
  test.identical( got.sort(), _expected.sort() )

  //

  test.case = 'one own property'
  var got = _.mapAllKeys( { a : 1 } );
  var expected = _expected.slice();
  expected.push( 'a' );
  test.identical( got.sort(), expected.sort() )

  //

  test.case = 'date'
  var got = _.mapAllKeys( new Date );
  test.identical( got.length, 55 );

  //

  test.case = 'not enumerable'
  var a = { };
  Object.defineProperty( a, 'k', { enumerable : 0 })
  var got = _.mapAllKeys( a );
  var expected = _expected.slice();
  expected.push( 'k' );
  test.identical( got.sort(), expected.sort() );

  //

  test.case = 'from prototype'
  var a = { a : 1 };
  var b = { b : 1 };
  Object.setPrototypeOf( a, b );
  Object.defineProperty( a, 'k', { enumerable : 0 } );
  Object.defineProperty( b, 'y', { enumerable : 0 } );
  var got = _.mapAllKeys( a );
  var expected = _expected.slice();
  expected = expected.concat( [ 'a','b','k','y' ] );
  test.identical( got.sort(), expected.sort() );

  //

  if( !Config.debug )
  return;

  test.case = 'no args';
  test.shouldThrowError( function()
  {
    _.mapAllKeys();
  })

  test.case = 'invalid argument';
  test.shouldThrowError( function()
  {
    _.mapAllKeys();
  })

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapAllKeys.call( { own : 0 }, {} );
  })

}

//

function mapVals( test )
{

  test.case = 'trivial';

  var got = _.mapVals( {} );
  var expected = [];
  test.identical( got, expected );

  var got = _.mapVals( { a : 1, b : undefined } );
  var expected = [ 1, undefined ];
  test.identical( got, expected );

  var got = _.mapVals( { a : 7, b : 13 } );
  var expected = [ 7, 13 ];
  test.identical( got, expected );

  var got = _.mapVals( { 7 : 'a', 3 : 'b', 13 : 'c' } );
  var expected = [ 'b', 'a', 'c' ];
  test.identical( got, expected );

  var got = _.mapVals( new Date );
  var expected = [ ];
  test.identical( got, expected );

  /* */

  test.case = 'own'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapVals.call( { own : 0, enumerable : 1 }, a );
  var expected = [ 1, 2 ]
  test.identical( got, expected );

  /**/

  var got = _.mapVals.call( { own : 1, enumerable : 1 }, a );
  var expected = [ 1 ];
  test.identical( got, expected );

  //

  test.case = 'enumerable'
  var a = { a : 1 };
  Object.defineProperty( a, 'k', { enumerable : 0, value : 2 } );

  /**/

  var got = _.mapVals.call( { enumerable : 1, own : 0 }, a );
  var expected = [ 1 ];
  test.identical( got, expected );

  /**/

  var got = _.mapVals.call( { enumerable : 0, own : 0 }, a );
  var contains = false;
  for( var i = 0; i < got.length; i++ )
  {
    contains = _.mapContain( a, got[ i ] )
    if( !contains )
    break;
  }
  test.is( contains );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapVals();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapVals( 'wrong argument' );
  });

  test.case = 'wrong option';
  test.shouldThrowError( function()
  {
    _.mapVals.call( { a : 1 }, {} );
  });

}

//

function mapOwnVals( test )
{

  test.case = 'trivial';

  var got = _.mapOwnVals( {} );
  var expected = [];
  test.identical( got, expected );

  var got = _.mapOwnVals( { a : 7, b : 13 } );
  var expected = [ 7, 13 ];
  test.identical( got, expected );

  var got = _.mapOwnVals( { 7 : 'a', 3 : 'b', 13 : 'c' } );
  var expected = [ 'b', 'a', 'c' ];
  test.identical( got, expected );

  var got = _.mapOwnVals( new Date );
  var expected = [ ];
  test.identical( got, expected );

  //

  test.case = ' only own values'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapOwnVals( a );
  var expected = [ 1 ];
  test.identical( got, expected );

  /* enumerable off */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  Object.defineProperty( b, 'y', { enumerable : 0, value : 4 } );
  var got = _.mapOwnVals.call({ enumerable : 0 }, a );
  var expected = [ 1, 3 ];
  test.identical( got, expected );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnVals();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnVals( 'wrong argument' );
  });

  test.case = 'wrong option';
  test.shouldThrowError( function()
  {
    _.mapOwnVals.call( { a : 1 }, {} );
  });

}

//

function mapAllVals( test )
{
  test.case = 'trivial';

  var got = _.mapAllVals( {} );
  test.is( got.length );

  /**/

  var got = _.mapAllVals( { a : 7, b : 13 } );
  test.is( got.length );
  test.is( got.indexOf( 7 ) !== -1 );
  test.is( got.indexOf( 13 ) !== -1 );

  /**/

  var got = _.mapAllVals( new Date );
  test.is( got.length > _.mapAllVals( {} ).length );

  //

  test.case = 'from prototype'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapAllVals( a );
  var expected = [ 1 ];
  test.is( got.length > _.mapAllVals( {} ).length );
  test.is( got.indexOf( 1 ) !== -1 );
  test.is( got.indexOf( 2 ) !== -1 );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapAllVals();
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapAllVals( 'wrong argument' );
  });

  test.case = 'wrong option';
  test.shouldThrowError( function()
  {
    _.mapAllVals.call( { a : 1 }, {} );
  });

}

//

function mapPairs( test )
{

  test.case = 'empty';

  var got = _.mapPairs( {} );
  var expected = [];
  test.identical( got, expected );

  var got = _.mapPairs( [] );
  var expected = [];
  test.identical( got, expected );

  /**/

  test.case = 'a list of [ key, value ] pairs';

  var got = _.mapPairs( { a : 7, b : 13 } );
  var expected = [ [ 'a', 7 ], [ 'b', 13 ] ];
  test.identical( got, expected );

  test.case = 'a list of [ key, value ] pairs'
  var got = _.mapPairs( { a : 3, b : 13, c : 7 } );
  var expected = [ [ 'a', 3 ], [ 'b', 13 ], [ 'c', 7 ] ];
  test.identical( got, expected );

  /**/

  var arrObj = [];
  arrObj[ 'k' ] = 1;
  var got = _.mapPairs( arrObj );
  var expected = [ [ 'k', 1 ] ];
  test.identical( got, expected );

  /**/

  var got = _.mapPairs( new Date );
  var expected = [];
  test.identical( got, expected );

  /* */

  test.case = 'from prototype';

  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );
  var got = _.mapPairs( a );
  var expected = [ [ 'a', 1 ], [ 'b', 2 ] ];
  test.identical( got, expected );

  /* using own */

  var got = _.mapPairs.call( { own : 1 }, a );
  var expected = [ [ 'a', 1 ] ];
  test.identical( got, expected );

  /* using enumerable off, own on */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapPairs.call( { enumerable : 0, own : 1 }, a );
  var expected = [ [ 'a', 1 ], [ 'k', 3 ] ];
  test.identical( got, expected );

  /* using enumerable off, own off */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapPairs.call( { enumerable : 0, own : 0 }, a );
  test.is( got.length > 2 );
  test.identical( got[ 0 ], [ 'a', 1 ] );
  test.identical( got[ 1 ], [ 'k', 3 ] );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapPairs();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapPairs( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapPairs( 'wrong argument' );
  });

  test.case = 'redundant argument';
  test.shouldThrowError( function()
  {
    _.mapPairs( {}, 'wrong arguments' );
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapPairs( null );
  });

}

//

function mapOwnPairs( test )
{
  test.case = 'empty';
  var got = _.mapOwnPairs( {} );
  var expected = [];
  test.identical( got, expected );

  //

  test.case = 'a list of [ key, value ] pairs';

  var got = _.mapOwnPairs( { a : 7, b : 13 } );
  var expected = [ [ 'a', 7 ], [ 'b', 13 ] ];
  test.identical( got, expected );

  /**/

  var arrObj = [];
  arrObj[ 'k' ] = 1;
  var got = _.mapOwnPairs( arrObj );
  var expected = [ [ 'k', 1 ] ];
  test.identical( got, expected );

  /**/

  var got = _.mapOwnPairs( new Date );
  var expected = [];
  test.identical( got, expected );

  //

  test.case = 'from prototype';

  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );
  var got = _.mapOwnPairs( a );
  var expected = [ [ 'a', 1 ] ];
  test.identical( got, expected );

  /* using enumerable off */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapOwnPairs.call( { enumerable : 0 }, a );
  var expected = [ [ 'a', 1 ], [ 'k', 3 ] ];
  test.identical( got, expected );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnPairs();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapOwnPairs( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnPairs( 'wrong argument' );
  });

}

//

function mapAllPairs( test )
{
  test.case = 'empty';
  var got = _.mapAllPairs( {} );
  test.is( got.length );

  //

  test.case = 'a list of [ key, value ] pairs';

  var got = _.mapAllPairs( { a : 7, b : 13 } );
  test.is( got.length > 2 );
  test.identical( got[ 0 ], [ 'a', 7 ] );
  test.identical( got[ 1 ], [ 'b', 13 ] );

  /**/

  var arrObj = [];
  arrObj[ 'k' ] = 1;
  var got = _.mapAllPairs( arrObj );
  test.is( got.length > 1 );
  got = _.arrayFlatten( [], got );
  test.is( got.indexOf( 'k' ) !== -1 );
  test.identical( got[ got.indexOf( 'k' ) + 1 ], 1 );

  /**/

  var got = _.mapAllPairs( new Date );
  test.is( got.length > 1 );
  got = _.arrayFlatten( [], got );
  test.is( got.indexOf( 'constructor' ) !== -1 );
  test.identical( got[ got.indexOf( 'constructor' ) + 1 ].name, 'Date' );

  //

  test.case = 'from prototype';

  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );
  var got = _.mapAllPairs( a );
  test.is( got.length > 2 );
  test.identical( got[ 0 ], [ 'a', 1 ] );
  test.identical( got[ 1 ], [ 'b', 2 ] );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapAllPairs();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapAllPairs( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapAllPairs( 'wrong argument' );
  });

}

//

function mapProperties( test )
{
  test.case = 'empty';

  var got = _.mapProperties( {} );
  test.identical( got, {} );

  var got = _.mapProperties( [] );
  test.identical( got, {} );

  //

  test.case = 'trivial';

  var got = _.mapProperties( { a : 1 } );
  var expected = { a : 1 };
  test.identical( got, expected );

  var a = [];
  a.a = 1;
  var got = _.mapProperties( a );
  var expected = { a : 1 };
  test.identical( got, expected );

  var got = _.mapProperties( new Date() );
  var expected = {};
  test.identical( got, expected );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapProperties( a );
  var expected = { a : 1, b : 2 };
  test.identical( got, expected );

  /**/

  var got = _.mapProperties.call( { own : 1, enumerable : 1 }, a );
  var expected = { a : 1 };
  test.identical( got, expected );

  /**/

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapProperties.call( { enumerable : 0, own : 1 }, a );
  var expected = { a : 1, k : 3 };
  test.identical( got, expected );

  /**/

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapProperties.call( { enumerable : 0, own : 0 }, a );
  test.is( Object.keys( got ).length > 3 );
  test.is( got.a === 1 );
  test.is( got.b === 2 );
  test.is( got.k === 3 );

  /**/

  var got = _.mapProperties.call( { enumerable : 0, own : 0 }, new Date() );
  test.is( Object.keys( got ).length );
  test.is( got.constructor.name === 'Date' );
  test.is( _.routineIs( got.getDate ) );
  test.is( !!got.__proto__ );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapProperties();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapProperties( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapProperties( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapProperties.call( { x : 1 }, {} );
  });

}

//

function mapOwnProperties( test )
{
  test.case = 'empty';

  var got = _.mapOwnProperties( {} );
  test.identical( got, {} );

  var got = _.mapOwnProperties( [] );
  test.identical( got, {} );

  //

  test.case = 'trivial';

  var got = _.mapOwnProperties( { a : 1 } );
  var expected = { a : 1 };
  test.identical( got, expected );

  var a = [];
  a.a = 1;
  var got = _.mapOwnProperties( a );
  var expected = { a : 1 };
  test.identical( got, expected );

  var got = _.mapOwnProperties( new Date() );
  var expected = {};
  test.identical( got, expected );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapOwnProperties( a );
  var expected = { a : 1 };
  test.identical( got, expected );

  /**/

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapOwnProperties.call( { enumerable : 0 }, a );
  var expected = { a : 1, k : 3 };
  test.identical( got, expected );

  /**/

  var got = _.mapOwnProperties.call( { enumerable : 0 }, new Date() );
  test.identical( got, {} )

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnProperties();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapOwnProperties( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnProperties( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapOwnProperties.call( { x : 1 }, {} );
  });

}

//

function mapAllProperties( test )
{
  test.case = 'empty';

  var got = _.mapAllProperties( {} );
  test.is( Object.keys( got ).length  )
  test.identical( got.constructor.name, 'Object' );

  var got = _.mapAllProperties( [] );
  test.is( Object.keys( got ).length  )
  test.identical( got.constructor.name, 'Array' );

  //

  test.case = 'trivial';

  var got = _.mapAllProperties( { a : 1 } );
  test.is( Object.keys( got ).length > 1 )
  test.identical( got.a, 1 );

  var a = [];
  a.a = 1;
  var got = _.mapAllProperties( a );
  test.is( Object.keys( got ).length > 1 )
  var expected = { a : 1 };
  test.identical( got.a, 1 );

  var got = _.mapAllProperties( new Date() );
  test.is( _.routineIs( got.getDate ) );
  test.identical( got.constructor.name, 'Date' );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapAllProperties( a );
  test.is( Object.keys( got ).length > 2 )
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );

  /**/

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapAllProperties( a );
  test.is( Object.keys( got ).length > 3 )
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.k, 3 );

  /**/

  var a = { a : 1 };
  var b = { b : 2 };
  Object.setPrototypeOf( a, b );
  Object.defineProperty( b, 'k', { enumerable : 0, value : undefined } );
  var got = _.mapAllProperties( a );
  test.is( Object.keys( got ).length > 3 )
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.k, undefined );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapAllProperties();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapAllProperties( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapAllProperties( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapAllProperties.call( { x : 1 }, {} );
  });

}

//

function mapRoutines( test )
{
  test.case = 'empty';

  var got = _.mapRoutines( {} );
  test.identical( got, {} );

  var got = _.mapRoutines( [] );
  test.identical( got, {} );

  //

  test.case = 'trivial';

  var got = _.mapRoutines( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.b ) );

  var a = [];
  a.a = function(){};
  var got = _.mapRoutines( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.a ) );

  var got = _.mapRoutines( new Date() );
  test.identical( got, {} );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapRoutines( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.c ) );

  /**/

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapRoutines( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.c ) );

  /* enumerable : 0 */

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapRoutines.call( { enumerable : 0 }, a );
  test.is( Object.keys( got ).length > 1 )
  test.is( _.routineIs( got.c ) );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );


  /**/

  a.y = function(){}
  var got = _.mapRoutines.call( { own : 1 }, a );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.y ) );

  /* own : 0 */

  var a = { a : 1, y : function(){} };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );
  var got = _.mapRoutines.call( { own : 0 }, a );
  test.is( Object.keys( got ).length === 2 )
  test.is( _.routineIs( got.y ) );
  test.is( _.routineIs( got.c ) );

  /* own : 0, enumerable : 0 */

  var a = { a : 1, y : function(){} };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );
  Object.defineProperty( b, 'k', { enumerable : 0, value : function(){} } );
  var got = _.mapRoutines.call( { own : 0, enumerable : 0 }, a );
  test.is( Object.keys( got ).length > 3 )
  test.is( _.routineIs( got.y ) );
  test.is( _.routineIs( got.c ) );
  test.is( _.routineIs( got.k ) );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapRoutines();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapRoutines( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapRoutines( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapRoutines.call( { x : 1 }, {} );
  });

}

//

function mapOwnRoutines( test )
{
  test.case = 'empty';

  var got = _.mapOwnRoutines( {} );
  test.identical( got, {} );

  var got = _.mapOwnRoutines( [] );
  test.identical( got, {} );

  //

  test.case = 'trivial';

  var got = _.mapOwnRoutines( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.b ) );

  var a = [];
  a.a = function(){};
  var got = _.mapOwnRoutines( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( _.routineIs( got.a ) );

  var got = _.mapRoutines( new Date() );
  test.identical( got, {} );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapOwnRoutines( a );
  test.identical( got, {} );

  /* enumerable : 0 */

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapOwnRoutines( a );
  test.identical( got, {} );

  /* enumerable : 0 */

  var a = {};
  var b = {};
  Object.setPrototypeOf( a, b );
  Object.defineProperty( b, 'k', { enumerable : 0, value : function(){} } );
  var got = _.mapOwnRoutines( a );
  test.identical( got, {} );

  /* enumerable : 0 */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapOwnRoutines.call( { enumerable : 0 }, a );
  test.identical( got, {} );

  /* enumerable : 0 */

  var a = {};
  var b = {};
  Object.defineProperty( a, 'k', { enumerable : 0, value : function(){} } );
  var got = _.mapOwnRoutines.call( { enumerable : 0 }, a );
  test.identical( got.k, a.k );
  test.is( _.routineIs( got.k ) );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnRoutines();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapOwnRoutines( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnRoutines( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapOwnRoutines.call( { x : 1 }, {} );
  });

}

//

function mapAllRoutines( test )
{
  test.case = 'empty';

  var got = _.mapAllRoutines( {} );
  test.is( Object.keys( got ).length );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );

  var got = _.mapAllRoutines( [] );
  test.is( Object.keys( got ).length );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );

  //

  test.case = 'trivial';

  var got = _.mapAllRoutines( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );
  test.is( _.routineIs( got.b ) );

  var a = [];
  a.a = function(){};
  var got = _.mapAllRoutines( a );
  test.is( Object.keys( got ).length );
  test.is( _.routineIs( got.__defineGetter__ ) );
  test.is( _.routineIs( got.__defineSetter__ ) );
  test.is( _.routineIs( got.a ) );

  var got = _.mapAllRoutines( new Date() );
  test.is( Object.keys( got ).length );
  test.identical( got.constructor.name, 'Date' );
  test.is( _.routineIs( got.getDate ) );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapAllRoutines( a );
  test.is( Object.keys( got ).length > 1 );
  test.is( _.routineIs( got.c ) );

  /**/

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapAllRoutines( a );
  test.is( Object.keys( got ).length > 1 );
  test.is( _.routineIs( got.c ) );

  /**/

  Object.defineProperty( a, 'z', { enumerable : 0, value : function(){} } );
  Object.defineProperty( b, 'y', { enumerable : 0, value : function(){} } );
  var got = _.mapAllRoutines( a );
  test.is( Object.keys( got ).length > 2 );
  test.is( _.routineIs( got.c ) );
  test.is( _.routineIs( got.y ) );
  test.is( _.routineIs( got.z ) );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapAllRoutines();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapAllRoutines( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapAllRoutines( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapAllRoutines.call( { x : 1 }, {} );
  });

}

//

function mapFields( test )
{
  test.case = 'empty';

  var got = _.mapFields( {} );
  test.identical( got, {} );

  var got = _.mapFields( [] );
  test.identical( got, {} );

  //

  test.case = 'trivial';

  var got = _.mapFields( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length === 1 )
  test.is( got.a === 1 );

  var a = [ ];
  a.a = function(){};
  a.b = 1;
  var got = _.mapFields( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( got.b === 1 );

  var got = _.mapFields( new Date() );
  test.identical( got, {} );

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapFields( a );
  test.is( Object.keys( got ).length === 2 );
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );

  /**/

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapFields( a );
  test.is( Object.keys( got ).length === 2 );
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );

  /* enumerable : 0 */

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapFields.call( { enumerable : 0 }, a );
  test.is( Object.keys( got ).length === 4 )
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.k, 3 );

  /**/

  a.y = function(){}
  var got = _.mapFields.call( { own : 1 }, a );
  test.is( Object.keys( got ).length === 1 )
  test.identical( got.a, 1 );

  /* own : 0 */

  var a = { a : 1, y : function(){} };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );
  var got = _.mapFields.call( { own : 0, enumerable : 1 }, a );
  test.is( Object.keys( got ).length === 2 )
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );

  /* enumerable : 0 */

  var a = { a : 1, y : function(){} };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );
  Object.defineProperty( b, 'k', { enumerable : 0, value : function(){} } );
  Object.defineProperty( b, 'z', { enumerable : 0, value : 3 } );
  var got = _.mapFields.call( { enumerable : 0 }, a );
  test.identical( Object.keys( got ).length, 4 );
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.z, 3 );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapFields();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapFields( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapFields( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapFields.call( { x : 1 }, {} );
  });

}

//

function mapOwnFields( test )
{
  test.case = 'empty';

  var got = _.mapOwnFields( {} );
  test.identical( got, {} );

  var got = _.mapOwnFields( [] );
  test.identical( got, {} );

  /* */

  test.case = 'trivial';

  var got = _.mapOwnFields( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length === 1 )
  test.is( got.a === 1 );

  var a = [ ];
  a.a = function(){};
  a.b = 1;
  var got = _.mapOwnFields( a );
  test.is( Object.keys( got ).length === 1 )
  test.is( got.b === 1 );

  var got = _.mapOwnFields( new Date() );
  test.identical( got, {} );

  /* */

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /* */

  var got = _.mapOwnFields( a );
  test.is( Object.keys( got ).length === 1 );
  test.identical( got.a, 1 );

  /* */

  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapOwnFields( a );
  test.is( Object.keys( got ).length === 1 );
  test.identical( got.a, 1 );

  /* enumerable : 0 */

  Object.defineProperty( a, 'y', { enumerable : 0, value : 3 } );
  var got = _.mapOwnFields.call( { enumerable : 0 }, a );
  test.is( Object.keys( got ).length === 3 )
  test.identical( got.a, 1 );
  test.identical( got.y, 3 );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnFields();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapOwnFields( 'x' );
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapOwnFields( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnFields( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapOwnFields.call( { x : 1 }, {} );
  });

}

//

function mapAllFields( test )
{
  test.case = 'empty';

  var got = _.mapAllFields( {} );
  test.is( Object.keys( got ).length === 1 )
  test.identical( got.__proto__, {}.__proto__ );

  var got = _.mapAllFields( [] );
  test.is( Object.keys( got ).length === 2 )
  test.identical( got.__proto__, [].__proto__ );
  test.identical( got.length, 0 );

  //

  test.case = 'trivial';

  var got = _.mapAllFields( { a : 1, b : function(){} } );
  test.is( Object.keys( got ).length === 2 )
  test.is( got.a === 1 );
  test.is( got.__proto__ === {}.__proto__ );

  var a = [ ];
  a.a = function(){};
  a.b = 1;
  var got = _.mapAllFields( a );
  console.log(got);
  test.is( Object.keys( got ).length === 3 )
  test.is( got.length === 0 );
  test.is( got.b === 1 );
  test.is( got.__proto__ === [].__proto__ );

  var str = new Date();
  var got = _.mapAllFields( str );
  test.identical( got.__proto__, str.__proto__);

  //

  test.case = 'prototype'
  var a = { a : 1 };
  var b = { b : 2, c : function(){} };
  Object.setPrototypeOf( a, b );

  /**/

  var got = _.mapAllFields( a );
  test.is( Object.keys( got ).length === 3 );
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.__proto__, b );

  /**/

  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  var got = _.mapAllFields( a );
  test.is( Object.keys( got ).length === 4 );
  test.identical( got.a, 1 );
  test.identical( got.b, 2 );
  test.identical( got.k, 3 );
  test.identical( got.__proto__, b );

  //

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapAllFields();
  });

  test.case = 'primitive';
  test.shouldThrowError( function()
  {
    _.mapAllFields( 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapAllFields( 'wrong argument' );
  });

  test.case = 'unknown option';
  test.shouldThrowError( function()
  {
    _.mapAllFields.call( { x : 1 }, {} );
  });

}

//

function mapOnlyPrimitives( test )
{
  test.case = 'emtpy';

  var got = _.mapOnlyPrimitives( {} )
  test.identical( got, {} );

  test.case = 'primitives';

  var src =
  {
    a : null,
    b : undefined,
    c : 5,
    e : false,
    f : 'a',
    g : function(){},
    h : [ 1 ],
    i : new Date(),
    j : new ArrayBuffer( 5 )
  }
  var got = _.mapOnlyPrimitives( src );
  var expected =
  {
    a : null,
    b : undefined,
    c : 5,
    e : false,
    f : 'a',
  }
  test.identical( got, expected );

  /* */

  test.case = 'only enumerable';
  var a = {};
  Object.defineProperty( a, 'k', { enumerable : 0, value : 3 } )
  var got = _.mapOnlyPrimitives( a );
  test.identical( got, {} );

  /* */

  test.case = 'from prototype';
  var a = {};
  var b = { a : 1, c : function(){} };
  Object.defineProperty( b, 'k', { enumerable : 0, value : 3 } );
  Object.setPrototypeOf( a, b );
  var got = _.mapOnlyPrimitives( a );
  test.identical( got, { a : 1 } );

  /* */

  if( !Config.debug )
  return;

  test.case = 'invalid arg type';
  test.shouldThrowError( function()
  {
    _.mapOnlyPrimitives( null )
  });

  test.case = 'no args';
  test.shouldThrowError( function()
  {
    _.mapOnlyPrimitives()
  })

}

//

function mapButConditional( test )
{

  test.case = 'an object';
  var got = _.mapButConditional( _.field.filter.dstNotHasSrcPrimitive, { a : 1, b : 'ab', c : [ 1, 2, 3 ] }, { a : 1, b : 'ab', d : [ 1, 2, 3 ] }  );
  var expected = {};
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapButConditional();
  });

  test.case = 'few arguments';
  test.shouldThrowError( function()
  {
    _.mapButConditional( _.field.mapper.primitive );
  });

  test.case = 'second argument is wrong type of array';
  test.shouldThrowError( function()
  {
    _.mapButConditional( _.field.mapper.primitive, [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapButConditional( 'wrong arguments' );
  });

}

//

function mapBut( test )
{

  test.case = 'empty src map'; /* */

  var srcMap = {};
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'empty src array'; /* */

  var srcMap = [];
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'empty screen'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = {};
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = { d : 'name', c : 33, a : 'abc' };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'trivial'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  var srcMap = { d : 'name', c : 33, a : 'abc', x : 13 };
  var screenMap = { b : 77, c : 3, d : 'name' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = { a : 'abc', x : 13 };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several screens'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = [ { a : 13 }, { b : 77 }, { c : 3 }, { d : 'name' } ];
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = screenMap.slice();
  var got = _.mapBut( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several srcs'; /* */

  var srcMap = [ { a : 1 }, { b : 1 }, { c : 1 } ];
  var screenMap = { a : 2, b : 2, d : 2 };
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapBut( srcMap, screenMap );
  var expected = { c :1 };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several srcs and screens'; /* */

  var srcMap = [ { a : 1 }, { b : 1 }, { c : 1 } ];
  var screenMap = [ { a : 2 }, { b : 2 }, { d : 2 } ];
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = screenMap.slice();
  var got = _.mapBut( srcMap, screenMap );
  var expected = { c : 1 };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapBut();
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapBut( 'wrong arguments' );
  });

  test.case = 'only src map';
  test.shouldThrowError( function()
  {
    _.mapBut( srcMap );
  });

  test.case = 'first argument is not an object-like';
  test.shouldThrowError( function()
  {
    _.mapBut( 3, [] );
  });

  test.case = 'second argument is not an object-like';
  test.shouldThrowError( function()
  {
    _.mapBut( [], '' );
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _.mapBut( [], [], {} );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapBut( {}, 'wrong arguments' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapBut( 'wrong arguments', {} );
  });

}

//

function mapOwnBut( test )
{

  test.case = 'an empty object';
  var got = _.mapOwnBut( {}, {} );
  var expected = {  };
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.mapOwnBut( { a : 7, b : 13, c : 3 }, { a : 7, b : 13 } );
  var expected = { c : 3 };
  test.identical( got, expected );

  test.case = 'an object';
  var got = _.mapOwnBut( { a : 7, 'toString' : 5 }, { b : 33, c : 77 } );
  var expected = { a : 7 };
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnBut();
  });

  test.case = 'not enough arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnBut( {} );
  });

  test.case = 'not enough arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnBut( [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnBut( 'wrong arguments' );
  });

}

//

function mapOnly( test )
{

  test.case = 'empty src map'; /* */

  var srcMap = {};
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapOnly( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'empty src array'; /* */

  var srcMap = [];
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapOnly( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'empty screen'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = {};
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapOnly( srcMap, screenMap );
  var expected = {};
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'only srcMap'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var got = _.mapOnly( srcMap );
  var expected = { d : 'name', c : 33, a : 'abc' };
  test.identical( got, expected );
  test.is( got !== srcMap );

  test.case = 'trivial'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = { a : 13, b : 77, c : 3, d : 'name' };
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapOnly( srcMap, screenMap );
  var expected = { a : 'abc', c : 33, d : 'name' };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several screens'; /* */

  var srcMap = { d : 'name', c : 33, a : 'abc' };
  var screenMap = [ { a : 13 }, { b : 77 }, { c : 3 }, { d : 'name' } ];
  var srcMapCopy = _.mapExtend( null, srcMap );
  var screenMapCopy = screenMap.slice();
  var got = _.mapOnly( srcMap, screenMap );
  var expected = { a : 'abc', c : 33, d : 'name' };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several srcs'; /* */

  var srcMap = [ { a : 1 }, { b : 1 }, { c : 1 } ];
  var screenMap = { a : 2, b : 2, d : 2 };
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = _.mapExtend( null, screenMap );
  var got = _.mapOnly( srcMap, screenMap );
  var expected = { a : 1, b : 1 };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  test.case = 'several srcs and screens'; /* */

  var srcMap = [ { a : 1 }, { b : 1 }, { c : 1 } ];
  var screenMap = [ { a : 2 }, { b : 2 }, { d : 2 } ];
  var srcMapCopy = srcMap.slice();
  var screenMapCopy = screenMap.slice();
  var got = _.mapOnly( srcMap, screenMap );
  var expected = { a : 1, b : 1 };
  test.identical( got, expected );
  test.is( got !== srcMap );
  test.identical( srcMap, srcMapCopy );
  test.identical( screenMap, screenMapCopy );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapOnly();
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapOnly( 'wrong arguments' );
  });

  test.case = 'first argument is not an object-like';
  test.shouldThrowError( function()
  {
    _.mapOnly( 3, [] );
  });

  test.case = 'second argument is not an object-like';
  test.shouldThrowError( function()
  {
    _.mapOnly( [], '' );
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _.mapOnly( [], [], {} );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapOnly( {}, 'wrong arguments' );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapOnly( 'wrong arguments', {} );
  });

}

//

function _mapOnly( test )
{

  test.case = 'an object';
  var options = {};
  options.screenMaps = { 'a' : 13, 'b' : 77, 'c' : 3, 'name' : 'Mikle' };
  options.srcMaps = { 'a' : 33, 'd' : 'name', 'name' : 'Mikle', 'c' : 33 };
  var got = _._mapOnly( options );
  var expected = { a : 33, c : 33, name : 'Mikle' };
  test.identical( got, expected );

  test.case = 'an object2'
  var options = {};
  options.screenMaps = { a : 13, b : 77, c : 3, d : 'name' };
  options.srcMaps = { d : 'name', c : 33, a : 'abc' };
  var got = _._mapOnly( options );
  var expected = { a : 'abc', c : 33, d : 'name' };
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _._mapOnly();
  });

  test.case = 'redundant arguments';
  test.shouldThrowError( function()
  {
    _._mapOnly( {}, 'wrong arguments' );
  });

  test.case = 'wrong type of array';
  test.shouldThrowError( function()
  {
    _._mapOnly( [] );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _._mapOnly( 'wrong arguments' );
  });

}

//

function mapsAreIdentical( test )
{

  test.case = 'same values';
  var got = _.mapsAreIdentical( { a : 7, b : 13 }, { a : 7, b : 13 } );
  var expected = true;
  test.identical( got, expected );

  test.case = 'not the same values in'
  var got = _.mapsAreIdentical( { 'a' : 7, 'b' : 13 }, { 'a' : 7, 'b': 14 } );
  var expected = false;
  test.identical( got, expected );

  test.case = 'different number of keys, more in the first argument'
  var got = _.mapsAreIdentical( { 'a' : 7, 'b' : 13, 'с' : 15 }, { 'a' : 7, 'b' : 13 } );
  var expected = false;
  test.identical( got, expected );

  test.case = 'different number of keys, more in the second argument'
  var got = _.mapsAreIdentical( { 'a' : 7, 'b' : 13 }, { 'a' : 7, 'b' : 13, 'с' : 15 } );
  var expected = false;
  test.identical( got, expected );

  /* special cases */

  test.case = 'empty maps, standrard'
  var got = _.mapsAreIdentical( {}, {} );
  var expected = true;
  test.identical( got, expected );

  test.case = 'empty maps, pure'
  var got = _.mapsAreIdentical( Object.create( null ), Object.create( null ) );
  var expected = true;
  test.identical( got, expected );

  test.case = 'empty maps, one standard another pure'
  var got = _.mapsAreIdentical( {}, Object.create( null ) );
  var expected = true;
  test.identical( got, expected );

  /* bad arguments */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical();
  });

  test.case = 'not object-like arguments';
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( [ 'a', 7, 'b', 13 ], [ 'a', 7, 'b', 14 ] );
  });
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( 'a','b' );
  });
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( 1,3 );
  });
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( null,null );
  });
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( undefined,undefined );
  });

  test.case = 'too few arguments';
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( {} );
  });

  test.case = 'too many arguments';
  test.shouldThrowError( function()
  {
    _.mapsAreIdentical( {}, {}, 'redundant argument' );
  });

}

//

function mapContain( test )
{

  test.case = 'first has same keys like second';
  var got = _.mapContain( { a : 7, b : 13, c : 15 }, { a : 7, b : 13 } );
  var expected = true;
  test.identical( got, expected );

  test.case = 'in the array';
  var got = _.mapContain( [ 'a', 7, 'b', 13, 'c', 15 ], [ 'a', 7, 'b', 13 ] );
  var expected = true;
  test.identical( got, expected );

  test.case = 'number of keys in first not equal';
  var got = _.mapContain( { a : 1 }, { a : 1, b : 2 } );
  var expected = false;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.mapContain();
  });

  test.case = 'few arguments';
  test.shouldThrowError( function()
  {
    _.mapContain( {} );
  });

  test.case = 'too many arguments';
  test.shouldThrowError( function()
  {
    _.mapContain( {}, {}, 'redundant argument' );
  });

}

//

function mapOwnKey( test )
{

  test.case = 'second argument is string';
  var got = _.mapOwnKey( { a : 7, b : 13 }, 'a' );
  var expected = true;
  test.identical( got, expected );

  test.case = 'second argument is object';
  var got = _.mapOwnKey( { a : 7, b : 13 }, Object.create( null ).a = 'a' );
  var expected = true;
  test.identical( got, expected );

  test.case = 'second argument is symbol';
  var symbol = Symbol( 'b' ), obj = { a : 7, [ symbol ] : 13 };
  var got = _.mapOwnKey( obj, symbol );
  var expected = true;
  test.identical( got, expected );

  test.case = 'false';
  var got = _.mapOwnKey( Object.create( { a : 7, b : 13 } ), 'a' );
  var expected = false;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no argument';
  test.shouldThrowError( function()
  {
    _.mapOwnKey();
  });

  test.case = 'few arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnKey( {}, 'a', 'b' );
  });

  test.case = 'wrong type of key';
  test.shouldThrowError( function()
  {
    _.mapOwnKey( [], 1 );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.mapOwnKey( 1 );
  });

  test.case = 'wrong type of second argument';
  test.shouldThrowError( function()
  {
    _.mapOwnKey( {}, 13 );
  });

  test.case = 'wrong type of arguments';
  test.shouldThrowError( function()
  {
    _.mapOwnKey( '', 7 );
  });

}

//

function mapHasAll( test )
{
  test.case = 'empty';
  var got = _.mapHasAll( {}, {} );
  test.is( got );

  test.case = 'screen empty';
  var got = _.mapHasAll( { a : 1 }, {} );
  test.is( got );

  test.case = 'same keys';
  var got = _.mapHasAll( { a : 1 }, { a : 2 } );
  test.is( got );

  test.case = 'has only one';
  var got = _.mapHasAll( { a : 1, b : 2, c :  3 }, { b : 2 } );
  test.is( got );

  test.case = 'has all';
  var got = _.mapHasAll( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( got );

  test.case = 'one is mising';
  var got = _.mapHasAll( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( !got );

  test.case = 'src has enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapHasAll( a, { a : 1 } );
  test.is( got );

  var got = _.mapHasAll( a, a );
  test.is( got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapHasAll( src, screen );
  test.is( got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapHasAll( a, { a : undefined } );
  test.is( got );

  var got = _.mapHasAll( { a : undefined }, { a : undefined } );
  test.is( got );

  test.case = 'src has toString on proto';
  var got = _.mapHasAll( {}, { toString : 1 } );
  test.is( got );

  test.case = 'map has on proto';
  var a = {};
  var b = { a : 1 };
  Object.setPrototypeOf( a, b );
  var got = _.mapHasAll( a, { a : 1 } );
  test.is( got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasAll( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasAll( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapHasAll( {}, {}, {} );
    });
  }

}

//

function mapHasAny( test )
{
  test.case = 'empty';
  var got = _.mapHasAny( {}, {} );
  test.is( !got );

  test.case = 'screen empty';
  var got = _.mapHasAny( { a : 1 }, {} );
  test.is( !got );

  test.case = 'same keys';
  var got = _.mapHasAny( { a : 1 }, { a : 2 } );
  test.is( got );

  test.case = 'has only one';
  var got = _.mapHasAny( { a : 1, b : 2, c :  3 }, { b : 2, x : 1 } );
  test.is( got );

  test.case = 'has all';
  var got = _.mapHasAny( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( got );

  test.case = 'one is mising';
  var got = _.mapHasAny( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( got );

  test.case = 'has no one';
  var got = _.mapHasAny( { a : 1, b : 2 }, { x : 1, y : 1} );
  test.is( !got );

  test.case = 'src has enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapHasAny( a, { a : 1 } );
  test.is( got );

  var got = _.mapHasAny( a, a );
  test.is( !got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapHasAny( src, screen );
  test.is( !got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapHasAny( a, { a : undefined } );
  test.is( got );

  var got = _.mapHasAny( { a : undefined }, { a : undefined } );
  test.is( got );

  test.case = 'src has toString on proto';
  var got = _.mapHasAny( {}, { x : 1, toString : 1 } );
  test.is( got );

  test.case = 'map has on proto';
  var a = {};
  var b = { a : 1 };
  Object.setPrototypeOf( a, b );
  var got = _.mapHasAny( a, { a : 1, x : 1 } );
  test.is( got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasAny( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasAny( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapHasAny( {}, {}, {} );
    });
  }

}

//

function mapHasNone( test )
{
  test.case = 'empty';
  var got = _.mapHasNone( {}, {} );
  test.is( got );

  test.case = 'screen empty';
  var got = _.mapHasNone( { a : 1 }, {} );
  test.is( got );

  test.case = 'same keys';
  var got = _.mapHasNone( { a : 1 }, { a : 2 } );
  test.is( !got );

  test.case = 'has only one';
  var got = _.mapHasNone( { a : 1, b : 2, c :  3 }, { b : 2, x : 1 } );
  test.is( !got );

  test.case = 'has all';
  var got = _.mapHasNone( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( !got );

  test.case = 'one is mising';
  var got = _.mapHasNone( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( !got );

  test.case = 'has no one';
  var got = _.mapHasNone( { a : 1, b : 2 }, { x : 1, y : 1} );
  test.is( got );

  test.case = 'src has non enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  debugger;
  var got = _.mapHasNone( a, { a : 1 } );
  debugger;
  test.is( !got );

  var got = _.mapHasNone( a, a );
  test.is( got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapHasNone( src, screen );
  test.is( got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapHasNone( a, { a : undefined } );
  test.is( !got );

  var got = _.mapHasNone( { a : undefined }, { a : undefined } );
  test.is( !got );

  test.case = 'src has toString on proto';
  var got = _.mapHasNone( {}, { x : 1, toString : 1 } );
  test.is( !got );

  test.case = 'map has on proto';
  var a = {};
  var b = { a : 1 };
  Object.setPrototypeOf( a, b );

  var got = _.mapHasNone( a, { x : 1 } );
  test.is( got );

  var got = _.mapHasNone( a, { a : 1 } );
  test.is( !got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasNone( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapHasNone( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapHasNone( {}, {}, {} );
    });
  }

}

//

function mapOwnAll( test )
{
  test.case = 'empty';
  var got = _.mapOwnAll( {}, {} );
  test.is( got );

  test.case = 'screen empty';
  var got = _.mapOwnAll( { a : 1 }, {} );
  test.is( got );

  test.case = 'same keys';
  var got = _.mapOwnAll( { a : 1 }, { a : 2 } );
  test.is( got );

  test.case = 'has only one';
  var got = _.mapOwnAll( { a : 1, b : 2, c :  3 }, { b : 2, x : 1 } );
  test.is( !got );

  test.case = 'has all';
  var got = _.mapOwnAll( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( got );

  test.case = 'one is mising';
  var got = _.mapOwnAll( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( !got );

  test.case = 'has no one';
  var got = _.mapOwnAll( { a : 1, b : 2 }, { x : 1, y : 1} );
  test.is( !got );

  test.case = 'src has enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnAll( a, { a : 1 } );
  test.is( got );

  var got = _.mapOwnAll( a, a );
  test.is( got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapOwnAll( src, screen );
  test.is( got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnAll( a, { a : undefined } );
  test.is( got );

  var got = _.mapOwnAll( { a : undefined }, { a : undefined } );
  test.is( got );

  test.case = 'src has toString on proto';
  var got = _.mapOwnAll( {}, { x : 1, toString : 1 } );
  test.is( !got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnAll( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnAll( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapOwnAll( {}, {}, {} );
    });

    test.case = 'src is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnAll( a,{ a : 1 } );
    });

    test.case = 'screen is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnAll( { a : 1 }, a );
    });
  }

}

//

function mapOwnAny( test )
{
  test.case = 'empty';
  var got = _.mapOwnAny( {}, {} );
  test.is( !got );

  test.case = 'screen empty';
  var got = _.mapOwnAny( { a : 1 }, {} );
  test.is( !got );

  test.case = 'same keys';
  var got = _.mapOwnAny( { a : 1 }, { a : 2 } );
  test.is( got );

  test.case = 'has only one';
  var got = _.mapOwnAny( { a : 1, b : 2, c :  3 }, { b : 2, x : 1 } );
  test.is( got );

  test.case = 'has all';
  var got = _.mapOwnAny( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( got );

  test.case = 'one is mising';
  var got = _.mapOwnAny( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( got );

  test.case = 'has no one';
  var got = _.mapOwnAny( { a : 1, b : 2 }, { x : 1, y : 1} );
  test.is( !got );

  test.case = 'src has enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnAny( a, { a : 1 } );
  test.is( got );

  var got = _.mapOwnAny( a, a );
  test.is( !got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapOwnAny( src, screen );
  test.is( !got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnAny( a, { a : undefined } );
  test.is( got );

  var got = _.mapOwnAny( { a : undefined }, { a : undefined } );
  test.is( got );

  test.case = 'src has toString on proto';
  var got = _.mapOwnAny( {}, { x : 1, toString : 1 } );
  test.is( !got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnAny( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnAny( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapOwnAny( {}, {}, {} );
    });

    test.case = 'src is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnAny( a,{ a : 1 } );
    });

    test.case = 'screen is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnAny( { a : 1 }, a );
    });
  }

}

//

function mapOwnNone( test )
{
  test.case = 'empty';
  var got = _.mapOwnNone( {}, {} );
  test.is( got );

  test.case = 'screen empty';
  var got = _.mapOwnNone( { a : 1 }, {} );
  test.is( got );

  test.case = 'same keys';
  var got = _.mapOwnNone( { a : 1 }, { a : 2 } );
  test.is( !got );

  test.case = 'has only one';
  var got = _.mapOwnNone( { a : 1, b : 2, c :  3 }, { b : 2, x : 1 } );
  test.is( !got );

  test.case = 'has all';
  var got = _.mapOwnNone( { a : 1, b : 2, c :  3 }, { b : 2, a : 3, c : 4 } );
  test.is( !got );

  test.case = 'one is mising';
  var got = _.mapOwnNone( { a : 1, b : 2 }, { b : 2, a : 3, c : 1 } );
  test.is( !got );

  test.case = 'has no one';
  var got = _.mapOwnNone( { a : 1, b : 2 }, { x : 1, y : 1} );
  test.is( got );

  test.case = 'src has enumerable';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnNone( a, { a : 1 } );
  test.is( !got );

  var got = _.mapOwnNone( a, a );
  test.is( got );

  test.case = 'screen has enumerable';

  /* for..in skips enumerable */
  var src = { a : 1 };
  var screen = {};
  Object.defineProperty( screen, 'a',{ enumerable : 0, value : 3 } );
  var got = _.mapOwnNone( src, screen );
  test.is( got );

  test.case = 'screen has undefined';
  var a = {};
  Object.defineProperty( a, 'a',{ enumerable : 0 } );

  var got = _.mapOwnNone( a, { a : undefined } );
  test.is( !got );

  var got = _.mapOwnNone( { a : undefined }, { a : undefined } );
  test.is( !got );

  test.case = 'src has toString on proto';
  var got = _.mapOwnNone( {}, { x : 1, toString : 1 } );
  test.is( got );

  //

  if( Config.degub )
  {
    test.case = 'src is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnNone( 1, {} );
    });

    test.case = 'screen is no object like';
    test.shouldThrowError( function()
    {
      _.mapOwnNone( {}, 1 );
    });

    test.case = 'too much args';
    test.shouldThrowError( function()
    {
      _.mapOwnNone( {}, {}, {} );
    });

    test.case = 'src is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnNone( a,{ a : 1 } );
    });

    test.case = 'screen is not a map';
    test.shouldThrowError( function()
    {
      var a = {};
      var b = { a : 1 };
      Object.setPrototypeOf( a, b )
      _.mapOwnNone( { a : 1 }, a );
    });
  }

}

// --
//
// --

var Self =
{

  name : 'Tools/base/l1/Map',
  silencing : 1,

  tests :
  {

    // map tester

    mapIs,

    // map move

    mapCloneAssigning,

    mapExtendConditional,
    mapExtend,
    mapSupplement,
    mapComplement,

    mapMake,

    // map manipulator

    mapSetWithKeys,
    mapSet : mapSetWithKeys,

    // map convert

    mapFirstPair,
    mapValWithIndex,
    mapKeyWithIndex,
    mapToStr,

    mapsFlatten,

    // map properties

    mapKeys,
    mapOwnKeys,
    mapAllKeys,

    mapVals,
    mapOwnVals,
    mapAllVals,

    mapPairs,
    mapOwnPairs,
    mapAllPairs,

    mapProperties,
    mapOwnProperties,
    mapAllProperties,

    mapRoutines,
    mapOwnRoutines,
    mapAllRoutines,

    mapFields,
    mapOwnFields,
    mapAllFields,

    mapOnlyPrimitives,

    // map logic

    mapButConditional,
    mapBut,
    mapOwnBut,

    mapOnly,
    _mapOnly,

    mapsAreIdentical,
    mapContain,

    mapOwnKey,

    mapHasAll,
    mapHasAny,
    mapHasNone,

    mapOwnAll,
    mapOwnAny,
    mapOwnNone,

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Map.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Map_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Map_test_s

( function Regexp_test_s() { // == begin of file Regexp_test_s
function Regexp_test_s_naked() {
( function _Regexp_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

// --
// routines
// --

function regexpIdentical( test )
{
  var context = this;

  /* */

  test.case = 'null';

  var expected = false;
  var got = _.regexpIdentical( null, null );
  test.identical( got, expected );

  /* */

  test.case = 'null and regexp';

  var expected = false;
  var got = _.regexpIdentical( /x/, null );
  test.identical( got, expected );

  /* */

  test.case = 'same string';

  var expected = false;
  var got = _.regexpIdentical( 'x','x' );
  test.identical( got, expected );

  /* */

  test.case = 'same regexp';
  var expected = true;
  var got = _.regexpIdentical( /abc/iy, /abc/yi );
  test.identical( got, expected );

  /* */

  test.case = 'not identical regexp, different flags';
  var expected = false;
  var got = _.regexpIdentical( /abc/i, /abc/ );
  test.identical( got, expected );

  /* */

  test.case = 'not identical regexp, different source';
  var expected = false;
  var got = _.regexpIdentical( /abcd/i, /abc/i );
  test.identical( got, expected );

  /* */

  test.case = 'not identical regexp';
  var expected = false;
  var got = _.regexpIdentical( /abcd/y, /abc/i );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpIdentical() );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpIdentical( /abc/i, /def/i, /a/i ) );

}

//

function regexpsSources( test )
{
  var context = this;

  /* */

  test.case = 'empty';

  var expected =
  {
    sources : [],
    flags : null,
    escaping : 0,
  }
  var got = _.regexpsSources([]);
  test.identical( got, expected );

  /* */

  test.case = 'single string';

  var r1 = 'abc';
  var expected =
  {
    sources : [ 'abc' ],
    flags : null,
    escaping : 0
  }
  var got = _.regexpsSources([ r1 ]);
  test.identical( got, expected );

  /* */

  test.case = 'single regexp';

  var r1 = /abc/i;
  var expected =
  {
    sources : [ 'abc' ],
    flags : 'i',
    escaping : 0
  }
  var got = _.regexpsSources([ r1 ]);
  test.identical( got, expected );

  /* */

  test.case = 'all strings';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = '.+';
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : null,
    escaping : 0
  }
  var got = _.regexpsSources([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps';

  var r1 = 'abc';
  var r2 = /def/;
  var r3 = /.+/;
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : '',
    escaping : 0
  }
  var got = _.regexpsSources([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps and flags i';

  var r1 = 'abc';
  var r2 = /def/i;
  var r3 = /.+/i;
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : 'i',
    escaping : 0
  }
  var got = _.regexpsSources([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps and flags iy';

  var r1 = /abc/iy;
  var r2 = 'def';
  var r3 = /.+/yi;
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : 'iy',
    escaping : 0
  }
  var got = _.regexpsSources([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'empty in map';

  var expected =
  {
    sources : [],
    flags : null,
    escaping : 0
  }
  var o =
  {
    sources : []
  }
  var got = _.regexpsSources( o );
  test.identical( got, expected );
  test.is( o === got );

  /* */

  test.case = 'strings with regexps and flags iy in map';

  var r1 = /abc/iy;
  var r2 = 'def';
  var r3 = /.+/yi;
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : 'iy',
    escaping : 0
  }
  var o =
  {
    sources : [ r1, r2, r3 ],
  }
  var got = _.regexpsSources( o );
  test.identical( got, expected );
  test.is( o === got );

  /* */

  test.case = 'options map with flags';

  var r1 = /abc/i;
  var r2 = 'def';
  var r3 = /.+/i;
  var expected =
  {
    sources : [ 'abc', 'def', '.+' ],
    flags : 'i',
    escaping : 0
  }
  var o =
  {
    sources : [ r1, r2, r3 ],
    flags : 'i',
  }
  var got = _.regexpsSources( o );
  test.identical( got, expected );
  test.is( o === got );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsSources() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsSources([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsSources( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsSources({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function regexpsJoin( test )
{
  var context = this;

  /* */

  test.case = 'empty';

  var expected = new RegExp( '','' );
  var got = _.regexpsJoin([]);
  test.identical( got, expected );

  /* */

  test.case = 'single string';

  var r1 = 'abc';
  var expected = /abc/;
  var got = _.regexpsJoin([ r1 ]);
  test.identical( got, expected );

  /* */

  test.case = 'single regexp';

  var r1 = /abc/i;
  var expected = /abc/i;
  var got = _.regexpsJoin([ r1 ]);
  test.identical( got, expected );
  test.is( got === r1 );

  /* */

  test.case = 'all strings';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = '.+';
  var expected = /abcdef.+/;
  var got = _.regexpsJoin([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps';

  var r1 = 'abc';
  var r2 = /def/;
  var r3 = /.+/;
  var expected = /abcdef.+/;
  var got = _.regexpsJoin([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps and flags i';

  var r1 = 'abc';
  var r2 = /def/i;
  var r3 = /.+/i;
  var expected = /abcdef.+/i;
  var got = _.regexpsJoin([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps and flags iy';

  var r1 = /abc/iy;
  var r2 = 'def';
  var r3 = /.+/yi;
  var expected = /abcdef.+/iy;
  var got = _.regexpsJoin([ r1, r2, r3 ]);
  test.identical( got, expected );

  /* */

  test.case = 'empty in map';

  var o =
  {
    sources : [],
    flags : null,
  }
  var expected = new RegExp( '','' );
  var got = _.regexpsJoin( o );
  test.identical( got, expected );

  /* */

  test.case = 'strings with regexps and flags iy in map';

  var r1 = /abc/iy;
  var r2 = 'def';
  var r3 = /.+/yi;
  var expected = /abcdef.+/iy;
  var o =
  {
    sources : [ r1, r2, r3 ],
  }
  var got = _.regexpsJoin( o );
  test.identical( got, expected );

  /* */

  test.case = 'options map with flags';

  var r1 = /abc/i;
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /abcdef.+/i;
  var o =
  {
    sources : [ r1, r2, r3 ],
    flags : 'i',
  }
  var got = _.regexpsJoin( o );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsJoin() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsJoin([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsJoin( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsJoin({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function regexpsAtLeastFirst( test )
{
  var context = this;

  test.case = 'empty';

  var expected = new RegExp( '' );
  var got = _.regexpsAtLeastFirst([]);
  test.identical( got, expected );

  test.case = 'single regexp';

  var r1 = /.+/i;
  var expected = /.+/i;
  var got = _.regexpsAtLeastFirst([ r1 ]);
  test.identical( got, expected );
  test.is( got === r1 );

  test.case = 'strings';

  var r1 = 'abc';
  var r2 = 'def';
  var expected = /abc(?:def)?/;
  var got = _.regexpsAtLeastFirst([ r1, r2 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /abc(?:def(?:.+)?)?/i;
  var got = _.regexpsAtLeastFirst([ r1, r2, r3 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps and flags';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /abc(?:def(?:.+)?)?/i;
  var got = _.regexpsAtLeastFirst({ sources : [ r1, r2, r3 ], flags : 'i' });
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsAtLeastFirst() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsAtLeastFirst([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsAtLeastFirst( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsAtLeastFirst({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function regexpsNone( test )
{
  var context = this;

  test.case = 'empty';

  var expected = /^(?:(?!(?:)).)+$/;
  var got = _.regexpsNone([]);
  test.identical( got, expected );

  test.case = 'single regexp';

  var r1 = /.+/i;
  var expected = /^(?:(?!(?:.+)).)+$/i;
  var got = _.regexpsNone([ r1 ]);
  test.identical( got, expected );
  test.is( got !== r1 );

  test.case = 'strings';

  var r1 = 'abc';
  var r2 = 'def';
  var expected = /^(?:(?!(?:abc)|(?:def)).)+$/;
  var got = _.regexpsNone([ r1, r2 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /^(?:(?!(?:abc)|(?:def)|(?:.+)).)+$/i;
  var got = _.regexpsNone([ r1, r2, r3 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps and flags';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /^(?:(?!(?:abc)|(?:def)|(?:.+)).)+$/i;
  var got = _.regexpsNone({ sources : [ r1, r2, r3 ], flags : 'i' });
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsNone() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsNone([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsNone( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsNone({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function regexpsAny( test )
{
  var context = this;

  test.case = 'empty';

  var expected = /(?:)/;
  var got = _.regexpsAny([]);
  test.identical( got, expected );

  test.case = 'single regexp';

  var r1 = /.+/i;
  var expected = /.+/i;
  var got = _.regexpsAny([ r1 ]);
  test.identical( got, expected );
  test.is( got === r1 );

  test.case = 'strings';

  var r1 = 'abc';
  var r2 = 'def';
  var expected = /(?:abc)|(?:def)/;
  var got = _.regexpsAny([ r1, r2 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /(?:abc)|(?:def)|(?:.+)/i;
  var got = _.regexpsAny([ r1, r2, r3 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps and flags';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /(?:abc)|(?:def)|(?:.+)/i;
  var got = _.regexpsAny({ sources : [ r1, r2, r3 ], flags : 'i' });
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsAny() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsAny([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsAny( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsAny({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function regexpsAll( test )
{
  var context = this;

  test.case = 'empty';

  var expected = new RegExp( '' );
  var got = _.regexpsAll([]);
  test.identical( got, expected );

  test.case = 'single regexp';

  var r1 = /.+/i;
  var expected = /.+/i;
  var got = _.regexpsAll([ r1 ]);
  test.identical( got, expected );
  test.is( got === r1 );

  test.case = 'strings';

  var r1 = 'abc';
  var r2 = 'def';
  var expected = /(?=abc)(?:def)/;
  var got = _.regexpsAll([ r1, r2 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /(?=abc)(?=def)(?:.+)/i;
  var got = _.regexpsAll([ r1, r2, r3 ]);
  test.identical( got, expected );

  test.case = 'strings and regexps and flags';

  var r1 = 'abc';
  var r2 = 'def';
  var r3 = /.+/i;
  var expected = /(?=abc)(?=def)(?:.+)/i;
  var got = _.regexpsAll({ sources : [ r1, r2, r3 ], flags : 'i' });
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsAll() );

  test.case = 'strings with different flags';

  test.shouldThrowErrorSync( () => _.regexpsAll([ /abc/i, /def/iy ]) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsAll( 'ab', 'cd' ) );

  test.case = 'different flags in map';

  test.shouldThrowErrorSync( () => _.regexpsAll({ sources : [ /abc/i ], flags : 'y' }) );

}

//

function _regexpTest( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = true;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'abc';
  var r2 = 'abcd';
  var expected = false;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string';

  var r1 = /abc/;
  var r2 = 'abcd';
  var expected = true;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string';

  var r1 = /.abc/;
  var r2 = 'abcd';
  var expected = false;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string';

  var r1 = /\d+(?!\.)/;
  var r2 = 'abcd3';
  var expected = true;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string';

  var r1 = /\d+(?=\.)/;
  var r2 = 'abcd4';
  var expected = false;
  var got = _._regexpTest( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _._regexpTest() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _._regexpTest( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _._regexpTest( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _._regexpTest([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _._regexpTest([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _._regexpTest([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _._regexpTest([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _._regexpTest([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _._regexpTest([ [], 's' ]) );
  test.shouldThrowErrorSync( () => _._regexpTest([  /o/, [] ]) );

}

//

function regexpTest( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'hi';
  var r2 = 'hi';
  var expected = true;
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string';

  var r1 = /^bc/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string array';

  var r1 = /\d+(?!\.)/;
  var r2 = [ 'abcd3', '2', 'dwq1!c' ];
  var expected = [ true, true, true ];
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in part of string array';

  var r1 = /\d+(?=\.)/;
  var r2 = [ 'abcd4', '1.5768', 'Hi' ];
  var expected = [ false, true, false ];
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string array';

  var r1 = /^abc{2}$/;
  var r2 = [ 'abcc4', '1.5768', 'bcc', '0abcc' ];
  var expected = [ false, false, false, false ];
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string array once';

  var r1 = /^abc{2}$/;
  var r2 = [ 'abcc4', '1.5768', 'bcc', '0abcc', 'abcc' ];
  var expected = [ false, false, false, false, true ];
  var got = _.regexpTest( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpTest() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpTest( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpTest( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpTest([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpTest([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpTest([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpTest([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpTest([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpTest([ [], 's' ]) );
  test.shouldThrowErrorSync( () => _.regexpTest([  /o/, [] ]) );

}

//

function regexpTestAll( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'abc';
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'identical strings array';

  var r1 = 'abc';
  var r2 = [ 'abc', 'abc' ];
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings array';

  var r1 = 'abc';
  var r2 = [ 'abc', 'a', 'b', 'c' ];
  var expected = false;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string';

  var r1 = /b/;
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string';

  var r1 = /.a/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string array';

  var r1 = /abc/;
  var r2 = [ 'dabcd', 'efabcgh', 'ijklabc' ];
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string array';

  var r1 = /.abc/;
  var r2 = [ 'abcd','efgh', 'ijkl' ];
  var expected = false ;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string';

  var r1 = /\d|a/;
  var r2 = 'abcd3';
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string';

  var r1 = /\d(?=\.)/;
  var r2 = 'abcd4';
  var expected = false;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string array';

  var r1 = /\d+(?!\.)|\d+(?=\.)/;
  var r2 = [ 'abcd3', 'abcd4', '2' ];
  var expected = true;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string array';

  var r1 = /[^fdh]/;
  var r2 = [ 'abcd4', 'fd' ];
  var expected = false;
  var got = _.regexpTestAll( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpTestAll() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAll( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAll( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAll([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpTestAll([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpTestAll([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpTestAll([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpTestAll([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpTestAll([ [], 'h' ]) );

}

//

function regexpTestAny( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'abc';
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'One identical string, array';

  var r1 = 'abc';
  var r2 = [ 'abc', 'abc' ];
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings array';

  var r1 = 'abc';
  var r2 = [ 'abd', 'a', 'b', 'c' ];
  var expected = false;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string';

  var r1 = /b/;
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string';

  var r1 = /.a/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string array';

  var r1 = /abc/;
  var r2 = [ 'dabcd', 'efabcgh', 'ijklabc' ];
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in only one string array';

  var r1 = /.abc/;
  var r2 = [ 'dabcd', 'efgh', 'ijkl' ];
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string array';

  var r1 = /.abc/;
  var r2 = [ 'abcd', 'efgh', 'ijkl' ];
  var expected = false ;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string';

  var r1 = /\d|a/;
  var r2 = 'abcd3';
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string';

  var r1 = /\d(?=\.)/;
  var r2 = 'abcd4';
  var expected = false;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in one string array';

  var r1 = /\d+(?!\.)|\d+(?=\.)/;
  var r2 = [ 'abcd3', 'abcd', 'fgh' ];
  var expected = true;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string array';

  var r1 = /[^f-h]/;
  var r2 = [ 'fg', 'fh', 'h' ];
  var expected = false;
  var got = _.regexpTestAny( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpTestAny() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAny( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAny( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpTestAny([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpTestAny([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpTestAny([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpTestAny([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpTestAny([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpTestAny([ [], 'h' ]) );

}

//

function regexpTestNone( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'c';
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'One identical string, array';

  var r1 = 'abc';
  var r2 = [ 'abc', 'abcd' ];
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings array';

  var r1 = 'abc';
  var r2 = [ 'abd', 'a', 'b', 'c' ];
  var expected = true;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string';

  var r1 = /b/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string';

  var r1 = /a+/;
  var r2 = 'bcd';
  var expected = true;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in string array';

  var r1 = /abc/;
  var r2 = [ 'dabcd', 'efabcgh', 'ijklabc' ];
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp in only one string array';

  var r1 = /.abc/;
  var r2 = [ 'dabcd', 'efgh', 'ijkl' ];
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexp not in string array';

  var r1 = /.abc/;
  var r2 = [ 'abcd', 'efgh', 'ijkl' ];
  var expected = true ;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in string';

  var r1 = /\d|a/;
  var r2 = 'abcd3';
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string';

  var r1 = /\d(?=\.)/;
  var r2 = 'abcd4';
  var expected = true;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp in one string array';

  var r1 = /\d+(?!\.)|\d+(?!\!)/;
  var r2 = [ 'abcd3', 'abcd', 'fgh' ];
  var expected = false;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexp not in string array';

  var r1 = /[^f-h]/;
  var r2 = [ 'fg', 'fh', 'h' ];
  var expected = true;
  var got = _.regexpTestNone( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpTestNone() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpTestNone( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpTestNone( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpTestNone([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpTestNone([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpTestNone([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpTestNone([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpTestNone([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpTestNone([ [], 'h' ]) );

}

//

function regexpsTestAll( test )
{
  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'abc';
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'identical strings array';

  var r1 = [ 'abc', 'abc' ];
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings array';

  var r1 = [ 'abc', 'a', 'b', 'c' ];
  var r2 = 'abc';
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps in string';

  var r1 = /b/;
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps not in string';

  var r1 = /.a/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps array in string';

  var r1 = [ /a/, /b/, /c/ ];
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps array not in string';

  var r1 = [ /a/, /b/, /c/, /d/, /e/ ];
  var r2 = 'abcd';
  var expected = false ;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps in string';

  var r1 = /\d|a/;
  var r2 = 'abcd3';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps not in string';

  var r1 = /\d(?=\.)/;
  var r2 = 'abcd4';
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps array not in string';

  var r1 = [ /\d+(?!\.)/, /\d+(?=\.)/ ];
  var r2 = 'abcd3';
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps array in string';

  var r1 = [ /[^fdh]/, /\d+(?!\.)/ ];
  var r2 = 'abcd4';
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexps array in string array';

  var r1 = [ /[^fdh]/, /\d+(?!\.)/ ];
  var r2 = [ 'abcd4', 'd3,', '7' ];
  var expected = true;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  test.case = 'Regexps array not in part of string array';

  var r1 = [ /[^fdh]/, /\d+(?!\.)/ ];
  var r2 = [ 'abcd4', 'd3,', '7', 'd' ];
  var expected = false;
  var got = _.regexpsTestAll( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsTestAll() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAll( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAll( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAll([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpsTestAll([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestAll([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpsTestAll([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestAll([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpsTestAll([ 'h', [] ]) );

}

//

function regexpsTestAny( test )
{

  var context = this;

  test.case = 'One different regexp';

  var r1 = [ 'abc', 'def' ];
  var r2 = 'abc';
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Identical regexp and string arrays';

  var r1 = [ 'abc', 'def' ];
  var r2 = [ 'abc', 'def' ];
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'String array with one no- match';

  var r1 = [ 'abc', 'def' ];
  var r2 = [ 'abc', 'def', 'ghi' ];
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'different regexp array';

  var r1 = [ 'abd', 'a', 'b', 'c' ];
  var r2 = 'abc';
  var expected = false;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps in string';

  var r1 = /b/;
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps not in string';

  var r1 = /.a/;
  var r2 = 'abcd';
  var expected = false;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps array with one no-match in string ';

  var r1 = [ /[abc]/, /.a/, /\d/ ];
  var r2 = 'dabcd';
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'No regexps in string -  array';

  var r1 = [ /[abc]/, /.a/, /\d/ ];;
  var r2 = 'ijkl';
  var expected = false;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps in one string array';

  var r1 = [ /\d+(?!\.)/, /\d+(?=\!)/ ];
  var r2 = [ 'abcd3', 'abcd', 'fg2!h' ];
  var expected = true;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  test.case = 'Conditional regexps not in string array';

  var r1 = [ /[^f-h]/, /[ab]/ ];
  var r2 = [ 'fg', 'fh', 'h' ];
  var expected = false;
  var got = _.regexpsTestAny( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsTestAny() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAny( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAny( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestAny([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpsTestAny([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestAny([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpsTestAny([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestAny([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpsTestAny([ 'h', [] ]) );

}

//

function regexpsTestNone( test )
{

  var context = this;

  test.case = 'identical strings';

  var r1 = 'abc';
  var r2 = 'abc';
  var expected = false;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings';

  var r1 = 'c';
  var r2 = 'abcd';
  var expected = true;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'One identical string, array';

  var r1 = 'abc';
  var r2 = [ 'abc', 'abcd' ];
  var expected = false;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'One identical string, array';

  var r1 = [ 'abc', 'abcd' ];
  var r2 = 'abc';
  var expected = false;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'different strings array';

  var r1 = [ 'abc', /\d/ ];
  var r2 = [ 'abd', 'a', 'b', 'c' ];
  var expected = true;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps in string';

  var r1 = [ /b/, /c$/ ];
  var r2 = [ 'abc', 'hij', '6' ];
  var expected = false;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'regexps not in string';

  var r1 = [ /ba+/, /^\s/ ];
  var r2 = [ 'bcd', 'a a', '7633.32' ];
  var expected = true;

  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  test.case = 'one regexps in only one string array';

  var r1 = [ /.abc/, /\d$/];
  var r2 = [ 'dabcd', 'efgh', 'ijkl' ];
  var expected = false;
  var got = _.regexpsTestNone( r1, r2 );
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'none argument';

  test.shouldThrowErrorSync( () => _.regexpsTestNone() );

  test.case = 'not enough arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestNone( 'ab' ) );

  test.case = 'too many arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestNone( 'ab', 'cd', 'ef' ) );

  test.case = 'wrong order of arguments';

  test.shouldThrowErrorSync( () => _.regexpsTestNone([ 'Hello', /o/ ]) );

  test.case = 'null';

  test.shouldThrowErrorSync( () => _.regexpsTestNone([ null, 'Hello' ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestNone([ 'Hello', null ]) );

  test.case = 'NaN';

  test.shouldThrowErrorSync( () => _.regexpsTestNone([ 'Hello', NaN ]) );
  test.shouldThrowErrorSync( () => _.regexpsTestNone([ NaN, 'Hello' ]) );

  test.case = 'array';

  test.shouldThrowErrorSync( () => _.regexpsTestNone([ 'h', [] ]) );

}



// --
// suite definition
// --

var Self =
{

  name : 'Tools/base/l1/Regexp',
  silencing : 1,

  tests :
  {

    regexpIdentical,

    regexpsSources,
    regexpsJoin,
    regexpsAtLeastFirst,

    regexpsNone,
    regexpsAny,
    regexpsAll,

    _regexpTest,
    regexpTest,

    regexpTestAll,
    regexpTestAny,
    regexpTestNone,

    regexpsTestAll,
    regexpsTestAny,
    regexpsTestNone,

  }

};

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

} )( );
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Regexp.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Regexp_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Regexp_test_s

( function Routine_test_s() { // == begin of file Routine_test_s
function Routine_test_s_naked() {
( function _Routine_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
  // _.include( 'wProto' );
}

var _global = _global_;
var _ = _global_.wTools;

//

function testFunction1( x, y )
{
  return x + y
}

function testFunction2( x, y )
{
  return this;
}

function testFunction3( x, y )
{
  return x + y + this.k;
}

function testFunction4( x, y )
{
  return this;
}

function contextConstructor3()
{
  this.k = 15
}

var context3 = new contextConstructor3();

//

function _routineJoin( test )
{

  var testParam1 = 2,
    testParam2 = 4,
    options1 =
    {
      sealing : false,
      routine : testFunction1,
      args : [ testParam2 ], // x
      extending : true
    },
    options2 =
    {
      sealing : true,
      routine : testFunction2,
      args : [ testParam2 ], // x
      extending : true
    },

    options3 =
    {
      sealing : false,
      routine : testFunction3,
      args : [ testParam2 ], // x
      context : context3,
      extending : true
    },
    options4 =
    {
      sealing : false,
      routine : testFunction4,
      args : [ testParam2 ], // x
      context : context3,
      extending : true
    },

    options5 =
    {
      sealing : true,
      routine : testFunction3,
      args : [ testParam1, testParam2 ], // x
      context : context3,
      extending : true
    },

    wrongOpt1 = {
      sealing : true,
      routine : {},
      args : [ testParam1, testParam2 ], // x
      context : context3,
      extending : true
    },

    wrongOpt2 = {
      sealing : true,
      routine : testFunction3,
      args : 'wrong', // x
      context : context3,
      extending : true
    },

    expected1 = 6,
    expected2 = undefined,
    expected3 = 21,
    expected5 = 21;

  test.case = 'simple function without context with arguments bind without seal : result check';
  var gotfn = _._routineJoin( options1 );
  var got = gotfn( testParam1 );
  test.identical( got,expected1 );

  test.case = 'simple function without context and seal : context test';
  var gotfn = _._routineJoin(options2);
  var got = gotfn( testParam1 );
  test.identical( got, expected2 );

  test.case = 'simple function with context and arguments : result check';
  var gotfn = _._routineJoin(options3);
  var got = gotfn( testParam1 );
  test.identical( got, expected3 );

  test.case = 'simple function with context and arguments : context check';
  var gotfn = _._routineJoin(options4);
  var got = gotfn( testParam1 );
  test.identical( got instanceof contextConstructor3, true );

  test.case = 'simple function with context and arguments : result check, seal == true ';
  var gotfn = _._routineJoin(options5);
  var got = gotfn( testParam1 );
  test.identical( got, expected5 );

  test.case = 'simple function with context and arguments : result check, seal == true ';
  var gotfn = _._routineJoin(options5);
  var got = gotfn( 0,0 );
  test.identical( got, expected5 );

  test.case = 'extending';
  function srcRoutine(){}
  srcRoutine.defaults = { a : 10 };
  var gotfn = _.routineJoin( undefined, srcRoutine, [] );
  test.identical( gotfn.defaults, srcRoutine.defaults );

  /**/

  if( !Config.debug )
  return;

  test.case = 'missed argument';
  test.shouldThrowError( function()
  {
    _._routineJoin();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _._routineJoin( options1, options2 );
  });

  test.case = 'passed non callable object';
  test.shouldThrowError( function()
  {
    _._routineJoin( wrongOpt1 );
  });

  test.case = 'passed arguments as primitive value';
  test.shouldThrowError( function()
  {
    _._routineJoin( wrongOpt2 );
  });

};

//
//
// function routineBind( test )
// {
//
//   var testParam1 = 2,
//     testParam2 = 4,
//     expected1 = 6,
//     expected2 = undefined,
//     expected3 = 21;
//
//   test.case = 'simple function without context with arguments bind : result check';
//   var gotfn = _.routineBind( testFunction1, undefined, [ testParam2 ]);
//   var got = gotfn( testParam1 );
//   test.identical( got,expected1 );
//
//   test.case = 'simple function without /*ttt*/context test';
//   var gotfn = _.routineBind(testFunction2, undefined, [ testParam2 ]);
//   var got = gotfn( testParam1 );
//   test.identical( got, expected2 );
//
//   test.case = 'simple function with context and arguments : result check';
//   var gotfn = _.routineBind(testFunction3, context3, [ testParam2 ]);
//   var got = gotfn( testParam1 );
//   test.identical( got, expected3 );
//
//   test.case = 'simple function with context and arguments : context check';
//   var gotfn = _.routineBind(testFunction4, context3, [ testParam2 ]);
//   var got = gotfn( testParam1 );
//   test.identical( got instanceof contextConstructor3, true );
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'missed argument';
//   test.shouldThrowError( function()
//   {
//     _.routineBind();
//   });
//
//   test.case = 'extra argument';
//   test.shouldThrowError( function()
//   {
//     _.routineBind( testFunction4, context3, [ testParam2 ], [ testParam1 ] );
//   });
//
//   test.case = 'passed non callable object';
//   test.shouldThrowError( function()
//   {
//     _.routineBind( {}, context3, [ testParam2 ] );
//   });
//
//   test.case = 'passed arguments as primitive value';
//   test.shouldThrowError( function()
//   {
//     _.routineBind( testFunction4, context3, testParam2 );
//   });
//
// };

//

function constructorJoin( test )
{
  function srcRoutine()
  {
    var result =
    {
      context : this,
      args : _.longSlice( arguments )
    }
    return result;
  }

  srcRoutine.prop = true;

  var args = [];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = got();
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, args );
  test.identical( result.context, srcRoutine );
  test.isNot( result.context instanceof srcRoutine );

  var args = [];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = new got();
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, args );
  test.notIdentical( result.context, srcRoutine );
  test.is( result.context instanceof srcRoutine );

  var args = [ { a : 1 } ];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = got();
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, args );
  test.identical( result.context, srcRoutine );
  test.isNot( result.context instanceof srcRoutine );

  var args = [ { a : 1 } ];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = got({ b : 1 });
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, [ { a : 1 }, { b : 1 } ] );
  test.identical( result.context, srcRoutine );
  test.isNot( result.context instanceof srcRoutine );

  var args = [ { a : 1 } ];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = new got();
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, args );
  test.notIdentical( result.context, srcRoutine );
  test.is( result.context instanceof srcRoutine );

  var args = [ { a : 1 } ];
  var got = _.constructorJoin( srcRoutine,args );
  test.is( _.routineIs( got ) );
  var result = new got({ b : 1 });
  test.identical( _.mapKeys( srcRoutine ), [ 'prop' ] )
  test.identical( _.mapKeys( got ), [] );
  test.identical( result.args, [ { a : 1 }, { b : 1 } ] );
  test.notIdentical( result.context, srcRoutine );
  test.is( result.context instanceof srcRoutine );

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.constructorJoin() )
  test.shouldThrowError( () => _.constructorJoin( [], [] ) )
  test.shouldThrowError( () => _.constructorJoin( srcRoutine, srcRoutine ) )
}

//

function routineJoin( test )
{

  var testParam1 = 2,
    testParam2 = 4,
    expected1 = 6,
    expected2 = undefined,
    expected3 = 21;

  test.case = 'simple function without context with arguments bind : result check';
  var gotfn = _.routineJoin( undefined, testFunction1, [ testParam2 ]);
  var got = gotfn( testParam1 );
  test.identical( got,expected1 );

  test.case = 'simple function without /*ttt*/context test';
  var gotfn = _.routineJoin(undefined, testFunction2, [ testParam2 ]);
  var got = gotfn( testParam1 );
  test.identical( got, expected2 );

  test.case = 'simple function with context and arguments : result check';
  var gotfn = _.routineJoin(context3, testFunction3, [ testParam2 ]);
  var got = gotfn( testParam1 );
  test.identical( got, expected3 );

  test.case = 'simple function with context and arguments : context check';
  var gotfn = _.routineJoin(context3, testFunction4, [ testParam2 ]);
  var got = gotfn( testParam1 );
  test.identical( got instanceof contextConstructor3, true );

  test.case = 'extending'
  function srcRoutine(){}
  srcRoutine.defaults = { a : 10 };
  var gotfn = _.routineJoin( undefined, srcRoutine, [] );
  test.identical( gotfn.defaults, srcRoutine.defaults );

  if( !Config.debug )
  return;

  test.case = 'missed argument';
  test.shouldThrowError( function()
  {
    _.routineJoin();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _.routineJoin( context3, testFunction4, [ testParam2 ], [ testParam1 ] );
  });

  test.case = 'passed non callable object';
  test.shouldThrowError( function()
  {
    _.routineJoin( context3, {}, [ testParam2 ] );
  });

  test.case = 'passed arguments as primitive value';
  test.shouldThrowError( function()
  {
    _.routineJoin( context3, testFunction4, testParam2 );
  });

}

//

function routineSeal(test)
{

  var testParam1 = 2,
    testParam2 = 4,
    expected1 = 6,
    expected2 = undefined,
    expected3 = 21;

  test.case = 'simple function with seal arguments : result check';
  var gotfn = _.routineSeal(undefined, testFunction1, [testParam1, testParam2]);
  var got = gotfn( testParam1 );
  test.identical( got, expected1 );

  test.case = 'simple function with seal arguments : context check';
  var gotfn = _.routineSeal(undefined, testFunction2, [testParam1, testParam2]);
  var got = gotfn( testParam1 );
  test.identical( got, expected2 );

  test.case = 'simple function with seal context and arguments : result check';
  var gotfn = _.routineSeal(context3, testFunction3, [testParam1, testParam2]);
  var got = gotfn( testParam1 );
  test.identical( got, expected3 );

  test.case = 'simple function with seal context and arguments : context check';
  var gotfn = _.routineSeal(context3, testFunction4, [testParam1, testParam2]);
  var got = gotfn( testParam1 );
  test.identical( got instanceof contextConstructor3, true );

  test.case = 'simple function with seal context and arguments : result check';
  var gotfn = _.routineSeal(context3, testFunction3, [testParam1, testParam2]);
  var got = gotfn( 0,0 );
  test.identical( got, expected3 );

  test.case = 'extending';
  function srcRoutine(){}
  srcRoutine.defaults = { a : 10 };
  var gotfn = _.routineJoin( undefined, srcRoutine, [] );
  test.identical( gotfn.defaults, srcRoutine.defaults );

  if( !Config.debug )
  return;

  test.case = 'missed argument';
  test.shouldThrowError( function()
  {
    _.routineSeal();
  });

  test.case = 'extra argument';
  test.shouldThrowError( function()
  {
    _.routineSeal( context3, testFunction4, [ testParam2 ], [ testParam1 ] );
  });

  test.case = 'passed non callable object';
  test.shouldThrowError( function()
  {
    _.routineSeal( context3, {}, [ testParam1, testParam2 ] );
  });

  test.case = 'passed arguments as primitive value';
  test.shouldThrowError( function()
  {
    _.routineSeal( context3, testFunction4, testParam2 );
  });

}

//

function routinesCompose( test )
{

  function routineUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    return _.unrollAppend( _.unrollMake( null ), _.unrollMake( arguments ), counter );
  }

  function routineNotUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    return _.arrayAppend_( null, arguments, counter );
  }

  function r2()
  {
    counter += 100;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += 2*arguments[ a ];
    return counter;
  }

  function _break()
  {
    return _.dont;
  }

  function chainer1( args, result, o, k )
  {
    return result;
  }

  /* - */

  test.case = 'empty';

  var counter = 0;
  var routines = [];
  var composition = _.routinesCompose( routines );
  var got = composition( 1,2,3 );
  var expected = [];
  test.identical( got, expected );
  test.identical( counter, 0 );

  /* - */

  test.open( 'unrolling:1' )

  /* */

  test.case = 'without chainer';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, r2, null ];
  var composition = _.routinesCompose( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16,128 ];
  test.identical( got, expected );
  test.identical( counter, 128 );

  /* */

  test.case = 'with chainer';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, r2, null ];
  var composition = _.routinesCompose( routines, chainer1 );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16,160 ];
  test.identical( got, expected );
  test.identical( counter, 160 );

  /* */

  test.case = 'with chainer and break';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _break, null, r2, null ];
  var composition = _.routinesCompose( routines, chainer1 );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16,_.dont ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  /* */

  test.close( 'unrolling:1' )

  /* - */

  test.open( 'unrolling:0' )

  /* */

  test.case = 'without chainer';

  var counter = 0;
  var routines = [ null, routineNotUnrolling, null, r2, null ];
  var composition = _.routinesCompose( routines );
  var got = composition( 1,2,3 );
  var expected = [ [ 1,2,3,16 ], 128 ];
  test.identical( got, expected );
  test.identical( counter, 128 );

  /* */

  test.case = 'with chainer';

  var counter = 0;
  var routines = [ null, routineNotUnrolling, null, r2, null ];
  var composition = _.routinesCompose( routines, chainer1 );
  var got = composition( 1,2,3 );
  var expected = [ [ 1,2,3,16 ], 160 ];
  test.identical( got, expected );
  test.identical( counter, 160 );

  /* */

  test.case = 'with chainer and break';

  var counter = 0;
  var routines = [ null, routineNotUnrolling, null, _break, null, r2, null ];
  var composition = _.routinesCompose( routines, chainer1 );
  var got = composition( 1,2,3 );
  var expected = [ [ 1,2,3,16 ],_.dont ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  /* */

  test.close( 'unrolling:0' )

  /* - */

  if( !Config.debug )
  return;

  test.case = 'bad arguments';

  test.shouldThrowErrorSync( () => _.routinesComposeAll() );
  test.shouldThrowErrorSync( () => _.routinesComposeAll( routines, function(){}, function(){} ) );

}

//

function routinesComposeAll( test )
{

  function routineUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    return _.unrollAppend( _.unrollMake( null ), _.unrollMake( arguments ), counter );
  }

  function routineNotUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    return _.arrayAppend_( null, arguments, counter );
  }

  function r2()
  {
    counter += 100;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += 2*arguments[ a ];
    return counter;
  }

  function _nothing()
  {
    return undefined;
  }

  function _dont()
  {
    return _.dont;
  }

  test.case = 'with nothing';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing, null, r2, null ];
  var composition = _.routinesComposeAll( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16,128 ];
  test.identical( got, expected );
  test.identical( counter, 128 );

  test.case = 'last nothing';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing ];
  var composition = _.routinesComposeAll( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16 ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  test.case = 'not unrolling and last nothing';

  var counter = 0;
  var routines = [ null, routineNotUnrolling, null, _nothing ];
  var composition = _.routinesComposeAll( routines );
  var got = composition( 1,2,3 );
  var expected = [ [ 1,2,3,16 ] ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  test.case = 'with nothing and dont';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing, null, _dont, null, r2, null ];
  var composition = _.routinesComposeAll( routines );
  var got = composition( 1,2,3 );
  var expected = false;
  test.identical( got, expected );
  test.identical( counter, 16 );

  if( !Config.debug )
  return;

  test.case = 'bad arguments';

  test.shouldThrowErrorSync( () => _.routinesComposeAll() );
  test.shouldThrowErrorSync( () => _.routinesComposeAll( routines, function(){} ) );
  test.shouldThrowErrorSync( () => _.routinesComposeAll( routines, function(){}, function(){} ) );

}

//

function routinesComposeAllReturningLast( test )
{

  function routineUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    debugger;
    return _.unrollAppend( _.unrollMake( null ), _.unrollMake( arguments ), counter );
  }

  function routineNotUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    debugger;
    return _.arrayAppend_( null, arguments, counter );
  }

  function r2()
  {
    counter += 100;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += 2*arguments[ a ];
    return counter;
  }

  function _nothing()
  {
    return undefined;
  }

  function _dont()
  {
    return _.dont;
  }

  test.case = 'with nothing';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing, null, r2, null ];
  var composition = _.routinesComposeAllReturningLast( routines );
  var got = composition( 1,2,3 );
  var expected = 128;
  test.identical( got, expected );
  test.identical( counter, 128 );

  test.case = 'last nothing';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing ];
  var composition = _.routinesComposeAllReturningLast( routines );
  var got = composition( 1,2,3 );
  var expected = 16;
  test.identical( got, expected );
  test.identical( counter, 16 );

  test.case = 'not unrolling and last nothing';

  var counter = 0;
  var routines = [ null, routineNotUnrolling, null, _nothing ];
  var composition = _.routinesComposeAllReturningLast( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16 ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  test.case = 'with nothing and dont';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _nothing, null, _dont, null, r2, null ];
  var composition = _.routinesComposeAllReturningLast( routines );
  var got = composition( 1,2,3 );
  var expected = _.dont;
  test.identical( got, expected );
  test.identical( counter, 16 );

  if( !Config.debug )
  return;

  test.case = 'bad arguments';

  test.shouldThrowErrorSync( () => _.routinesComposeAllReturningLast() );
  test.shouldThrowErrorSync( () => _.routinesComposeAllReturningLast( routines, function(){} ) );
  test.shouldThrowErrorSync( () => _.routinesComposeAllReturningLast( routines, function(){}, function(){} ) );

}

//

function routinesChain( test )
{

  function routineUnrolling()
  {
    counter += 10;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += arguments[ a ];
    return _.unrollAppend( _.unrollMake( null ), _.unrollMake( arguments ), counter );
  }

  function r2()
  {
    counter += 100;
    for( var a = 0 ; a < arguments.length ; a++ )
    counter += 2*arguments[ a ];
    return counter;
  }

  function _break()
  {
    return _.dont;
  }

  function dontInclude()
  {
    return undefined;
  }

  /* */

  test.case = 'without break';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, r2, null ];
  var composition = _.routinesChain( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16,160 ];
  test.identical( got, expected );
  test.identical( counter, 160 );

  /* */

  test.case = 'with break';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, _break, null, r2, null ];
  var composition = _.routinesChain( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16 ];
  test.identical( got, expected );
  test.identical( counter, 16 );

  /* */

  test.case = 'with dont include';

  var counter = 0;
  var routines = [ null, routineUnrolling, null, dontInclude, null, r2, null ];
  var composition = _.routinesChain( routines );
  var got = composition( 1,2,3 );
  var expected = [ 1,2,3,16, 160 ];
  test.identical( got, expected );
  test.identical( counter, 160 );

  if( !Config.debug )
  return;

  test.case = 'bad arguments';

  test.shouldThrowErrorSync( () => _.routinesComposeAll() );
  test.shouldThrowErrorSync( () => _.routinesComposeAll( routines, function(){} ) );
  test.shouldThrowErrorSync( () => _.routinesComposeAll( routines, function(){}, function(){} ) );

}

//

function routineExtend( test )
{

  // debugger;
  // var got = _.routineExtend( dst, { c : { s : 1 } } );
  // test.identical( got.c, {} ); // true
  // debugger;

  test.open( 'dst is null, src has pre and body properties');

  test.case = 'dst is null, src is routine maked by routineFromPreAndBody';
  var got = _.routineExtend( null, _.routineFromPreAndBody );
  test.identical( got.pre, _.routineFromPreAndBody.pre );
  test.identical( got.body, _.routineFromPreAndBody.body );
  test.identical( typeof got, 'function' );

  var got = _.routineExtend( null, _.routinesCompose );
  test.identical( got.pre, _.routinesCompose.pre );
  test.identical( got.body, _.routinesCompose.body );
  test.identical( typeof got, 'function' );

  test.case = 'dst is null, src is map with pre and body properties';
  var src =
  {
    pre : _.routineFromPreAndBody.pre,
    body : _.routineFromPreAndBody.body,
    map : { a : 2 },
  }
  var got = _.routineExtend( null, src );
  test.identical( got.pre, _.routineFromPreAndBody.pre );
  test.identical( got.body, _.routineFromPreAndBody.body );
  test.equivalent( got.map, {} );
  test.identical( typeof got, 'function' );

  test.case = 'dst is null, src is map with pre and body properties';
  var src =
  {
    pre : _.routineFromPreAndBody.pre,
    body : _.routineFromPreAndBody.body,
    map : { a : 2 },
  };
  var got = _.routineExtend( null, src );
  test.identical( got.pre, _.routineFromPreAndBody.pre );
  test.identical( got.body, _.routineFromPreAndBody.body );
  test.identical( got.map, {} );
  test.identical( typeof got, 'function' );

  test.case = 'dst is null, src is map with pre and body properties';
  var src =
  {
    pre : _.routineFromPreAndBody.pre,
    body : _.routineFromPreAndBody.body,
    a : [ 1 ],
    b : 'str',
    c : { str : 'str' }
  }
  var got = _.routineExtend( null, src );
  test.identical( got.pre, _.routineFromPreAndBody.pre );
  test.identical( got.body, _.routineFromPreAndBody.body );
  test.identical( got.a, [ 1 ] );
  test.identical( got.b, 'str' );
  test.identical( got.c, {} );
  test.identical( typeof got, 'function' );

  test.close( 'dst is null, src has pre and body properties');

  /* - */

  test.open( 'single dst');

  test.case = 'single dst';
  var dst = function( o )
  {
  };
  var got = _.routineExtend( dst );
  test.identical( got, dst );
  test.identical( typeof got, 'function' );

  test.case = 'single dst is routine, has properties';
  var dst = function( o )
  {
  };
  dst.a = 0;
  dst.b = 0;
  var got = _.routineExtend( dst );
  test.identical( got, dst );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 0 );
  test.identical( got.b, 0 );

  test.case = 'single dst is routine, has hiden properties';
  var dst = function( o )
  {
  };
  Object.defineProperties( dst, {
    'a' : {
      value : 0,
      enumerable : true,
      writable : false,
    },
    'b' : {
      value : { a : 2 },
      enumerable : false,
      writable : false,
    }
  });
  var got = _.routineExtend( dst );
  test.identical( got, dst );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 0 );
  test.identical( got.b, { a : 2 } );
  var got = Object.getOwnPropertyDescriptor( got, 'b' );
  test.isNot( got.enumerable );

  test.close( 'single dst');

  test.case = 'dst has properties, src map has different properties';
  var dst = function( o )
  {
  };
  dst.a = 0;
  dst.b = 0;
  var got = _.routineExtend( dst, { c : 1, d : 1, e : { s : 1 } } );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 0 );
  test.identical( got.b, 0 );
  test.identical( got.c, 1 );
  test.identical( got.e, {} );

  test.case = 'dst has properties, src map has the same properties';
  var dst = function( o )
  {
  };
  dst.a = 0;
  dst.b = 0;
  var got = _.routineExtend( dst, { a: 1, b : 1 } );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 1 );
  test.identical( got.b, 1 );

  /* */

  test.case = 'dst has non-writable properties';
  var dst = function( o )
  {
  };
  Object.defineProperties( dst,
  {
    'a' : {
      enumerable : true,
      writable : false,
      value : 0,
    },
    'b' : {
      enumerable : true,
      writable : false,
      value : 0,
    }
  });
  var got = _.routineExtend( dst, { a: 3, b : 2 } );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 0 );
  test.identical( got.b, 0 );

  test.case = 'src has non-writable properties';
  var dst = function( o )
  {
  };
  dst.a = 0;
  dst.b = 0;
  var src = {};
  Object.defineProperties( src,
  {
    'a' : {
      enumerable : true,
      writable : false,
      value : 3,
    },
    'b' : {
      enumerable : true,
      writable : false,
      value : 2,
    }
  });
  var got = _.routineExtend( dst, src );
  test.identical( typeof got, 'function' );
  test.identical( got.a, 3 );
  test.identical( got.b, 2 );

  test.case = 'src is an array';
  var dst = function( o )
  {
  };
  var got = _.routineExtend( dst, [ 'a', 1 ] );
  test.identical( typeof got, 'function' );
  test.identical( got[ 0 ], 'a' );
  test.identical( got[ 1 ], 1 );

  test.open( 'a few extends');

  test.case = 'null extends other routine, null extends result';
  var src = _.routineExtend( null, _.routinesCompose );
  var got = _.routineExtend( null, src );
  test.identical( got.pre, _.routinesCompose.pre );
  test.identical( got.body, _.routinesCompose.body );
  test.identical( typeof got, 'function' );

  test.case = 'src extends routine, result extends map ';
  var src1 =
  {
    pre : _.routineFromPreAndBody.pre,
    body : _.routineFromPreAndBody.body,
    a : 'str',
    b : { b : 3 },
  };
  var src = _.routineExtend( null, _.routinesCompose );
  var got = _.routineExtend( src, src1 );
  test.identical( got.pre, _.routineFromPreAndBody.pre );
  test.identical( got.body, _.routineFromPreAndBody.body );
  test.identical( got.b, {} );
  test.is( got.a === 'str' );
  test.identical( typeof got, 'function' );

  test.case = 'dst extends map, dst extends other map';
  var dst = function()
  {
  };
  var src1 =
  {
    pre : _.routinesCompose.pre,
    body : _.routinesCompose.body,
    a : ['str'],
    c : { d : 2 },
  };
  var src = _.routineExtend( dst, { c : {}, b : 'str' } );
  var got = _.routineExtend( dst, src1 );
  test.identical( got.pre, _.routinesCompose.pre );
  test.identical( got.body, _.routinesCompose.body );
  test.identical( got.a, [ 'str' ] );
  test.identical( got.b, 'str' );
  test.identical( got.c, {} );
  test.identical( typeof got, 'function' );

  test.case = 'dst has map property, dst extends other map';
  var dst = function()
  {
  };
  dst.map = { a : 'str' };
  var src1 =
  {
    pre : _.routinesCompose.pre,
    body : _.routinesCompose.body,
    a : ['str'],
    map : { d : 2 },
  };
  var src = _.routineExtend( dst, { c : {} } );
  var got = _.routineExtend( dst, src1 );
  test.identical( got.pre, _.routinesCompose.pre );
  test.identical( got.body, _.routinesCompose.body );
  test.identical( got.a, [ 'str' ] );
  test.identical( got.map, { a : 'str' } );
  test.identical( got.c, {} );
  test.identical( typeof got, 'function' );

  test.case = 'dst extends routine1, src extends routine, dst extends src';
  var dst = function()
  {
  };
  var src = function()
  {
  };
  var routine = function()
  {
  };
  routine.a = 0;
  routine.b = [ 'str' ];
  var routine1 = function()
  {
  };
  routine1.a = 2;
  routine1.c = 'str';
  var src1 = _.routineExtend( src, routine );
  var src2 = _.routineExtend( dst, routine1 );
  var got = _.routineExtend( src2, src1 )
  test.identical( got.a, 0 );
  test.identical( got.b, [ 'str' ] );
  test.identical( got.c, 'str' );
  test.identical( dst.a, got.a );
  test.identical( dst.b, got.b );
  test.identical( dst.c, got.c );
  test.identical( typeof got, 'function' );

  test.case = 'dst extends map, src extends map, dst extends src';
  var dst = function()
  {
  };
  var src = function()
  {
  };
  var src1 = _.routineExtend( src, { o1 : 1, o2 : 'str' } );
  var src2 = _.routineExtend( dst, { o3 : 'o3', o1 : 'map'} );
  var got = _.routineExtend( src2, src1 )
  test.identical( got.o1, 1 );
  test.identical( got.o2, 'str' );
  test.identical( got.o3, 'o3' );
  test.identical( dst.a, got.a );
  test.identical( dst.b, got.b );
  test.identical( dst.c, got.c );
  test.identical( typeof got, 'function' );

  test.close( 'a few extends');

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend();
  });

  test.case = 'three arguments';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( null, { a : 1 }, { b : 2 });
  });

  test.case = 'single dst is null';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( null );
  });

  test.case = 'second arg has not pre and body properties';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( null, _.unrollIs );
  });

  test.case = 'second arg is primitive';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( _.unrollIs, 'str' );
  });

  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( _.unrollIs, 1 );
  });

  test.case = 'dst is not routine or null';
  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( 1, { a : 1 } );
  });

  test.shouldThrowErrorSync( function()
  {
    _.routineExtend( 'str', { a : 1 } );
  });

}

//

function routineExtendExperiment( test )
{
  test.case = 'map saves';
  var dst = function()
  {
  };
  Object.defineProperties( dst, {
    'b' : {
      value : { a : 2 },
      enumerable : true,
      writable : true,
    }
  });
  var got = _.routineExtend( dst );
  test.identical( got.b, { a : 2 } );

  test.case = 'resulted map is empty, but should not';
  var dst = function( o )
  {
  };
  dst.b = { map : 2 };
  var got = _.routineExtend( dst, { b : { map : 3 } } );
  test.identical( got.b, { map : 2 } );
}

routineExtendExperiment.experimental = 1;

//

function vectorize( test )
{
  function srcRoutine( a,b )
  {
    return _.longSlice( arguments );
  }

  test.open( 'defaults' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    select : 1
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.case = 'single argument';

  test.identical( routine( 1 ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( [ 1,2,3 ] ), [ [ 1 ], [ 2 ], [ 3 ] ] );

  test.case = 'multiple argument';

  test.identical( routine( 1, 0 ), [ 1, 0 ] );
  test.identical( routine( [ 1,2,3 ], 2 ), [ [ 1,2 ], [ 2,2 ], [ 3,2 ] ] );
  test.identical( routine( 2, [ 1,2,3 ] ), [ 2, [ 1,2,3 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1, [ 1,2 ] ], [ 2, [ 1,2 ] ] ] );

  test.close( 'defaults' );

  //

  test.open( 'vectorizingArray 0' );

  var o =
  {
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    select : 1
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine, srcRoutine )

  test.close( 'vectorizingArray 0' );

  //

  test.open( 'vectorizingMapVals : 1' );

  var o =
  {
    vectorizingArray : 0,
    vectorizingMapVals : 1,
    select : 1
  }
  o.routine = srcRoutine;
  debugger
  var routine = _.vectorize( o );

  test.case = 'single argument';

  test.identical( routine( 1 ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( [ 1,2,3 ] ), [ [ 1,2,3 ] ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : [ 1 ] , 2 : [ 2 ], 3 : [ 3 ] } );

  test.case = 'multiple argument';

  test.identical( routine( 1, 0 ), [ 1,0 ] );
  test.identical( routine( [ 1,2,3 ], 2 ), [ [ 1,2,3 ], 2 ] );
  test.identical( routine( 2, [ 1,2,3 ] ), [ 2, [ 1,2,3 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1,2 ], [ 1,2 ] ] );

  test.identical( routine( { a : 1 } , 0 ), { a : [ 1,0 ] } );
  test.identical( routine( 0, { a : 1 } ), [ 0, { a : 1 } ] );
  test.identical( routine( { a : 1 }, { b : 2 } ), { a : [ 1, { b : 2 } ] } );

  test.identical( routine( { a : 1 }, 2, 3 ), { a : [ 1, 2, 3 ] } );
  test.identical( routine( { a : 1 }, { b : 2 }, { c : 3 } ), { a : [ 1, { b : 2 }, { c : 3 } ] } );

  test.close( 'vectorizingMapVals : 1' );

  //

  test.open( 'vectorizingArray : 1, vectorizingMapVals : 1' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    select : 1
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.case = 'single argument';

  test.identical( routine( 1 ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( [ 1,2,3 ] ), [ [ 1 ], [ 2 ], [ 3 ] ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : [ 1 ] , 2 : [ 2 ], 3 : [ 3 ] } );

  test.case = 'multiple argument';

  test.identical( routine( 1, 0 ), [ 1, 0 ] );
  test.identical( routine( [ 1,2,3 ], 2 ), [ [ 1,2 ], [ 2,2 ], [ 3,2 ] ] );
  test.identical( routine( 2, [ 1,2,3 ] ), [ 2, [ 1,2,3 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1, [ 1,2 ] ], [ 2, [ 1,2 ] ] ] );

  test.identical( routine( { a : 1 } , 0 ), { a : [ 1,0 ] } );
  test.identical( routine( 0, { a : 1 } ), [ 0, { a : 1 } ] );
  test.identical( routine( { a : 1 }, { b : 2 } ), { a : [ 1, { b : 2 } ] } );

  test.identical( routine( { a : 1 }, 2, 3 ), { a : [ 1, 2, 3 ] } );
  test.identical( routine( { a : 1 }, { b : 2 }, { c : 3 } ), { a : [ 1, { b : 2 }, { c : 3 } ] } );

  test.identical( routine( [ 1 ] , { a : 2 } ), [ [ 1, { a : 2 } ] ] );
  test.identical( routine( { a : 1 }, [ 2 ] ), { a : [ 1, [ 2 ] ] } );

  test.identical( routine( [ 1 ] , { a : 2 }, 3 ), [ [ 1, { a : 2 }, 3 ] ] );
  test.identical( routine( { a : 1 }, [ 2 ], 3 ), { a : [ 1, [ 2 ], 3 ] } );

  test.close( 'vectorizingArray : 1, vectorizingMapVals : 1' );

  //

  test.open( 'vectorizingArray : 1, select : key ' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    select : 'b'
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.case = 'single argument';

  test.identical( routine( '1' ), [ '1' ] );
  test.identical( routine([ 1 ]), [ [ 1 ] ] );
  test.identical( routine({ a : 0 }), [ { a : 0 } ] );
  test.identical( routine({ a : 0, b : '1' }), [ { a : 0, b : '1' } ] );
  test.identical( routine({ a : 0, b : [ 1 ] }), [ [ { a : 0, b : 1 } ] ] );
  test.identical( routine({ a : 0, b : [ 1,2 ] }), [ [ { a : 0, b : 1 } ], [ { a : 0, b : 2 } ] ] );

  test.case = 'multiple argument';

  if( Config.debug )
  test.shouldThrowError( () => routine({ a : 0, b : [ 1 ] }, 2 ) );

  test.close( 'vectorizingArray : 1, select : key ' );

  //

  test.open( 'vectorizingArray : 1, select : multiple keys ' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    select : [ 'a', 'b' ]
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.case = 'single argument';

  var src = 'a'
  var got = routine( src );
  var expected = [ [ src ], [ src ] ];
  test.identical( got, expected );

  var src = [ 1 ]
  var got = routine( src );
  var expected = [ [ src ], [ src ] ];
  test.identical( got, expected );

  var src = { c : 1 }
  var got = routine( src );
  var expected = [ [ src ], [ src ] ];
  test.identical( got, expected );

  var got = routine({ a : 0, b : [ 1 ] });
  var expected =
  [
    [
      {
        a : 0,
        b : [ 1 ]
      }
    ],
    [
      [
        { a : 0, b : 1 }
      ]
    ]
  ]
  test.identical( got, expected );

  /**/

  var got = routine({ a : 0, b : [ 1,2 ] });
  var expected =
  [
    [
      {
        a : 0,
        b : [ 1,2 ]
      }
    ],
    [
      [
        { a : 0, b : 1 }
      ],
      [
        { a : 0, b : 2 }
      ]
    ],

  ]
  test.identical( got, expected );

  test.case = 'multiple argument';

  if( Config.debug )
  test.shouldThrowError( () => routine({ a : 0, b : [ 1 ] }, 2 ) );

  test.close( 'vectorizingArray : 1, select : multiple keys ' );

  //

  test.open( 'vectorizingArray : 1,select : 2' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    select : 2
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( [ 1,2 ], 1 ), [ [ 1,1 ], [ 2,1 ] ] );
  test.identical( routine( 1, [ 1,2 ] ), [ [ 1,1 ], [ 1,2 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1,1 ], [ 2,2 ] ] );
  test.identical( routine( 1,2 ), [ 1,2 ] );

  test.identical( routine( { a : 1 }, 1 ), [ { a : 1 }, 1 ] );
  test.identical( routine( 1, { a : 1 } ), [ 1, { a : 1 }] );
  test.identical( routine( { a : 1 }, { b : 2 } ), [ { a : 1 }, { b : 2 } ] );

  test.identical( routine( [ 1 ], { a : 2 } ), [ [ 1, { a : 2 } ] ] );
  test.identical( routine( [ 1,2 ], { a : 3 } ), [ [ 1, { a : 3 } ], [ 2, { a : 3 } ] ] );
  test.identical( routine( { a : 3 }, [ 1,2 ] ), [ [ { a : 3 }, 1  ], [ { a : 3 }, 2 ] ] );

  if( Config.debug )
  {
    test.shouldThrowError( () => routine( 1 ) );
    test.shouldThrowError( () => routine( 1,2,3 ) );
    test.shouldThrowError( () => routine( [ 1,2 ], [ 1,2,3 ] ) );
    test.shouldThrowError( () => routine( [ 1 ], [ 2 ], [ 3 ] ) );
  }

  test.close( 'vectorizingArray : 1,select : 2' );

  //

  test.open( 'vectorizingMapVals : 1,select : 2' );

  var o =
  {
    vectorizingArray : 0,
    vectorizingMapVals : 1,
    select : 2
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( [ 1,2 ], 3 ), [ [ 1,2 ], 3 ] );
  test.identical( routine( 1, [ 1,2 ] ), [ 1, [ 1,2 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1,2 ], [ 1,2 ] ] );
  test.identical( routine( 1,2 ), [ 1,2 ] );

  test.identical( routine( { a : 1 }, 1 ), { a : [ 1, 1 ] } );
  test.identical( routine( 1, { a : 1 } ), { a : [ 1, 1 ] } );
  test.identical( routine( { a : 1 }, { a : 2 } ), { a : [ 1,2 ] } );
  test.identical( routine( { a : 1, b : 1 }, { b : 2, a : 2 } ), { a : [ 1,2 ], b : [ 1,2 ] } );

  if( Config.debug )
  {
    test.shouldThrowError( () => routine( 1 ) );
    test.shouldThrowError( () => routine( { a : 1 }, { b : 1 } ) );
  }

  test.close( 'vectorizingMapVals : 1,select : 2' );

  //

  test.open( 'vectorizingArray : 1, vectorizingMapVals : 1,select : 2' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    select : 2
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( [ 1,2 ], 3 ), [ [ 1,3 ], [ 2,3 ] ] );
  test.identical( routine( 1, [ 1,2 ] ), [ [ 1,1 ], [ 1,2 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1,1 ], [ 2,2 ] ] );
  test.identical( routine( 1,2 ), [ 1,2 ] );

  test.identical( routine( { a : 1 }, 1 ), { a : [ 1, 1 ] } );
  test.identical( routine( 1, { a : 1 } ), { a : [ 1, 1 ] } );
  test.identical( routine( { a : 1 }, { a : 2 } ), { a : [ 1,2 ] } );
  test.identical( routine( { a : 1, b : 1 }, { b : 2, a : 2 } ), { a : [ 1,2 ], b : [ 1,2 ] } );

  if( Config.debug )
  {
    test.shouldThrowError( () => routine( [ 1,2 ], [ 1,2,3 ] ) )
    test.shouldThrowError( () => routine( 1,2,3 ) );
    test.shouldThrowError( () => routine( { a : 1 }, { b : 1 } ) );
    test.shouldThrowError( () => routine( [ 1 ], { b : 1 } ) );
    test.shouldThrowError( () => routine( { b : 1 }, [ 1 ] ) );
    test.shouldThrowError( () => routine( 1, [ 1 ], { b : 1 } ) );
    test.shouldThrowError( () => routine( [ 1 ], 1, { b : 1 } ) );
    test.shouldThrowError( () => routine( { b : 1 }, 1, [ 1 ] ) );
    test.shouldThrowError( () => routine( { b : 1 }, [ 1 ], 1 ) );
  }

  test.close( 'vectorizingArray : 1, vectorizingMapVals : 1,select : 2' );

  test.open( ' vectorizingMapKeys : 1' );

  var o =
  {
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 1
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( 1  ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( { a : 1 } ), { a : 1 } );

  if( Config.debug )
  test.shouldThrowError( () => routine( 1, 2 ) )

  test.close( ' vectorizingMapKeys : 1' );

  test.open( 'vectorizingMapKeys : 1, select : 2' );

  var o =
  {
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 2
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine(  1, 1  ), [ 1, 1 ] );
  test.identical( routine( [ 1 ], 1 ), [ [ 1 ], 1 ] );
  test.identical( routine( { a : 1 }, 'b' ), { 'a,b' : 1 } );
  test.identical( routine( 'a', { b : 1, c : 2 } ), { 'a,b' : 1, 'a,c' : 2 } );
  test.identical( routine( [ 'a' ], { b : 1, c : 2 } ), { 'a,b' : 1, 'a,c' : 2 } );
  test.identical( routine( { b : 1, c : 2 }, [ 'a' ] ), { 'b,a' : 1, 'c,a' : 2 } );

  if( Config.debug )
  test.shouldThrowError( () => routine( 1,2,3 ) );

  test.close( 'vectorizingMapKeys : 1, select : 2' );

  test.open( 'vectorizingMapKeys : 1, vectorizingArray : 1, select : 2' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 2
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( [ 1,2 ], 3 ), [ [ 1,3 ], [ 2,3 ] ] );
  test.identical( routine( 1, [ 1,2 ] ), [ [ 1,1 ], [ 1,2 ] ] );
  test.identical( routine( [ 1,2 ], [ 1,2 ] ), [ [ 1,1 ], [ 2,2 ] ] );
  test.identical( routine( 1,2 ), [ 1,2 ] );

  test.identical( routine( { a : 1 }, 'b' ), { 'a,b' : 1 } );
  test.identical( routine( 'a', { b : 1, c : 2 } ), { 'a,b' : 1, 'a,c' : 2 } );

  test.identical( routine( { a : 1 }, 1 ), { 'a,1' : 1 } );
  test.identical( routine( 1, { b : 1, c : 2 } ), { '1,b' : 1, '1,c' : 2 } );

  test.identical( routine( [ 1 ], { b : true } ), { '1,b' : true } );
  test.identical( routine( [ 1,2 ], { b : true } ), { '1,b' : true, '2,b' : true } );

  if( Config.debug )
  {
    test.shouldThrowError( () => routine( 1,2,3 ) );
    test.shouldThrowError( () => routine( { a : 1 }, { b : 1 } ) );
    // test.shouldThrowError( () => routine( [ 1 ], { b : 1 } ) );
    // test.shouldThrowError( () => routine( { b : 1 }, [ 1 ] ) );
    // test.shouldThrowError( () => routine( 1, [ 1 ], { b : 1 } ) );
    test.shouldThrowError( () => routine( [ 1 ], 1, { b : 1 } ) );
    test.shouldThrowError( () => routine( { b : 1 }, 1, [ 1 ] ) );
    test.shouldThrowError( () => routine( { b : 1 }, [ 1 ], 1 ) );
  }

  test.close( 'vectorizingMapKeys : 1, vectorizingArray : 1, select : 2' );

  test.open( 'vectorizingMapKeys : 1, vectorizingArray : 1, select : 3' );

  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 3
  }
  o.routine = srcRoutine;
  var routine = _.vectorize( o );

  test.identical( routine( [ 1 ], { b : true }, 'c' ), { '1,b,c' : true } );
  test.identical( routine( [ 1 ], { b : true }, [ 'c' ] ), { '1,b,c' : true } );
  test.identical( routine( [ 1 ], { b : true, c : false }, 'd' ), { '1,b,d' : true, '1,c,d' : false } );
  test.identical( routine( [ 1,2 ], { b : true }, 'c' ), { '1,b,c' : true, '2,b,c' : true } );

  //

  var got =  routine( [ 1,2 ], { b : true, c : false }, [ 'd', 'e' ] );
  var expected =
  {
    '1,b,d' : true,
    '1,c,d' : false,
    '2,b,e' : true,
    '2,c,e' : false
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], [ 'd', 'e' ], { b : true, c : false } );
  var expected =
  {
    '1,d,b' : true,
    '1,d,c' : false,
    '2,e,b' : true,
    '2,e,c' : false
  }
  test.identical( got, expected );

  //

  var got =  routine( { b : true, c : false }, [ 1,2 ], [ 'd', 'e' ]  );
  var expected =
  {
    'b,1,d' : true,
    'c,1,d' : false,
    'b,2,e' : true,
    'c,2,e' : false
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], { b : true, c : false, d : true }, [ 'e', 'f' ] );
  var expected =
  {
    '1,b,e' : true,
    '1,c,e' : false,
    '1,d,e' : true,
    '2,b,f' : true,
    '2,c,f' : false,
    '2,d,f' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], [ 'e', 'f' ], { b : true, c : false, d : true } );
  var expected =
  {
    '1,e,b' : true,
    '1,e,c' : false,
    '1,e,d' : true,
    '2,f,b' : true,
    '2,f,c' : false,
    '2,f,d' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( { b : true, c : false, d : true }, [ 1,2 ], [ 'e', 'f' ] );
  var expected =
  {
    'b,1,e' : true,
    'c,1,e' : false,
    'd,1,e' : true,
    'b,2,f' : true,
    'c,2,f' : false,
    'd,2,f' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( 1, { b : true, c : false, d : true }, 2 );
  var expected =
  {
    '1,b,2' : true,
    '1,c,2' : false,
    '1,d,2' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( { b : true, c : false, d : true }, 1, 2 );
  var expected =
  {
    'b,1,2' : true,
    'c,1,2' : false,
    'd,1,2' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( 1, 2, { b : true, c : false, d : true } );
  var expected =
  {
    '1,2,b' : true,
    '1,2,c' : false,
    '1,2,d' : true
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], { b : true }, 'c' );
  var expected =
  {
    '1,b,c' : true,
    '2,b,c' : true,
  }
  test.identical( got, expected );

  //

  var got =  routine( { b : true }, [ 1,2 ], 'c' );
  var expected =
  {
    'b,1,c' : true,
    'b,2,c' : true,
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], 'c', { b : true } );
  var expected =
  {
    '1,c,b' : true,
    '2,c,b' : true,
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], { b : true, c : false }, 'd' );
  var expected =
  {
    '1,b,d' : true,
    '1,c,d' : false,
    '2,b,d' : true,
    '2,c,d' : false
  }
  test.identical( got, expected );

  //

  var got =  routine( { b : true, c : false }, [ 1,2 ], 'd' );
  var expected =
  {
    'b,1,d' : true,
    'b,2,d' : true,
    'c,1,d' : false,
    'c,2,d' : false
  }
  test.identical( got, expected );

  //

  var got =  routine( [ 1,2 ], 'd', { b : true, c : false } );
  var expected =
  {
    '1,d,b' : true,
    '1,d,c' : false,
    '2,d,b' : true,
    '2,d,c' : false
  }
  test.identical( got, expected );

  //

  if( Config.debug )
  {
    test.shouldThrowError( () => routine( { a : 1 }, 'c', { b : 1 } ) );
    test.shouldThrowError( () => routine( [ 1 ], { b : true }, [ 'c', 'd' ] ) );
  }

  test.close( 'vectorizingMapKeys : 1, vectorizingArray : 1, select : 3' );

  test.open( 'vectorizingMapKeys : 1, vectorizingArray : 1, vectorizingMapVals : 1, select : 1' );
  function srcRoutine2( src )
  {
    return src + 1;
  }
  var o =
  {
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 1,
    select : 1
  }
  o.routine = srcRoutine2;
  var routine = _.vectorize( o );

  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 2 , 21 : 3, 31 : 4 } );

  test.close( 'vectorizingMapKeys : 1, vectorizingArray : 1, vectorizingMapVals : 1, select : 1' );
}

//

function vectorizeBypassingEmpty( test )
{
  function srcRoutine()
  {
    _.sure( arguments.length );
    return _.longSlice( arguments );
  }
  
  function srcRoutine2()
  { 
    _.sure( arguments.length );
    return arguments[ 0 ] + 1;
  }
  
  //
  
  test.open( 'vectorizing off, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine,
    bypassingEmpty : 0,
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.case = 'with arg';
  var got = routine( 1 );
  var expected = [ 1 ];
  test.identical( got, expected )
  
  test.close( 'vectorizing off, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizing off, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine,
    bypassingEmpty : 1,
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.case = 'with arg';
  var got = routine( 1 );
  var expected = [ 1 ];
  test.identical( got, expected )
  
  test.close( 'vectorizing off, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine,
    bypassingEmpty : 0,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.case = 'with arg';
  var got = routine( 1 );
  var expected = [ 1 ];
  test.identical( got, expected )
  
  test.close( 'vectorizingArray:1, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine,
    bypassingEmpty : 1,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.case = 'with arg';
  var got = routine( 1 );
  var expected = [ 1 ];
  test.identical( got, expected )
  
  test.close( 'vectorizingArray:1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingMapVals:1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 1,
    vectorizingArray : 0,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), '11' );
  test.identical( routine( [ 1,2,3 ] ), '1,2,31' );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : 2 , 2 : 3, 3 : 4 } );
  
  test.close( 'vectorizingMapVals:1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingMapVals:1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 0,
    vectorizingArray : 0,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), '11' );
  test.identical( routine( [ 1,2,3 ] ), '1,2,31' );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : 2 , 2 : 3, 3 : 4 } );
  
  test.close( 'vectorizingMapVals:1, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 1,
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : 2 , 2 : 3, 3 : 4 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 0,
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 0,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 1 : 2 , 2 : 3, 3 : 4 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingMapKeys:1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 1,
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 1
  });
  
  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), '11' );
  test.identical( routine( [ 1,2,3 ] ), '1,2,31' );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 1 , 21 : 2, 31 : 3 } );
  
  test.close( 'vectorizingMapKeys:1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingMapKeys:1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 0,
    vectorizingArray : 0,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), '11' );
  test.identical( routine( [ 1,2,3 ] ), '1,2,31' );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 1 , 21 : 2, 31 : 3 } );
  
  test.close( 'vectorizingMapKeys:1, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 1,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 1
  });
  
  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 1 , 21 : 2, 31 : 3 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 0,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 1,
    select : 1
  });
  
  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 1 , 21 : 2, 31 : 3 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:1' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 1,
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 1,
    select : 1
  });

  test.case = 'no arg';
  var got = routine();
  var expected = [];
  test.identical( got, expected )
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 2 , 21 : 3, 31 : 4 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:1' );
  
  //
  
  test.open( 'vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:0' );
  
  var routine = _.vectorize
  ({
    routine : srcRoutine2,
    bypassingEmpty : 0,
    vectorizingArray : 1,
    vectorizingMapVals : 1,
    vectorizingMapKeys : 1,
    select : 1
  });

  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), 2 );
  test.identical( routine( [ 1 ] ), [ 2 ] );
  test.identical( routine( [ 1,2,3 ] ), [ 2,3,4 ] );
  test.identical( routine( { 1 : 1, 2 : 2, 3 : 3 } ), { 11 : 2 , 21 : 3, 31 : 4 } );
  
  test.close( 'vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:0' );
  
  // vectorizeForOptionsMapForKeys
  
  test.open( 'vectorizingArray:1, select : array, bypassingEmpty:0' );
  
  function srcRoutine3( src )
  { 
    return src;
  }
  
  var routine = _.vectorize
  ({
    routine : srcRoutine3,
    bypassingEmpty : 0,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : [ '0' ]
  });

  test.case = 'no arg';
  test.shouldThrowErrorSync( () => routine() );
  
  test.identical( routine( 1 ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( [ [ 1 ] ] ), [ [ { 0 : 1 } ] ] );
  test.identical( routine( { 0 : [ 1 ] } ), [ [ { 0 : 1 } ] ] );
  
  test.close( 'vectorizingArray:1, select : array, bypassingEmpty:0' );
  
  //
  
  test.open( 'vectorizingArray:1, select : array, bypassingEmpty:1' );
  
  function srcRoutine3( src )
  { 
    return src;
  }
  
  var routine = _.vectorize
  ({
    routine : srcRoutine3,
    bypassingEmpty : 1,
    vectorizingArray : 1,
    vectorizingMapVals : 0,
    vectorizingMapKeys : 0,
    select : [ '0' ]
  });

  test.identical( routine(), [] );
  test.identical( routine( 1 ), [ 1 ] );
  test.identical( routine( [ 1 ] ), [ [ 1 ] ] );
  test.identical( routine( [ [ 1 ] ] ), [ [ { 0 : 1 } ] ] );
  test.identical( routine( { 0 : [ 1 ] } ), [ [ { 0 : 1 } ] ] );
  
  test.close( 'vectorizingArray:1, select : array, bypassingEmpty:1' );
}

//

var Self =
{

  name : 'Tools/base/l1/Routine',
  silencing : 1,

  tests :
  {

    /* qqq : tests for constructorJoin, extend tests for routineJoin */

    _routineJoin,
    constructorJoin,
    routineJoin,
    routineSeal,

    routinesCompose,
    routinesComposeAll,
    routinesComposeAllReturningLast,
    routinesChain,

    routineExtend,
    routineExtendExperiment,

    vectorize,
    /* qqq : split test routine vectorize */
    /* qqq : add tests for vectorize* routines */
    vectorizeBypassingEmpty

  }

};

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

} )( );
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Routine.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Routine_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Routine_test_s

( function String_test_s() { // == begin of file String_test_s
function String_test_s_naked() {
( function _String_test_s_() {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

// --
//
// --

function strLeft( test )
{

  /* - */

  test.open( 'string' );

  /* - */

  test.case = 'begin';

  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', 'aa' );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', 'bb' );
  test.identical( got, expected );

  test.case = 'end';

  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', 'cc' );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ { index : 6, entry : 'bb' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ { index : 12, entry : 'cc' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ { index : 12, entry : 'cc' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );

  /* */

  test.case = 'with window';

  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 9, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -10 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -1 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -2 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 3 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 6 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 9, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 7 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 12, entry : 'aa' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 10 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -15 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -16 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -10 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -9 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15, -12 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15, -9 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -2, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1, 7 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -15 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -16 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -10 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -9 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -12 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 2 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 7 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -15 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -16 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -10 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -9 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -12 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 7 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 8 );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = { index : 17, entry : undefined }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = { index : 17, entry : undefined }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', 'dd' );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = { index : 0, entry : '' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', '' );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = { index : 0, entry : '' }
  var got = _.strLeft( '', '' );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = { index : 0, entry : undefined }
  var got = _.strLeft( '', 'aa' );
  test.identical( got, expected );

  /* - */

  test.close( 'string' );
  test.open( 'regexp' );

  /* - */

  test.case = 'begin';

  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', /a+/ );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', /b+/ );
  test.identical( got, expected );

  test.case = 'end';

  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', /c+/ );
  test.identical( got, expected );

  /* */

  test.case = 'begin smeared';

  var expected = { index : 0, entry : 'xa' }
  var got = _.strLeft( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /\wa/ );
  test.identical( got, expected );

  test.case = 'middle smeared';

  var expected = { index : 10, entry : 'xb' }
  var got = _.strLeft( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /\wb/ );
  test.identical( got, expected );

  test.case = 'end ';

  var expected = { index : 20, entry : 'xc' }
  var got = _.strLeft( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /\wc/ );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = { index : 0, entry : 'aa' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = { index : 6, entry : 'bb' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = { index : 12, entry : 'cc' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ { index : 6, entry : 'bb' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ { index : 12, entry : 'cc' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 12, entry : 'cc' }, { index : 0, entry : 'cc' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ] );
  test.identical( got, expected );

  /* */

  test.case = 'with window, mixed';

  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -17 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -15 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 9, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -10 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 16, entry : 'a' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -1 );
  test.identical( got, expected );
  var expected = [ { index : 17, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -2 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -17, -15 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 1, entry : 'a' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 1, 7 );
  test.identical( got, expected );
  var expected = [ { index : 1, entry : 'a' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 1, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, -15 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'a' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, -16 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, 7 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, 8 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 17, entry : undefined } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 7 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : 6, entry : 'bb' } ];
  var got = _.strLeft( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 8 );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = { index : 17, entry : undefined }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = { index : 17, entry : undefined }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', /d+/ );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = { index : 0, entry : '' }
  var got = _.strLeft( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = { index : 0, entry : '' }
  var got = _.strLeft( '', new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = { index : 0, entry : undefined }
  var got = _.strLeft( '', /a+/ );
  test.identical( got, expected );

  /* - */

  test.close( 'regexp' );

  /* - */

  if( !Config.debug )
  return;

  test.open( 'throwing' );

  test.shouldThrowErrorSync( () => _.strLeft( 'abc', 'b', -100 ) );
  test.shouldThrowErrorSync( () => _.strLeft( 'abc', 'b', 100 ) );
  test.shouldThrowErrorSync( () => _.strLeft( 'abc', 'b', 0, -100 ) );
  test.shouldThrowErrorSync( () => _.strLeft( 'abc', 'b', 0, 100 ) );
  test.shouldThrowErrorSync( () => _.strLeft( /a/, /a+/ ) );
  test.shouldThrowErrorSync( () => _.strLeft( 'abc', /a+/, '' ) );
  test.shouldThrowErrorSync( () => _.strLeft( 'abc' ) );
  test.shouldThrowErrorSync( () => _.strLeft( '123', 1 ) );
  test.shouldThrowErrorSync( () => _.strLeft( '123', [ 1 ] ) );
  test.shouldThrowErrorSync( () => _.strLeft() );

  test.close( 'throwing' );

}

//

function strRight( test )
{

  /* - */

  test.open( 'string' );

  /* - */

  test.case = 'begin';

  var expected = { index : 3, entry : 'aa' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', 'aa' );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', 'bb' );
  test.identical( got, expected );

  test.case = 'end';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', 'cc' );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ { index : 15, entry : 'cc' }, { index : 9, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ { index : 15, entry : 'cc' }, { index : 9, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ { index : 15, entry : 'cc' }, { index : 3, entry : 'cc' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ { index : 15, entry : 'cc' }, { index : 3, entry : 'cc' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );

  /* */

  test.case = 'with window';

  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -10 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -1 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -2 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 3 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 6 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 7 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 10 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -15 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -16 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -10 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -17, -9 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15, -12 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -15, -9 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], -2, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 1, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -15 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -16 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -10 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -9 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, -12 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 2 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], undefined, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -15 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -16 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -10 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -9 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, -12 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 17 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], 0, 8 );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', 'dd' );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = { index : 17, entry : '' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', '' );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = { index : 0, entry : '' }
  var got = _.strRight( '', '' );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( '', 'aa' );
  test.identical( got, expected );

  /* - */

  test.close( 'string' );
  test.open( 'regexp' );

  /* - */

  test.case = 'begin';

  var expected = { index : 3, entry : 'aa' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', /a+/ );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', /b+/ );
  test.identical( got, expected );

  test.case = 'end';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', /c+/ );
  test.identical( got, expected );

  /* */

  test.case = 'begin smeared';

  var expected = { index : 7, entry : 'ax' }
  var got = _.strRight( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /a\w/ );
  test.identical( got, expected );

  test.case = 'middle smeared';

  var expected = { index : 17, entry : 'bx' }
  var got = _.strRight( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /b\w/ );
  test.identical( got, expected );

  test.case = 'end ';

  var expected = { index : 27, entry : 'cx' }
  var got = _.strRight( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /c\w/ );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = { index : 9, entry : 'bb' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = { index : 15, entry : 'cc' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ { index : 15, entry : 'cc' }, { index : 9, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 15, entry : 'cc' }, { index : 9, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ { index : 15, entry : 'cc' }, { index : 3, entry : 'cc' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ { index : 15, entry : 'cc' }, { index : 3, entry : 'cc' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ] );
  test.identical( got, expected );

  /* */

  test.case = 'with window, mixed';

  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -17 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -15 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -10 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : 16, entry : 'a' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -1 );
  test.identical( got, expected );
  var expected = [ { index : -1, entry : undefined }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -2 );
  test.identical( got, expected );
  var expected = [ { index : 9, entry : 'bb' }, { index : 15, entry : 'aa' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], -17, -15 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 2 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 1, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 1, 8 );
  test.identical( got, expected );

  var expected = [ { index : 0, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, -15 );
  test.identical( got, expected );
  var expected = [ { index : 0, entry : 'a' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, -16 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], undefined, 8 );
  test.identical( got, expected );
  var expected = [ { index : 3, entry : 'aa' }, { index : -1, entry : undefined } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 7 );
  test.identical( got, expected );
  var expected = [ { index : 6, entry : 'bb' }, { index : 6, entry : 'bb' } ];
  var got = _.strRight( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, 'bb' ], 0, 8 );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', /d+/ );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = { index : 17, entry : '' }
  var got = _.strRight( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = { index : 0, entry : '' }
  var got = _.strRight( '', new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = { index : -1, entry : undefined }
  var got = _.strRight( '', /a+/ );
  test.identical( got, expected );

  /* - */

  test.close( 'regexp' );

  /* - */

  if( !Config.debug )
  return;

  test.open( 'throwing' );

  test.shouldThrowErrorSync( () => _.strRight( 'abc', 'b', -100 ) );
  test.shouldThrowErrorSync( () => _.strRight( 'abc', 'b', 100 ) );
  test.shouldThrowErrorSync( () => _.strRight( 'abc', 'b', 0, -100 ) );
  test.shouldThrowErrorSync( () => _.strRight( 'abc', 'b', 0, 100 ) );
  test.shouldThrowErrorSync( () => _.strRight( /a/, /a+/ ) );
  test.shouldThrowErrorSync( () => _.strRight( 'abc', /a+/, '' ) );
  test.shouldThrowErrorSync( () => _.strRight( 'abc' ) );
  test.shouldThrowErrorSync( () => _.strRight( '123', 1 ) );
  test.shouldThrowErrorSync( () => _.strRight( '123', [ 1 ] ) );
  test.shouldThrowErrorSync( () => _.strRight() );

  test.close( 'throwing' );

}

//

function strEquivalent( test )
{

  /* - */

  test.open( 'true' );

  test.case = 'strings';
  var got = _.strEquivalent( 'abc', 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strEquivalent( /\w+/, 'abc' );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strEquivalent( 'abc', /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strEquivalent( /\w+/, /\w+/ );
  test.identical( got, true );

  test.close( 'true' );

  /* - */

  test.open( 'false' );

  test.case = 'strings';
  var got = _.strEquivalent( 'abd', 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strEquivalent( /\s+/, 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strEquivalent( /\w/, 'abc' );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strEquivalent( 'abc', /\s+/ );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strEquivalent( 'abc', /\w/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strEquivalent( /\w*/, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strEquivalent( /\w+/g, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strEquivalent( /\w+/g, /\w+/gi );
  test.identical( got, false );

  test.close( 'false' );

  /* - */

}

//

function strsEquivalent( test )
{

  /* - */

  test.open( 'scalar, true' );

  test.case = 'strings';
  var got = _.strsEquivalent( 'abc', 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strsEquivalent( /\w+/, 'abc' );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strsEquivalent( 'abc', /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalent( /\w+/, /\w+/ );
  test.identical( got, true );

  test.close( 'scalar, true' );

  /* - */

  test.open( 'scalar, false' );

  test.case = 'strings';
  var got = _.strsEquivalent( 'abd', 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalent( /\s+/, 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalent( /\w/, 'abc' );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalent( 'abc', /\s+/ );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalent( 'abc', /\w/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalent( /\w*/, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalent( /\w+/g, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalent( /\w+/g, /\w+/gi );
  test.identical( got, false );

  test.close( 'scalar, false' );

  /* - */

  test.open( 'vector, true' );

  test.case = 'vector, vector';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = [ 'abc', 'abc', /\w+/, /\w+/ ];
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ true, true, true, true ] );

  test.case = 'vector, scalar';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ true, true, true, true ] );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ true, true, true, true ] );

  test.close( 'vector, true' );

  /* - */

  test.open( 'vector, false' );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ];
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ false, false, false, false, false, false, false, false ] );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ false, false, false, true, true, true, true, true ] );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var got = _.strsEquivalent( src1, src2 );
  test.identical( got, [ false, false, false, true, true, true, true, true ] );

  test.close( 'vector, false' );

}

//

function strsEquivalentAll( test )
{

  /* - */

  test.open( 'scalar, true' );

  test.case = 'strings';
  var got = _.strsEquivalentAll( 'abc', 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAll( /\w+/, 'abc' );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAll( 'abc', /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAll( /\w+/, /\w+/ );
  test.identical( got, true );

  test.close( 'scalar, true' );

  /* - */

  test.open( 'scalar, false' );

  test.case = 'strings';
  var got = _.strsEquivalentAll( 'abd', 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAll( /\s+/, 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAll( /\w/, 'abc' );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAll( 'abc', /\s+/ );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAll( 'abc', /\w/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAll( /\w*/, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAll( /\w+/g, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAll( /\w+/g, /\w+/gi );
  test.identical( got, false );

  test.close( 'scalar, false' );

  /* - */

  test.open( 'vectors' );

  test.case = 'vector, vector';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = [ 'abc', 'abc', /\w+/, /\w+/ ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, scalar';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/ ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentAll( src1, src2 );
  test.identical( got, true );

  test.close( 'vectors' );

}

//

function strsEquivalentAny( test )
{

  /* - */

  test.open( 'scalar, true' );

  test.case = 'strings';
  var got = _.strsEquivalentAny( 'abc', 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAny( /\w+/, 'abc' );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAny( 'abc', /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAny( /\w+/, /\w+/ );
  test.identical( got, true );

  test.close( 'scalar, true' );

  /* - */

  test.open( 'scalar, false' );

  test.case = 'strings';
  var got = _.strsEquivalentAny( 'abd', 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAny( /\s+/, 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalentAny( /\w/, 'abc' );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAny( 'abc', /\s+/ );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalentAny( 'abc', /\w/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAny( /\w*/, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAny( /\w+/g, /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentAny( /\w+/g, /\w+/gi );
  test.identical( got, false );

  test.close( 'scalar, false' );

  /* - */

  test.open( 'vectors' );

  test.case = 'vector, vector';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = [ 'abc', 'abc', /\w+/, /\w+/ ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, scalar';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/ ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentAny( src1, src2 );
  test.identical( got, true );

  test.close( 'vectors' );

}

//

function strsEquivalentNone( test )
{

  /* - */

  test.open( 'scalar, not true' );

  test.case = 'strings';
  var got = _.strsEquivalentNone( 'abc', 'abc' );
  test.identical( got, false );

  test.case = 'regexp and string';
  var got = _.strsEquivalentNone( /\w+/, 'abc' );
  test.identical( got, false );

  test.case = 'string and regexp';
  var got = _.strsEquivalentNone( 'abc', /\w+/ );
  test.identical( got, false );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentNone( /\w+/, /\w+/ );
  test.identical( got, false );

  test.close( 'scalar, not true' );

  /* - */

  test.open( 'scalar, not false' );

  test.case = 'strings';
  var got = _.strsEquivalentNone( 'abd', 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strsEquivalentNone( /\s+/, 'abc' );
  test.identical( got, true );

  test.case = 'regexp and string';
  var got = _.strsEquivalentNone( /\w/, 'abc' );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strsEquivalentNone( 'abc', /\s+/ );
  test.identical( got, true );

  test.case = 'string and regexp';
  var got = _.strsEquivalentNone( 'abc', /\w/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentNone( /\w*/, /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentNone( /\w+/g, /\w+/ );
  test.identical( got, true );

  test.case = 'regexp and regexp';
  var got = _.strsEquivalentNone( /\w+/g, /\w+/gi );
  test.identical( got, true );

  test.close( 'scalar, not false' );

  /* - */

  test.open( 'vectors' );

  test.case = 'vector, vector';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = [ 'abc', 'abc', /\w+/, /\w+/ ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abc', /\w+/, 'abc', /\w+/ ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, vector';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/g ];
  var src2 = [ 'abc', 'abc', 'abc', /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'vector, scalar';
  var src1 = [ 'abd', /\s+/ ];
  var src2 = 'abc';
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, true );

  test.case = 'vector, scalar';
  var src1 = [ /\w+/g, /\w+/gi ];
  var src2 = 'abc';
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/, /\w/, 'abc', 'abc', /\w*/, /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ 'abd', /\s+/ ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, true );

  test.case = 'scalar, vector';
  var src1 = 'abc';
  var src2 = [ /\w+/g, /\w+/gi ];
  var got = _.strsEquivalentNone( src1, src2 );
  test.identical( got, false );

  test.close( 'vectors' );

}

//

function strShort( test )
{

  test.case = 'undefined';
  var src = undefined;
  var expected = 'undefined';
  var got = _.strShort( src );
  test.identical( got, expected );

  test.case = 'null';
  var src = null;
  var expected = 'null';
  var got = _.strShort( src );
  test.identical( got, expected );

  test.case = 'number';
  var src = 13;
  var expected = '13';
  var got = _.strShort( src );
  test.identical( got, expected );

  test.case = 'boolean';
  var src = false;
  var expected = 'false';
  var got = _.strShort( src );
  test.identical( got, expected );

  test.case = 'string';
  var src = 'abc';
  var expected = 'abc';
  var got = _.strShort( src );
  test.identical( got, expected );

}

//

function strPrimitive( test )
{

  test.case = 'undefined';
  var src = undefined;
  var expected = undefined;
  var got = _.strPrimitive( src );
  test.identical( got, expected );

  test.case = 'null';
  var src = null;
  var expected = undefined;
  var got = _.strPrimitive( src );
  test.identical( got, expected );

  test.case = 'number';
  var src = 13;
  var expected = '13';
  var got = _.strPrimitive( src );
  test.identical( got, expected );

  test.case = 'boolean';
  var src = false;
  var expected = 'false';
  var got = _.strPrimitive( src );
  test.identical( got, expected );

  test.case = 'string';
  var src = 'abc';
  var expected = 'abc';
  var got = _.strPrimitive( src );
  test.identical( got, expected );

}

//

function strIsolateLeftOrNone( test )
{
  var got, expected;

  /* - */

  test.case = 'single delimeter';

  /**/

  got = _.strIsolateLeftOrNone( '', '' );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( '', [ '' ] );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abc', [ '' ] );
  expected = [ '', '', 'abc' ];
  test.identical( got, expected );

  /* empty delimeters array */

  got = _.strIsolateLeftOrNone( 'abca', [] );
  expected = [ '', undefined, 'abca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( '', 'a' );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( '', [ 'a' ] );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', 'a' );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a' ] );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /* number 1 by default, no cut, just returns src */

  got = _.strIsolateLeftOrNone( 'abca', 'd' );
  expected = [ '', undefined, 'abca' ];
  test.identical( got, expected );

  /* number 1 by default, no cut, just returns src */

  got = _.strIsolateLeftOrNone( 'abca', [ 'd' ] );
  expected = [ '', undefined, 'abca' ];
  test.identical( got, expected );

  /* - */

  test.case = 'single delimeter, number';

  got = _.strIsolateLeftOrNone( 'abca', '', 2 );
  expected = [ 'a', '', 'bca' ];
  test.identical( got, expected );

  /* cut on second occurrence */

  got = _.strIsolateLeftOrNone( 'abca', 'a', 2 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /* cut on second occurrence */

  got = _.strIsolateLeftOrNone( 'abca', [ 'a' ], 2 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /* cut on third occurrence */

  got = _.strIsolateLeftOrNone( 'abcaca', 'a', 3 );
  expected = [ 'abcac', 'a', '' ];
  test.identical( got, expected );

  /* cut on third occurrence */

  got = _.strIsolateLeftOrNone( 'abcaca', [ 'a' ], 3 );
  expected = [ 'abcac', 'a', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abcaca', 'a', 4 );
  expected = [ 'abcaca', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abcaca', [ 'a' ], 4 );
  expected = [ 'abcaca', undefined, '' ];
  test.identical( got, expected );

  /* - */

  test.case = 'several delimeters';

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a', 'c' ] );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'c', 'a' ] );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'x', 'y' ] );
  expected = [ '', undefined, 'abca'  ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'x', 'y', 'a' ] );
  expected = [ '', 'a', 'bca'  ];
  test.identical( got, expected );

  /* - */

  test.case = 'several delimeters, number';

  /* empty delimeters array */

  got = _.strIsolateLeftOrNone( 'abca', [], 2 );
  expected = [ '', undefined, 'abca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a', 'c' ], 2 );
  expected = [ 'ab', 'c', 'a' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abcbc', [ 'c', 'a' ], 2 );
  expected = [ 'ab', 'c', 'bc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'cbcbc', [ 'c', 'a' ], 3 );
  expected = [ 'cbcb', 'c', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'cbcbc', [ 'c', 'a' ], 4 );
  expected = [ 'cbcbc', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'jj', [ 'c', 'a' ], 4 );
  expected = [ '', undefined, 'jj' ];
  test.identical( got, expected );

  /* - */

  test.case = 'one of delimeters contains other';

  /* - */

  got = _.strIsolateLeftOrNone( 'ab', [ 'a', 'ab' ] );
  expected = [ '', 'a', 'b' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'ab', [ 'ab', 'a' ] );
  expected = [ '', 'ab', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'ab', [ 'b', 'ab' ] );
  expected = [ '', 'ab', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'ab', [ 'ab', 'b' ] );
  expected = [ '', 'ab', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrNone( 'a b c', ' ', 1 );
  expected = [ 'a', ' ', 'b c' ];
  test.identical( got, expected );

  /* - */

  test.case = 'single delimeter'

  /* cut on first appear */

  got = _.strIsolateLeftOrNone( 'abca', 'a', 1 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateLeftOrNone( 'jj', 'a', 1 );
  expected = [ '', undefined, 'jj'];
  test.identical( got , expected );

  /* cut on second appear */

  got = _.strIsolateLeftOrNone( 'abca', 'a', 2 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /* 5 attempts */

  got = _.strIsolateLeftOrNone( 'abca', 'a', 5 );
  expected = [ 'abca', undefined, '' ];
  test.identical( got , expected );

  /* - */

  test.case = 'multiple delimeter'

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a', 'c' ], 1 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a', 'c' ], 2 );
  expected = [ 'ab', 'c', 'a' ];
  test.identical( got , expected );

  /**/

  got = _.strIsolateLeftOrNone( 'abca', [ 'a', 'c' ], 3 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateLeftOrNone( 'jj', [ 'a', 'c' ], 1 );
  expected = [ '', undefined, 'jj' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateLeftOrNone( 'jj', [ 'a' ], 1 );
  expected = [ '', undefined, 'jj' ];
  test.identical( got , expected );

  /* - */

  test.case = 'options as map';

  /**/

  got = _.strIsolateLeftOrNone({ src : 'abca', delimeter : 'a', times : 1 });
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /* number option is missing */

  got = _.strIsolateLeftOrNone({ src : 'abca', delimeter : 'a' });
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /* - */

  test.case = 'number option check';

  /* number is zero */

  got = _.strIsolateLeftOrNone( 'abca', 'a', 0 );
  expected = [ '', undefined, 'abca' ];
  test.identical( got , expected );

  /* number is negative */

  got = _.strIsolateLeftOrNone( 'abca', 'a', -1 );
  expected = [ '', undefined, 'abca' ];
  test.identical( got , expected );

  /* - */

  test.open( 'abaaca with strings' )

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 0 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 1 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 2 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 3 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 4 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', 'a', 5 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abaaca with strings' )
  test.open( 'abababa with strings' )

  got = _.strIsolateLeftOrNone( 'abababa', 'aba', 1 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', 'aba', 3 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', 'aba', 4 );
  expected = [ 'abababa', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abababa with strings' )

  /* - */

  test.open( 'abaaca with regexp' )

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 0 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 1 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 2 );
  expected = [ 'ab', 'aa', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 3 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 4 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abaaca', /a+/, 5 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abaaca with regexp' )
  test.open( 'abababa with regexp' )

  got = _.strIsolateLeftOrNone( 'abababa', /aba/, 1 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', /aba/, 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', /aba/, 3 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrNone( 'abababa', /aba/, 4 );
  expected = [ 'abababa', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abababa with regexp' )

  /* - */

  if( !Config.debug )
  return;

  test.case = 'single argument but object expected';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateLeftOrNone( 'abc' );
  })

  test.case = 'invalid option';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateLeftOrNone({ src : 'abc', delimeter : 'a', x : 'a' });
  })

  test.case = 'changing of left option not allowed';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateLeftOrNone({ src : 'abc', delimeter : 'a', left : 0 });
  })

}

//

function strIsolateLeftOrAll( test )
{
  var got, expected;

  test.case = 'cut in most left position';

  /* nothing */

  got = _.strIsolateLeftOrAll( '', 'b' );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /* nothing */

  got = _.strIsolateLeftOrAll( '', '' );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrAll( 'appc', 'p' );
  expected = [ 'a', 'p', 'pc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrAll( 'appc', 'c' );
  expected = [ 'app', 'c', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrAll( 'appc', 'a' );
  expected = [ '', 'a', 'ppc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateLeftOrAll( 'jj', 'a' );
  expected = [ 'jj', undefined, '' ];
  test.identical( got, expected );

  /* - */

  test.open( 'abaaca with strings' )

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 0 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 1 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 2 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 3 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 4 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', 'a', 5 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abaaca with strings' )
  test.open( 'abababa with strings' )

  got = _.strIsolateLeftOrAll( 'abababa', 'aba', 1 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', 'aba', 3 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', 'aba', 4 );
  expected = [ 'abababa', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abababa with strings' )

  /* - */

  test.open( 'abaaca with regexp' )

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 0 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 1 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 2 );
  expected = [ 'ab', 'aa', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 3 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 4 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abaaca', /a+/, 5 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abaaca with regexp' )
  test.open( 'abababa with regexp' )

  got = _.strIsolateLeftOrAll( 'abababa', /aba/, 1 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', /aba/, 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', /aba/, 3 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateLeftOrAll( 'abababa', /aba/, 4 );
  expected = [ 'abababa', undefined, '' ];
  test.identical( got, expected );

  test.close( 'abababa with regexp' )

  /* - */

  if( !Config.debug )
  return;

  test.case = 'delimeter must be a String';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateLeftOrAll( 'jj', 1 );
  });

  test.case = 'source must be a String';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateLeftOrAll( 1, '1' );
  });

}

//

function strIsolateRightOrNone( test )
{
  var got, expected;

  /* - */

  test.case = 'single delimeter';

  /**/

  got = _.strIsolateRightOrNone( '', '' );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( '', [ '' ] );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abc', [ '' ] );
  expected = [ 'abc', '', '' ];
  test.identical( got, expected );

  /* empty delimeters array */

  got = _.strIsolateRightOrNone( 'abca', [] );
  expected = [ 'abca', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( '', 'a' );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( '', [ 'a' ] );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', 'a' );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a' ] );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /* number 1 by default, no cut, just returns src */

  got = _.strIsolateRightOrNone( 'abca', 'd' );
  expected = [ 'abca', undefined, '' ];
  test.identical( got, expected );

  /* number 1 by default, no cut, just returns src */

  got = _.strIsolateRightOrNone( 'abca', [ 'd' ] );
  expected = [ 'abca', undefined, '' ];
  test.identical( got, expected );

  /* - */

  test.case = 'single delimeter, number';

  got = _.strIsolateRightOrNone( 'abca', '', 2 );
  expected = [ 'abc', '', 'a' ];
  test.identical( got, expected );

  /* cut on second occurrence */

  got = _.strIsolateRightOrNone( 'abca', 'a', 2 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /* cut on second occurrence */

  got = _.strIsolateRightOrNone( 'abca', [ 'a' ], 2 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got, expected );

  /* cut on third occurrence */

  got = _.strIsolateRightOrNone( 'abcaca', 'a', 3 );
  expected = [ '', 'a', 'bcaca' ];
  test.identical( got, expected );

  /* cut on third occurrence */

  got = _.strIsolateRightOrNone( 'abcaca', [ 'a' ], 3 );
  expected = [ '', 'a', 'bcaca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abcaca', 'a', 4 );
  expected = [ '', undefined, 'abcaca' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abcaca', [ 'a' ], 4 );
  expected = [ '', undefined, 'abcaca' ];
  test.identical( got, expected );

  /* - */

  test.case = 'several delimeters';

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ] );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'c', 'a' ] );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'x', 'y' ] );
  expected = [ 'abca', undefined, ''  ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'x', 'y', 'a' ] );
  expected = [ 'abc', 'a', ''  ];
  test.identical( got, expected );

  /* - */

  test.case = 'several delimeters, number';

  /* empty delimeters array */

  got = _.strIsolateRightOrNone( 'abca', [], 2 );
  expected = [ 'abca', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ], 1 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ], 2 );
  expected = [ 'ab', 'c', 'a' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'abcbc', [ 'c', 'a' ], 2 );
  expected = [ 'ab', 'c', 'bc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'cbcbc', [ 'c', 'a' ], 3 );
  expected = [ '', 'c', 'bcbc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'cbcbc', [ 'c', 'a' ], 4 );
  expected = [ '', undefined, 'cbcbc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'jj', [ 'c', 'a' ], 4 );
  expected = [ 'jj', undefined, '' ];
  test.identical( got, expected );

  /* - */

  test.case = 'one of delimeters contains other';

  /* - */

  got = _.strIsolateRightOrNone( 'ab', [ 'a', 'ab' ] );
  expected = [ '', 'a', 'b' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'ab', [ 'ab', 'a' ] );
  expected = [ '', 'ab', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'ab', [ 'b', 'ab' ] );
  expected = [ 'a', 'b', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrNone( 'ab', [ 'ab', 'b' ] );
  expected = [ 'a', 'b', '' ];
  test.identical( got, expected );

  /* - */

  test.case = 'defaults'

  /**/

  got = _.strIsolateRightOrNone( 'a b c', ' ', 1 );
  expected = [ 'a b', ' ', 'c' ];
  test.identical( got, expected );

  /* - */

  test.case = 'single delimeter'

  /* cut on first appear */

  got = _.strIsolateRightOrNone( 'abca', 'a', 1 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateRightOrNone( 'jj', 'a', 1 );
  expected = [ 'jj', undefined, '' ];
  test.identical( got , expected );

  /* cut on second appear */

  got = _.strIsolateRightOrNone( 'abca', 'a', 2 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', 'a', 5 );
  expected = [ '', undefined, 'abca' ];
  test.identical( got , expected );

  /* - */

  test.case = 'multiple delimeter'

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ], 1 );
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ], 2 );
  expected = [ 'ab', 'c', 'a' ];
  test.identical( got , expected );

  /**/

  got = _.strIsolateRightOrNone( 'abca', [ 'a', 'c' ], 3 );
  expected = [ '', 'a', 'bca' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateRightOrNone( 'jj', [ 'a', 'c' ], 1 );
  expected = [ 'jj', undefined, '' ];
  test.identical( got , expected );

  /* no occurrences */

  got = _.strIsolateRightOrNone( 'jj', [ 'a' ], 1 );
  expected = [ 'jj', undefined, '' ];
  test.identical( got , expected );

  /* - */

  test.case = 'options as map';

  /**/

  got = _.strIsolateRightOrNone({ src : 'abca', delimeter : 'a', times : 1 });
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /* number option is missing */

  got = _.strIsolateRightOrNone({ src : 'abca', delimeter : 'a' });
  expected = [ 'abc', 'a', '' ];
  test.identical( got , expected );

  /* - */

  test.case = 'number option check';

  /* number is zero */

  got = _.strIsolateRightOrNone( 'abca', 'a', 0 );
  expected = [ 'abca', undefined, '' ];
  test.identical( got , expected );

  /* number is negative */

  got = _.strIsolateRightOrNone( 'abca', 'a', -1 );
  expected = [ 'abca', undefined, '' ];
  test.identical( got , expected );

  /* */

  got = _.strIsolateRightOrNone( 'acbca', [ 'a', 'c' ], 1 );
  expected = [ 'acbc', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'acbca', [ 'a', 'c' ], 2 );
  expected = [ 'acb', 'c', 'a' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  /* - */

  test.open( 'abaaca with strings' )

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 0 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 1 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 2 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 3 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 4 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', 'a', 5 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  test.close( 'abaaca with strings' )
  test.open( 'abababa with strings' )

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', 'aba', 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  test.close( 'abababa with strings' )

  /* - */

  test.open( 'abaaca with regexp' )

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 0 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 1 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 2 );
  expected = [ 'ab', 'aa', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 3 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 4 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abaaca', /a+/, 5 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  test.close( 'abaaca with regexp' )
  test.open( 'abababa with regexp' )

  got = _.strIsolateRightOrNone( 'abababa', /aba/, 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', /aba/, 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', /aba/, 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrNone( 'abababa', /aba/, 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  test.close( 'abababa with regexp' )

  /* */

  if( !Config.debug )
  return;

  test.case = 'single argument but object expected';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateRightOrNone( 'abc' );
  });

  test.case = 'invalid option';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateRightOrNone({ src : 'abc', delimeter : 'a', x : 'a' });
  });

  test.case = 'changing of left option not allowed';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateRightOrNone({ src : 'abc', delimeter : 'a', left : 0 });
  });

}

//

function strIsolateRightOrAll( test )
{
  var got, expected;

  test.case = 'cut in most right position';

  /* nothing */

  got = _.strIsolateRightOrAll( '', '' );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /* nothing */

  got = _.strIsolateRightOrAll( '', 'b' );
  expected = [ '', undefined, '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrAll( 'ahpc', 'h' );
  expected = [ 'a', 'h', 'pc' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrAll( 'ahpc', 'c' );
  expected = [ 'ahp', 'c', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrAll( 'appbb', 'b' );
  expected = [ 'appb', 'b', '' ];
  test.identical( got, expected );

  /**/

  got = _.strIsolateRightOrAll( 'jj', 'a' );
  expected = [ '', undefined, 'jj' ];
  test.identical( got, expected );

  /* */

  got = _.strIsolateRightOrAll( 'acbca', [ 'a', 'c' ], 1 );
  expected = [ 'acbc', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'acbca', [ 'a', 'c' ], 2 );
  expected = [ 'acb', 'c', 'a' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  /* - */

  test.open( 'abaaca with strings' )

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 0 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 1 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 2 );
  expected = [ 'aba', 'a', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 3 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 4 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', 'a', 5 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  test.close( 'abaaca with strings' )
  test.open( 'abababa with strings' )

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', 'aba', 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  test.close( 'abababa with strings' )

  /* - */

  test.open( 'abaaca with regexp' )

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 0 );
  expected = [ 'abaaca', undefined, '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 1 );
  expected = [ 'abaac', 'a', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 2 );
  expected = [ 'ab', 'aa', 'ca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 3 );
  expected = [ 'ab', 'a', 'aca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 4 );
  expected = [ '', 'a', 'baaca' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abaaca', /a+/, 5 );
  expected = [ '', undefined, 'abaaca' ];
  test.identical( got, expected );

  test.close( 'abaaca with regexp' )
  test.open( 'abababa with regexp' )

  got = _.strIsolateRightOrAll( 'abababa', /aba/, 1 );
  expected = [ 'abab', 'aba', '' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', /aba/, 2 );
  expected = [ 'ab', 'aba', 'ba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', /aba/, 3 );
  expected = [ '', 'aba', 'baba' ];
  test.identical( got, expected );

  got = _.strIsolateRightOrAll( 'abababa', /aba/, 4 );
  expected = [ '', undefined, 'abababa' ];
  test.identical( got, expected );

  test.close( 'abababa with regexp' )

  /* */

  if( !Config.debug )
  return;

  test.case = 'delimeter must be a String';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateRightOrAll( 'jj', 1 );
  })

  test.case = 'source must be a String';
  test.shouldThrowErrorSync( function()
  {
    _.strIsolateRightOrAll( 1, '1' );
  })

}

//

function strIsolateInsideOrNone( test )
{

  /* - */

  test.open( 'string' );

  /* - */

  test.case = 'begin';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'aa', 'bb' );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'bb', 'cc' );
  test.identical( got, expected );

  test.case = 'end';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'cc', 'dd' );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'cc', '' );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'aa', 'bb' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'cc' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'bb' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'dd' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ], [ '', '' ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'cc' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'bb' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'dd' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ], [ '', 'cc', '_cc_bb_bb_aa_aa', '', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ], [ '', '' ] );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [], [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'dd', 'dd' );
  test.identical( got, expected );

  test.case = 'not found begin';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', 'dd', '' );
  test.identical( got, expected );

  test.case = 'not found end';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', '', 'dd' );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', '', '' );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrNone( '', '', '' );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( '', 'aa', 'bb' );
  test.identical( got, expected );

  /* - */

  test.close( 'string' );
  test.open( 'regexp' );

  /* */

  test.case = 'begin smeared';

  var expected = [ 'x', 'aa', 'x_xaax_xbbx_xb', 'bx', '_xccx_xccx' ];
  var got = _.strIsolateInsideOrNone( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /a\w/, /b\w/ );
  test.identical( got, expected );

  test.case = 'middle smeared';

  var expected = [ 'xaax_xaax_x', 'bb', 'x_xbbx_xccx_xc', 'cx', '' ];
  var got = _.strIsolateInsideOrNone( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /b\w/, /c\w/ );
  test.identical( got, expected );

  test.case = 'end smeared';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /c\w/, /d\w/ );
  test.identical( got, expected );
  var expected = [ 'xaax_xaax_xbbx_xbbx_x', 'cc', 'x_xccx', '', '' ];
  var got = _.strIsolateInsideOrNone( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /c\w/, new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'begin';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /a+/, /b+/ );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /b+/, /c+/ );
  test.identical( got, expected );

  test.case = 'end';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /c+/, /d+/ );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /c+/, new RegExp( '' ) );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /a+/, /b+/ ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /b+/, /a+/ ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /b+/, /c+/ ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /c+/, /b+/ ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /c+/, /d+/ ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ], [ /d+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ], [ new RegExp( '' ), new RegExp( '' ) ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, /b+/ ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /a+/ ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /c+/ ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /b+/ ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /d+/ ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ], [ /d+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ], [ '', 'cc', '_cc_bb_bb_aa_aa', '', '' ] ];
  var got = _.strIsolateInsideOrNone( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ], [ new RegExp( '' ), new RegExp( '' ) ] );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', [], [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /d+/, /d+/ );
  test.identical( got, expected );

  test.case = 'not found begin';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', /d+/, new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'not found end';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ), /d+/ );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrNone( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ), new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrNone( '', new RegExp( '' ), new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = undefined;
  var got = _.strIsolateInsideOrNone( '', /a+/, /b+/ );
  test.identical( got, expected );

  /* - */

  test.close( 'regexp' );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strIsolateInsideOrNone() );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( '', '', '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( 1, '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( '123', 1, '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrNone( '123', '', 3 ) );

}

//

function strIsolateInsideOrAll( test )
{

  /* - */

  test.open( 'string' );

  /* - */

  test.case = 'begin';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'aa', 'bb' );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'bb', 'cc' );
  test.identical( got, expected );

  test.case = 'end';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'cc', 'dd' );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'cc', '' );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'aa', 'bb' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'bb', 'cc' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'bb' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'cc', 'dd' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ 'dd', 'cc' ], [ '', '' ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'aa', 'bb' ], [ 'aa', 'bb' ] );
  test.identical( got, expected );
  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'aa' ], [ 'bb', 'aa' ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'bb', 'cc' ], [ 'bb', 'cc' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'bb' ], [ 'cc', 'bb' ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'cc', 'dd' ], [ 'cc', 'dd' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ], [ 'dd', 'cc' ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ], [ '', 'cc', '_cc_bb_bb_aa_aa', '', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ 'dd', 'cc' ], [ '', '' ] );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [], [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'dd', 'dd' );
  test.identical( got, expected );

  test.case = 'not found begin';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', 'dd', '' );
  test.identical( got, expected );

  test.case = 'not found end';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', '', 'dd' );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', '', '' );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrAll( '', '', '' );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrAll( '', 'aa', 'bb' );
  test.identical( got, expected );

  /* - */

  test.close( 'string' );
  test.open( 'regexp' );

  /* */

  test.case = 'begin smeared';

  var expected = [ 'x', 'aa', 'x_xaax_xbbx_xb', 'bx', '_xccx_xccx' ];
  var got = _.strIsolateInsideOrAll( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /a\w/, /b\w/ );
  test.identical( got, expected );

  test.case = 'middle smeared';

  var expected = [ 'xaax_xaax_x', 'bb', 'x_xbbx_xccx_xc', 'cx', '' ];
  var got = _.strIsolateInsideOrAll( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /b\w/, /c\w/ );
  test.identical( got, expected );

  test.case = 'end smeared';

  var expected = [ 'xaax_xaax_xbbx_xbbx_x', 'cc', 'x_xccx', '', '' ];
  var got = _.strIsolateInsideOrAll( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /c\w/, /d\w/ );
  test.identical( got, expected );
  var expected = [ 'xaax_xaax_xbbx_xbbx_x', 'cc', 'x_xccx', '', '' ];
  var got = _.strIsolateInsideOrAll( 'xaax_xaax_xbbx_xbbx_xccx_xccx', /c\w/, new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'begin';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /a+/, /b+/ );
  test.identical( got, expected );

  test.case = 'middle';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /b+/, /c+/ );
  test.identical( got, expected );

  test.case = 'end';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /c+/, /d+/ );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /c+/, new RegExp( '' ) );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry';

  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /a+/, /b+/ ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /b+/, /a+/ ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry';

  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /b+/, /c+/ ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /c+/, /b+/ ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry';

  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /c+/, /d+/ ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ], [ /d+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [ /d+/, /c+/ ], [ new RegExp( '' ), new RegExp( '' ) ] );
  test.identical( got, expected );

  /* */

  test.case = 'begin, several entry, several sources';

  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /a+/, /b+/ ], [ /a+/, /b+/ ] );
  test.identical( got, expected );
  var expected = [ [ '', 'aa', '_aa_bb_', 'bb', '_cc_cc' ], [ 'cc_cc_', 'bb', '_bb_aa_', 'aa', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /a+/ ], [ /b+/, /a+/ ] );
  test.identical( got, expected );

  test.case = 'middle, several entry, several sources';

  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /b+/, /c+/ ], [ /b+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_', 'bb', '_bb_cc_', 'cc', '' ], [ '', 'cc', '_cc_bb_', 'bb', '_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /b+/ ], [ /c+/, /b+/ ] );
  test.identical( got, expected );

  test.case = 'end, several entry, several sources';

  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /c+/, /d+/ ], [ /c+/, /d+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_', 'cc', '' ], [ '', 'cc', '_', 'cc', '_bb_bb_aa_aa' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ], [ /d+/, /c+/ ] );
  test.identical( got, expected );
  var expected = [ [ 'aa_aa_bb_bb_', 'cc', '_cc', '', '' ], [ '', 'cc', '_cc_bb_bb_aa_aa', '', '' ] ];
  var got = _.strIsolateInsideOrAll( [ 'aa_aa_bb_bb_cc_cc', 'cc_cc_bb_bb_aa_aa' ], [ /d+/, /c+/ ], [ new RegExp( '' ), new RegExp( '' ) ] );
  test.identical( got, expected );

  /* */

  test.case = 'no entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', [], [] );
  test.identical( got, expected );

  test.case = 'not found';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /d+/, /d+/ );
  test.identical( got, expected );

  test.case = 'not found begin';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', /d+/, new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'not found end';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ), /d+/ );
  test.identical( got, expected );

  test.case = 'empty entry';

  var expected = [ '', '', 'aa_aa_bb_bb_cc_cc', '', '' ];
  var got = _.strIsolateInsideOrAll( 'aa_aa_bb_bb_cc_cc', new RegExp( '' ), new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty entry, empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrAll( '', new RegExp( '' ), new RegExp( '' ) );
  test.identical( got, expected );

  test.case = 'empty src';

  var expected = [ '', '', '', '', '' ];
  var got = _.strIsolateInsideOrAll( '', /a+/, /b+/ );
  test.identical( got, expected );

  /* - */

  test.close( 'regexp' );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strIsolateInsideOrAll() );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( '', '', '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( 1, '', '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( '123', 1, '' ) );
  test.shouldThrowError( () => _.strIsolateInsideOrAll( '123', '', 3 ) );

}

//

function strBeginOf( test )
{
  var got, expected;

  /**/

  test.case = 'strBeginOf';

  /**/

  got = _.strBeginOf( 'abc', '' );
  expected = '';
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', 'c' );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', 'bc' );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', ' c' );
  expected = false;
  test.identical( got, expected )

  /* end.length > src.length */

  got = _.strBeginOf( 'abc', 'abcd' );
  expected = false;
  test.identical( got, expected )

  /* same length, not equal*/

  got = _.strBeginOf( 'abc', 'cba' );
  expected = false;
  test.identical( got, expected )

  /* equal */

  got = _.strBeginOf( 'abc', 'abc' );
  expected = 'abc';
  test.identical( got, expected )

  /* array */

  got = _.strBeginOf( 'abc', [] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', [ '' ] );
  expected = '';
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abccc', [ 'c', 'ccc' ] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', [ 'a', 'ab', 'abc' ] );
  expected = 'a';
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', [ 'x', 'y', 'c' ] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strBeginOf( 'abc', [ 'x', 'y', 'z' ] );
  expected = false;
  test.identical( got, expected )

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strBeginOf( 1, '' ) );
  test.shouldThrowError( () => _.strBeginOf( 'abc', 1 ) );
  test.shouldThrowError( () => _.strBeginOf() );
  test.shouldThrowError( () => _.strBeginOf( undefined, undefined ) );
  test.shouldThrowError( () => _.strBeginOf( null, null ) );
}

//

function strEndOf( test )
{
  var got, expected;

  //

  test.case = 'strEndOf';

  /**/

  got = _.strEndOf( 'abc', '' );
  expected = '';
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', 'a' );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', 'ab' );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', ' a' );
  expected = false;
  test.identical( got, expected )

  /* end.length > src.length */

  got = _.strEndOf( 'abc', 'abcd' );
  expected = false;
  test.identical( got, expected )

  /* same length */

  got = _.strEndOf( 'abc', 'cba' );
  expected = false;
  test.identical( got, expected )

  /* equal */

  got = _.strEndOf( 'abc', 'abc' );
  expected = 'abc';
  test.identical( got, expected )

  /* array */

  got = _.strEndOf( 'abc', [] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', [ '' ] );
  expected = '';
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abccc', [ 'a', 'ab' ] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', [ 'ab', 'abc' ] );
  expected = 'abc';
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', [ 'x', 'y', 'a' ] );
  expected = false;
  test.identical( got, expected )

  /**/

  got = _.strEndOf( 'abc', [ 'x', 'y', 'z' ] );
  expected = false;
  test.identical( got, expected )

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strEndOf( 1, '' ) );
  test.shouldThrowError( () => _.strEndOf( 'abc', 1 ) );
  test.shouldThrowError( () => _.strEndOf() );
  test.shouldThrowError( () => _.strEndOf( undefined, undefined ) );
  test.shouldThrowError( () => _.strEndOf( null, null ) );

}

//

function strBegins( test )
{
  var got, expected;

  //

  test.case = 'strBegins';

  /**/

  got = _.strBegins( '', '' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'a', '' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'a', 'a' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'a', 'b' );
  expected = false;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', 'ab' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', 'abc' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', ' a' );
  expected = false;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', [ 'x', 'y', 'ab' ] );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', [ '' ] );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', [] );
  expected = false;
  test.identical( got, expected );

  /**/

  got = _.strBegins( 'abc', [ '1', 'b', 'a' ] );
  expected = true;
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strBegins( 1, '' ) );
  test.shouldThrowError( () => _.strBegins( 'a', 1 ) );
  test.shouldThrowError( () => _.strBegins( 'abc', [ 1, 'b', 'a' ] ) );

}

//

function strEnds( test )
{
  var got, expected;

  //

  test.case = 'strEnds';

  /**/

  got = _.strEnds( '', '' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'a', '' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'a', 'a' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'a', 'b' );
  expected = false;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', 'bc' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', 'abc' );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', [ 'x', 'y', 'bc' ] );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', [ '' ] );
  expected = true;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', [] );
  expected = false;
  test.identical( got, expected );

  /**/

  got = _.strEnds( 'abc', [ '1', 'b', 'c' ] );
  expected = true;
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strEnds( 1, '' ) );
  test.shouldThrowError( () => _.strEnds( 'a', 1 ) );
}

//

var Self =
{

  name : 'Tools/base/l1/String',
  silencing : 1,

  tests :
  {

    strLeft,
    strRight,

    strEquivalent,
    strsEquivalent,
    strsEquivalentAll,
    strsEquivalentAny,
    strsEquivalentNone,

    strBeginOf,
    strEndOf,
    strBegins,
    strEnds,

    // converter

    strShort,
    strPrimitive,

    strIsolateLeftOrNone,
    strIsolateLeftOrAll,
    strIsolateRightOrNone,
    strIsolateRightOrAll,
    strIsolateInsideOrNone,
    strIsolateInsideOrAll,

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/String.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, String_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file String_test_s

( function Time_test_s() { // == begin of file Time_test_s
function Time_test_s_naked() {
( function _Time_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _ = wTools;

// --
// tests
// --

function timeReadyJoin( test )
{
  let t = 0;
  let con = _testerGlobal_.wTools.Consequence();

  function r1()
  {
    t += 1;
    console.log( arguments );

    if( t === 1 )
    test.equivalent( arguments, [ 'arg1', 'arg2' ] );
    else if( t === 2 )
    test.equivalent( arguments, [ 'arg1', 'arg3', 'arg4' ] );
    else if( t === 3 )
    test.equivalent( arguments, [ 'arg5', 'arg6', 'arg7', 'arg8' ] );
    else if( t === 4 )
    test.equivalent( arguments, [ 'arg5', 'arg6', 'arg9' ] );

    if( t === 4 )
    con.take( t );

    return arguments;
  }

  let f1 = _.timeReadyJoin( undefined, r1, [ 'arg1' ] );
  f1( 'arg2' );
  f1( 'arg3', 'arg4' );

  let f2 = _.timeReadyJoin( undefined, r1, [ 'arg5', 'arg6' ] );
  f2( 'arg7', 'arg8' );
  f2( 'arg9' );

  return con;
}

// --
// declare
// --

var Self =
{

  name : 'Tools/base/l1/Time',
  silencing : 1,

  tests :
  {

    timeReadyJoin,

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Time.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Time_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Time_test_s

( function Typing_test_s() { // == begin of file Typing_test_s
function Typing_test_s_naked() {
( function _Typing_test_s_( ) {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

//

function objectLike( t )
{
  debugger;

  t.description = 'array-like entities should not overlap with array-like entities set';

  t.identical( _.objectLike( new ArrayBuffer( 10 ) ),false );
  t.identical( _.objectLike( new Float32Array( 10 ) ),false );
  t.identical( _.objectLike( new Int32Array( 10 ) ),false );
  t.identical( _.objectLike( new DataView( new ArrayBuffer( 10 ) ) ),false );
  t.identical( _.objectLike( new Array( 10 ) ),false );
  t.identical( _.objectLike( [ 1,2,3 ] ),false );
  t.identical( _.objectLike( new Map ),false );

  t.description = 'this entities are object-like';

  t.identical( _.objectLike( _global_ ),true );
  t.identical( _.objectLike( new Object() ),true );
  t.identical( _.objectLike( {} ),true );
  t.identical( _.objectLike( Object.create( null ) ),true );

  debugger;
}

//

function promiseIs( test )
{
  test.case = 'check if entity is a Promise';

  test.is( !_.promiseIs() );
  test.is( !_.promiseIs( {} ) );

  var _Promise = function Promise(){};
  test.is( !_.promiseIs( new _Promise() ) );

  test.is( _.promiseIs( Promise.resolve( 0 ) ) );

  var promise = new Promise( ( resolve, reject ) => { resolve( 0 ) } )
  test.is( _.promiseIs( promise ) );
}

//

function consequenceLike( test )
{
  test.case = 'check if entity is a consequenceLike';

  if( !_.consequenceLike )
  return test.identical( true,true );

  test.is( !_.consequenceLike() );
  test.is( !_.consequenceLike( {} ) );
  test.is( _.consequenceLike( Promise.resolve( 0 ) ) );

  var promise = new Promise( ( resolve, reject ) => { resolve( 0 ) } )
  test.is( _.consequenceLike( promise ) );

}

//

var Self =
{

  name : 'Tools/base/l1/Typing',
  silencing : 1,

  tests :
  {

    objectLike,
    promiseIs,
    consequenceLike

  }

}

//

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

} )( );
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/Typing.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l1.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, Typing_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file Typing_test_s

( function StringTools_test_s() { // == begin of file StringTools_test_s
function StringTools_test_s_naked() {
( function _StringTools_test_s_() {

'use strict';

if( typeof module !== 'undefined' )
{
  let _ = require( '../Layer2.s' );
  _.include( 'wTesting' );
}

var _global = _global_;
var _ = _global_.wTools;

// --
//
// --

function strRemoveBegin( test )
{
  var got, expected;

  /* - */

  test.case = 'returns string with removed occurrence from start';
  var got = _.strRemoveBegin( 'example','exa' );
  var expected = 'mple';
  test.identical( got, expected );

  test.case = 'returns original if no occurrence found';
  var got = _.strRemoveBegin( 'mple','exa' );
  var expected = 'mple';
  test.identical( got, expected );

  test.case = 'returns original if occurence is not at the beginning';
  var got = _.strRemoveBegin( 'example','ple' );
  var expected = 'example';
  test.identical( got, expected );

  /* - */

  test.case = 'other';

  /**/

  got = _.strRemoveBegin( '', '' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( '', 'x' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', 'a' );
  expected = 'bc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', 'ab' );
  expected = 'c';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', 'x' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', 'abc' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', '' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', [ 'a', 'b', 'c' ] );
  expected = 'bc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', [ 'b', 'c', 'a' ] );
  expected = 'bc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'aabbcc', [ 'a', 'b', 'c' ] );
  expected = 'abbcc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abcabc', [ 'a', 'b', 'c' ] );
  expected = 'bcabc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', [ '', 'a' ] );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'abc', [ 'abc', 'a' ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'abc', 'bca', 'cab' ], [ 'a', 'd' ] );
  expected = [ 'bc', 'bca', 'cab' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'abc', 'bca', 'cab' ], [ 'a', 'b', 'c' ] );
  expected = [ 'bc', 'ca', 'ab' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'abcabc', 'bcabca', 'cabcab' ], [ 'a', 'b', 'c' ] );
  expected = [ 'bcabc', 'cabca', 'abcab' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'abcabc', 'bcabca', 'cabcab' ], [ 'b', 'c', 'a' ] );
  expected = [ 'bcabc', 'cabca', 'abcab' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'a', 'b', 'c' ], [ 'x' ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ] );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'a', 'b', 'c' ], [ ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /* - */

  test.case = 'RegExp';

  /**/

  got = _.strRemoveBegin( 'example', /ex/ );
  expected = 'ample';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'example', 'examplex' ] , /ex\z/ );
  expected = [ 'example', 'examplex' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( [ 'example', '1example', 'example2', 'exam3ple' ], /\d/ );
  expected = [ 'example', 'example', 'example2', 'exam3ple' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'example', [ /am/ ] );
  expected = 'example';
  test.identical( got, expected );


  /**/

  got = _.strRemoveBegin( 'example', [ /ex/, /\w/ ] );
  expected = 'ample';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'example', [ /\w/, /ex/ ] );
  expected = 'xample';
  test.identical( got, expected );


  /**/

  got = _.strRemoveBegin( 'example', /[axe]/ );
  expected = 'xample';
  test.identical( got, expected );

  /**/

  got = _.strRemoveBegin( 'example', /\w{4}/ );
  expected = 'ple';
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strRemoveBegin( 1, '' ) );
  test.shouldThrowError( () => _.strRemoveBegin( 'a', 1 ) );
  test.shouldThrowError( () => _.strRemoveBegin() );
  test.shouldThrowError( () => _.strRemoveBegin( undefined, undefined ) );
  test.shouldThrowError( () => _.strRemoveBegin( null, null ) );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strRemoveBegin( 'abcd','a','a' );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strRemoveBegin( );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemoveBegin( 1,'2' );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemoveBegin( '1',2 );
  });

  test.case = 'second argument is array with wrong element';
  test.shouldThrowError( function()
  {
    _.strRemoveBegin( '1', [ ' a', 2 ] );
  });


}

//

function strRemoveEnd( test )
{
  var got, expected;

  test.case = 'returns string with removed occurrence from end';
  var got = _.strRemoveEnd( 'example','mple' );
  var expected = 'exa';
  test.identical( got, expected );

  test.case = 'returns original if no occurrence found ';
  var got = _.strRemoveEnd( 'example','' );
  var expected = 'example';
  test.identical( got, expected );

  test.case = 'returns original if occurrence is not at the end ';
  var got = _.strRemoveEnd( 'example','exa' );
  var expected = 'example';
  test.identical( got, expected );

  /* - */

  test.case = 'other';

  /**/

  got = _.strRemoveEnd( '', '' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( '', 'x' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', 'c' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', 'bc' );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', 'x' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', 'abc' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', '' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', [ 'a', 'b', 'c' ] );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', [ '', 'a' ] );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', [ '', 'c' ] );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'abc', [ 'abc', 'a' ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'abc', 'bca', 'cab' ], [ 'a', 'd' ] );
  expected = [ 'abc', 'bc', 'cab' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'abc', 'bca', 'cab' ], [ 'a', 'b', 'c' ] );
  expected = [ 'ab', 'bc', 'ca' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'a', 'b', 'c' ], [ 'x' ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ] );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'a', 'b', 'c' ], [ ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /* - */

  test.case = 'RegExp';

  /**/

  got = _.strRemoveEnd( 'example', /ple/ );
  expected = 'exam';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /le$/ );
  expected = 'examp';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /^le/ );
  expected = 'example';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /\d/ );
  expected = 'example';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /am/ );
  expected = 'example';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /[axe]/ );
  expected = 'exampl';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( 'example', /\w{4}/ );
  expected = 'exa';
  test.identical( got, expected );

  /**/

  got = _.strRemoveEnd( [ 'example', '1example', 'example2', 'exam3ple' ], [ /\d/, /e/, /^3/ ] );
  expected = [ 'exampl', '1exampl', 'example', 'exam3pl' ];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strRemoveEnd( 1, '' ) );
  test.shouldThrowError( () => _.strRemoveEnd( 'a', 1 ) );
  test.shouldThrowError( () => _.strRemoveEnd() );
  test.shouldThrowError( () => _.strRemoveEnd( undefined, undefined ) );
  test.shouldThrowError( () => _.strRemoveEnd( null, null ) );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strRemoveEnd( 'one','two','three' );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strRemoveEnd( );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemoveEnd( 1,'second' );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemoveEnd( 'first',2 );
  });

}

//

function strRemove( test )
{
  var got, expected;

  test.case = 'returns string with removed occurrence at the beggining';
  var got = _.strRemove( 'One example','On' );
  var expected = 'e example';
  test.identical( got, expected );

  test.case = 'returns string with removed occurrence at the end';
  var got = _.strRemove( 'One example','ple' );
  var expected = 'One exam';
  test.identical( got, expected );

  test.case = 'returns string with removed occurrence in the middle';
  var got = _.strRemove( 'One example','ne examp' );
  var expected = 'Ole';
  test.identical( got, expected );

  test.case = 'returns string with removed first occurrence';
  var got = _.strRemove( 'One example','e' );
  var expected = 'On example';
  test.identical( got, expected );

  test.case = 'returns original if no occurrence found ';
  var got = _.strRemove( 'example','y' );
  var expected = 'example';
  test.identical( got, expected );

  test.case = 'returns original if no occurrence found ';
  var got = _.strRemove( 'example','ma' );
  var expected = 'example';
  test.identical( got, expected );

  /* - */

  test.case = 'other';

  /**/

  got = _.strRemove( '', '' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemove( '', 'x' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'cacbc', 'c' );
  expected = 'acbc';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abca', 'bc' );
  expected = 'aa';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abc', 'x' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abcabc', 'abc' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abc', '' );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abc', [ 'a', 'b', 'c' ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'bcabca', [ '', 'a' ] );
  expected = 'bcbca';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'abc', [ 'abc', 'a' ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strRemove( [ 'abc', 'bca', 'cab' ], [ 'a', 'd' ] );
  expected = [ 'bc', 'bc', 'cb' ];
  test.identical( got, expected );

  /**/

  got = _.strRemove( [ 'abc', 'bca', 'cab' ], [ 'a', 'b', 'c' ] );
  expected = [ '', '', '' ];
  test.identical( got, expected );

  /**/

  got = _.strRemove( [ 'a', 'b', 'c' ], [ 'x' ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /**/

  got = _.strRemove( [ 'a', 'b', 'c' ], [ ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  /* - */

  test.case = 'RegExp';

  /**/

  got = _.strRemove( 'One example', /e/ );
  expected = 'On example';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'le example', /le$/ );
  expected = 'le examp';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'example', /^le/ );
  expected = 'example';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'example', /\d/ );
  expected = 'example';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'ex1am2pl3e4', /\d/ );
  expected = 'exam2pl3e4';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'example', /[axe]/ );
  expected = 'xample';
  test.identical( got, expected );

  /**/

  got = _.strRemove( 'example', /[a-z]/ );
  expected = 'xample';
  test.identical( got, expected );

  /**/

  got = _.strRemove( [ 'example', '1example', 'example2', 'xam3ple' ], [ /\d/, /e/, /^3/ ] );
  expected = [ 'xample', 'xample', 'xample', 'xampl' ];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strRemove( 1, '' ) );
  test.shouldThrowError( () => _.strRemove( 'a', 1 ) );
  test.shouldThrowError( () => _.strRemove() );
  test.shouldThrowError( () => _.strRemove( undefined, undefined ) );
  test.shouldThrowError( () => _.strRemove( null, null ) );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strRemove( 'one','two','three' );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strRemove( );
  });

  test.case = 'first argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemove( 1,'second' );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowError( function()
  {
    _.strRemove( 'first',2 );
  });

}

//

function strReplaceBegin( test )
{
  /**/

  var got, expected;

  got = _.strReplaceBegin( '', '', '' );
  expected = '';
  test.identical( got, expected );

  got = _.strReplaceBegin( '', '', 'a' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplaceBegin( 'a', 'a', 'b' );
  expected = 'b';
  test.identical( got, expected );

  got = _.strReplaceBegin( 'a', 'x', 'b' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplaceBegin( 'abc', 'ab', 'c' );
  expected = 'cc';
  test.identical( got, expected );

  got = _.strReplaceBegin( 'abc', '', 'c' );
  expected = 'cabc';
  test.identical( got, expected );

  got = _.strReplaceBegin( [], '', '' );
  expected = [];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'a', 'b', 'c' ], 'a', 'c' );
  expected = [ 'c', 'b', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ], 'c' );
  expected = [ 'c', 'c', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'x', 'y', 'z' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'aa', 'bb', 'cc' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'xa', 'yb', 'zc' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'aa', 'bb', 'cc' ], [ 'y', 'z', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'aa', 'bb', 'zc' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ], 'c' );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'a', 'ab', 'ac' ], 'a', [ 'x', 'y', 'z' ] );
  expected = [ 'x', 'xb', 'xc' ];
  test.identical( got, expected );  /* - */

  /**/

  test.case = 'RegExp';

  /**/

  got = _.strReplaceBegin( 'example', /exa/, 'si' );
  expected = 'simple';
  test.identical( got, expected );

  got = _.strReplaceBegin( 'example', /ex$/, 'no' );
  expected = 'example';
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'example', 'lexical' ], [ /^le/, /ex$/, /\w{3}/ ], [ 'a', 'b', 'si' ]  );
  expected = [ 'simple', 'axical' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'example', 'lexical' ], [ /^le/, /ex$/, /\w{3}/ ], 'si' );
  expected = [ 'simple', 'sixical' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'example1', '3example', 'exam4ple' ], /\d/, '2' );
  expected = [ 'example1', '2example', 'exam4ple' ];
  test.identical( got, expected );

  got = _.strReplaceBegin( [ 'example', '1example', 'example2', 'exam3ple' ], [ /\d/, /e/, /^3/ ], [ '3', '2', '1' ]  );
  expected = [ '2xample', '3example', '2xample2', '2xam3ple' ];
  test.identical( got, expected );

  /**/

  test.case = 'Null';

  /**/

  got = _.strReplaceBegin( null, /exa/, 'si' );
  expected = [];
  test.identical( got, expected );

  got = _.strReplaceBegin( 'example', null, 'no' );
  expected = 'example';
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strReplaceBegin() );
  test.shouldThrowError( () => _.strReplaceBegin( 1, '', '' ) );
  test.shouldThrowError( () => _.strReplaceBegin( '' ) );
  test.shouldThrowError( () => _.strReplaceBegin( 1, '', '', '' ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'a', 1, '' ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'a', 'a', 1 ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'a', [ 'x', 1 ], 'a' ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'a', [ 'b', 'a' ], [ 'x', 1 ] ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'a', [ 'a' ], [ 'x', '1' ] ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'string', 'begin', null ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'string', 'begin', undefined ) );
  test.shouldThrowError( () => _.strReplaceBegin( 'string', undefined, 'ins' ) );
  test.shouldThrowError( () => _.strReplaceBegin( undefined, 'begin', 'ins' ) );
}

//

function strReplaceEnd( test )
{
  /**/

  var got, expected;

  got = _.strReplaceEnd( '', '', '' );
  expected = '';
  test.identical( got, expected );

  got = _.strReplaceEnd( '', '', 'a' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplaceEnd( 'a', 'a', 'b' );
  expected = 'b';
  test.identical( got, expected );

  got = _.strReplaceEnd( 'a', 'x', 'b' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplaceEnd( 'abc', 'bc', 'c' );
  expected = 'ac';
  test.identical( got, expected );

  got = _.strReplaceEnd( 'abc', '', 'c' );
  expected = 'abcc';
  test.identical( got, expected );

  got = _.strReplaceEnd( [], '', '' );
  expected = [];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'a', 'b', 'c' ], 'a', 'c' );
  expected = [ 'c', 'b', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ], 'c' );
  expected = [ 'c', 'c', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'x', 'y', 'z' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'aa', 'bb', 'cc' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'ax', 'by', 'cz' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'aa', 'bb', 'cc' ], [ 'y', 'z', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'aa', 'bb', 'cz' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ], 'c' );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'a', 'ab', 'ca' ], 'a', [ 'x', 'y', 'z' ] );
  expected = [ 'x', 'ab', 'cx' ];
  test.identical( got, expected );

  /**/

  test.case = 'RegExp';

  /**/

  got = _.strReplaceEnd( 'example', /ple/, 'en' );
  expected = 'examen';
  test.identical( got, expected );

  got = _.strReplaceEnd( 'example', /^le/, 'no' );
  expected = 'example';
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'example', 'lexical' ], [ /^le/, /ex$/, /\w{3}/ ], [ 'a', 'b', 'en' ]  );
  expected = [ 'examen', 'lexien' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'example', 'lexical' ], [ /al$/, /ex$/, /\w{3}/ ], 'en' );
  expected = [ 'examen', 'lexien' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'example1', '3example', 'exam4ple' ], /\d/, '2' );
  expected = [ 'example2', '3example', 'exam4ple' ];
  test.identical( got, expected );

  got = _.strReplaceEnd( [ 'example', '1example', 'example2', 'exam2ple' ], [ /\d/, /e/, /^3/ ], [ '3', '2', '1' ]  );
  expected = [ 'exampl2', '1exampl2', 'example3', 'exam2pl2' ];
  test.identical( got, expected );

  /**/

  test.case = 'Null';

  /**/

  got = _.strReplaceEnd( null, /le/, 'si' );
  expected = [];
  test.identical( got, expected );

  got = _.strReplaceEnd( 'example', null, 'no' );
  expected = 'example';
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strReplaceEnd() );
  test.shouldThrowError( () => _.strReplaceEnd( 1, '', '' ) );
  test.shouldThrowError( () => _.strReplaceEnd( '' ) );
  test.shouldThrowError( () => _.strReplaceEnd( 1, '', '', '' ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'a', 1, '' ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'a', 'a', 1 ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'a', [ 'x', 1 ], 'a' ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'a', [ 'a' ], [ 1 ] ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'a', [ 'b', 'c' ], [ 'c' ] ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'string', 'end', null ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'string', 'end', undefined ) );
  test.shouldThrowError( () => _.strReplaceEnd( 'string', undefined, 'ins' ) );
  test.shouldThrowError( () => _.strReplaceEnd( undefined, 'end', 'ins' ) );
}

//

function strReplace( test )
{
  /**/

  var got, expected;

  got = _.strReplace( '', '', '' );
  expected = '';
  test.identical( got, expected );

  got = _.strReplace( '', '', 'a' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplace( 'a', 'a', 'b' );
  expected = 'b';
  test.identical( got, expected );

  got = _.strReplace( 'a', 'x', 'b' );
  expected = 'a';
  test.identical( got, expected );

  got = _.strReplace( 'bcabcabc', 'bc', 'c' );
  expected = 'cabcabc';
  test.identical( got, expected );

  got = _.strReplace( [], '', '' );
  expected = [];
  test.identical( got, expected );

  got = _.strReplace( [ 'aaa', 'ba', 'c' ], 'a', 'c' );
  expected = [ 'caa', 'bc', 'c' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'abc', 'cab', 'cba' ], [ 'a', 'b', 'c' ], [ 'c', 'c', 'c' ] );
  expected = [ 'ccc', 'ccc', 'ccc' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'a', 'b', 'c' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'x', 'y', 'z' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'ab', 'bc', 'ca' ], [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'xy', 'yz', 'zx' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'aa', 'bb', 'cc' ], [ 'y', 'z', 'c' ], [ 'x', 'y', 'z' ] );
  expected = [ 'aa', 'bb', 'zc' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'a', 'b', 'c' ], [ 'x', 'y', 'z' ], [ '1', '2', '3' ] );
  expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'a', 'bab', 'ca' ], 'a', 'x' );
  expected = [ 'x', 'bxb', 'cx' ];
  test.identical( got, expected );

  /**/

  test.case = 'RegExp';

  /**/

  got = _.strReplace( 'example', /ple/, 'en' );
  expected = 'examen';
  test.identical( got, expected );

  got = _.strReplace( 'example', /^le/, 'no' );
  expected = 'example';
  test.identical( got, expected );

  got = _.strReplace( [ 'example', 'lex11ical' ], [ /^le/, /ex$/, /\d{2}/ ], [ 'a', 'b', 'en' ]  );
  expected = [ 'example', 'axenical' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'example', 'lexical' ], [ /al$/, /^ex/ ], [ '1', '2' ] );
  expected = [ '2ample', 'lexic1' ];
  test.identical( got, expected );

  got = _.strReplace( [ 'example1', '3example', 'exam4ple' ], /\d/, '2' );
  expected = [ 'example2', '2example', 'exam2ple' ];
  test.identical( got, expected );

  got = _.strReplace( [ '3example', '1example', 'example2', 'exam2ple' ], [ /\d/, /e/, /^3/ ], [ '3', '2', '1' ]  );
  expected = [ '12xample', '12xample', '2xample3', '2xam3ple' ];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strReplace() );
  test.shouldThrowError( () => _.strReplace( 1, '', '' ) );
  test.shouldThrowError( () => _.strReplace( '' ) );
  test.shouldThrowError( () => _.strReplace( 1, '', '', '' ) );
  test.shouldThrowError( () => _.strReplace( 'a', 1, '' ) );
  test.shouldThrowError( () => _.strReplace( 'a', 'a', 1 ) );
  test.shouldThrowError( () => _.strReplace( 'a', [ 'x', 1 ], 'a' ) );
  test.shouldThrowError( () => _.strReplace( 'a', [ 'a' ], [ 1 ] ) );
  test.shouldThrowError( () => _.strReplace( 'a', [ 'b', 'c' ], [ 'c' ] ) );
  test.shouldThrowError( () => _.strReplace( 'string', 'sub', null ) );
  test.shouldThrowError( () => _.strReplace( 'string', 'sub', undefined ) );
  test.shouldThrowError( () => _.strReplace( 'string', null, 'ins' ) );
  test.shouldThrowError( () => _.strReplace( 'string', undefined, 'ins' ) );
  test.shouldThrowError( () => _.strReplace( null, 'sub', 'ins' ) );
  test.shouldThrowError( () => _.strReplace( undefined, 'sub', 'ins' ) );
}

//

function strPrependOnce( test )
{
  var got, expected;

  /* - */

  test.case = 'strPrependOnce';

  /**/

  got = _.strPrependOnce( '', '' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( '', 'a' );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'ab', 'a' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'ab', 'ab' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'ab', 'x' );
  expected = 'xab';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'ab', '' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'morning', 'Good ' );
  expected = 'Good morning';
  test.identical( got, expected );

  /**/

  got = _.strPrependOnce( 'Good morning', 'Good ' );
  expected = 'Good morning';
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strPrependOnce() );
  test.shouldThrowError( () => _.strPrependOnce( null, '' ) );
  test.shouldThrowError( () => _.strPrependOnce( '', null ) );
  test.shouldThrowError( () => _.strPrependOnce( NaN, '' ) );
  test.shouldThrowError( () => _.strPrependOnce( '', NaN ) );
  test.shouldThrowError( () => _.strPrependOnce( 3, '' ) );
  test.shouldThrowError( () => _.strPrependOnce( '', 3 ) );
  test.shouldThrowError( () => _.strPrependOnce( [], '' ) );
  test.shouldThrowError( () => _.strPrependOnce( '', [] ) );

}

//

function strAppendOnce( test )
{
  var got, expected;

  /* - */

  test.case = 'strAppendOnce';

  /**/

  got = _.strAppendOnce( '', '' );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( '', 'a' );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'ab', 'a' );
  expected = 'aba';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'ab', 'ab' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'ab', 'x' );
  expected = 'abx';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'ab', '' );
  expected = 'ab';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'Good ', 'morning' );
  expected = 'Good morning';
  test.identical( got, expected );

  /**/

  got = _.strAppendOnce( 'Good morning', 'morning' );
  expected = 'Good morning';
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.shouldThrowError( () => _.strAppendOnce() );
  test.shouldThrowError( () => _.strAppendOnce( null, '' ) );
  test.shouldThrowError( () => _.strAppendOnce( '', null ) );
  test.shouldThrowError( () => _.strAppendOnce( NaN, '' ) );
  test.shouldThrowError( () => _.strAppendOnce( '', NaN ) );
  test.shouldThrowError( () => _.strAppendOnce( 3, '' ) );
  test.shouldThrowError( () => _.strAppendOnce( '', 3 ) );
  test.shouldThrowError( () => _.strAppendOnce( [], '' ) );
  test.shouldThrowError( () => _.strAppendOnce( '', [] ) );

}

// --
//
// --

function strForRange( test )
{

  test.case = 'returns string representing the range of numbers';
  var got = _.strForRange( [ 1, 10 ] );
  var expected = '[ 1..10 ]';
  test.identical( got, expected );

  test.case = 'returns string representing the range of symbols';
  var got = _.strForRange( [ 'a', 'z' ] );
  var expected = '[ a..z ]';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strForRange( );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strForRange( 'wrong argument' );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strForRange( [ 1, 10 ], 'redundant argument' );
  } );

};

//

function strCapitalize( test )
{

  test.case = 'first letter is upper case';
  var got = _.strCapitalize( 'object' );
  var expected = 'Object';
  test.identical( got, expected );

  test.case = 'single word';
  var got = _.strCapitalize( 'one' );
  var expected = 'One';
  test.identical( got, expected );

  test.case = 'two words';
  var got = _.strCapitalize( 'one two' );
  var expected = 'One two';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments length';
  test.shouldThrowError( function()
  {
    _.strCapitalize( 'first','wrond argument' );
  });

  test.case = 'wrong type of argument';
  test.shouldThrowError( function()
  {
    _.strCapitalize( 777 );
  });

  test.case = 'no argument provided';
  test.shouldThrowError( function()
  {
    _.strCapitalize();
  });

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strCapitalize( );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strCapitalize( 33 );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strCapitalize( 'object', 'redundant argument' );
  } );

}

//

function strIndentation( test )
{
  var got, expected;

  /* - */

  test.case = 'single line';

  /**/

  got = _.strIndentation( '', '_' );
  expected = '_';
  test.identical( got, expected );

  /* no new lines, returns tab + source */

  got = _.strIndentation( 'abc', '_' );
  expected = '_abc';
  test.identical( got, expected );

  /* - */

  test.case = 'multiline';

  /**/

  got = _.strIndentation( 'a\nb', '_' );
  expected = '_a\n_b';
  test.identical( got, expected );

  /* tab before first and each new line */

  got = _.strIndentation( '\na\nb\nc', '_' );
  expected = '_\n_a\n_b\n_c';
  test.identical( got, expected );

  /* tabs count = new lines count + 1 for first line */

  got = _.strIndentation( '\n\n\n', '_' );
  expected = '_\n_\n_\n_';
  test.identical( got, expected );

  /**/

  got = _.strIndentation( 'a\nb\nc','\t' );
  expected = '\ta\n\tb\n\tc';
  test.identical( got, expected );

  /* - */

  test.case = 'array';

  /**/

  got = _.strIndentation( [ 'a', 'b', 'c' ],'_' );
  expected = '_a\n_b\n_c';
  test.identical( got, expected );

  /* join array to string */

  var arr = [ 'a\nb', 'b\nc', 'c\nd' ];
  got = _.strIndentation( arr.join( '\n' ), '_' );
  expected = '_a\n_b\n_b\n_c\n_c\n_d';
  test.identical( got, expected );


  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strIndentation( 'one','two','three' );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strIndentation( );
  });

  test.case = 'first argument type is wrong';
  test.shouldThrowError( function()
  {
    _.strIndentation( 123,'second' );
  });

  test.case = 'second argument type is wrong';
  test.shouldThrowError( function()
  {
    _.strIndentation( 'first', 321 );
  });

}

//

function strSplitsCoupledGroup( test )
{

  test.open( 'trivial' );

  test.case = 'empty';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'middle';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', 'cc', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', 'cc', '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'left';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ '>>', 'bb', 'cc', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ [ '>>', 'bb', 'cc', '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'right';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', 'cc', '<<-' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', 'cc', '<<-' ] ];
  test.identical( got, expected );

  /* - */

  test.close( 'trivial' );
  test.open( 'several' );

  /* - */

  test.case = 'empty';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', '<<-', '>>', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', '<<-' ], [ '>>', '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'middle';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', 'cc', '<<-', 'dd', '>>', 'ee', 'ff', '<<-', 'gg' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', 'cc', '<<-' ], 'dd', [ '>>', 'ee', 'ff', '<<-' ], 'gg' ];
  test.identical( got, expected );

  test.case = 'left';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ '>>', 'bb', 'cc', '<<-', '>>', 'ee', 'ff', '<<-', 'gg' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ [ '>>', 'bb', 'cc', '<<-' ], [ '>>', 'ee', 'ff', '<<-' ], 'gg' ];
  test.identical( got, expected );

  test.case = 'right';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', 'cc', '<<-', '>>', 'ee', 'ff', '<<-' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', 'cc', '<<-' ], [ '>>', 'ee', 'ff', '<<-' ] ];
  test.identical( got, expected );

  test.close( 'several' );
  test.open( 'recursion' );

  /* - */

  test.case = 'empty';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', '>>', '<<=', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', [ '>>', '<<=' ], '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'middle';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', '>>', 'cc', 'dd', '<<=', 'ee', '<<-', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', [ '>>', 'cc', 'dd', '<<=' ], 'ee', '<<-' ], 'ff' ];
  test.identical( got, expected );

  test.case = 'left';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ '>>', '>>', 'cc', 'dd', '<<=', 'ee', '<<-', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ [ '>>', [ '>>', 'cc', 'dd', '<<=' ], 'ee', '<<-' ], 'ff' ];
  test.identical( got, expected );

  test.case = 'right';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', 'bb', '>>', 'cc', 'dd', '<<=', '<<-'  ],
    prefix : '>>',
    postfix : /^<</,
  });
  var expected = [ 'aa', [ '>>', 'bb', [ '>>', 'cc', 'dd', '<<=' ], '<<-' ] ];
  test.identical( got, expected );

  test.close( 'recursion' );
  test.open( 'uncoupled prefix' );

  /* - */

  test.case = 'empty';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', '>>', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPrefix : 1,
  });
  var expected = [ 'aa', '>>', [ '>>', '<<-' ], 'dd' ];
  test.identical( got, expected );

  test.case = 'middle';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', 'bb', '>>', 'cc', '>>', 'dd', '<<=', 'ee', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPrefix : 1,
  });
  var expected = [ 'aa', 'bb', '>>', 'cc', [ '>>', 'dd', '<<=' ], 'ee', 'ff' ];
  test.identical( got, expected );

  test.case = 'left';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ '>>', '>>', 'dd', '<<=', 'ee', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPrefix : 1,
  });
  var expected = [ '>>', [ '>>', 'dd', '<<=' ], 'ee', 'ff' ];
  test.identical( got, expected );

  test.case = 'right';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', 'bb', '>>', 'cc', '>>', '<<=' ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPrefix : 1,
  });
  var expected = [ 'aa', 'bb', '>>', 'cc', [ '>>', '<<=' ] ];
  test.identical( got, expected );

  /* - */

  test.close( 'uncoupled prefix' );
  test.open( 'uncoupled postfix' );

  /* - */

  test.case = 'empty';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', '>>', '<<=', '<<-', 'dd' ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPostfix : 1,
  });
  var expected = [ 'aa', [ '>>', '<<=' ], '<<-', 'dd' ];
  test.identical( got, expected );

  test.case = 'middle';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', 'bb', '>>', 'cc', 'dd', '<<=', 'ee', '<<-', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPostfix : 1,
  });
  var expected = [ 'aa', 'bb', [ '>>', 'cc', 'dd', '<<=' ], 'ee', '<<-', 'ff' ];
  test.identical( got, expected );

  test.case = 'left';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ '>>', 'cc', 'dd', '<<=', 'ee', '<<-', 'ff',  ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPostfix : 1,
  });
  var expected = [ [ '>>', 'cc', 'dd', '<<=' ], 'ee', '<<-', 'ff' ];
  test.identical( got, expected );

  test.case = 'right';

  var got = _.strSplitsCoupledGroup
  ({
    splits : [ 'aa', 'bb', '>>', 'cc', 'dd', '<<=', '<<-'  ],
    prefix : '>>',
    postfix : /^<</,
    allowingUncoupledPostfix : 1,
  });
  var expected = [ 'aa', 'bb', [ '>>', 'cc', 'dd', '<<=' ], '<<-'  ];
  test.identical( got, expected );

  /* - */

  test.close( 'uncoupled postfix' );
  test.open( 'throwing' )

  /* - */

  test.case = 'uncoupled postfix';
  test.shouldThrowError( () =>
  {
    _.strSplitsCoupledGroup
    ({
      splits : [ 'aa', '>>', '<<=', '<<-', 'dd' ],
      prefix : '>>',
      postfix : /^<</,
    });
  });

  test.case = 'uncoupled prefix';
  test.shouldThrowError( () =>
  {
    _.strSplitsCoupledGroup
    ({
      splits : [ 'aa', '>>', '>>', '<<=', 'dd' ],
      prefix : '>>',
      postfix : /^<</,
    });
  });

  test.close( 'throwing' );

}

//

function strSplitFast( test )
{

  test.case = 'trivial';

  var got = _.strSplitFast( '', '' );
  var expected = [];
  test.identical( got, expected );

  var got = _.strSplitFast( 'abc', '' );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  var got = _.strSplitFast( '', 'a' );
  var expected = [ '' ];
  test.identical( got, expected );

  var got = _.strSplitFast( 'test test test' );
  var expected = [ 'test', ' ', 'test', ' ', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var got = _.strSplitFast( ' test   test   test ' );
  var expected = [ '', ' ', 'test', ' ', '', ' ', '', ' ', 'test', ' ', '', ' ', '', ' ', 'test', ' ', '' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var got = _.strSplitFast( ' test   test   test ', 'something' );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var got = _.strSplitFast( ' test <delimteter>  test<delimteter>   test ', '<delimteter>' );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var got = _.strSplitFast( 'a b c d' );
  var expected = [ 'a', ' ', 'b', ' ', 'c', ' ', 'd' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 1,
    preservingDelimeters : 0,
  */

  var op =
  {
    preservingEmpty : 1,
    preservingDelimeters : 0,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplitFast( o );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', '', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplitFast( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplitFast( o );
  var expected = [ '', 'test', '', '', 'test', '', '', 'test', '' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '  test', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', 'b', 'c', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ '', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', '', '', '', '', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa ', ' ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', 'a2', 'a3', '', '', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a ', '', ' b ', '', ' c ', '', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ '', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ '', '', '', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '', 'a b', ' ', '', ' c', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '" ""', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', '', '', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', '', '', '', '' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', 'x', '', '', '', '', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 0,
    preservingDelimeters : 0,
  */

  var op =
  {
    preservingEmpty : 0,
    preservingDelimeters : 0,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplitFast( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplitFast( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '  test', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', 'b', 'c', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = ['content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<', ];
  var expected = [ 'Aa ', ' ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', 'a2', 'a3', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplitFast( o );
  var expected = [ 'a b', ' ', ' c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '" ""' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplitFast( o );
  var expected = [ 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplitFast( o );
  var expected = [ 'x', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 1,
    preservingDelimeters : 1,
  */

  var op =
  {
    preservingEmpty : 1,
    preservingDelimeters : 1,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplitFast( o );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', '', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplitFast( o );
  var expected = [ 'test', ' ', 'test', ' ', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplitFast( o );
  var expected = [ '', ' ', 'test', ' ', '', ' ', '', ' ', 'test', ' ', '', ' ', '', ' ', 'test', ' ', '' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', 'c', ' ', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', ',', 'b', ',', 'c', ',', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ '', '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '.', '' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', ' ', '', '<<!', '', ' ', '', '<<-', '', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<', ];
  var expected = [ 'Aa ', '<<!', ' ', '<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa ', '<<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', ' ', 'a2', ' ', 'a3', ' ', '', '<<<-', '', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a ', '.', '', ',', ' b ', '.', '', ',', ' c ', '.', '', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a ', ',' , ' b ', ',', ' c ', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ '', ',', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ '', ',', '', ',', '', ',', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', 'a b', '"', ' ', '"', '', '"', ' c', '"', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '" ""', ' c', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', '', '"', '', '"', '', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', '', '"', '', '"', '', ' c', '' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '', 'a', '', ' ', '', 'b', '', '"', '', ' ', '', '"', '', '"', '', ' ', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', 'x', '', '', ' ', '', '"', '', '"', '', ' ', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 0,
    preservingDelimeters : 1,
  */

  var op =
  {
    preservingEmpty : 0,
    preservingDelimeters : 1,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplitFast( o );
  var expected = [ 'test', ' ', 'test', ' ', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplitFast( o );
  var expected = [ ' ', 'test', ' ', ' ', ' ', 'test', ' ', ' ', ' ', 'test', ' ' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', 'c', ' ', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', ',', 'b', ',', 'c', ',', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '.' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', ' ', '<<!', ' ', '<<-', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<', ];
  var expected = [ 'Aa ', '<<!', ' ', '<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa ', '<<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', ' ', 'a2', ' ', 'a3', ' ', '<<<-', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a ', '.', ',', ' b ', '.', ',', ' c ', '.', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a ', ',' , ' b ', ',', ' c ', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ ',' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ ',', ',', ',' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' c', '"' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '" ""', ' c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' c' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', 'x', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strSplitFast( );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strSplitFast( [  ] );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strSplitFast( 13 );
  } );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strSplitFast( '1', '2', '3' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strSplitFast( 123 );
  });

  test.case = 'invalid option type';
  test.shouldThrowError( function()
  {
    _.strSplitFast( { src : 3 } );
  });

  test.case = 'invalid option defined';
  test.shouldThrowError( function()
  {
    _.strSplitFast( { src : 'word', delimeter : 0, left : 1 } );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strSplitFast();
  });

}

//

function strSplitFastRegexp( test )
{

  test.case = 'trivial';

  var got = _.strSplitFast( 'a b c', new RegExp( ' ' ) );
  var expected = [ 'a', ' ', 'b', ' ', 'c' ];
  test.identical( got, expected );

  var got = _.strSplitFast( 'abc', new RegExp( '' ) );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  var got = _.strSplitFast( '', new RegExp( '' ) );
  var expected = [];
  test.identical( got, expected );

  var got = _.strSplitFast( '', 'a' );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var got = _.strSplitFast( ' test <delimteter>  test<delimteter>   test ', /<delimteter>/ );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 1,
    preservingDelimeters : 0,
  */

  var op =
  {
    preservingEmpty : 1,
    preservingDelimeters : 0,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = /a/;
  var got = _.strSplitFast( o );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = /x/;
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = /<delimteter>/;
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '  test', '   test ' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = /,/;
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ /,/, /\./ ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ /,/ ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', 'b', 'c', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ /\./, /#/ ];
  var got = _.strSplitFast( o )
  var expected = [ '', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ /\./, /#/ ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'Aa', '', '', '', '', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', ' ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'a1', 'a2', 'a3', '', '', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ /\./ ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ /,/, /\./ ];
  var expected = [ 'a ', '', ' b ', '', ' c ', '', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = /,/;
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = /,/;
  var expected = [ '', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = /,/;
  var expected = [ '', '', '', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '', 'a b', ' ', '', ' c', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '" ""', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', '', '', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/, /"/, / / ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', '', '', '', '' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ new RegExp(), /a b/, / /, '', ' c' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ /a b/, / /, ' c', '"', '' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '', '', '', 'x', '', '', '', '', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 0,
    preservingDelimeters : 0,
  */

  var op =
  {
    preservingEmpty : 0,
    preservingDelimeters : 0,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = /a/;
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = /x/;
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = /<delimteter>/;
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '  test', '   test ' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = /,/;
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ /,/, /\./ ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ /,/ ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', 'b', 'c', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = ['content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = [ 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'Aa', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', ' ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'a1', 'a2', 'a3', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ /\./ ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ /,/, /\./ ];
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = /,/;
  var expected = [ 'a ', ' b ', ' c ', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = /,/;
  var expected = [];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = /,/;
  var expected = [];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ 'a b', ' ', ' c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '" ""' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/, /"/, / / ];
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', /a b/, / /, new RegExp( '' ), / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/, '' ];
  var got = _.strSplitFast( o );
  var expected = [ 'x', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 1,
    preservingDelimeters : 1,
  */

  var op =
  {
    preservingEmpty : 1,
    preservingDelimeters : 1,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = /a/;
  var got = _.strSplitFast( o );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = /x/;
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = /<delimteter>/;
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = /,/;
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ /,/, /\./ ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ /,/ ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', ',', 'b', ',', 'c', ',', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = [ '', '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '.', '' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'Aa', ' ', '', '<<!', '', ' ', '', '<<-', '', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', '<<!', ' ', '<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', '<<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'a1', ' ', 'a2', ' ', 'a3', ' ', '', '<<<-', '', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ /\./ ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ /,/, /\./ ];
  var expected = [ 'a ', '.', '', ',', ' b ', '.', '', ',', ' c ', '.', '', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = /,/;
  var expected = [ 'a ', ',' , ' b ', ',', ' c ', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = /,/;
  var expected = [ '', ',', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = /,/;
  var expected = [ '', ',', '', ',', '', ',', '' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', 'a b', '"', ' ', '"', '', '"', ' c', '"', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '" ""', ' c', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', '', '"', '', '"', '', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/, /"/, / / ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', '', '"', '', '"', '', ' c', '' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', /a b/, / /, new RegExp( '' ), / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', '', 'a', '', ' ', '', 'b', '', '"', '', ' ', '', '"', '', '"', '', ' ', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/, '' ];
  var got = _.strSplitFast( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', ' ', 'x', '', '', ' ', '', '"', '', '"', '', ' ', 'c' ];
  test.identical( got, expected );

  /*
    preservingEmpty : 0,
    preservingDelimeters : 1,
  */

  var op =
  {
    preservingEmpty : 0,
    preservingDelimeters : 1,
  }

  /* */

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = new RegExp( '' );
  var got = _.strSplitFast( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = /a/;
  var got = _.strSplitFast( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplitFast( o );
  var expected = [ 'test', ' ', 'test', ' ', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplitFast( o );
  var expected = [ ' ', 'test', ' ', ' ', ' ', 'test', ' ', ' ', ' ', 'test', ' ' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = /x/;
  var got = _.strSplitFast( o );
  var expected = [ ' test   test   test ' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = /<delimteter>/;
  var got = _.strSplitFast( o );
  var expected = [ ' test ', '<delimteter>', '  test', '<delimteter>', '   test ' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplitFast( o );
  var expected = [ 'a', ' ', 'b', ' ', 'c', ' ', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = /,/;
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ /,/, /\./ ];
  var got = _.strSplitFast( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplitFast( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ /,/ ];
  var got = _.strSplitFast( o );
  var expected = [ '    a', ',', 'b', ',', 'c', ',', 'd   ' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = [ '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.',/#/ ];
  var got = _.strSplitFast( o )
  var expected = [ 'content', '.' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'Aa', ' ', '<<!', ' ', '<<-', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', '<<!', ' ', '<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</ ];
  var expected = [ 'Aa ', '<<<-', ' Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ /->>>/,/<<<-/,/->>/,/<<-/,/!>>/,/<<!/,/>>/,/<</,/ / ];
  var expected = [ 'a1', ' ', 'a2', ' ', 'a3', ' ', '<<<-', ' ', 'Bb' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ /\./ ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ /,/, /\./ ];
  var expected = [ 'a ', '.', ',', ' b ', '.', ',', ' c ', '.', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = /,/;
  var expected = [ 'a ', ',' , ' b ', ',', ' c ', ',', ' d' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = /,/;
  var expected = [ ',' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = /,/;
  var expected = [ ',', ',', ',' ];
  var got = _.strSplitFast( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' c', '"' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '" ""', ' c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ /a b/, / c/, /"/, / / ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', '"', '"', ' c' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', /a b/, / /, new RegExp( '' ), / c/ ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a', ' ', 'b', '"', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ /a b/, / /, / c/, /"/, '' ];
  var got = _.strSplitFast( o );
  var expected = [ '"', 'a b', '"', ' ', 'x', ' ', '"', '"', ' ', 'c' ];
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strSplitFast( /1/, /2/, '3' );
  });

}

//

function strSplit( test )
{

  /* - */

  test.open( 'empty' );

  var got = _.strSplit( '', '' );
  var expected = [];
  test.identical( got, expected );

  var got = _.strSplit( 'abc', '' );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 1,
    preservingDelimeters : 1,
    stripping : 0,
    quoting : 0,
  });
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 1,
    preservingDelimeters : 0,
    stripping : 0,
    quoting : 0,
  });
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 0,
    preservingDelimeters : 0,
    stripping : 0,
    quoting : 0,
  });
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 0,
    preservingDelimeters : 0,
    stripping : 0,
    quoting : 1,
  });
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 0,
    preservingDelimeters : 0,
    stripping : 1,
    quoting : 0,
  });
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit
  ({
    src : 'abc',
    delimeter : '',
    preservingEmpty : 0,
    preservingDelimeters : 0,
    stripping : 1,
    quoting : 1,
  });
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  var got = _.strSplit( '', 'a' );
  var expected = [ '' ];
  test.identical( got, expected );

  test.close( 'empty' );

  /* - */

  test.open( 'trivial' );

  var got = _.strSplit( 'test test test' );
  var expected = [ 'test', '', 'test', '', 'test' ];
  test.identical( got, expected );

  var got = _.strSplit( ' test   test   test ' );
  var expected = [ '', '', 'test', '', '', '', '', '', 'test', '', '', '', '', '', 'test', '', '' ];
  test.identical( got, expected );

  var got = _.strSplit( ' test   test   test ', 'something' );
  var expected = [ 'test   test   test' ];
  test.identical( got, expected );

  var got = _.strSplit( ' test <delimteter>  test<delimteter>   test ', '<delimteter>' );
  var expected = [ 'test', '<delimteter>', 'test', '<delimteter>', 'test' ];
  test.identical( got, expected );

  var got = _.strSplit( 'a b c d' );
  var expected = [ 'a', '', 'b', '', 'c', '', 'd' ];
  test.identical( got, expected );

  test.close( 'trivial' );

  /* - */

  test.open( 'trivial, pe:0' );

  var got = _.strSplit({ src : 'test test test', preservingEmpty : 0 });
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  var got = _.strSplit({ src : ' test   test   test ', preservingEmpty : 0 });
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  var got = _.strSplit({ src : ' test   test   test ', delimeter : 'something', preservingEmpty : 0 });
  var expected = [ 'test   test   test' ];
  test.identical( got, expected );

  var got = _.strSplit({ src : ' test <delimteter>  test<delimteter>   test ', delimeter : '<delimteter>', preservingEmpty : 0 });
  var expected = [ 'test', '<delimteter>', 'test', '<delimteter>', 'test' ];
  test.identical( got, expected );

  var got = _.strSplit({ src : 'a b c d', preservingEmpty : 0 });
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.close( 'trivial, pe:0' );

  /* - */

  test.open( 'd:" " trivial' );

  test.case = ' space at the beginning'; /**/
  var got = _.strSplit( ' aa b#b cc', ' ' );
  var expected = [ '', '', 'aa', '', 'b#b', '', 'cc' ];
  test.identical( got, expected );

  test.case = 'space in the end';  /**/
  var got = _.strSplit( 'aa b#b cc ', ' ' );
  var expected = [ 'aa', '', 'b#b', '', 'cc', '', '' ];
  test.identical( got, expected );

  test.case = 'space on the beginning and the end';  /**/
  var got = _.strSplit( ' aa b#b cc ', ' ' );
  var expected = [ '', '', 'aa', '', 'b#b', '', 'cc', '', '' ];
  test.identical( got, expected );

  test.close( 'd:" " trivial' );

  /* - */

  test.open( 'd:"#" trivial' );

  test.case = ' space at the beginning'; /**/
  var got = _.strSplit( ' aa b#b cc', '#' );
  var expected = [ 'aa b', '#', 'b cc' ];
  test.identical( got, expected );

  test.case = 'space in the end';  /**/
  var got = _.strSplit( 'aa b#b cc ', '#' );
  var expected = [ 'aa b', '#', 'b cc' ];
  test.identical( got, expected );

  test.case = 'space on the beginning and the end';  /**/
  var got = _.strSplit( ' aa b#b cc ', '#' );
  var expected = [ 'aa b', '#', 'b cc' ];
  test.identical( got, expected );

  test.close( 'd:"#" trivial' );

  /* - */

  test.open( 's:1 q:0 pe:0' );

  var op =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 0,
  }

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplit( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplit( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplit( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplit( o );
  var expected = [ 'test   test   test' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplit( o );
  var expected = [ 'test', '<delimteter>', 'test', '<delimteter>', 'test' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplit( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ 'content', '.' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', '<<!', '<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<', ];
  var expected = [ 'Aa', '<<!', '<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa', '<<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', 'a2', 'a3', '<<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a', '.', ',', 'b', '.', ',', 'c', '.', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a', ',' , 'b', ',', 'c', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ ',' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ ',', ',', ',' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '"', '"','"', 'c', '"' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '" ""', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '"', '"', '"', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '"', '"', '"', 'c' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a', 'b', '"', '"', '"', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '"', 'x', '"', '"', 'c' ];
  test.identical( got, expected );

  test.close( 's:1 q:0 pe:0' );

  /* - */

  test.open( 's:1 q:0 pe:1' );

  var op =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 1,
  }

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [ 'a', '', 'b', '', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplit( o );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplit( o );
  var expected = [ 'a', '', 'b', '', '', '', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplit( o );
  var expected = [ 'test', '', 'test', '', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplit( o );
  var expected = [ '', '', 'test', '', '', '', '', '', 'test', '', '', '', '', '', 'test', '', '' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplit( o );
  var expected = [ 'test   test   test' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplit( o );
  var expected = [ 'test', '<delimteter>', 'test', '<delimteter>', 'test' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplit( o );
  var expected = [ 'a', '', 'b', '', 'c', '', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplit( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ '', '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ 'content', '.', '' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', '', '', '<<!', '', '', '', '<<-', '', '', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<', ];
  var expected = [ 'Aa', '<<!', '', '<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa', '<<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', '', 'a2', '', 'a3', '', '', '<<<-', '', '', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a', '.', '', ',', 'b', '.', '', ',', 'c', '.', '', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a', ',' , 'b', ',', 'c', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ '', ',', '' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ '', ',', '', ',', '', ',', '' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c"';
  o.delimeter = [ '"' ];
  var got = _.strSplit( o );
  var expected = [ '', '"', 'a b', '"', '', '"', '', '"', 'c', '"', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"', 'a b', '" ""', 'c', '' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplit( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', '', '', '"', '', '"', '', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplit( o );
  var expected = [ '', '"', '', 'a b', '', '"', '', '', '', '"', '', '"', '', 'c', '' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"', '', 'a', '', '', '', 'b', '', '"', '', '', '', '"', '', '"', '', '', '', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ '', '"', '', 'a b', '', '"', '', '', 'x', '', '', '', '', '"', '', '"', '', '', 'c' ];
  var got = _.strSplit( o );
  var expected = [ '"', '', 'a', '', '', '', 'b', '', '"', '', '', '', 'x', '', '', '', '"', '', '"', '', '', '', 'c' ];
  test.identical( got, expected );

  test.close( 's:1 q:0 pe:1' );

  /* - */

  test.open( 's:1 q:1 pe:0' );

  var op =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 0,
  }

  test.case = 'empty both';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'empty delimeter';
  var o = _.mapExtend( null, op );
  o.src = 'abc';
  o.delimeter = '';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'empty src';
  var o = _.mapExtend( null, op );
  o.src = '';
  o.delimeter = 'a';
  var got = _.strSplit( o );
  var expected = [];
  test.identical( got, expected );

  test.case = 'has empty element in result';
  var o = _.mapExtend( null, op );
  o.src = 'a b  c';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'returns an array of strings';
  var o = _.mapExtend( null, op );
  o.src = 'test test test';
  var got = _.strSplit( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split string into an array of strings';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ';
  var got = _.strSplit( o );
  var expected = [ 'test', 'test', 'test' ];
  test.identical( got, expected );

  test.case = 'split with delimeter which src does not have';
  var o = _.mapExtend( null, op );
  o.src = ' test   test   test ', 'something';
  o.delimeter = 'x';
  var got = _.strSplit( o );
  var expected = [ 'test   test   test' ];
  test.identical( got, expected );

  test.case = 'custom delimeter';
  var o = _.mapExtend( null, op );
  o.src = ' test <delimteter>  test<delimteter>   test ', '<delimteter>';
  o.delimeter = '<delimteter>';
  var got = _.strSplit( o );
  var expected = [ 'test', '<delimteter>', 'test', '<delimteter>', 'test' ];
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var o = _.mapExtend( null, op );
  o.src = 'a b c d';
  var got = _.strSplit( o );
  var expected = [ 'a', 'b', 'c', 'd' ];
  test.identical( got, expected );

  test.case = 'arguments as map';
  var o = _.mapExtend( null, op );
  o.src = 'a,b,c,d';
  o.delimeter = ',';
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  test.case = 'delimeter as array';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [ ',', '.' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', '.', 'c', '.', 'd' ];
  test.identical( got, expected );

  test.case = 'zero delimeter length';
  var o = _.mapExtend( null, op );
  o.src = 'a,b.c.d';
  o.delimeter = [];
  var got = _.strSplit( o );
  var expected = [ 'a,b.c.d' ];
  test.identical( got, expected );

  test.case = 'stripping off';
  var o = _.mapExtend( null, op );
  o.src = '    a,b,c,d   ';
  o.delimeter = [ ',' ];
  var got = _.strSplit( o );
  var expected = [ 'a', ',', 'b', ',', 'c', ',', 'd' ];
  test.identical( got, expected );

  /* */

  test.case = 'many delimeters, delimeter on the begin';
  var o = _.mapExtend( null, op );
  o.src = '.content';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ '.', 'content' ];
  test.identical( got, expected );

  test.case = 'many delimeters, delimeter on the end';
  var o = _.mapExtend( null, op );
  o.src = 'content.';
  o.delimeter = [ '.','#' ];
  var got = _.strSplit( o )
  var expected = [ 'content', '.' ];
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'Aa', '<<!', '<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'many delimeters having common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<! <<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa', '<<!', '<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common';
  var o = _.mapExtend( null, op );
  o.src = 'Aa <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<' ];
  var expected = [ 'Aa', '<<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'having long common 2';
  var o = _.mapExtend( null, op );
  o.src = 'a1 a2 a3 <<<- Bb';
  o.delimeter = [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ];
  var expected = [ 'a1', 'a2', 'a3', '<<<-', 'Bb' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeter not exist in src';

  var o = _.mapExtend( null, op );
  o.src = 'a,b,c';
  o.delimeter = [ '.' ];
  var expected = [ 'a,b,c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /**/

  test.case = 'several delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a ., b ., c ., d';
  o.delimeter = [ ',', '.' ];
  var expected = [ 'a', '.', ',', 'b', '.', ',', 'c', '.', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'one delimeters';
  var o = _.mapExtend( null, op );
  o.src = 'a , b , c , d';
  o.delimeter = ',';
  var expected = [ 'a', ',' , 'b', ',', 'c', ',', 'd' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'delimeters equal src';
  var o = _.mapExtend( null, op );
  o.src = ',';
  o.delimeter = ',';
  var expected = [ ',' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'src is triplet of delimeter';
  var o = _.mapExtend( null, op );
  o.src = ',,,';
  o.delimeter = ',';
  var expected = [ ',', ',', ',' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'complex quoted at edges';
  var o = _.mapExtend( null, op );
  o.src = '"a b" " c"';
  o.delimeter = [ '"' ];
  var got = _.strSplit( o );
  var expected = [ '"a b" " c"' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"a b" ""', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space first';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"' ];
  var got = _.strSplit( o );
  var expected = [ '"a b"', '""', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle with space last';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ 'a b', ' c', '"', ' ' ];
  var got = _.strSplit( o );
  var expected = [ '"a b"', '""', 'c' ];
  test.identical( got, expected );

  test.case = 'delimeter with empty string at the beginning of array';
  var o = _.mapExtend( null, op );
  o.src = '"a b" "" c';
  o.delimeter = [ '', 'a b', ' ', '', ' c' ];
  var got = _.strSplit( o );
  var expected = [ '"a b"', '""', 'c' ];
  test.identical( got, expected );

  test.case = 'quoted in the middle';
  var o = _.mapExtend( null, op );
  o.src = '"a b" x "" c';
  o.delimeter = [ 'a b', ' ', ' c', '"', '' ];
  var got = _.strSplit( o );
  var expected = [ '"a b"', 'x', '""', 'c' ];
  test.identical( got, expected );

  /* special quoting tests */

  test.case = 'quoted at edges, delimeter : #';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb"cc"';
  o.delimeter = [ '#' ];
  var got = _.strSplit( o );
  var expected = [ '"aa"bb"cc"' ];
  test.identical( got, expected );

  test.close( 's:1 q:1 pe:0' );

  /* - */

  test.open( 's:1 q:1 pe:0 pq:1 iq:0 delimeter:#' );

  var op =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 0,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : '#',
  }

  test.case = 'quoted at edges"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb"cc"';
  var got = _.strSplit( o );
  var expected = [ '"aa"', 'bb', '"cc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with extra quote inside "';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '"aa"', 'bb', '""', 'cc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside the first quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"a#a"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '"a#a"', 'bb', '""', 'cc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside not quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"b#b""cc"';
  var got = _.strSplit( o );
  var expected = [ '"aa"', 'b', '#', 'b', '""', 'cc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside the last quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb""c#c"';
  var got = _.strSplit( o );
  var expected = [ '"aa"', 'bb', '""', 'c', '#', 'c"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside all 3 text splits"';
  var o = _.mapExtend( null, op );
  o.src = '"a#a"b#b""c#c"';
  var got = _.strSplit( o );
  var expected = [ '"a#a"', 'b', '#', 'b', '""', 'c', '#', 'c"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with extra spaces on edges';
  var o = _.mapExtend( null, op );
  o.src = ' "aa"bb"cc" ';
  var got = _.strSplit( o );
  var expected = [ '"aa"', 'bb', '"cc"' ];
  test.identical( got, expected );

  test.close( 's:1 q:1 pe:0 pq:1 iq:0 delimeter:#' );

  /* - */

  test.open( 's:1 q:1 pe:0 pq:0 iq:1 delimeter:#' );

  var op =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 0,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : '#',
  }

  test.case = 'quoted at edges"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb"cc"';
  var got = _.strSplit( o );
  var expected = [ 'aabbcc' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with extra quote inside "';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ 'aabbcc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside the first quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"a#a"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ 'a#abbcc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside not quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"b#b""cc"';
  var got = _.strSplit( o );
  var expected = [ 'aab', '#', 'bcc"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside the last quoted text"';
  var o = _.mapExtend( null, op );
  o.src = '"aa"bb""c#c"';
  var got = _.strSplit( o );
  var expected = [ 'aabbc', '#', 'c"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with # inside all 3 text splits"';
  var o = _.mapExtend( null, op );
  o.src = '"a#a"b#b""c#c"';
  var got = _.strSplit( o );
  var expected = [ 'a#ab', '#', 'bc', '#', 'c"' ];
  test.identical( got, expected );

  test.case = 'quoted at edges with extra spaces on edges';
  var o = _.mapExtend( null, op );
  o.src = ' "aa"bb"cc" ';
  var got = _.strSplit( o );
  var expected = [ 'aabbcc' ];
  test.identical( got, expected );

  test.close( 's:1 q:1 pe:0 pq:0 iq:1 delimeter:#' );

  /* - */

  test.open( 'complex' );

  var src = 'Test check // ( Tools/base/l2/String / strSplit / delimeter:" " > space on the beginning and the end <  ) # 3 ... failed';

  test.case = 's:0 q:1 pe:1 pd:1 pq:0 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:', ' ', '', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:1 pd:1 pq:1 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:', '" "', '', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:1 pd:1 pq:0 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter: ', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:1 pd:1 pq:1 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:" "', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:0 pe:0 pd:0';

  var o =
  {
    stripping : 0,
    quoting : 0,
    preservingEmpty : 0,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', ' ( Tools', 'base', 'l2', 'String ', ' strSplit ', ' delimeter:" "', 'space on the beginning and the end', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:0 pe:0 pd:1';

  var o =
  {
    stripping : 0,
    quoting : 0,
    preservingEmpty : 0,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:" "', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:0 pe:1 pd:0';

  var o =
  {
    stripping : 0,
    quoting : 0,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '', ' ( Tools', 'base', 'l2', 'String ', ' strSplit ', ' delimeter:" "', 'space on the beginning and the end', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:0 pe:1 pd:1';

  var o =
  {
    stripping : 0,
    quoting : 0,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:" "', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:0 pd:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 0,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', ' ( Tools', 'base', 'l2', 'String ', ' strSplit ', ' delimeter:" "', 'space on the beginning and the end', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:0 pd:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 0,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:" "', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:0 pd:1 pq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 0,
    preservingDelimeters : 1,
    preservingQuoting : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '/', '/', ' ( Tools', '/', 'base', '/', 'l2', '/', 'String ', '/', ' strSplit ', '/', ' delimeter:" "', ' > ', 'space on the beginning and the end', ' < ', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:0 q:1 pe:1 pd:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check ', '', ' ( Tools', 'base', 'l2', 'String ', ' strSplit ', ' delimeter:" "', 'space on the beginning and the end', ' ) # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:0 pe:0 pd:0';

  var o =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 0,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '( Tools', 'base', 'l2', 'String', 'strSplit', 'delimeter:" "', 'space on the beginning and the end', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:0 pe:0 pd:1';

  var o =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 0,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '/', '/', '( Tools', '/', 'base', '/', 'l2', '/', 'String', '/', 'strSplit', '/', 'delimeter:" "', '>', 'space on the beginning and the end', '<', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:0 pe:1 pd:0';

  var o =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '', '( Tools', 'base', 'l2', 'String', 'strSplit', 'delimeter:" "', 'space on the beginning and the end', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:0 pe:1 pd:1';

  var o =
  {
    stripping : 1,
    quoting : 0,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '/', '', '/', '( Tools', '/', 'base', '/', 'l2', '/', 'String', '/', 'strSplit', '/', 'delimeter:" "', '>', 'space on the beginning and the end', '<', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:0 pd:0';

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 0,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '( Tools', 'base', 'l2', 'String', 'strSplit', 'delimeter:" "', 'space on the beginning and the end', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:0 pd:1';

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 0,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '/', '/', '( Tools', '/', 'base', '/', 'l2', '/', 'String', '/', 'strSplit', '/', 'delimeter:" "', '>', 'space on the beginning and the end', '<', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:1 pd:0';

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '', '( Tools', 'base', 'l2', 'String', 'strSplit', 'delimeter:" "', 'space on the beginning and the end', ') # 3 ... failed' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:1 pd:1'; /* */

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    delimeter : [ ' > ', ' < ', '/' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ 'Test check', '/', '', '/', '( Tools', '/', 'base', '/', 'l2', '/', 'String', '/', 'strSplit', '/', 'delimeter:" "', '>', 'space on the beginning and the end', '<', ') # 3 ... failed' ];
  test.identical( got, expected );

  var src =
`
= Org

- Q: "Where?"
- A1: "Here."

- A2: "There."
`

  test.case = 's:1 q:1 pe:1 pd:0 pq:1 iq:1'; /* */

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ '\n' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ '', '= Org', '', '- Q: "Where?"', '- A1: "Here."', '', '- A2: "There."', '' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:1 pd:0 pq:1 iq:0';

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ '\n' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ '', '= Org', '', '- Q:', '"Where?"', '', '- A1:', '"Here."', '', '', '- A2:', '"There."', '', '' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:1 pd:0 pq:0 iq:1'; /* */

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ '\n' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ '', '= Org', '', '- Q: Where?', '- A1: Here.', '', '- A2: There.', '' ];
  test.identical( got, expected );

  test.case = 's:1 q:1 pe:1 pd:0 pq:0 iq:0'; /* */

  var o =
  {
    stripping : 1,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ '\n' ],
    src,
  }
  var got = _.strSplit( o );
  var expected = [ '', '= Org', '', '- Q:', 'Where?', '', '- A1:', 'Here.', '', '', '- A2:', 'There.', '', '' ];
  test.identical( got, expected );

  test.case = 'quoted at edges, s:1 q:1 pe:1 pd:0 pq:0 iq:0'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ '"' ],
  }

  o.src = '"a b" " c"';
  var expected = [ '', 'a b', ' ', ' c', '' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted at edges, s:1 q:1 pe:1 pd:0 pq:0 iq:1'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ '"' ],
  }

  o.src = '"a b" " c"';
  var expected = [ 'a b  c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted at edges, s:1 q:1 pe:1 pd:0 pq:1 iq:0'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ '"' ],
  }

  o.src = '"a b" " c"';
  var expected = [ '', '"a b"', ' ', '" c"', '' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted at edges, s:1 q:1 pe:1 pd:0 pq:1 iq:1'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ '"' ],
  }

  o.src = '"a b" " c"';
  var expected = [ '"a b" " c"' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted in the middle, s:1 q:1 pe:1 pd:0 pq:1 iq:1'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ '"' ],
  }

  o.src = '"a b" """x" c';
  var expected = [ '"a b" """x" c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted in the middle, s:1 q:1 pe:1 pd:0 pq:1 iq:0'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ '"' ],
  }

  o.src = '"a b" """x" c';
  var expected = [ '', '"a b"', ' ', '""', '', '"x"', ' c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted in the middle, s:1 q:1 pe:1 pd:0 pq:0 iq:1'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ '"' ],
  }

  o.src = '"a b" """x" c';
  var expected = [ 'a b x c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  test.case = 'quoted in the middle, s:1 q:1 pe:1 pd:0 pq:0 iq:0'; /**/

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ '"' ],
  }

  o.src = '"a b" """x" c';
  var expected = [ '', 'a b', ' ', '', '', 'x', ' c' ];
  var got = _.strSplit( o );
  test.identical( got, expected );

  /* */

  test.case = 'extra quote, s:1 q:1 pe:1 pd:0 pq:1 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ '#' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '"aa"bb""cc"' ];
  test.identical( got, expected );

  test.case = 'extra quote, s:1 q:1 pe:1 pd:0 pq:0 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ '#' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ 'aabbcc"' ];
  test.identical( got, expected );

  test.case = 'extra quote, s:1 q:1 pe:1 pd:0 pq:1 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ '#' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '', '"aa"', 'bb', '""', 'cc"' ];
  test.identical( got, expected );

  test.case = 'extra quote, s:1 q:1 pe:1 pd:0 pq:0 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 0,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ '#' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '', 'aa', 'bb', '', 'cc"' ];
  test.identical( got, expected );

  /* */

  test.case = 'extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:1 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 1,
    inliningQuoting : 1,
    delimeter : [ '#', '"' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '"aa"bb""cc', '"', '' ];
  test.identical( got, expected );

  test.case = 'extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:0 iq:1';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 0,
    inliningQuoting : 1,
    delimeter : [ '#', '"' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ 'aabbcc', '"', '' ];
  test.identical( got, expected );

  test.case = 'extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:1 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 1,
    inliningQuoting : 0,
    delimeter : [ '#', '"' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '', '"aa"', 'bb', '""', 'cc', '"', '' ];
  test.identical( got, expected );

  test.case = 'extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:0 iq:0';

  var o =
  {
    stripping : 0,
    quoting : 1,
    preservingEmpty : 1,
    preservingDelimeters : 1,
    preservingQuoting : 0,
    inliningQuoting : 0,
    delimeter : [ '#', '"' ],
  }

  o.src = '"aa"bb""cc"';
  var got = _.strSplit( o );
  var expected = [ '', 'aa', 'bb', '', 'cc', '"', '' ];
  test.identical( got, expected );

  /* - */

  test.close( 'complex' );

}

// //
//
// function strSplitNaive( test )
// {
//
//   test.case = 'returns an array of strings';
//   debugger;
//   var got = _.strSplitNaive( 'test test test' );
//   debugger;
//   var expected = [ 'test', 'test', 'test' ];
//   test.identical( got, expected );
//
//   test.case = 'split string into an array of strings';
//   var got = _.strSplitNaive( ' test   test   test ' );
//   var expected = [ 'test', 'test', 'test' ];
//   test.identical( got, expected );
//
//   test.case = 'returns an array of strings';
//   var got = _.strSplitNaive( ' test   test   test ', 'redundant argument' );
//   var expected = [ 'test   test   test' ];
//   test.identical( got, expected );
//
//   test.case = 'returns an array of strings';
//   var got = _.strSplitNaive( ' test <delimteter>  test<delimteter>   test ', '<delimteter>' );
//   var expected = [ 'test', 'test', 'test' ];
//   test.identical( got, expected );
//
//   test.case = 'simple string, default options';
//   var got = _.strSplitNaive( 'a b c d' );
//   var expected = [ 'a', 'b', 'c', 'd' ];
//   test.identical( got, expected );
//
//   test.case = 'arguments as map';
//   var got = _.strSplitNaive( { src : 'a,b,c,d', delimeter : ','  } );
//   var expected = [ 'a', 'b', 'c', 'd' ];
//   test.identical( got, expected );
//
//   test.case = 'delimeter as array';
//   var got = _.strSplitNaive( { src : 'a,b.c.d', delimeter : [ ',', '.' ]  } );
//   var expected = [ 'a', 'b', 'c', 'd' ];
//   test.identical( got, expected );
//
//   test.case = 'zero delimeter length';
//   var got = _.strSplitNaive( { src : 'a,b.c.d', delimeter : []  } );
//   var expected = [ 'a,b.c.d' ];
//   test.identical( got, expected );
//
//   test.case = 'stripping off';
//   var got = _.strSplitNaive( { src : '    a,b,c,d   ', delimeter : [ ',' ], stripping : 0  } );
//   var expected = [ '    a', 'b', 'c', 'd   ' ];
//   test.identical( got, expected );
//
//   /* */
//
//   test.case = 'preserving delimeters, many delimeters, delimeter on the begin';
//   var got = _.strSplitNaive({ src : '.content', preservingDelimeters : 1, delimeter : [ '.','#' ] })
//   var expected = [ '.','content' ];
//   test.identical( got, expected );
//
//   test.case = 'preserving delimeters, many delimeters, delimeter on the end';
//   var got = _.strSplitNaive({ src : 'content.', preservingDelimeters : 1, delimeter : [ '.','#' ] })
//   var expected = [ 'content','.' ];
//   test.identical( got, expected );
//
//   /* */
//
//   test.case = 'many delimeters having common, preserving empty';
//   var src = 'Aa <<! <<- Bb';
//   var expected = [ 'Aa',' ','','<<!','',' ','','<<-','',' ','Bb' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
//     preservingEmpty : 1,
//     preservingDelimeters : 1,
//     stripping : 0,
//   });
//
//   test.identical( got, expected );
//   test.case = 'many delimeters having common, removing empty';
//   var src = 'Aa <<! <<- Bb';
//   var expected = [ 'Aa',' ','<<!',' ','<<-',' ','Bb' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
//     preservingEmpty : 0,
//     preservingDelimeters : 1,
//     stripping : 0,
//   });
//   test.identical( got, expected );
//
//   /* */
//
//   test.case = 'having long common';
//   var src = 'Aa <<<- Bb';
//   var expected = [ 'Aa',' ','','<<<-','',' ','Bb' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
//     preservingEmpty : 1,
//     preservingDelimeters : 1,
//     stripping : 0,
//   });
//   test.identical( got, expected );
//
//   /* */
//
//   test.case = 'having long common 2';
//   var src = 'a1 a2 a3 <<<- Bb';
//   var expected = [ 'a1',' ','a2',' ','a3',' ','','<<<-','',' ','Bb' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
//     preservingEmpty : 1,
//     preservingDelimeters : 1,
//     stripping : 0,
//   });
//   test.identical( got, expected );
//
//   /*delimeter not exist in src*/
//
//   var src = 'a,b,c';
//   var expected = [ 'a,b,c' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '.' ],
//     preservingDelimeters : 1
//   });
//   test.identical( got, expected );
//
//   /*delimeter not exist in src*/
//
//   var src = 'a,b,c';
//   var expected = [ 'a,b,c' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ '.' ],
//     preservingDelimeters : 1
//   });
//   test.identical( got, expected );
//
//   /**/
//
//   test.case = 'preservingEmpty';
//
//   var src = 'a ., b ., c ., d';
//   var expected = [ 'a', '', 'b', '', 'c', '', 'd' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : [ ',', '.' ],
//     preservingEmpty : 1
//   });
//   test.identical( got, expected );
//
//   /**/
//
//   var src = 'a , b , c , d';
//   var expected = [ 'a', 'b', 'c', 'd' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : ',',
//     preservingEmpty : 1
//   });
//   test.identical( got, expected );
//
//
//   /**/
//
//   var src = ',';
//   var expected = [ '', '' ];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : ',',
//     preservingEmpty : 1
//   });
//   test.identical( got, expected );
//
//   /**/
//
//   var src = ',,,';
//   var expected = [];
//   var got = _.strSplitNaive
//   ({
//     src,
//     delimeter : ',',
//     preservingEmpty : 0
//   });
//   test.identical( got, expected );
//
//   /* take into acount text inside " " */
//
//   test.case = 'take into acount text inside ""';
//
//   var o =
//   {
//     src : '"/path/with space/" a b c',
//     quoting : 1,
//     preservingEmpty : 1,
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ '/path/with space/', '', 'a', '', 'b', '', 'c' ];
//   test.identical( got, expected );
//
//   test.case = 'take into acount text inside ""';
//
//   var o =
//   {
//     src : '"/path/with space/" a b c',
//     quoting : 1,
//     preservingEmpty : 0,
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ '/path/with space/', 'a', 'b', 'c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : 'a "/path with/empty space/" a',
//     quoting : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a', '/path with/empty space/', 'a' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b c" "a b c" "a b c"',
//     quoting : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b c', 'a b c', 'a b c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b c" "a b c" "a b c"',
//     quoting : 1,
//     preservingEmpty : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b c', '', 'a b c', '', 'a b c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b c"x"a b c"x"a b c"',
//     quoting : 1,
//     delimeter : [ 'x' ],
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b c', 'x', 'a b c', 'x', 'a b c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c"',
//     quoting : 0,
//     delimeter : [ '"' ],
//     stripping : 1,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ '', '\"', 'a b', '\"', '', '\"', '', '\"', 'c', '\"', '' ]
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c',
//     quoting : 0,
//     delimeter : [ '"' ],
//     stripping : 0,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ '', '\"', 'a b', '\"', ' ', '\"', '', '\"', ' c' ];
//   test.identical( got, expected );
//
//   var o =
//   {
//     src : '"a b" "" c',
//     quoting : 1,
//     delimeter : [ '"' ],
//     stripping : 0,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b', ' ', '', ' c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c',
//     quoting : 1,
//     delimeter : [ '"' ],
//     stripping : 0,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b', ' ', '', ' c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c',
//     quoting : 1,
//     delimeter : [ '"' ],
//     stripping : 1,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b', '', '', 'c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c"',
//     quoting : 1,
//     delimeter : [ '"' ],
//     stripping : 1,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b', '', '', 'c' ];
//   test.identical( got, expected );
//
//   /**/
//
//   var o =
//   {
//     src : '"a b" "" c"',
//     quoting : 1,
//     delimeter : [ '"' ],
//     stripping : 0,
//     preservingEmpty : 1,
//     preservingDelimeters : 1
//   }
//   var got = _.strSplitNaive( o );
//   var expected = [ 'a b', ' ', '', ' c' ];
//   test.identical( got, expected );
//
//   /*
//     stripping : 1,
//     quoting : 1,
//     preservingEmpty : 0,
//   */
//
//   var op =
//   {
//     stripping : 1,
//     quoting : 1,
//     preservingEmpty : 0,
//   }
//
//   /* */
//
//   if( !Config.debug )
//   return;
//
//   test.case = 'no arguments';
//   test.shouldThrowError( function( )
//   {
//     _.strSplitNaive( );
//   } );
//
//   test.case = 'argument is wrong';
//   test.shouldThrowError( function( )
//   {
//     _.strSplitNaive( [  ] );
//   } );
//
//   test.case = 'argument is wrong';
//   test.shouldThrowError( function( )
//   {
//     _.strSplitNaive( 13 );
//   } );
//
//   test.case = 'invalid arguments count';
//   test.shouldThrowError( function()
//   {
//     _.strSplitNaive( '1', '2', '3' );
//   });
//
//   test.case = 'invalid argument type';
//   test.shouldThrowError( function()
//   {
//     _.strSplitNaive( 123 );
//   });
//
//   test.case = 'invalid option type';
//   test.shouldThrowError( function()
//   {
//     _.strSplitNaive( { src : 3 } );
//   });
//
//   test.case = 'invalid option defined';
//   test.shouldThrowError( function()
//   {
//     _.strSplitNaive( { src : 'word', delimeter : 0, left : 1 } );
//   });
//
//   test.case = 'no arguments';
//   test.shouldThrowError( function()
//   {
//     _.strSplitNaive();
//   });
//
// }

//

function strSplitStrNumber( test )
{

  test.case = 'returns object with one property';
  var got = _.strSplitStrNumber( 'abcdef' );
  var expected = { str : 'abcdef' };
  test.identical( got, expected );

  test.case = 'returns object with two properties';
  var got = _.strSplitStrNumber( 'abc3def' );
  var expected = { str : 'abc', number : 3 };
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strSplitStrNumber( );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strSplitStrNumber( [  ] );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strSplitStrNumber( 13 );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strSplitStrNumber( 'abc3', 'redundant argument' );
  } );

}

//

function strStrip( test )
{

  test.case = 'simple string, default options';
  var got = _.strStrip( '\nabc  ' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'arguments as map';
  var got = _.strStrip( { src : 'xaabaax', stripper : [ 'a', 'x' ] } );
  var expected = 'b';
  test.identical( got, expected );

  test.case = 'nothing to remove';
  var got = _.strStrip( 'test' );
  var expected = 'test';
  test.identical( got, expected );

  test.case = 'removes whitespace from both ends of a string';
  var got = _.strStrip( ' test ' );
  var expected = 'test';
  test.identical( got, expected );

  test.case = 'Empty array';
  var got = _.strStrip( [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'Array with single string';
  var got = _.strStrip( [ '' ] );
  var expected = [ '' ];
  test.identical( got, expected );

  test.case = 'vectorized input';
  var got = _.strStrip( [ '\nab  ', ' cd\s', ' ef  ' ] );
  var expected = [ 'ab', 'cd', 'ef' ];
  test.identical( got, expected );

  test.case = 'vectorized input - map argument';
  var got = _.strStrip( { src : [ '\nab  ', ' cd\s', ' ef  ' ], stripper : [ 'a', 'f' ] }  );
  var expected = [ 'b', 'cd', 'f' ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strStrip( '1', '2', '3' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strStrip( 123 );
  });

  test.case = 'invalid property type';
  test.shouldThrowError( function()
  {
    _.strStrip( { src : ' word ', delimeter : 0 } );
  });

  test.case = 'invalid property defined';
  test.shouldThrowError( function()
  {
    _.strStrip( { src : ' word ', delimeter : ' ', left : 1 } );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strStrip();
  });

  test.case = 'null argument';
  test.shouldThrowError( function( )
  {
    _.strStrip( null );
  } );

  test.case = 'NaN argument';
  test.shouldThrowError( function( )
  {
    _.strStrip( NaN );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strStrip( ' test ', 'redundant argument' );
  } );

}

//

/* qqq : uncover it please */

function strStrip( test )
{
  var cases =
  [
    { description : 'defaults, src is a string' },
    { src : '', expected : '' },
    { src : 'a', expected : 'a' },
    { src : '   a   ', expected : 'a' },
    { src : ' \0 a \0 ', expected : 'a' },
    { src : '\r\n\t\f\v a \v\r\n\t\f', expected : 'a' },
    { src : '\r\n\t\f\v hello world \v\r\n\t\f', expected : 'hello world' },

    { description : 'stripper contains regexp special symbols' },
    { src : { src : '\\s\\s', stripper : '\\s' } , expected : '' },
    { src : { src : '(x)(x)', stripper : '(x)' } , expected : '' },
    { src : { src : 'abc', stripper : '[abc]' } , expected : 'abc' },
    { src : { src : '[abc]', stripper : '[abc]' } , expected : '' },
    { src : { src : 'abc', stripper : '[^abc]' } , expected : 'abc' },
    { src : { src : 'abc', stripper : '[a-c]' } , expected : 'abc' },
    { src : { src : '[a-c]', stripper : '[a-c]' } , expected : '' },
    { src : { src : 'ab(a|b)', stripper : '(a|b)' } , expected : 'ab' },
    { src : { src : 'gp', stripper : 'a+' } , expected : 'gp' },
    { src : { src : 'hp', stripper : 'b{3}' } , expected : 'hp' },
    { src : { src : 'acbc', stripper : '^[ab]c$' } , expected : 'acbc' },

    { description : 'stripper is regexp' },
    { src : { src : ' abc', stripper : /[abc]/ } , expected : ' bc' },
    { src : { src : 'abc', stripper : /\D/ } , expected : 'bc' },
    { src : { src : 'abc', stripper : /[abc]$/ } , expected : 'ab' },
    { src : { src : 'abc', stripper : /abc/ } , expected : '' },
    { src : { src : 'hello', stripper : /lo?/ } , expected : 'helo' },

    {
      description : 'defaults, src is an array',
      src :
      [
        '',
        'a',
        '   a   ',
        ' \0 a \0 ',
        '\r\n\t\f\v a \v\r\n\t\f'
      ],
      expected :
      [
        '',
        'a',
        'a',
        'a',
        'a'
      ]
    },
    {
      description : 'src array of strings, custom stripper',
      src :
      {
        src :
        [
          '',
          'a',
          ' a ',
          '  a  ',
          ' \n ',
          ' a b c ',
        ],
        stripper : ' '
      },
      expected :
      [
        '',
        'a',
        'a',
        'a',
        '\n',
        'abc'
      ]
    },
    {
      description : 'src array of strings, custom stripper as regexp',
      src :
      {
        src :
        [
          'x',
          'xx',
          'axbxc',
          'x\nx'
        ],
        stripper : new RegExp( 'x' ),
      },
      expected :
      [
        '',
        'x',
        'abxc',
        '\nx'
      ]
    },
    {
      description : 'src array of strings, custom stripper as regexp',
      src :
      {
        src :
        [
          'abc',
          'acb',
          'bac',
          'cab',
        ],
        stripper : /abc|[abc]/,
      },
      expected :
      [
        '',
        'cb',
        'ac',
        'ab'
      ]
    },
    {
      description : 'src array of strings, custom stripper as regexp',
      src :
      {
        src :
        [
          'abc',
          'acb',
          'bac',
          'bca',
          'cba',
          'cab',
        ],
        stripper : /[abc]/g,
      },
      expected : [ '','','', '', '', '' ]
    },
    {
      description : 'src string, stripper array of strings',
      src :
      {
        src : 'xxyy',
        stripper :
        [
          'x',
          'y',
        ]
      },
      expected : ''
    },
    {
      src :
      {
        src : 'jjkk',
        stripper :
        [
          'x',
          'y',
        ]
      },
      expected : 'jjkk'
    },
    {
      description : 'invalid type',
      args : 0,
      err : true
    },
    {
      description : 'too many arguments',
      args : [ 'a', '' ],
      err : true
    },
    {
      description : 'null argument',
      args : [ null ],
      err : true
    },
    {
      description : 'NaN arguments',
      args : [ NaN ],
      err : true
    },
    {
      description : 'one string has invalid type',
      args : [ [ 'a', 0, 'b' ] ],
      err : true
    },
    {
      description : 'stripper has invalid type',
      args : [ { src : 'a', stripper : 0 } ],
      err : true
    },
    {
      description : 'stripper has invalid type',
      args : [ { src : 'a', stripper : [ 'a', 0 ] } ],
      err : true
    },
    {
      description : 'null stripper',
      args : [ { src : [ 'a', 'b' ], stripper : null } ],
      err : true
    },
    {
      description : 'NaN stripper',
      args : [ { src : [ 'a', 'b' ], stripper : NaN } ],
      err : true
    },

  ]

  /**/

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.description )
    test.case = c.description;

    if( c.err )
    test.shouldThrowError( () => _.strStrip.apply( _, _.arrayAs( c.args ) ) );

    if( c.src )
    {
      var identical = test.identical( _.strStrip( c.src ), c.expected );
      if( !identical )
      {
        debugger;
        test.identical( _.strStrip( c.src ), c.expected )
        debugger;
      }
    }

  }

}

//

function strStripLeft( test )
{
  var cases =
  [
    { description : 'defaults, src is a string' },
    { src : '   a   ', expected : 'a   ' },
    { src : ' \0 a \0 ', expected : 'a \u0000 ' },
    { src : '\r\v a \v\r\n\t\f', expected : 'a \u000b\r' },
    { src : '\0 hello world \0', expected : 'hello world \u0000' },

    {
      description : 'defaults, src is an array',
      src :
      [
        '',
        'a',
        '   a   ',
        ' \0 a \0 ',
        '\r\n\t\f\v a \v\r'
      ],
      expected :
      [
        '',
        'a',
        'a   ',
        'a \u0000 ',
        'a \u000b\r'
      ]
    },
    {
      description : 'invalid type',
      args : 0,
      err : true
    },
    {
      description : 'too many arguments',
      args : [ 'a', '' ],
      err : true
    },
    {
      description : 'null argument',
      args : [ null ],
      err : true
    },
    {
      description : 'NaN arguments',
      args : [ NaN ],
      err : true
    },
    {
      description : 'one string has invalid type',
      args : [ [ 'a', 0, 'b' ] ],
      err : true
    },

  ]

  /**/

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.description )
    test.case = c.description;

    if( c.err )
    test.shouldThrowError( () => _.strStripLeft.apply( _, _.arrayAs( c.args ) ) );

    if( c.src )
    {
      var identical = test.identical( _.strStripLeft( c.src ), c.expected );
      if( !identical )
      {
        debugger;
        test.identical( _.strStripLeft( c.src ), c.expected )
        debugger;
      }
    }

  }

}

//

function strStripRight( test )
{
  var cases =
  [
    { description : 'defaults, src is a string' },
    { src : '   ul   ', expected : '   ul' },
    { src : ' \0 om \0 ', expected : ' \u0000 om' },
    { src : '\r\v a \v\n\t\f\r', expected : '\r\u000b a' },
    { src : '\0 hello world \0', expected : '\u0000 hello world' },

    {
      description : 'defaults, src is an array',
      src :
      [
        '',
        'a',
        '   a   ',
        ' \0 a \0 ',
        '\r\v a \v\n\t\f\r'
      ],
      expected :
      [
        '',
        'a',
        '   a',
        ' \u0000 a',
        '\r\u000b a'
      ]
    },
    {
      description : 'invalid type',
      args : 0,
      err : true
    },
    {
      description : 'too many arguments',
      args : [ 'a', '' ],
      err : true
    },
    {
      description : 'null argument',
      args : [ null ],
      err : true
    },
    {
      description : 'NaN arguments',
      args : [ NaN ],
      err : true
    },
    {
      description : 'one string has invalid type',
      args : [ [ 'a', 0, 'b' ] ],
      err : true
    },

  ]

  /**/

  for( var i = 0; i < cases.length; i++ )
  {
    var c = cases[ i ];

    if( c.description )
    test.case = c.description;

    if( c.err )
    test.shouldThrowError( () => _.strStripRight.apply( _, _.arrayAs( c.args ) ) );

    if( c.src )
    {
      var identical = test.identical( _.strStripRight( c.src ), c.expected );
      if( !identical )
      {
        debugger;
        test.identical( _.strStripRight( c.src ), c.expected )
        debugger;
      }
    }

  }

}


//

function strRemoveAllSpaces( test )
{

  test.case = 'removes the spaces from the borders';
  var got = _.strRemoveAllSpaces( '  abcdef  ' );
  var expected = 'abcdef';
  test.identical( got, expected );

  test.case = 'removes the spaces from the given string';
  var got = _.strRemoveAllSpaces( 'a b c d e f' );
  var expected = 'abcdef';
  test.identical( got, expected );

  test.case = 'replaces the all spaces with the commas';
  var got = _.strRemoveAllSpaces( 'a b c d e f', ',' );
  var expected = 'a,b,c,d,e,f';
  test.identical( got, expected );

  test.case = 'simple string, default options';
  var got = _.strRemoveAllSpaces( 'a b c d e' );
  var expected = 'abcde';
  test.identical( got, expected );

  test.case = 'sub defined';
  var got = _.strRemoveAllSpaces( 'a b c d e', ', ' );
  var expected = 'a, b, c, d, e';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.strRemoveAllSpaces( ' ' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'sub as word';
  var got = _.strRemoveAllSpaces( 'a b c', ' and ' );
  var expected = 'a and b and c';
  test.identical( got, expected );

  test.case = 'sub as number';
  var got = _.strRemoveAllSpaces( 'a b c', 0 );
  var expected = 'a0b0c';
  test.identical( got, expected );

  test.case = 'sub as array';
  var got = _.strRemoveAllSpaces( 'a b c d e', [ 5, 6 ] );
  var expected = 'a5,6b5,6c5,6d5,6e';
  test.identical( got, expected );

  test.case = 'sub as null';
  var got = _.strRemoveAllSpaces( 'a b c d e', null );
  var expected = 'anullbnullcnulldnulle';
  test.identical( got, expected );

  test.case = 'sub as NaN';
  var got = _.strRemoveAllSpaces( 'a b c d e', NaN );
  var expected = 'aNaNbNaNcNaNdNaNe';
  test.identical( got, expected );

  test.case = 'sub as regexp';
  var got = _.strRemoveAllSpaces( 'a b c d e', /a$/ );
  var expected = 'a/a$/b/a$/c/a$/d/a$/e';
  test.identical( got, expected );

  test.case = 'vectorized input';
  var got = _.strRemoveAllSpaces( [ '  a b ', 'c  d ', ' e f ' ] );
  var expected = [ 'ab', 'cd', 'ef' ];
  test.identical( got, expected );

  test.case = 'vectorized input';
  var got = _.strRemoveAllSpaces( [ '  a b ', 'c  d ', ' e f ' ], '-' );
  var expected = [ '--a-b-', 'c--d-', '-e-f-' ];
  test.identical( got, expected );

  test.case = 'vectorized input';
  var got = _.strRemoveAllSpaces( [ '  a b ', 'c  d ', ' e f ' ], 3 );
  var expected = [ '33a3b3', 'c33d3', '3e3f3' ];
  test.identical( got, expected );

  test.case = 'vectorized input';
  var got = _.strRemoveAllSpaces( [ 'a b', 'cd ', ' ef' ], [ 0, 1 ] );
  var expected = [ 'a0,1b', 'cd0,1', '0,1ef' ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strRemoveAllSpaces( '1', '2', '3' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strRemoveAllSpaces( 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strRemoveAllSpaces();
  });

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strRemoveAllSpaces( 13 );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strRemoveAllSpaces( 'a b c d e f', ',', 'redundant argument' );
  } );

  test.case = 'Null argument';
  test.shouldThrowError( function( )
  {
    _.strRemoveAllSpaces( null );
  } );

  test.case = 'NaN argument';
  test.shouldThrowError( function( )
  {
    _.strRemoveAllSpaces( NaN );
  } );

  test.case = 'Regexp argument';
  test.shouldThrowError( function( )
  {
    _.strRemoveAllSpaces( /^a/ );
  } );

}

//

function strStripEmptyLines( test )
{

  test.case = 'simple string';
  var got = _.strStripEmptyLines( 'line_one\n\nline_two' );
  var expected = 'line_one\nline_two';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.strStripEmptyLines( '' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'single line';
  var got = _.strStripEmptyLines( 'b' );
  var expected = 'b';
  test.identical( got, expected );

  test.case = 'multiple breaklines';
  var got = _.strStripEmptyLines( '\n\na\n\nb\n\n\n' );
  var expected = 'a\nb';
  test.identical( got, expected );

  test.case = 'Lines with spaces';
  var got = _.strStripEmptyLines( ' line one\n\n line two \n\n line 3 \n' );
  var expected = ' line one\n line two \n line 3 ';
  test.identical( got, expected );

  test.case = 'Lines with spaces and tabs';
  var got = _.strStripEmptyLines( ' line one\n\t\n\n line \t two \n\n line 3 \n' );
  var expected = ' line one\n line \t two \n line 3 ';
  test.identical( got, expected );

  test.case = 'Array input';
  var got = _.strStripEmptyLines( [ '  a \n\n b ', ' \nc  d \n\n\n ' ] );
  var expected = [ '  a \n b ', 'c  d ' ];
  test.identical( got, expected );

  test.case = 'Empty array input';
  var got = _.strStripEmptyLines( [ ] );
  var expected = [ ];
  test.identical( got, expected );


  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( '1', '2', '3' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines();
  });

  test.case = 'null argument';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( null );
  });

  test.case = 'NaN argument';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( NaN );
  });

  test.case = 'Regexp argument';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( /a?$/ );
  });

  test.case = 'Array with wrong arguments';
  test.shouldThrowError( function()
  {
    _.strStripEmptyLines( [ null, NaN, 3, /a?$/ ] );
  });

}

//

function strSub( test )
{

  test.case = 'simple string - get all';
  var got = _.strSub( 'Hello', [ 0, 5 ] );
  var expected = 'Hello';
  test.identical( got, expected );

  test.case = 'simple string - range bigger than length';
  var got = _.strSub( 'Hello', [ 0, 8 ] );
  var expected = 'Hello';
  test.identical( got, expected );

  test.case = 'simple string - get subString';
  var got = _.strSub( 'Hello', [ 0, 4 ] );
  var expected = 'Hell';
  test.identical( got, expected );

  test.case = 'simple string - get end of string';
  var got = _.strSub( 'Hello', [ 3, 5 ] );
  var expected = 'lo';
  test.identical( got, expected );

  test.case = 'simple string - range reversed';
  var got = _.strSub( 'Hello', [ 4, 0 ] );
  var expected = 'Hell';
  test.identical( got, expected );

  test.case = 'simple string - range in the middle of the string';
  var got = _.strSub( 'Hello', [ 2, 3 ] );
  var expected = 'l';
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.strSub( '', [ 2, 3 ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'Input array';
  var got = _.strSub( [ 'Hello', 'World'], [ 3, 4 ] );
  var expected = [ 'l', 'l' ];
  test.identical( got, expected );


  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strSub();
  });

  test.case = 'Too many arguments';
  test.shouldThrowError( function()
  {
    _.strSub( '1', '2', '3' );
  });

  test.case = 'Too many ranges';
  test.shouldThrowError( function()
  {
    _.strSub( 'Hello world', [ 0, 1 ], [ 2, 3 ] );
  });

  test.case = 'Not enough arguments';
  test.shouldThrowError( function()
  {
    _.strSub( '1' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strSub( 123, [ 0, 1 ] );
  });

  test.case = 'null argument';
  test.shouldThrowError( function()
  {
    _.strSub( null, [ 0, 1 ] );
  });

  test.case = 'NaN argument';
  test.shouldThrowError( function()
  {
    _.strSub( NaN, [ 0, 1 ] );
  });

  test.case = 'Regexp argument';
  test.shouldThrowError( function()
  {
    _.strSub( /a?$/, [ 0, 1 ] );
  });

  test.case = 'invalid argument range';
  test.shouldThrowError( function()
  {
    _.strSub( 'hi ', 123 );
  });

  test.case = 'null range';
  test.shouldThrowError( function()
  {
    _.strSub( 'good morning', null );
  });

  test.case = 'NaN range';
  test.shouldThrowError( function()
  {
    _.strSub( 'good afternoon', NaN );
  });

  test.case = 'Regexp range';
  test.shouldThrowError( function()
  {
    _.strSub( 'good night', /a?$/ );
  });

  test.case = 'Array with wrong arguments';
  test.shouldThrowError( function()
  {
    _.strSub( [ null, NaN, 3, /a?$/ ], [ 0, 1 ] );
  });

  test.case = 'Range array with wrong arguments';
  test.shouldThrowError( function()
  {
    _.strSub( [ 'Hello', 'world' ], [ null, NaN ] );
  });

  test.case = 'Range array empty';
  test.shouldThrowError( function()
  {
    _.strSub( [ 'Hello', 'world' ], [ ] );
  });

  test.case = 'Range array with not enough arguments';
  test.shouldThrowError( function()
  {
    _.strSub( [ 'Hello', 'world' ], [ 2 ] );
  });

  test.case = 'Range array with too many arguments';
  test.shouldThrowError( function()
  {
    _.strSub( [ 'Hello', 'world' ], [ 2, 3, 4 ] );
  });

}

//

function strReplaceWords( test )
{

  test.case = 'simple string';
  var got = _.strReplaceWords( 'a b c d',[ 'b', 'c' ], [ 'x', 'y' ] );
  var expected = 'a x y d';
  test.identical( got, expected );

  test.case = 'escaping string';
  var got = _.strReplaceWords( '\na b \n c d',[ 'b', 'c' ], [ 'x', 'y' ] );
  var expected = '\na x \n y d';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strReplaceWords( '1', '2');
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strReplaceWords( 123,[],[] );
  });

  test.case = 'invalid arrays length';
  test.shouldThrowError( function()
  {
    _.strReplaceWords( 'one two',[ 'one' ],[ 'one', 'two' ] );
  });

  test.case = 'invalid second arg type';
  test.shouldThrowError( function()
  {
    _.strReplaceWords( 'one two',5,[ 'one', 'two' ] );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strReplaceWords();
  });

}

//

function strJoin( test )
{

  /* - */

  test.open( 'single argument' );

  test.case = 'join nothing';
  var got = _.strJoin([]);
  var expected = [];
  test.identical( got, expected );

  test.case = 'join empty vector';
  var got = _.strJoin([ [] ]);
  var expected = [];
  test.identical( got, expected );

  test.case = 'join empty vectors';
  var got = _.strJoin([ [], [] ]);
  var expected = [];
  test.identical( got, expected );

  test.case = 'join empty vector and string';
  var got = _.strJoin([ [], 'abc' ]);
  var expected = [];
  test.identical( got, expected );

  // test.case = 'join empty vector and strings';
  // var got = _.strJoin([ [], [ 'abc', 'def' ] ]);
  // var expected = [];
  // test.identical( got, expected );

  test.case = 'join numbers';
  var got = _.strJoin([ 1, 2, 3 ]);
  var expected = '123';
  test.identical( got, expected );

  test.case = 'join strings';
  var got = _.strJoin([ '1', '2', '3' ]);
  var expected = '123';
  test.identical( got, expected );

  test.case = 'join two arrays';
  var got = _.strJoin([ [ 'b', 'c' ], [ 'x', 'y' ] ]);
  var expected = [ 'bx', 'cy' ];
  test.identical( got, expected );

  test.case = 'join string + number';
  var got = _.strJoin([ 1, 2, '3' ]);
  var expected = '123';
  test.identical( got, expected );

  test.case = 'join array + string';
  var got = _.strJoin([ [ 1, 2 ], '3' ]);
  var expected = [ '13', '23' ];
  test.identical( got, expected );

  test.case = 'join array + number';
  var got = _.strJoin([ [ 1, 2 ], 3 ]);
  var expected = [ '13', '23' ];
  test.identical( got, expected );

  test.case = 'one argument';
  var got = _.strJoin([ '1' ]);
  var expected = '1';
  test.identical( got, expected );

  test.case = 'NaN argument';
  var got = _.strJoin([ '1', NaN ]);
  var expected = '1NaN';
  test.identical( got, expected );

  test.case = 'different types';
  var got = _.strJoin([ 1, '2', [ '3', 4 ], 5, '6' ]);
  var expected = [ "12356", "12456" ];
  test.identical( got, expected );

  test.case = 'different types with two arrays';
  var got = _.strJoin([ '1', 2, [ 3, 4, 5 ], [ 6, 7, 8 ] ]);
  var expected = [ "1236", "1247", "1258" ];
  test.identical( got, expected );

  test.close( 'single argument' );

  /* - */

  test.open( 'two arguments' );

  test.case = 'join number array with joiner';
  var got = _.strJoin( [ 1, 2 ], '3' );
  var expected = '132';
  test.identical( got, expected );

  test.case = 'join string array with joiner';
  var got = _.strJoin( [ 'b', 'c' ], '0' );
  var expected = 'b0c';
  test.identical( got, expected );

  test.case = 'join string array with joiner';
  var got = _.strJoin( [ 'Hello', 'world', '!' ], ' ' );
  var expected = 'Hello world !';
  test.identical( got, expected );

  test.case = 'join array and joiner';
  var got = _.strJoin( [ 0, [ '1', '2' ] ], '3' );
  var expected = [ '031', '032' ];
  test.identical( got, expected );

  test.case = 'join arrays and joiner';
  var got = _.strJoin( [ 0, [ '1', '2' ], [ 'a', 'b'] ], '-' );
  var expected = [ '0-1-a', '0-2-b' ];
  test.identical( got, expected );

  test.case = 'join umber arrays and joiner';
  var got = _.strJoin( [ [ 0, 3, 6 ], [ 1, 4, 7 ], [ 2, 5, 8 ] ], 'x' );
  var expected = [ '0x1x2', '3x4x5', '6x7x8' ];
  test.identical( got, expected );

  test.case = 'join array + string + joiner';
  var got = _.strJoin([ [ 1, 2 ], '3' ], '__');
  var expected = [ '1__3', '2__3' ];
  test.identical( got, expected );

  test.case = 'Undefined joiner';
  var got = _.strJoin([ [ 1, 2 ], '3' ], undefined );
  var expected = [ '13', '23' ];
  test.identical( got, expected );

  test.close( 'two arguments' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'No arguments';
  test.shouldThrowError( function()
  {
    _.strJoin( );
  });

  test.case = 'Too many arguments';
  test.shouldThrowError( function()
  {
    _.strJoin( '1', '2', '3' );
  });

  test.case = 'Empty arguments';
  test.shouldThrowError( function()
  {
    _.strJoin( [ ], [ ] );
  });

  test.case = 'invalid argument type in array';
  test.shouldThrowError( function()
  {
    _.strJoin([ { a : 1 }, [ 1 ], [ 2 ] ]);
  });

  test.case = 'null argument in array';
  test.shouldThrowError( function()
  {
    _.strJoin([ '1', null ]);
  });

  test.case = 'null argument in array';
  test.shouldThrowError( function()
  {
    _.strJoin([ '1', undefined ]);
  });

  test.case = 'RegExp argument in array';
  test.shouldThrowError( function()
  {
    _.strJoin([ '1', /a?/ ]);
  });

  test.case = 'arrays with different lengths in array';
  test.shouldThrowError( function()
  {
    _.strJoin([ [ 1, 2 ], [ 1 ], [ 2 ] ]);
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strJoin( { a : 1 }, [ 1 ] );
  });

  test.case = 'null argument';
  test.shouldThrowError( function()
  {
    _.strJoin( [ '1' ], null, null );
  });

  test.case = 'NaN argument';
  test.shouldThrowError( function()
  {
    _.strJoin( [ '1' ], NaN );
  });

  test.case = 'Wrong argument';
  test.shouldThrowError( function()
  {
    _.strJoin( '1', 2 );
  });

  test.case = 'RegExp argument';
  test.shouldThrowError( function()
  {
    _.strJoin( '1', /a?/ );
  });

  test.case = 'arrays with different length';
  test.shouldThrowError( function()
  {
    _.strJoin( [ 1, 2 ], [ 1 ] );
  });

}

//

function strJoinPath( test )
{
  // Simple
  test.case = 'Empty';
  var got = _.strJoinPath( [ ], '' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'join string array with joiner';
  var got = _.strJoinPath( [ 'b', 'c' ], '0' );
  var expected = 'b0c';
  test.identical( got, expected );

  test.case = 'join string array with joiner';
  var got = _.strJoinPath( [ 'Hello', 'world', '!' ], ' ' );
  var expected = 'Hello world !';
  test.identical( got, expected );

  test.case = 'join array with joiner';
  var got = _.strJoinPath( [ '1', '2', '4' ], '/' );
  var expected = '1/2/4';
  test.identical( got, expected );

  test.case = 'join array with joiner ( only numbers )';
  var got = _.strJoinPath( [ 1, 2, 4 ], '/' );
  var expected = '1/2/4';
  test.identical( got, expected );

  test.case = 'join array with joiner ( string and numbers )';
  var got = _.strJoinPath( [ 1, '4 is smaller than 2', 4 ], '/' );
  var expected = '1/4 is smaller than 2/4';
  test.identical( got, expected );


  test.case = 'join array and joiner';
  var got = _.strJoinPath( [ '0', [ '1', '2' ] ], '3' );
  var expected = [ '031', '032' ];
  test.identical( got, expected );

  test.case = 'join arrays and joiner';
  var got = _.strJoinPath( [ '0', [ '1', '2' ], [ 'a', 'b'] ], '-' );
  var expected = [ '0-1-a', '0-2-b' ];
  test.identical( got, expected );

  test.case = 'join arrays and joiner';
  var got = _.strJoinPath( [ [ '0', '3', '6' ], [ '1', '4', '7' ], [ '2', '5', '8' ] ], 'x' );
  var expected = [ '0x1x2', '3x4x5', '6x7x8' ];
  test.identical( got, expected );

  test.case = 'join array + string + joiner';
  var got = _.strJoinPath([ [ '1', '2' ], '3' ], '__');
  var expected = [ '1__3', '2__3' ];
  test.identical( got, expected );

  test.case = 'join array + string + joiner ( with numbers )';
  var got = _.strJoinPath([ [ 1, 2 ], 3, 'string' ], '__');
  var expected = [ '1__3__string', '2__3__string' ];
  test.identical( got, expected );

  //Joiner in src strings

  test.case = 'String does not end with joiner';
  var got = _.strJoinPath( [ 'Hi,', 'world' ], '/' );
  var expected = 'Hi,/world';
  test.identical( got, expected );

  test.case = 'String ends with joiner';
  var got = _.strJoinPath( [ 'Hi,', 'world' ], ',' );
  var expected = 'Hi,world';
  test.identical( got, expected );

  test.case = 'String ends with joiner';
  var got = _.strJoinPath( [ 'Hi,', 'world', 2 ], ',' );
  var expected = 'Hi,world,2';
  test.identical( got, expected );

  test.case = 'String does not begin with joiner';
  var got = _.strJoinPath( [ 'Hi', ',world' ], '/' );
  var expected = 'Hi/,world';
  test.identical( got, expected );

  test.case = 'String begins with joiner';
  var got = _.strJoinPath( [ 'Hi', ',world' ], ',' );
  var expected = 'Hi,world';
  test.identical( got, expected );

  test.case = 'String begins and ends with joiner';
  var got = _.strJoinPath( [ '/1/', '/2/', '/3/', 4, '/5/' ], '/' );
  var expected = '/1/2/3/4/5/';
  test.identical( got, expected );

  test.case = 'String begins and ends with joiner';
  var got = _.strJoinPath( [ '/1//', '/2//', '//4/' ], '/' );
  var expected = '/1//2///4/';
  test.identical( got, expected );


  /**/

  if( !Config.debug )
  return;

  test.case = 'No arguments';
  test.shouldThrowError( function()
  {
    _.strJoinPath( );
  });

  test.case = 'Too few arguments';
  test.shouldThrowError( function()
  {
    _.strJoinPath( [ '1' ] );
  });

  test.case = 'Too many arguments';
  test.shouldThrowError( function()
  {
    _.strJoinPath( [ '1' ], '2', '3' );
  });

  test.case = 'invalid argument type in array';
  test.shouldThrowError( function()
  {
    _.strJoinPath([ { a : 1 }, [ '1' ], [ '2' ] ], '/' );
  });

  test.case = 'null argument in array';
  test.shouldThrowError( function()
  {
    _.strJoinPath([ '1', null ], '/' );
  });

  test.case = 'null argument in array';
  test.shouldThrowError( function()
  {
    _.strJoinPath([ '1', undefined ], '/' );
  });

  test.case = 'RegExp argument in array';
  test.shouldThrowError( function()
  {
    _.strJoinPath([ '1', /a?/ ], '/' );
  });

  test.case = 'arrays with different lengths in array';
  test.shouldThrowError( function()
  {
    _.strJoinPath([ [ 1, 2 ], [ 1 ], [ 2 ] ], '/' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strJoinPath( { a : 1 }, [ 1 ] );
  });

  test.case = 'null argument';
  test.shouldThrowError( function()
  {
    _.strJoinPath( [ '1' ], null );
  });

  test.case = 'NaN argument';
  test.shouldThrowError( function()
  {
    _.strJoinPath( [ '1' ], NaN );
  });

  test.case = 'Wrong argument';
  test.shouldThrowError( function()
  {
    _.strJoinPath( '1', 2 );
  });

  test.case = 'RegExp argument';
  test.shouldThrowError( function()
  {
    _.strJoinPath( '1', /a?/ );
  });

  test.case = 'arrays with different length';
  test.shouldThrowError( function()
  {
    _.strJoinPath( [ [ 1, 2 ], [ 1 ] ], '/' );
  });

}

//

function strUnjoin( test )
{
  var any = _.strUnjoin.any;

  test.case = 'case 1';
  var got = _.strUnjoin( 'prefix_something_postfix',[ 'prefix', any, 'postfix' ] );
  var expected = [ "prefix", "_something_", "postfix" ];
  test.identical( got, expected );

  test.case = 'case 2a';
  var got = _.strUnjoin( 'prefix_something_postfix',[ any, 'something', 'postfix' ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 2b';
  var got = _.strUnjoin( 'prefix_something_postfix',[ any, 'something', any, 'postfix' ] );
  var expected = [ "prefix_", "something", '_', "postfix" ];
  test.identical( got, expected );

  test.case = 'case 3a';
  var got = _.strUnjoin( 'prefix_something_postfix', [ 'something', 'postfix', any ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 3b';
  var got = _.strUnjoin( 'prefix_something_postfix', [ any, 'something', any, 'postfix', any ] );
  var expected = [ "prefix_","something","_", "postfix", "" ];
  test.identical( got, expected );

  test.case = 'case 4';
  var got = _.strUnjoin( 'abc', [ any ] );
  var expected = [ "abc" ];
  test.identical( got, expected );

  test.case = 'case 5';
  var got = _.strUnjoin( 'abc', [ 'a', any ] );
  var expected = [ "a", "bc" ];
  test.identical( got, expected );

  test.case = 'case 5b';
  var got = _.strUnjoin( 'abc', [ any, 'a'  ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 6';
  var got = _.strUnjoin( 'abc', [ 'b', any ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 6b';
  var got = _.strUnjoin( 'abc', [ any, 'b' ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 7';
  var got = _.strUnjoin( 'abc', [ any, 'c' ] );
  var expected = [ "ab", "c" ];
  test.identical( got, expected );

  test.case = 'case 7b';
  var got = _.strUnjoin( 'abc', [ 'c', any ] );
  var expected = undefined;
  test.identical( got, expected );

  test.case = 'case 8';
  var got = _.strUnjoin( 'abc', [ 'a', any, 'c' ] );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'case 9';
  var got = _.strUnjoin( 'abc', [ any, 'b', any ] );
  var expected = [ 'a', 'b', 'c' ];
  test.identical( got, expected );

  test.case = 'case 9b';
  var got = _.strUnjoin( 'abc', [ any, 'c', any ] );
  var expected = [ 'ab', 'c', '' ];
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strUnjoin();
  });

  test.case = 'Not enough arguments';
  test.shouldThrowError( function()
  {
    _.strUnjoin( '1' );
  });

  test.case = 'Too many arguments';
  test.shouldThrowError( function()
  {
    _.strUnjoin( '1', '2', '3' );
  });

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 123, [] );
  });

  test.case = 'invalid second arg type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', 123 );
  });

  test.case = 'invalid array element type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', [ 1, 'two' ] );
  });

  test.case = 'null first argument type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( null, [] );
  });

  test.case = 'null second arg type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', null );
  });

  test.case = 'null array element type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', [ null, 'two' ] );
  });

  test.case = 'NaN first argument type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( NaN, [] );
  });

  test.case = 'NaN second arg type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', NaN );
  });

  test.case = 'NaN array element type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', [ NaN, 'two' ] );
  });

  test.case = 'RegExp first argument type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( /\d$/, [] );
  });

  test.case = 'RegExp second arg type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', /\D$/ );
  });

  test.case = 'RegExp array element type';
  test.shouldThrowError( function()
  {
    _.strUnjoin( 'one two', [ /^\d/, 'two' ] );
  });

}

//

function strUnicodeEscape( test )
{

  test.case = 'simple string';
  var got = _.strUnicodeEscape( 'prefix' );
  var expected = "\\u0070\\u0072\\u0065\\u0066\\u0069\\u0078";
  test.identical( got, expected );

  test.case = 'escaping';
  var got = _.strUnicodeEscape( '\npostfix//' );
  var expected = "\\u000a\\u0070\\u006f\\u0073\\u0074\\u0066\\u0069\\u0078\\u002f\\u002f";
  test.identical( got, expected );

  test.case = 'empty string';
  var got = _.strUnicodeEscape( '' );
  var expected = "";
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strUnicodeEscape( '1', '2', '3' );
  });

  test.case = 'invalid  argument type';
  test.shouldThrowError( function()
  {
    _.strUnicodeEscape( 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strUnicodeEscape();
  });

}

//

function strCount( test )
{

  test.open( 'string' );

  test.case = 'none';
  var got = _.strCount( 'abc', 'z' );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'nl';
  var got = _.strCount( 'abc\ndef\nghi', '\n' );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'simple string';
  var got = _.strCount( 'ababacabacabaaba','aba' );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'empty src';
  var got = _.strCount( '', 'abc' );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'empty ins';
  var got = _.strCount( 'abc', '' );
  var expected = 3;
  test.identical( got, expected );

  test.close( 'string' );

  /* */

  test.open( 'regexp' );

  test.case = 'none';
  var got = _.strCount( 'abc', /z/ );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'nl';
  var got = _.strCount( 'abc\ndef\nghi', /\n/m );
  var expected = 2;
  test.identical( got, expected );

  test.case = 'simple string';
  var got = _.strCount( 'ababacabacabaaba', /aba/ );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'empty src';
  var got = _.strCount( '', /a/ );
  var expected = 0;
  test.identical( got, expected );

  test.case = 'empty ins';
  var got = _.strCount( 'abc', RegExp( '' ) );
  var expected = 3;
  test.identical( got, expected );

  test.close( 'regexp' );

  /* */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strCount( );
  } );

  test.case = 'first argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strCount( [  ], '\n' );
  } );

  test.case = 'second argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strCount( 'abc\ndef\nghi', 13 );
  } );

  test.case = 'not enough arguments';
  test.shouldThrowError( function( )
  {
    _.strCount( 'abc\ndef\nghi' );
  } );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strCount( '1', '2', '3' );
  });

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strCount( 123, '1' );
  });

  test.case = 'invalid second arg type';
  test.shouldThrowError( function()
  {
    _.strCount( 'one two', 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strCount();
  });

}

//

function strDup( test )
{

  test.case = 'srcString  and number of times remain unchanged';
  var srcString = 'Hi, ';
  var times = 3;
  var got = _.strDup( srcString, times );

  var expected = 'Hi, Hi, Hi, ';
  test.identical( got, expected );

  var oldSrcString = 'Hi, ';
  test.identical( srcString, oldSrcString );

  var oldTimes = 3;
  test.identical( times, oldTimes );

  test.case = 'concatenation test';
  var got = _.strDup( 'a', 2 );
  var expected = 'aa';
  test.identical( got, expected );

  test.case = 'simple string';
  var got = _.strDup( 'ab', 2 );
  var expected = 'abab';
  test.identical( got, expected );

  test.case = 'invalid times value';
  var got = _.strDup( 'a', -2 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'zero times';
  var got = _.strDup( 'a', 0 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'returns the empty string';
  var got = _.strDup( 'abc ', 0 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'Second argument NaN';
  var got = _.strDup( 'abc', NaN );
  var expected = '';
  test.identical( got, expected );

  test.case = 'Two words with a spaces';
  var got = _.strDup( 'Hi world ', 2 );
  var expected = 'Hi world Hi world ';
  test.identical( got, expected );

  test.case = 'one space';
  var got = _.strDup( ' ', 2 );
  var expected = '  ';
  test.identical( got, expected );

  test.case = 'returns the first copy of the given string';
  var got = _.strDup( 'abc', 1 );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'copies and concatenates first argument three times';
  var got = _.strDup( 'abc', 3 );
  var expected = 'abcabcabc';
  test.identical( got, expected );

  test.case = 'copies and concatenates first argument 10 times';
  var got = _.strDup( '1', 10 );
  var expected = '1111111111';
  test.identical( got, expected );

  test.case = 'vectorized input concatenated negative times';
  var got = _.strDup( [ 'ab', 'cd', 'ef' ], - 2 );
  var expected = [ '', '', '' ];
  test.identical( got, expected );

  test.case = 'vectorized input concatenated zero times';
  var got = _.strDup( [ 'ab', 'cd', 'ef' ], 0 );
  var expected = [ '', '', '' ];
  test.identical( got, expected );

  test.case = 'vectorized input concatenated one time';
  var got = _.strDup( [ 'ab', 'cd', 'ef' ], 1 );
  var expected = [ 'ab', 'cd', 'ef' ];
  test.identical( got, expected );

  test.case = 'vectorized input concatenated 3 times';
  var got = _.strDup( [ 'ab', 'cd', 'ef' ], 3 );
  var expected = [ 'ababab', 'cdcdcd', 'efefef' ];
  test.identical( got, expected );

  test.case = 'Empty vectorized input';
  var got = _.strDup( [ ], 3 );
  var expected = [];
  test.identical( got, expected );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strDup();
  });

  test.case = 'second argument is not provided';
  test.shouldThrowError( function( )
  {
    _.strDup( 'a' );
  } );

  test.case = 'first argument is not provided';
  test.shouldThrowError( function( )
  {
    _.strDup( 3 );
  } );

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strDup( '1' );
  });

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strDup( '1', '2', 3 );
  });

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strDup( '1', '2', '3' );
  });

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strDup( 123, 1 );
  });

  test.case = 'times is not number';
  test.shouldThrowError( function()
  {
    _.strDup( 'ab', [ 3, 4 ] );
  });

  test.case = 'invalid second arg type';
  test.shouldThrowError( function()
  {
    _.strDup( 'one', 'two'  );
  });

  test.case = 'second argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strDup( 'a', 'wrong argument' );
  } );

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strDup( 1, 2 );
  });

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strDup( [ 1, 2 ], 2 );
  });

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strDup( [ '1', 2 ], 2 );
  });

  test.case = 'invalid second argument type';
  test.shouldThrowError( function()
  {
    _.strDup( '1', '2' );
  });

  test.case = 'null argument';
  test.shouldThrowError( function()
  {
    _.strDup( null, 2 );
  });

  test.case = 'null second argument';
  test.shouldThrowError( function()
  {
    _.strDup( '2', null );
  });

  test.case = 'undefined argument';
  test.shouldThrowError( function()
  {
    _.strDup( undefined, 2 );
  });

  test.case = 'undefined second argument';
  test.shouldThrowError( function()
  {
    _.strDup( '2', undefined );
  });

  test.case = 'NaN argument';
  test.shouldThrowError( function()
  {
    _.strDup( NaN, 2 );
  });

  test.case = 'Regexp argument';
  test.shouldThrowError( function()
  {
    _.strDup( /^\d/, 2 );
  });

  test.case = 'regExp second argument';
  test.shouldThrowError( function()
  {
    _.strDup( '2', /^\d/ );
  });


}

//

function strLinesSelect( test )
{
  var got, expected;
  var src = 'a\nb\nc\nd';

  /* */

  test.case = 'single line selection';

  /**/

  got = _.strLinesSelect( '', 1 );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( 'abc', 1 );
  expected = 'abc';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( 'abc', 0 );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, 1 );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, 2 );
  expected = 'b';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, -1 );
  expected = '';
  test.identical( got, expected );

  /* line number bigger then actual count of lines */

  got = _.strLinesSelect( src, 99 );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, 1, 2 );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 1, 2 ] );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ -1, 2 ] );
  expected = 'a';
  test.identical( got, expected );

  /* - */

  test.case = 'multiline selection';

  /**/

  got = _.strLinesSelect( src, [ -1, -1 ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( '', [ 1, 3 ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 1, 3 ] );
  expected = 'a\nb';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ -1, 2 ] );
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 1, 4 ] );
  expected = 'a\nb\nc';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 99, 4 ] );
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 1, 99 ] );
  expected = src;
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect( src, [ 2, 5 ] );
  expected = 'b\nc\nd';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect({ src, range : [ 2, 5 ], zero : 4 });
  expected = 'a';
  test.identical( got, expected );

  /* - */

  test.case = 'selection without range provided, selectMode : center';

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 2,
    numberOfLines : 3,
    selectMode : 'center',
    zero : 1
  });
  expected = 'a\nb\nc';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 3,
    selectMode : 'center',
    zero : 1
  });
  expected = 'a\nb';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 1,
    selectMode : 'center',
    zero : 1
  });
  expected = 'a';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 99,
    selectMode : 'center',
    zero : 1
  });
  expected = src;
  test.identical( got, expected );

  /**/

  var src = 'a\nb\nc\nd';
  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : -1,
    selectMode : 'center',
    zero : 1
  });
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 0,
    numberOfLines : 1,
    selectMode : 'center',
    zero : 1
  });
  expected = '';
  test.identical( got, expected );

  got = _.strLinesSelect
  ({
    src : '',
    line : 1,
    numberOfLines : 1,
    selectMode : 'center',
    zero : 1
  });
  expected = '';
  test.identical( got, expected );

  /* - */

  test.case = 'selection without range provided, selectMode : begin';

  /*two lines from begining of the string*/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 2,
    selectMode : 'begin',
    zero : 1
  });
  expected = 'a\nb';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : -1,
    numberOfLines : 2,
    selectMode : 'begin',
    zero : 1
  });
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 0,
    selectMode : 'begin',
    zero : 1
  });
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 99,
    selectMode : 'begin',
    zero : 1
  });
  expected = src;
  test.identical( got, expected );

  /* zero > range[ 0 ] */

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 5,
    selectMode : 'begin',
    zero : 2
  });
  expected = src;
  test.identical( got, expected );

  /* - */

  test.case = 'selection without range provided, selectMode : end';

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 4,
    numberOfLines : 2,
    selectMode : 'end'
  });
  expected = 'c\nd';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : -1,
    numberOfLines : 2,
    selectMode : 'end'
  });
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 0,
    selectMode : 'end'
  });
  expected = '';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 99,
    selectMode : 'end'
  });
  expected = 'a';
  test.identical( got, expected );

  /* zero > range[ 0 ] */

  got = _.strLinesSelect
  ({
    src,
    line : 1,
    numberOfLines : 5,
    selectMode : 'end',
    zero : 2
  });
  expected = '';
  test.identical( got, expected );

  /* - */

  test.case = 'custom new line'
  var src2 = 'a b c d'

  /**/

  got = _.strLinesSelect
  ({
    src : src2,
    range : [ 1, 3 ],
    delimteter : ' '
  });
  expected = 'a b';
  test.identical( got, expected );

  /**/

  got = _.strLinesSelect
  ({
    src : src2,
    range : [ 1, 3 ],
    delimteter : 'x'
  });
  expected = src2;
  test.identical( got, expected );

  /* - */

  test.case = 'number'

  /**/

  got = _.strLinesSelect
  ({
    src,
    range : [ 1, 3 ],
    number : 1
  });
  expected = '1 : a\n2 : b';
  test.identical( got, expected );

  /* - */

  var src =
  `Lorem
  ipsum dolor
  sit amet,
  consectetur
  adipisicing
  elit`;

  /* - */

  test.case = 'first line';
  var got = _.strLinesSelect( src, 1 );
  var expected = 'Lorem';
  test.identical( got, expected );

  /* - */

  test.case = 'first two lines';
  var got = _.strLinesSelect( src, 1, 3 );
  var expected =
  `Lorem
  ipsum dolor`;
  test.identical( got, expected );

  /* - */

  test.case = 'range as array';
  var got = _.strLinesSelect( src, [ 1, 3 ] );
  var expected =
  `Lorem
  ipsum dolor`;
  test.identical( got, expected );



  test.case = 'custom new line';
  var src2 ='Lorem||ipsum dolor||sit amet||consectetur'
  var got = _.strLinesSelect( { src : src2, range : [ 3, 5 ], zero : 1, delimteter : '||' } );
  var expected = `sit amet||consectetur`;
  test.identical( got, expected );

  /* - */

  test.case = 'empty line, out of range';
  var got = _.strLinesSelect( { src : '', range : [ 1, 1 ] } );
  var expected = '';
  test.identical( got, expected );

  /* - */

  test.case = 'empty line';
  var got = _.strLinesSelect( { src : '', range : [ 0, 1 ] } );
  var expected = '';
  test.identical( got, expected );

  /* - */

  test.case = 'incorrect range';
  var got = _.strLinesSelect( { src :  src, range : [ 2, 1 ] } );
  var expected = '';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strLinesSelect( 1, 1 );
  });

  test.case = 'invalid second argument type';
  test.shouldThrowError( function()
  {
    _.strLinesSelect( 'lorem\nipsum\n', 'second'  );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strLinesSelect( );
  });

  test.case = 'unknown property provided';
  test.shouldThrowError( function()
  {
    _.strLinesSelect( { src : 'lorem\nipsum\n', range : [ 0, 1 ], x : 1 } );
  });

}

//

function strLinesStrip( test )
{
  test.case = 'Argument is only one string';

  test.case = 'Src stays unchanged';
  var srcString = '\na\n\nbc\ndef\n';
  var got = _.strLinesStrip( srcString );

  var expected = 'a\nbc\ndef';
  test.identical( got, expected );

  var oldSrcString = '\na\n\nbc\ndef\n';
  test.identical( srcString, oldSrcString );

  test.case = 'Empty string';
  var got = _.strLinesStrip( '' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'Only escape sequences';
  var got = _.strLinesStrip( '\n\t\r' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'String without escape sequences and begin/end spaces';
  var got = _.strLinesStrip( 'Hello world' );
  var expected = 'Hello world';
  test.identical( got, expected );

  test.case = 'String with begin/end spaces';
  var got = _.strLinesStrip( '  Hello world   ' );
  var expected = 'Hello world';
  test.identical( got, expected );

  test.case = 'String with begin/end escape sequences';
  var got = _.strLinesStrip( '\t\r\nHello world\r\n\t' );
  var expected = 'Hello world';
  test.identical( got, expected );

  test.case = 'String with escape sequences';
  var got = _.strLinesStrip( '\n\tHello\r\n\tworld\r\n' );
  var expected = 'Hello\nworld';
  test.identical( got, expected );

  test.case = 'String with escape sequences';
  var got = _.strLinesStrip( '\n\tHello\r\n\t\t\r\nworld\r\n'  );
  var expected = 'Hello\nworld';
  test.identical( got, expected );

  test.case = 'String with escape sequences and spaces';
  var got = _.strLinesStrip( '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t'  );
  var expected = 'Hello\nWorld\n!';
  test.identical( got, expected );

  //

  test.case = 'Argument is only one array';

  test.case = 'Src stays unchanged';
  var srcArray = [ '\na\n\nbc\ndef\n' ];
  var got = _.strLinesStrip( srcArray );

  var expected = [ 'a\n\nbc\ndef' ];
  test.identical( got, expected );

  var oldSrcArray = [ '\na\n\nbc\ndef\n' ];
  test.identical( srcArray, oldSrcArray );

  test.case = 'Empty array';
  var got = _.strLinesStrip( [] );
  var expected = [];
  test.identical( got, expected );

  test.case = 'Empty array with empty string';
  var got = _.strLinesStrip( [ '' ] );
  var expected = [ ];
  test.identical( got, expected );

  test.case = 'Only escape sequences';
  var got = _.strLinesStrip( [ '', '\t\r\n' ] );
  var expected = [ ];
  test.identical( got, expected );

  test.case = 'String without escape sequences and begin/end spaces';
  var got = _.strLinesStrip( [ 'Hello world', '', '\t\r\n' ] );
  var expected = [ 'Hello world' ];
  test.identical( got, expected );

  test.case = 'String with begin/end spaces';
  var got = _.strLinesStrip( [ '  Hello ', ' world   ' ] );
  var expected = [ 'Hello', 'world' ];
  test.identical( got, expected );

  test.case = 'String with begin/end escape sequences';
  var got = _.strLinesStrip( [ '\t\r\nHello  ', '  world\r\n\t' ] );
  var expected = [ 'Hello', 'world' ];
  test.identical( got, expected );

  test.case = 'String with escape sequences';
  var got = _.strLinesStrip( [ '\n\tHello\r\n\tworld\r\n' ] );
  var expected = [ 'Hello\r\n\tworld' ];
  test.identical( got, expected );

  test.case = 'String with escape sequences';
  var got = _.strLinesStrip( '\n\tHello\r\n\t\t\r\nworld\r\n'  );
  var expected = 'Hello\nworld';
  test.identical( got, expected );

  test.case = 'String with escape sequences and spaces';
  var got = _.strLinesStrip( [ '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t', '  \nHow are you?  \r  \n  \t  ' ] );
  var expected = [ 'Hello  \r\n\t\t\r\n World \t\r\n!', 'How are you?' ] ;
  test.identical( got, expected );

  //

  test.case = 'Several arguments';

  test.case = 'Several strings';
  var got = _.strLinesStrip( '\n\tHello  \r\n\t\t\r\n',' World \t\r\n! \r\n\t', ' \nHow are you?  ' );
  var expected = [ 'Hello', 'World\n!', 'How are you?' ] ;
  test.identical( got, expected );

  test.case = 'Several arrays';
  var got = _.strLinesStrip( [ '\n\tHello  \r\n\t\t\r\n', ' World \t\r\n! \r\n\t' ], [ ' \n\nHow  ', ' \r\nare\t', ' you \n ?  \r' ], [ '  \n\r\t ' ]  );
  var expected = [ [ 'Hello', 'World \t\r\n!' ], [ 'How', 'are', 'you \n ?' ], [ ] ];
  test.identical( got, expected );

  test.case = 'Several strings and arrays';
  var got = _.strLinesStrip( '\n\tHello  \r\n\t\t\r\n', [ ' World \t\r\n ', ' ! \r\n\t' ], [ ' \n\nHow  ', ' \r\nare\t', ' you \n ?  \r' ], ' I am \n\r\t good \n\n ' );
  var expected = [ 'Hello', [ 'World', '!' ], [ 'How', 'are', 'you \n ?' ], 'I am\ngood' ];
  test.identical( got, expected );

  //

  test.case = 'Compare input string and input array';

  test.case = 'Input String';
  var str = '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t\nHow are you?  ';
  var gotStr = _.strLinesStrip( str );
  var expected = [ 'Hello', 'World', '!', 'How are you?'];
  test.identical( gotStr.split( '\n'), expected );

  test.case = 'Input Array';
  var str = '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t\nHow are you?  ';
  var arrStr = str.split( '\n' );
  var gotArr = _.strLinesStrip( arrStr );
  var expected = [ 'Hello', 'World', '!', 'How are you?'];
  test.identical( gotArr, expected );

  test.case = 'Input one line string and array'
  var str = '\tHello  World \t! \r';
  var arrStr = [ str ];

  var gotStr = _.strLinesStrip( str );
  var gotArr = _.strLinesStrip( arrStr );
  test.identical( gotArr[ 0 ], gotStr );

  test.case = 'Input string and array'
  var str = '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t';
  var arrStr = str.split( '\n' );

  var gotStr = _.strLinesStrip( str );
  var gotArr = _.strLinesStrip( arrStr );
  test.identical( gotArr, gotStr.split( '\n' ) );

  test.case = 'Several Inputs string and array'
  var strOne = '\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t';
  var arrStrOne = strOne.split( '\n' );

  var strTwo = '  How \n\n Are \r\n\t you   today \t\r\n? \r\n';
  var arrStrTwo = strTwo.split( '\n' );

  var strThree = '\n\t  I \t am \r\n\t \t\r\n Great ! ';
  var arrStrThree = strThree.split( '\n' );

  var gotStr = _.strLinesStrip( strOne, strTwo, strThree );
  var gotArr = _.strLinesStrip( arrStrOne, arrStrTwo, arrStrThree );
  test.identical( gotArr[ 0 ], gotStr[ 0 ].split( '\n' ) );
  test.identical( gotArr[ 1 ], gotStr[ 1 ].split( '\n' ) );
  test.identical( gotArr[ 2 ], gotStr[ 2 ].split( '\n' ) );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( () =>  _.strLinesStrip() );

  test.case = 'Wrong type of argument';
  test.shouldThrowError( () =>  _.strLinesStrip( null ) );
  test.shouldThrowError( () =>  _.strLinesStrip( undefined ) );
  test.shouldThrowError( () =>  _.strLinesStrip( NaN ) );
  test.shouldThrowError( () =>  _.strLinesStrip( 3 ) );
  test.shouldThrowError( () =>  _.strLinesStrip( [ 3 ] ) );
  test.shouldThrowError( () =>  _.strLinesStrip( /^a/ ) );

}

//

function strLinesNumber( test )
{
  var got, expected;

  test.case = 'trivial';

  test.case = 'returns the object';
  var got = _.strLinesNumber( 'abc\ndef\nghi' );
  var expected = '1 : abc\n2 : def\n3 : ghi';
  test.identical( got, expected );

  test.case = 'returns the object';
  var got = _.strLinesNumber( [] );
  var expected = '';
  test.identical( got, expected );

  /* - */

  test.case = 'string';

  /**/

  got = _.strLinesNumber( '' );
  expected = '1 : ';
  test.identical( got, expected );

  /**/

  got = _.strLinesNumber( 'a' );
  expected = '1 : a';
  test.identical( got, expected );

  /**/

  got = _.strLinesNumber( 'a\nb' );
  expected = '1 : a\n2 : b';
  test.identical( got, expected );

  /**/

  got = _.strLinesNumber( 'a\nb', 2 );
  expected = '2 : a\n3 : b';
  test.identical( got, expected );

  /**/

  got = _.strLinesNumber( 'line1\nline2\nline3' );
  expected =
  [
    '1 : line1',
    '2 : line2',
    '3 : line3',
  ].join( '\n' );
  test.identical( got, expected );

  /**/

  got = _.strLinesNumber( '\n\n' );
  var expected =
  [
    '1 : ',
    '2 : ',
    '3 : ',
  ].join( '\n' );
  test.identical( got, expected );

  /* - */

  test.case = 'array';

  /**/

  got = _.strLinesNumber( [ 'line1', 'line2', 'line3' ] );
  expected =
  [
    '1 : line1',
    '2 : line2',
    '3 : line3',
  ].join( '\n' );

  /**/

  got = _.strLinesNumber( [ 'line', 'line', 'line' ], 2 );
  expected =
  [
    '2 : line',
    '3 : line',
    '4 : line',
  ].join( '\n' );

  /**/

  got = _.strLinesNumber( [ 'line\n', 'line\n', 'line\n' ] );
  expected =
  [
    '1 : line\n',
    '2 : line\n',
    '3 : line\n',
  ].join( '\n' );

  /* - */

  if( !Config.debug )
  return;

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strLinesNumber();
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strLinesNumber( 13 );
  } );

  test.case = 'invalid  argument type';
  test.shouldThrowError( function()
  {
    _.strLinesNumber( 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strLinesNumber();
  });

}

//

function strLinesCount( test )
{

  test.case = 'returns 1';
  var func = 'function( x, y ) { return x + y; }';
  var got = _.strLinesCount( func );
  var expected = 1;
  test.identical( got, expected );

  test.case = 'returns 4';
  var func = 'function( x, y ) \n { \n   return x + y; \n }';
  var got = _.strLinesCount( func );
  var expected = 4;
  test.identical( got, expected );

  test.case = 'one line string test';
  var got = _.strLinesCount( 'one line' );
  var expected = 1;
  test.identical( got, expected );

  test.case = 'multiline string test';
  var got = _.strLinesCount( 'first line\nsecond line\nthird line' );
  var expected = 3;
  test.identical( got, expected );

  test.case = 'multiline  text test';
  var got = _.strLinesCount( `one
                             two
                             three`
                          );
  var expected = 3;
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid arguments count';
  test.shouldThrowError( function()
  {
    _.strLinesCount( '1', '2' );
  });

  test.case = 'invalid argument type';
  test.shouldThrowError( function()
  {
    _.strLinesCount( 123 );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strLinesCount();
  });

  test.case = 'no arguments';
  test.shouldThrowError( function( )
  {
    _.strLinesCount( );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strLinesCount( [ 1, '\n', 2 ] );
  } );

  test.case = 'argument is wrong';
  test.shouldThrowError( function( )
  {
    _.strLinesCount( 13 );
  } );

  test.case = 'too many arguments';
  test.shouldThrowError( function( )
  {
    _.strLinesCount( 'function( x, y ) \n { \n   return x + y; \n }', 'redundant argument' );
  } );

}

//

function strLinesNearest( test )
{

  var srcStr =
`
a
bc
def
ghij

`
;

  /* - */

  test.open( 'Range is a number' );

  /*  */

  test.open( 'numberOfLines : 0' );

  var crange = 6;
  var sub = _.strSub( srcStr, [ crange, crange + 1 ] );

  var expectedSplits =
  [
    '',
    'd',
    '',
  ];
  var expectedSpans = [ 6, 6, 7, 7 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 0,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'd' );

  test.close( 'numberOfLines : 0' );

  /*  */

  test.open( 'numberOfLines : 1' );

  var crange = 6;

  var expectedSplits =
  [
    '',
    'd',
    'ef',
  ];
  var expectedSpans = [ 6, 6, 7, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 1,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines : 1' );

  /*  */

  test.open( 'numberOfLines : 2' );

  var crange = 6;

  var expectedSplits =
  [
    'bc\n',
    'd',
    'ef',
  ];
  var expectedSpans = [ 3, 6, 7, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 2,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines : 2' );

  /*  */

  test.open( 'numberOfLines : 8 ( > all lines )' );

  var crange = 6;

  var expectedSplits =
  [
    '\na\nbc\n',
    'd',
    'ef\nghij\n\n',
  ];
  var expectedSpans = [ 0, 6, 7, 16 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 8,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines : 8 ( > all lines )' );

  /*  */

  test.open( 'NaN range' );

  var crange = NaN;

  var expectedSplits =
  [
    '',
    '',
    '',
  ];
  var expectedSpans = [ NaN, NaN, NaN, NaN ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 8,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'NaN range' );

  /*  */

  test.close( 'Range is a number' );

  /* - */

  test.open( 'aligned range, single line' );

  /*  */

  test.open( 'numberOfLines not defined ( = 3 )' );

  var crange = [ 3, 5 ];

  var expectedSplits =
  [
    'a\n',
    'bc',
    '\ndef',
  ];
  var expectedSpans = [ 1, 3, 5, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : undefined,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines not defined ( = 3 )' );

  /*  */

  test.open( 'numberOfLines : NaN' );

  var crange = [ 3, 5 ];

  var expectedSplits =
  [
    '\na\n',
    'bc',
    '\ndef\nghij\n\n',
  ];
  var expectedSpans = [ undefined, 3, 5, undefined ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : NaN,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines : NaN' );

  /*  */

  test.open( 'numberOfLines : null' );

  var crange = [ 3, 5 ];

  var expectedSplits =
  [
    '',
    'bc',
    'bc',
  ];
  var expectedSpans = [ 3, 3, 5, 3 ];  // Could be wrong?

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : null,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );

  test.close( 'numberOfLines : null' );

  /*  */

  test.open( 'numberOfLines : 0' );

  var crange = [ 6,9 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    '',
    'def',
    '',
  ];
  var expectedSpans = [ 6, 6, 9, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 0,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'def' );

  test.close( 'numberOfLines : 0' );

  /*  */

  test.open( 'numberOfLines : 1' );

  var crange = [ 6,9 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    '',
    'def',
    '',
  ];
  var expectedSpans = [ 6, 6, 9, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 1,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'def' );

  test.close( 'numberOfLines : 1' );

  /* */

  test.open( 'numberOfLines : 2' );

  var crange = [ 6,9 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'bc\n',
    'def',
    '',
  ];
  var expectedSpans = [ 3, 6, 9, 9 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 2,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'def' );

  test.close( 'numberOfLines : 2' );

  /* */

  test.open( 'numberOfLines : 3' );

  var crange = [ 6,9 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'bc\n',
    'def',
    '\nghij',
  ];
  var expectedSpans = [ 3, 6, 9, 14 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 3,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'def' );

  test.close( 'numberOfLines : 3' );

  /* */

  test.open( 'numberOfLines : 4' );

  var crange = [ 6,9 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'a\nbc\n',
    'def',
    '\nghij',
  ];
  var expectedSpans = [ 1, 6, 9, 14 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 4,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'def' );

  test.close( 'numberOfLines : 4' );

  /* - */

  test.close( 'aligned range, single line' );

  /* - */

  test.open( 'not aligned range, several lines' );

  /*  */

  test.open( 'numberOfLines : 0' );

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    '',
    'c\ndef\ng',
    '',
  ];
  var expectedSpans = [ 4, 4, 11, 11 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 0,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'numberOfLines : 0' );

  /*  */

  test.open( 'numberOfLines : 1' );

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'b',
    'c\ndef\ng',
    'hij',
  ];
  var expectedSpans = [ 3, 4, 11, 14 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 1,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'numberOfLines : 1' );

  /* */

  test.open( 'numberOfLines : 2' );

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'a\nb',
    'c\ndef\ng',
    'hij',
  ];
  var expectedSpans = [ 1, 4, 11, 14 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 2,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'numberOfLines : 2' );

  /* */

  test.open( 'numberOfLines : 3' );

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    'a\nb',
    'c\ndef\ng',
    'hij\n',
  ];
  var expectedSpans = [ 1, 4, 11, 15 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 3,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'numberOfLines : 3' );

  /* */

  test.open( 'numberOfLines : 4' );

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );

  var expectedSplits =
  [
    '\na\nb',
    'c\ndef\ng',
    'hij\n',
  ];
  var expectedSpans = [ 0, 4, 11, 15 ];

  var got = _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 4,
  });

  test.will = 'check strLinesNearest';
  test.identical( got.splits, expectedSplits );
  test.identical( got.spans, expectedSpans );
  test.will = 'check strSub';
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'numberOfLines : 4' );

  /* - */

  test.close( 'not aligned range, several lines' );

  debugger;

  console.log( 'done1' );
  logger.log( 'done2' );

  /* */

  if( !Config.debug )
  return;

  test.open( 'Wrong range' );

  var crange = [ 4, 11, 12 ];
  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : srcStr,
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : srcStr,
    charsRange : null,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : srcStr,
    charsRange : 'crange',
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : srcStr,
    numberOfLines : 4,
  }));

  test.close( 'Wrong range' );

  /*  */

  test.open( 'Wrong src' );

  var crange = [ 4, 11 ];
  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : null,
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : NaN,
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : undefined,
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : 3,
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.shouldThrowErrorSync( () =>  _.strLinesNearest
  ({
    src : [ 'abd', 'ef' ],
    charsRange : crange,
    numberOfLines : 4,
  }));

  test.close( 'Wrong src' );

  /*  */

  test.open( 'Wrong arg' );

  test.shouldThrowErrorSync( () =>  _.strLinesNearest( 3 ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( [ 3, 4 ] ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( null ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( undefined ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( NaN ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( 'args' ));

  let o =
  {
    src : [ 'abd', 'ef' ],
    charsRange : crange,
    numberOfLines : 4,
  };
  test.shouldThrowErrorSync( () =>  _.strLinesNearest(  ));
  test.shouldThrowErrorSync( () =>  _.strLinesNearest( o, o ));


  test.close( 'Wrong arg' );

}

//

function strLinesRangeWithCharRange( test )
{

  test.open( 'embraced by empty lines' );

  var srcStr =
`
a
bc
def
ghij

`
;

  test.case = 'single line in the middle'; /* */

  var crange = [ 3,5 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 2,3 ] );
  test.identical( sub, 'bc' );

  test.case = 'line in the middle with NL'; /* */

  var crange = [ 3,6 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 2,4 ] );
  test.identical( sub, 'bc\n' );

  test.case = 'single line in the beginning'; /* */

  var crange = [ 1,2 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 1,2 ] );
  test.identical( sub, 'a' );

  test.case = 'line in the beginning with NL'; /* */

  var crange = [ 1,3 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 1,3 ] );
  test.identical( sub, 'a\n' );

  test.case = 'single line in the end'; /* */

  var crange = [ 10,14 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 4,5 ] );
  test.identical( sub, 'ghij' );

  test.case = 'line in the end with NL'; /* */

  var crange = [ 10,15 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 4,6 ] );
  test.identical( sub, 'ghij\n' );

  test.case = 'not aligned range with multiple lines'; /* */

  var crange = [ 4,11 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 2,5 ] );
  test.identical( sub, 'c\ndef\ng' );

  test.case = 'empty line in the beginning'; /* */

  var crange = [ 0,0 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 0,1 ] );
  test.identical( sub, '' );

  test.case = 'empty line in the end'; /* */

  var crange = [ 15,15 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 5,6 ] );
  test.identical( sub, '' );

  test.close( 'embraced by empty lines' );

  /* */

  test.open( 'not embraced by empty lines' );

  var srcStr =
`a
bc
def
ghij`
;

  test.case = 'single line in the middle'; /* */

  var crange = [ 2,4 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 1,2 ] );
  test.identical( sub, 'bc' );

  test.case = 'line in the middle with NL'; /* */

  var crange = [ 2,5 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 1,3 ] );
  test.identical( sub, 'bc\n' );

  test.case = 'single line in the beginning'; /* */

  var crange = [ 0,1 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 0,1 ] );
  test.identical( sub, 'a' );

  test.case = 'line in the beginning with NL'; /* */

  var crange = [ 0,2 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 0,2 ] );
  test.identical( sub, 'a\n' );

  test.case = 'single line in the end'; /* */

  var crange = [ 9,13 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 3,4 ] );
  test.identical( sub, 'ghij' );

  test.case = 'line in the end with NL'; /* */

  var crange = [ 9,14 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 3,4 ] );
  test.identical( sub, 'ghij' );

  test.case = 'not aligned range with multiple lines'; /* */

  var crange = [ 3,10 ];
  var sub = _.strSub( srcStr,crange );
  var lrange = _.strLinesRangeWithCharRange( srcStr, crange );
  test.identical( lrange, [ 1,4 ] );
  test.identical( sub, 'c\ndef\ng' );

  test.close( 'not embraced by empty lines' );

}

//

function strStrShort( test )
{

  test.case = 'simple string';
  var got = _.strStrShort( 'string', 4 );
  var expected = '\'st\' ... \'ng\'';
  test.identical( got, expected );

  test.case = 'string with escaping';
  var got = _.strStrShort( 's\ntring', 4 );
  var expected = '\'s\' ... \'ng\'';
  test.identical( got, expected );

  test.case = 'limit 0';
  var got = _.strStrShort( 'string', 0 );
  var expected = 'string';
  test.identical( got, expected );

  test.case = 'limit 1';
  var got = _.strStrShort( 'string', 1 );
  var expected = '\'s\'';
  test.identical( got, expected );

  test.case = 'string wih spaces';
  var got = _.strStrShort( 'source and', 5 );
  var expected = '\'sou\' ... \'nd\'';
  test.identical( got, expected );

  test.case = 'one argument call';
  var got = _.strStrShort( { src : 'string', limit : 4, wrap : "'" } );
  var expected = "'st' ... 'ng'";
  test.identical( got, expected );

  test.case = 'string with whitespaces';
  var got = _.strStrShort( { src : '  simple string   ', limit : 4, wrap : "'" } );
  var expected = "'  ' ... '  '";
  test.identical( got, expected );

  test.case = 'wrap 0';
  var got = _.strStrShort( { src : 'simple', limit : 4, wrap : 0 } );
  var expected = "si ... le";
  test.identical( got, expected );

  test.case = 'escaping 0';
  var got = _.strStrShort( { src : 'si\x01mple', limit : 5, wrap : '"',escaping : 0  } );
  var expected = '"si\x01" ... "le"';
  test.identical( got, expected );

  test.case = 'escaping 1';
  var got = _.strStrShort( { src : 's\u001btring', limit : 4, wrap : '"' } );
  var expected = '"s" ... "ng"';
  test.identical( got, expected );

  /**/

  if( !Config.debug )
  return;

  test.case = 'invalid first argument type';
  test.shouldThrowError( function()
  {
    _.strStrShort( 1, 5 );
  });

  test.case = 'invalid second argument type';
  test.shouldThrowError( function()
  {
    _.strStrShort( 'string', '0' );
  });

  test.case = 'no arguments';
  test.shouldThrowError( function()
  {
    _.strStrShort();
  });

  test.case = 'unknown property provided';
  test.shouldThrowError( function()
  {
    _.strStrShort( { src : 'string', limit : 4, wrap : 0, fixed : 5 } );
  });

}

//

function strCommonLeft( test )
{
  test.case = 'no args';
  var got = _.strCommonLeft( );
  var expected = '';
  test.identical( got, expected );

  test.case = 'one argument';
  var got = _.strCommonLeft( 'abc' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'ins is empty string';
  var got = _.strCommonLeft( '', 'a', 'b' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'one string is empty';
  var got = _.strCommonLeft( 'abc', '', 'abc', 'ada' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'no match';
  var got = _.strCommonLeft( 'abcd', 'abc', 'd' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'several strings';
  var got = _.strCommonLeft( 'abc', 'abd', 'abc', 'ada' );
  var expected = 'a';
  test.identical( got, expected );

  test.case = 'several strings';
  var got = _.strCommonLeft( 'abcd', 'ab', 'abc', 'a' );
  var expected = 'a';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonLeft( 'abc', 'abcd', 'abcde', 'abcdef' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonLeft( 'abcdef', 'abcd', 'abcde', 'abc' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonLeft( 'abcd', 'abc', 'abcd' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonLeft( 'abcd', 'abc', 3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonLeft( 'abcd', 'abc', NaN );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonLeft( 'abcd', 'ab', 'abc', [ 3 ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonLeft( 'abcd', 'ab', 'abc', /a/ );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonLeft( 'abcd', 'ab', 'abc', [ 'abc' ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'no match case';
  var got = _.strCommonLeft( 'abcd', 'ab', 'Abc' );
  var expected = '';
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'ins is array';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( ['a','b','c'], 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is number';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( 3, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is regExp';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( /^a/, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is NaN';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( NaN, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is null';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( null, 'abd', 'abc', 'ada' );
  });

  test.case = 'One arg null';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( 'abd', 'abc', 'ada', null );
  });

  test.case = 'ins is undefined';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( undefined, 'abd', 'abc', 'ada' );
  });

  test.case = 'One arg undefined';
  test.shouldThrowError( function( )
  {
    _.strCommonLeft( 'abd', 'abc', 'ada', undefined );
  });

}

//

function strCommonRight( test )
{
  test.case = 'no args';
  var got = _.strCommonRight( );
  var expected = '';
  test.identical( got, expected );

  test.case = 'one argument';
  var got = _.strCommonRight( 'abc' );
  var expected = 'abc';
  test.identical( got, expected );

  test.case = 'ins is empty string';
  var got = _.strCommonRight( '', 'ab', 'b' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'one string is empty';
  var got = _.strCommonRight( 'abc', '', 'abc', 'bc' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'no match';
  var got = _.strCommonRight( 'abcd', 'abc', 'd' );
  var expected = '';
  test.identical( got, expected );

  test.case = 'several strings';
  var got = _.strCommonRight( 'a', 'cba', 'dba', 'ada' );
  var expected = 'a';
  test.identical( got, expected );

  test.case = 'several strings';
  var got = _.strCommonRight( 'abcd', 'cd', 'abcd', 'd' );
  var expected = 'd';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonRight( 'cdef', 'abcdef', 'def', 'bcdef' );
  var expected = 'def';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonRight( 'abcdef', 'bcdef', 'cdef', 'def' );
  var expected = 'def';
  test.identical( got, expected );

  test.case = 'Several character string';
  var got = _.strCommonRight( 'abcd', 'bcd', 'abcd' );
  var expected = 'bcd';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonRight( 'abc', 'abc', 3 );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonRight( 'acde', 'bcde', NaN );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonRight( 'abcd', 'abd', 'ad', [ 3 ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonRight( 'c', 'bc', 'abc', /c/ );
  var expected = '';
  test.identical( got, expected );

  test.case = 'One arg is not a string';
  var got = _.strCommonRight( 'abcd', 'cd', 'bcd', [ 'abcd' ] );
  var expected = '';
  test.identical( got, expected );

  test.case = 'no match case';
  var got = _.strCommonRight( 'abcd', 'cD', 'AbcD' );
  var expected = '';
  test.identical( got, expected );

  if( !Config.debug )
  return;

  test.case = 'ins is array';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( ['a','b','c'], 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is number';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( 3, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is regExp';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( /^a/, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is NaN';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( NaN, 'abd', 'abc', 'ada' );
  });

  test.case = 'ins is null';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( null, 'abd', 'abc', 'ada' );
  });

  test.case = 'One arg null';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( 'abd', 'abc', 'ada', null );
  });

  test.case = 'ins is undefined';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( undefined, 'abd', 'abc', 'ada' );
  });

  test.case = 'One arg undefined';
  test.shouldThrowError( function( )
  {
    _.strCommonRight( 'abd', 'abc', 'ada', undefined );
  });

}

//

function strExtractInlined( test )
{

  function onInlined( part )
  {
    var temp = part.split( ':' )
    if( temp.length === 2 )
    {
      return temp;
    }
    return undefined;
  }

  /* */

  test.case = 'empty';
  var srcStr = '';
  var got = _.strExtractInlined( srcStr );
  var expected = [ '' ];
  test.identical( got, expected );

  /* */

  test.case = 'without inlined text';
  var srcStr = 'a';
  var got = _.strExtractInlined( srcStr );
  var expected = [ 'a' ];
  test.identical( got, expected );

  /* */

  test.case = 'default options';
  var srcStr = 'ab#cd#ef';
  var got = _.strExtractInlined( srcStr );
  var expected = [ 'ab', [ 'cd' ], 'ef' ];
  test.identical( got, expected );

  /* */

  test.case = 'trivial case';
  var srcStr = 'this #background:red#is#background:default# text and is not';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  });
  var expected =
  [
    'this ', [ 'background', 'red' ], 'is', [ 'background', 'default' ], ' text and is not'
  ];
  test.identical( got, expected );

  /* */

  test.case = 'openning delimeter # does not have closing';
  var srcStr = 'this #background:red#is#background:default# text and # is not';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  });
  var expected =
  [
    'this ', [ 'background', 'red' ], 'is', [ 'background', 'default' ], ' text and # is not'
  ];
  test.identical( got, expected );

  /* */

  test.case = 'two inlined substrings is not in fact inlined';
  var srcStr = '#simple # text #background:red#is#background:default# text and # is not#';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  });
  var expected =
  [
    '#simple # text ', [ 'background', 'red' ], 'is', [ 'background', 'default' ], ' text and # is not#'
  ];
  test.identical( got, expected );

  /* */

  test.case = 'inlined at the beginning and false inlined';
  var srcStr = '#background:red#i#s#background:default##text';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  });
  var expected =
  [
    '', [ 'background', 'red' ], 'i#s', [ 'background', 'default' ], '#text'
  ];
  test.identical( got, expected );

  /* */

  test.case = 'inlined at the beginning and the end';
  var srcStr = '#background:red#i#s#background:default#';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  });
  var expected =
  [
    '', [ 'background', 'red' ], 'i#s', [ 'background', 'default' ], ''
  ];
  test.identical( got, expected );

  /* */

  test.case = 'inlined at the beginning and the end with preservingEmpty:0';
  var srcStr = '#background:red#i#s#background:default#';
  var got = _.strExtractInlined({ src : srcStr, onInlined, preservingEmpty : 0 });
  var expected =
  [
    [ 'background', 'red' ], 'i#s', [ 'background', 'default' ],
  ];
  test.identical( got, expected );

  /* */

  test.case = 'wrapped by inlined text';
  var srcStr = '#background:red#text#background:default#';
  var got = _.strExtractInlined({ src : srcStr, onInlined,  } );
  var expected =
  [
    '', [ 'background', 'red' ], 'text', [ 'background', 'default' ], '',
  ];
  test.identical( got, expected );

  /* */ //

  test.case = 'preservingEmpty:0, no empty';
  var srcStr = '#inline1#ordinary#inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected =
  [
    [ 'inline1' ], 'ordinary', [ 'inline2' ],
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, empty left';
  var srcStr = '##ordinary#inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected =
  [
    [ '' ], 'ordinary', [ 'inline2' ],
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, empty right';
  var srcStr = '#inline1#ordinary##';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected =
  [
    [ 'inline1' ], 'ordinary', [ '' ],
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, empty middle';
  var srcStr = '#inline1##inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected =
  [
    [ 'inline1' ], [ 'inline2' ],
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, empty all';
  var srcStr = '####';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected = [ [ '' ],[ '' ] ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, empty all';
  var srcStr = '';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0 });
  var expected = [];
  test.identical( got, expected );

  /* */ //

  test.case = 'preservingEmpty:0, onInlined:null no empty';
  var srcStr = '#inline1#ordinary#inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected =
  [
    'inline1', 'ordinary', 'inline2',
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, onInlined:null, empty left';
  var srcStr = '##ordinary#inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected =
  [
    'ordinary', 'inline2',
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, onInlined:null, empty right';
  var srcStr = '#inline1#ordinary##';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected =
  [
    'inline1', 'ordinary',
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, onInlined:null, empty middle';
  var srcStr = '#inline1##inline2#';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected =
  [
    'inline1', 'inline2',
  ];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, onInlined:null, empty all';
  var srcStr = '####';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected = [];
  test.identical( got, expected );

  /* */

  test.case = 'preservingEmpty:0, onInlined:null, empty all';
  var srcStr = '';
  var got = _.strExtractInlined({ src : srcStr, preservingEmpty : 0, onInlined:null });
  var expected = [];
  test.identical( got, expected );

  /* */

  if( !Config.debug )
  return;

  test.case = 'too many arguments';
  test.shouldThrowError( () => { debugger; _.strExtractInlined( '',{},'' ) } );

}

//

function strExtractInlinedStereo( test )
{
  var got, expected;

  test.case = 'default';

  /* nothing */

  got = _.strExtractInlinedStereo( '' );
  expected = [ '' ];
  test.identical( got, expected );

  /* prefix/postfix # by default*/

  debugger;
  got = _.strExtractInlinedStereo( '#abc#' );
  debugger;
  expected = [ '', 'abc', '' ];
  test.identical( got, expected );

  /* - */

  test.case = 'with options';

  /* pre/post are same*/

  got = _.strExtractInlinedStereo( { prefix : '/', postfix : '/', src : '/abc/' } );
  expected = [ '', 'abc', '' ];
  test.identical( got, expected );

  /**/

  got = _.strExtractInlinedStereo( { prefix : '/', postfix : '/', src : '//abc//' } );
  expected = [ '', '', 'abc', '', '' ];
  test.identical( got, expected );

  /* different pre/post */

  got = _.strExtractInlinedStereo( { prefix : '/#', postfix : '#', src : '/#abc#' } );
  expected = [ 'abc' ];
  test.identical( got, expected );

  /* postfix appears in source two times */
  got = _.strExtractInlinedStereo( { prefix : '/', postfix : '#', src : '/ab#c#' } );
  expected = [ 'ab', 'c#' ];
  test.identical( got, expected );

  /* onInlined #1 */
  function onInlined1( strip )
  {
    if( strip.length )
    return strip;
  }
  got = _.strExtractInlinedStereo( { onInlined : onInlined1, src : '#abc#' } );
  expected = [ '#abc#' ];
  test.identical( got, expected );

  /* onInlined #2 */
  function onInlined2( strip )
  {
    return strip + strip;
  }
  got = _.strExtractInlinedStereo( { prefix : '/', postfix : '#', onInlined : onInlined2, src : '/abc#' } );
  expected = [ 'abcabc' ];
  test.identical( got, expected );

}

//

var Self =
{

  name : 'Tools/base/l2/String',
  silencing : 1,
  enabled : 1,

  tests :
  {

    strRemoveBegin,
    strRemoveEnd,
    strRemove,

    strReplaceBegin,
    strReplaceEnd,
    strReplace,

    strPrependOnce,
    strAppendOnce,

    /* - */

    strForRange,
    strCapitalize,

    strIndentation,

    strSplitsCoupledGroup,

    strSplitFast,
    strSplitFastRegexp,
    strSplit,
    // strSplitNaive,

    strSplitStrNumber,

    strStrip,
    strStripLeft,
    strStripRight,
    strRemoveAllSpaces,
    strStripEmptyLines,
    strSub,
    strReplaceWords,
    strJoin,
    strJoinPath,
    strUnjoin,
    strUnicodeEscape,
    strCount,
    strDup,

    strLinesSelect,
    strLinesStrip,
    strLinesNumber,
    strLinesCount,

    strLinesNearest,
    strLinesRangeWithCharRange,

    strStrShort,
    strCommonLeft,
    strCommonRight,

    strExtractInlined,
    strExtractInlinedStereo,

  }

}

Self = wTestSuite( Self );
if( typeof module !== 'undefined' && !module.parent )
wTester.test( Self.name );

})();
};

  let _filePath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l2.test/StringTools.test.s' );
  let _dirPath_ = _starter_._pathResolve( _libraryDirPath_, 'dwtools/abase/l2.test/' );
  let __filename = _filePath_;
  let __dirname = _dirPath_;
  let module = _starter_._fileCreate( _filePath_, _dirPath_, StringTools_test_s_naked );
  let require = module.include;
  let include = module.include;

})(); // == end of file StringTools_test_s

_starter_._fileInclude( _libraryDirPath_, './Main.s' );

module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Diagnostics.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Entity.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Long.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Map.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Regexp.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Routine.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/String.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Time.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l1.test/Typing.test.s' );
module.exports = _starter_._fileInclude( _libraryDirPath_, './dwtools/abase/l2.test/StringTools.test.s' );


})() // == end of library
