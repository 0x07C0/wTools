!function _library_() {
  // begin of library
  !function _StarterWare_() {
    //
    function ScriptFile(e) {
      return this instanceof ScriptFile ? (void 0 === e.isScript && (e.isScript = !0), 
      // o.filePath = _starter_._pathResolve( null, o.filePath );
      e.filePath = t.path.canonizeTolerant(e.filePath), this.filePath = e.filePath, this.dirPath = e.dirPath, 
      this.nakedCall = e.nakedCall, this.isScript = e.isScript, this.filename = e.filePath, 
      this.exports = void 0, this.parent = null, this.error = null, this.state = e.nakedCall ? "preloaded" : "created", 
      this.starter = t, this.include = t._fileInclude.bind(t, this), this.resolve = t._fileResolve.bind(t, this), 
      this.include.resolve = this.resolve, this.include.scriptFile = this, this._nodejsInclude = r, 
      this._nodejsResolve = n, 
      /* nodejs compatibility */
      this.path = [ "/" ], this.loaded = !1, this.id = e.filePath, Object.preventExtensions(this), 
      t.preloadedFilesMap[e.filePath] = this, this) : new ScriptFile(e);
    }
    //
        // begin of starterware
    // --
    // own
    // --
    let e = void 0;
    e || "undefined" == typeof Global || Global.Global !== Global || (e = Global), e || "undefined" == typeof global || global.global !== global || (e = global), 
    e || "undefined" == typeof window || window.window !== window || (e = window), e || "undefined" == typeof self || self.self !== self || (e = self), 
    e._realGlobal_ = e;
    let a = e._global_ || e;
    if ((e = a)._global_ = a, _global_.Config || (_global_.Config = {}), void 0 === _global_.Config.platform && (_global_.Config.platform = "undefined" != typeof module && "undefined" != typeof process ? "nodejs" : "browser"), 
    void 0 === _global_.Config.isWorker && (_global_.Config.isWorker = !("undefined" == typeof self || self.self !== self || "undefined" == typeof importScripts)), 
    e._starter_) return;
    let r = require, n = require.resolve, t = e._starter_ = e._starter_ || Object.create(null), i = t, c = (t.preloadedFilesMap = t.preloadedFilesMap || Object.create(null), 
    t.openedFilesMap = t.openedFilesMap || Object.create(null), t.path = t.path || Object.create(null));
    // --
    // imported
    // --
    i.strIs = function strIs(e) {
      return "[object String]" === Object.prototype.toString.call(e);
    }, 
    //
    i._strBeginOf = function _strBeginOf(e, a) {
      if (i.assert(i.strIs(e), "Expects string"), i.assert(2 === arguments.length, "Expects exactly two arguments"), 
      i.strIs(a)) {
        if (0 === e.lastIndexOf(a, 0)) return a;
      } else if (i.regexpIs(a)) {
        let r = a.exec(e);
        if (r && 0 === r.index) return r[0];
      } else i.assert(0, "Expects string-like ( string or regexp )");
      return !1;
    }, 
    //
    i._strEndOf = function _strEndOf(e, a) {
      if (i.assert(i.strIs(e), "Expects string"), i.assert(2 === arguments.length, "Expects exactly two arguments"), 
      i.strIs(a)) {
        if (-1 !== e.indexOf(a, e.length - a.length)) return a;
      } else if (i.regexpIs(a)) {
        // let matched = end.exec( src );
        let r = RegExp(a.toString().slice(1, -1) + "$").exec(e);
        debugger;
        //if( matched && matched.index === 0 )
                if (r && r.index + r[0].length === e.length) return r[0];
      } else i.assert(0, "Expects string-like ( string or regexp )");
      return !1;
    }, 
    //
    i._strRemovedBegin = function _strRemovedBegin(e, a) {
      i.assert(2 === arguments.length, "Expects exactly two arguments"), i.assert(i.strIs(e), "Expects string {-src-}");
      let r = e, n = i._strBeginOf(r, a);
      return !1 !== n && (r = r.substr(n.length, r.length)), r;
    }, 
    //
    i._strRemovedEnd = function _strRemovedEnd(e, a) {
      i.assert(2 === arguments.length, "Expects exactly two arguments"), i.assert(i.strIs(e), "Expects string {-src-}");
      let r = e, n = i._strEndOf(r, a);
      return !1 !== n && (r = r.substr(0, r.length - n.length)), r;
    }, 
    //
    i.strBegins = function strBegins(e, a) {
      if (i.assert(i.strIs(e), "Expects string {-src-}"), i.assert(i.strIs(a) || i.regexpIs(a) || i.longIs(a), "Expects string/regexp or array of strings/regexps {-begin-}"), 
      i.assert(2 === arguments.length, "Expects exactly two arguments"), !i.longIs(a)) {
        let r = i._strBeginOf(e, a);
        return !1 !== r || r;
      }
      for (let r = 0, n = a.length; r < n; r++) if (!1 !== i._strBeginOf(e, a[r])) return !0;
      return !1;
    }, 
    //
    i.strEnds = function strEnds(e, a) {
      if (i.assert(i.strIs(e), "Expects string {-src-}"), i.assert(i.strIs(a) || i.regexpIs(a) || i.longIs(a), "Expects string/regexp or array of strings/regexps {-end-}"), 
      i.assert(2 === arguments.length, "Expects exactly two arguments"), !i.longIs(a)) {
        let r = i._strEndOf(e, a);
        return !1 !== r || r;
      }
      for (let r = 0, n = a.length; r < n; r++) if (!1 !== i._strEndOf(e, a[r])) return !0;
      return !1;
    }, 
    //
    i.strRemoveBegin = function strRemoveBegin(e, a) {
      i.assert(2 === arguments.length, "Expects exactly two arguments"), i.assert(i.longIs(e) || i.strIs(e), "Expects string or array of strings {-src-}"), 
      i.assert(i.longIs(a) || i.strIs(a) || i.regexpIs(a), "Expects string/regexp or array of strings/regexps {-begin-}");
      let r = [], n = i.longIs(e);
      if (i.strIs(e) && !i.longIs(a)) return i._strRemovedBegin(e, a);
      e = i.arrayAs(e), a = i.arrayAs(a);
      for (let n = 0, t = e.length; n < t; n++) {
        let t = !1, c = e[n];
        for (let e = 0, r = a.length; e < r && !1 === (t = i._strBeginOf(c, a[e])); e++) ;
        !1 !== t && (c = c.substr(t.length, c.length)), r[n] = c;
      }
      return n ? r : r[0];
    }, 
    //
    i.strRemoveEnd = function strRemoveEnd(e, a) {
      i.assert(2 === arguments.length, "Expects exactly two arguments"), i.assert(i.longIs(e) || i.strIs(e), "Expects string or array of strings {-src-}"), 
      i.assert(i.longIs(a) || i.strIs(a) || i.regexpIs(a), "Expects string/regexp or array of strings/regexps {-end-}");
      let r = [], n = i.longIs(e);
      if (i.strIs(e) && !i.longIs(a)) return i._strRemovedEnd(e, a);
      e = i.arrayAs(e), a = i.arrayAs(a);
      for (let n = 0, t = e.length; n < t; n++) {
        let t = !1, c = e[n];
        for (let e = 0, r = a.length; e < r && !1 === (t = i._strEndOf(c, a[e])); e++) ;
        !1 !== t && (c = c.substr(0, c.length - t.length)), r[n] = c;
      }
      return n ? r : r[0];
    }, 
    //
    i.regexpIs = function regexpIs(e) {
      return "[object RegExp]" === Object.prototype.toString.call(e);
    }, 
    //
    i.longIs = function longIs(e) {
      return !(i.primitiveIs(e) || i.routineIs(e) || i.objectIs(e) || i.strIs(e) || Object.propertyIsEnumerable.call(e, "length") || !i.numberIs(e.length));
    }, 
    //
    i.primitiveIs = function primitiveIs(e) {
      if (!e) return !0;
      let a = Object.prototype.toString.call(e);
      return "[object Symbol]" === a || "[object Number]" === a || "[object BigInt]" === a || "[object Boolean]" === a || "[object String]" === a;
    }, 
    //
    c.refine = function refine(e) {
      i.assert(1 === arguments.length, "Expects single argument"), i.assert(i.strIs(e));
      let a = e;
      return ":" === a[1] && ("\\" === a[2] || "/" === a[2] ? a = a.length > 3 ? "/" + a[0] + "/" + a.substring(3) : "/" + a[0] : 2 === a.length && (a = "/" + a[0])), 
      a.replace(/\\/g, "/");
    }, 
    //
    c._normalize = function _normalize(e) {
      if (i.assertRoutineOptions(_normalize, arguments), i.assert(i.strIs(e.src), "Expects string"), 
      !e.src.length) return "";
      let a = e.src;
      a = this.refine(a), 
      /* detrailing */
      e.tolerant && (
      /* remove "/" duplicates */
      a = a.replace(this._delUpDupRegexp, this._upStr));
      let r = !1, n = !1;
      /* undoting */
      for (
      /* remove right "/" */
      a !== this._upStr && !i.strEnds(a, this._upStr + this._upStr) && i.strEnds(a, this._upStr) && (r = !0, 
      a = i.strRemoveEnd(a, this._upStr)); !i.strBegins(a, this._hereUpStr + this._upStr) && i.strBegins(a, this._hereUpStr); ) n = !0, 
      a = i.strRemoveBegin(a, this._hereUpStr);
      /* remove second "." */      if (-1 !== a.indexOf(this._hereStr)) {
        for (;this._delHereRegexp.test(a); ) a = a.replace(this._delHereRegexp, function(e, a) {
          return a || "";
        });
        "" === a && (a = this._upStr);
      }
      /* remove .. */      if (-1 !== a.indexOf(this._downStr)) for (;this._delDownRegexp.test(a); ) a = a.replace(this._delDownRegexp, (e, a, r, n, t) => {
        return "" === n ? a : a ? a + (t || "") : a + n;
      });
      /* nothing left */      return a.length || (a = ".")
      /* dot and trail */ , e.detrailing && (a === this._upStr || i.strEnds(a, this._upStr + this._upStr) || (a = i.strRemoveEnd(a, this._upStr))), 
      !e.detrailing && r && a !== this._rootStr && (a += this._upStr), !e.undoting && n && (a = this.dot(a)), 
      a;
    }, 
    //
    c.canonizeTolerant = function canonizeTolerant(e) {
      i.assert(i.strIs(e), "Expects string");
      let a = this._normalize({
        src: e,
        tolerant: !0,
        detrailing: !0,
        undoting: !0
      });
      return i.assert(1 === arguments.length, "Expects single argument"), i.assert(a === this._upStr || i.strEnds(a, this._upStr) || !i.strEnds(a, this._upStr + this._upStr)), 
      i.assert(-1 === a.lastIndexOf(this._upStr + this._hereStr + this._upStr)), i.assert(!i.strEnds(a, this._upStr + this._hereStr)), 
      i.assert(!this._delUpDupRegexp.test(a)), a;
    }, 
    //
    c._rootStr = "/", 
    //
    c._upStr = "/", 
    //
    c._hereStr = ".", 
    //
    c._downStr = "..", 
    //
    c._hereUpStr = "./", 
    //
    c._downUpStr = "../", 
    //
    c._delHereRegexp = /\/\.(\/|$)/, 
    //
    c._delDownRegexp = /((?:.|^))(?:(?:\/\/)|(((?:^|\/))(?!\.\.(?:\/|$))(?:(?!\/).)+\/))\.\.((?:\/|$))/, 
    //
    c._delUpDupRegexp = /\/{2,}/g, 
    //
    c.currentAtBegin = "/C/pro/web/Port/package/wTools";
    //
    // --
    // declare
    // --
    //
    let s = {
      ScriptFile: ScriptFile,
      _pathResolve: function _pathResolve(e, a) {
        let r = null;
        if (t.strIs(e) ? r = e : e && (r = e.dirPath), !r) {
          debugger;
          throw "Base path is not specified";
        }
        return "/" !== (a = t.path.canonizeTolerant(a))[0] && (a = t.path.canonizeTolerant(r + "/" + a)), 
        a;
      }
      //
      ,
      _nodejsInclude: r,
      _fileIncludeAct: function _fileIncludeAct(e, a) {
        try {
          if ("opened" === a.state) return a.exports;
          a.parent = e || null, a.nakedCall.call(a), a.loaded = !0, a.state = "opened", t.openedFilesMap[a.filePath] = a;
        } catch (e) {
          throw e.message += "\nError including " + a.filePath, a.error = e, a.state = "errored", 
          e;
        }
        return a.exports;
      }
      //
      ,
      _fileInclude: function _fileInclude(e, a) {
        let r, n = t._fileGet.apply(this, arguments);
        return t.strIs(e) ? (r = t._nodejsInclude, e = null) : r = e ? e._nodejsInclude : t._nodejsInclude, 
        n ? (t.strIs(e) && (e = null), t._fileIncludeAct(e, n)) : r(a);
      }
      //
      ,
      _fileResolve: function _fileResolve(e, a) {
        let r, n = t._fileGet.apply(this, arguments);
        return t.strIs(e) ? (r = t._nodejsResolve, e = null) : r = e ? e._nodejsResolve : t._nodejsResolve, 
        n ? n.filePath : r(a);
      }
      //
      ,
      _fileGet: function _fileGet(e, a) {
        let r = null;
        return t.strIs(e) ? r = e : e && (r = e.dirPath), "." !== a[0] ? null : (resolvedFilePath = t._pathResolve(r, a), 
        t.preloadedFilesMap[resolvedFilePath] || null);
      }
      //
      ,
      _fileCreate: function _fileCreate(e, a, r) {
        return ScriptFile({
          filePath: e,
          dirPath: a,
          nakedCall: r
        });
      }
      //
      ,
      assert: function assert() {}
      //
      ,
      assertRoutineOptions: function assertRoutineOptions() {},
      path: c
    };
    Object.assign(t, s);
  }(), _starter_.path.canonizeTolerant(__filename);
  // end of starterware
  let a = _starter_.path.canonizeTolerant(__dirname);
  !function Diagnostics_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Diagnostics.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Diagnostics_test_s
    function Diagnostics_test_s_naked() {
      !function _Diagnostics_test_s_() {
        "use strict";
        //
        function err(a) {
          var r = "some error message", n = new Error("err obj for tesst"), t = n.message, i = new Error("Error #3"), c = i.message;
          a.case = "single string passed as args property : result should be Error obj";
          var s = e.err(r);
          a.identical(s instanceof Error, !0), a.case = "single string passed as args property : result message should contains passed string";
          var l = new RegExp(r);
          a.identical(l.test(s.message), !0), a.case = "single string passed as args property : result message should contains file name";
          var o = new RegExp("Diagnostics.test.s");
          a.identical(o.test(s.message), !0), a.case = "single error instance passed as args property : result should be Error obj", 
          s = e.err(n), a.identical(s instanceof Error, !0), a.case = "single error instance passed as args property : result message should contains passed string", 
          l = new RegExp(t), a.identical(l.test(s.message), !0), a.case = "single error instance passed as args property : result message should contains file name", 
          a.identical(e.strHas(s.message, n.location.path), !0), a.case = "several error instances/messages passed as args property : result should be Error obj", 
          s = e.err(i, r), a.identical(s instanceof Error, !0), a.case = "several error instances/messages passed as args : result message should contains all passed string";
          var d = new RegExp(c), u = new RegExp(r);
          a.identical([ d.test(s.message), u.test(s.message) ], [ !0, !0 ]), a.case = "several error instances/messages passed as args property : result message should contains file name", 
          o = new RegExp("Diagnostics.test.s"), a.identical(o.test(s.message), !0);
        }
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l1/Diagnostics",
          silencing: 1,
          tests: {
            _err: 
            //
            function _err(a) {
              var r = new Error("err obj for tesst"), n = r.message, t = "some error message", i = new Error("Error #3"), c = i.message, s = {
                level: 1,
                args: [ r ]
              }, l = {
                level: 3,
                args: [ t, i ]
              };
              /* - */
              a.case = "single string passed as args property : result should be Error obj";
              var o = {
                level: 1,
                args: [ t ]
              }, d = e._err(o);
              a.identical(d instanceof Error, !0), a.case = "single string passed as args property : result message should contains passed string";
              var u = new RegExp(t);
              a.identical(u.test(d.message), !0), a.case = "single string passed as args property : result message should contains file name";
              var y = new RegExp("Diagnostics.test.s");
              a.identical(y.test(d.message), !0), a.case = "single error instance passed as args property : result should be Error obj", 
              d = e._err(s), a.identical(d instanceof Error, !0), a.case = "single error instance passed as args property : result message should contains passed string", 
              u = new RegExp(n), a.identical(u.test(d.message), !0), a.case = "single error instance passed as args property : result message should contains file name", 
              a.identical(e.strHas(d.message, r.location.path), !0), 
              /* - */
              a.open("several error instances/messages passed as args property"), d = e._err(l), 
              a.identical(d instanceof Error, !0), a.case = "result message should contains all passed string";
              var m = new RegExp(c), p = new RegExp(t);
              a.identical([ m.test(d.message), p.test(d.message) ], [ !0, !0 ]), a.case = "result message should contains file name", 
              y = new RegExp("Diagnostics.test.s"), a.identical(y.test(d.message), !0), a.close("several error instances/messages passed as args property");
              /* - */
              var b = {
                level: 1,
                args: null
              };
              a.case = "missed argument", a.shouldThrowError(function() {
                e._err();
              }), a.case = "extra argument", a.shouldThrowError(function() {
                e._err(b, o);
              }), a.case = "options.args not array", a.shouldThrowError(function() {
                e._err(b);
              });
            },
            err: err,
            errLog: 
            //
            function errLog(a) {
              var r = new Error("err obj for tesst"), n = r.message;
              a.case = "single string passed as args property : result should be Error obj";
              var t = e.errLog("some error message");
              a.identical(t instanceof Error, !0), a.case = "single string passed as args property : result message should contains passed string";
              var i = new RegExp("some error message");
              a.identical(i.test(t.message), !0), a.case = "single string passed as args property : result message should contains file name";
              var c = new RegExp("Diagnostics.test.s");
              a.identical(c.test(t.message), !0), a.case = "single error instance passed as args property : result should be Error obj", 
              t = e.errLog(r), a.identical(t instanceof Error, !0), a.case = "single error instance passed as args property : result message should contains passed string", 
              i = new RegExp(n), a.identical(i.test(t.message), !0), a.case = "single error instance passed as args property : result message should contains file name", 
              a.identical(e.strHas(t.message, r.location.path), !0);
            }
            //
            ,
            // test sureMap*
            sureMapHasExactly: function sureMapHasExactly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapHasExactly(r, n), !0), a.identical(e.sureMapHasExactly(r, n, t), !0), 
              a.identical(e.sureMapHasExactly(r, n, t, "msg"), !0), a.identical(e.sureMapHasExactly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapHasExactly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasExactly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasExactly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasExactly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasExactly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasExactly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapOwnExactly: function sureMapOwnExactly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapOwnExactly(r, n), !0), a.identical(e.sureMapOwnExactly(r, n, t), !0), 
              a.identical(e.sureMapOwnExactly(r, n, t, "msg"), !0), a.identical(e.sureMapOwnExactly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapOwnExactly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnExactly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnExactly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnExactly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnExactly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnExactly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapHasOnly: function sureMapHasOnly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapHasOnly(r, n), !0), a.identical(e.sureMapHasOnly(r, n, t), !0), 
              a.identical(e.sureMapHasOnly(r, n, t, "msg"), !0), a.identical(e.sureMapHasOnly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              }, r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapHasOnly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasOnly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasOnly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasOnly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasOnly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasOnly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapOwnOnly: function sureMapOwnOnly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapOwnOnly(r, n), !0), a.identical(e.sureMapOwnOnly(r, n, t), !0), 
              a.identical(e.sureMapOwnOnly(r, n, t, "msg"), !0), a.identical(e.sureMapOwnOnly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapOwnOnly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnOnly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnOnly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnOnly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnOnly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnOnly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapHasAll: function sureMapHasAll(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapHasAll(r, n), !0), a.identical(e.sureMapHasAll(r, n, t), !0), 
              a.identical(e.sureMapHasAll(r, n, t, "msg"), !0), a.identical(e.sureMapHasAll(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapHasAll(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have fields : "name"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasAll(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "name"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasAll(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "name"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasAll(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "name"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasAll(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "name"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasAll(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapOwnAll: function sureMapOwnAll(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapOwnAll(r, n), !0), a.identical(e.sureMapOwnAll(r, n, t), !0), 
              a.identical(e.sureMapOwnAll(r, n, t, "msg"), !0), a.identical(e.sureMapOwnAll(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapOwnAll(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own fields : "name"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnAll(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "name"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnAll(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "name"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnAll(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "name"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnAll(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "name"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnAll(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapHasNone: function sureMapHasNone(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "e": 13,
                "f": 77,
                "g": 3,
                "h": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapHasNone(r, n), !0), a.identical(e.sureMapHasNone(r, n, t), !0), 
              a.identical(e.sureMapHasNone(r, n, t, "msg"), !0), a.identical(e.sureMapHasNone(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapHasNone(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasNone(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasNone(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "a", "b", "c"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasNone(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasNone(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "a", "b", "c"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapHasNone(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapOwnNone: function sureMapOwnNone(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "e": 13,
                "f": 77,
                "g": 3,
                "h": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.sureMapOwnNone(r, n), !0), a.identical(e.sureMapOwnNone(r, n, t), !0), 
              a.identical(e.sureMapOwnNone(r, n, t, "msg"), !0), a.identical(e.sureMapOwnNone(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.sureMapOwnNone(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnNone(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnNone(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "a", "b", "c"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnNone(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnNone(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "a", "b", "c"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.sureMapOwnNone(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            sureMapHasNoUndefine: function sureMapHasNoUndefine(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = function() {
                return r.a + r.b;
              };
              a.identical(e.sureMapHasNoUndefine(r), !0), a.identical(e.sureMapHasNoUndefine(r, n), !0), 
              a.identical(e.sureMapHasNoUndefine(r, n, "msg"), !0), a.identical(e.sureMapHasNoUndefine(r, () => "This is explanation"), !0), 
              a.case = "check error message, no msg";
              var t = {
                "d": void 0
              };
              try {
                e.sureMapHasNoUndefine(t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no undefines, but has : "d"'), !0), 
              a.case = "check error message, msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.sureMapHasNoUndefine(t, n);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", t = {
                "d": void 0
              };
              try {
                e.sureMapHasNoUndefine(t, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.sureMapHasNoUndefine(t, "msg", n);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.sureMapHasNoUndefine(t, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, four or more arguments", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.sureMapHasNoUndefine(r, n, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects one, two or three arguments"), !0);
            }
            //
            ,
            // test assertMap*  
            assertMapHasFields: function assertMapHasFields(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapHasFields(r, n), !0), a.identical(e.assertMapHasFields(r, n, t), !0), 
              a.identical(e.assertMapHasFields(r, n, t, "msg"), !0), a.identical(e.assertMapHasFields(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapHasFields(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasFields(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasFields(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasFields(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasFields(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasFields(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapOwnFields: function assertMapOwnFields(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapOwnFields(r, n), !0), a.identical(e.assertMapOwnFields(r, n, t), !0), 
              a.identical(e.assertMapOwnFields(r, n, t, "msg"), !0), a.identical(e.assertMapOwnFields(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapOwnFields(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnFields(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnFields(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnFields(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnFields(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnFields(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapHasOnly: function assertMapHasOnly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapHasOnly(r, n), !0), a.identical(e.assertMapHasOnly(r, n, t), !0), 
              a.identical(e.assertMapHasOnly(r, n, t, "msg"), !0), a.identical(e.assertMapHasOnly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapHasOnly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasOnly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasOnly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasOnly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasOnly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasOnly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapOwnOnly: function assertMapOwnOnly(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapOwnOnly(r, n), !0), a.identical(e.assertMapOwnOnly(r, n, t), !0), 
              a.identical(e.assertMapOwnOnly(r, n, t, "msg"), !0), a.identical(e.assertMapOwnOnly(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapOwnOnly(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnOnly(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnOnly(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnOnly(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnOnly(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnOnly(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapHasNone: function assertMapHasNone(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "e": 13,
                "f": 77,
                "g": 3,
                "h": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapHasNone(r, n), !0), a.identical(e.assertMapHasNone(r, n, t), !0), 
              a.identical(e.assertMapHasNone(r, n, t, "msg"), !0), a.identical(e.assertMapHasNone(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapHasNone(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no fields : "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasNone(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasNone(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "a", "b", "c"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasNone(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasNone(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "a", "b", "c"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapHasNone(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapOwnNone: function assertMapOwnNone(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = {
                "e": 13,
                "f": 77,
                "g": 3,
                "h": "Mikle"
              }, t = function() {
                return r.a + i.b;
              };
              a.identical(e.assertMapOwnNone(r, n), !0), a.identical(e.assertMapOwnNone(r, n, t), !0), 
              a.identical(e.assertMapOwnNone(r, n, t, "msg"), !0), a.identical(e.assertMapOwnNone(r, n, () => "This is explanation"), !0), 
              a.case = "check error message, no msg", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              };
              var i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              };
              try {
                e.assertMapOwnNone(r, i);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should own no fields : "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnNone(r, i, t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg string", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnNone(r, i, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "a", "b", "c"'), !0), 
              a.case = "check error message, msg string & msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnNone(r, i, "msg", t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "a", "b", "c"'), !0), 
              a.case = "check error message, msg routine", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnNone(r, i, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "a", "b", "c"'), !0), 
              a.case = "check error message, five or more arguments", r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, i = {
                "a": 13,
                "b": 77,
                "c": 3,
                "name": "Hello"
              }, t = function() {
                return r.a + i.b;
              };
              try {
                e.assertMapOwnNone(r, i, t, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects two, three or four arguments"), !0);
            }
            //
            ,
            assertMapHasNoUndefine: function assertMapHasNoUndefine(a) {
              a.case = "correct input";
              var r = {
                "a": 13,
                "b": 77,
                "c": 3,
                "d": "Mikle"
              }, n = function() {
                return r.a + r.b;
              };
              a.identical(e.assertMapHasNoUndefine(r), !0), a.identical(e.assertMapHasNoUndefine(r, n), !0), 
              a.identical(e.assertMapHasNoUndefine(r, n, "msg"), !0), a.identical(e.assertMapHasNoUndefine(r, () => "This is explanation"), !0), 
              a.case = "check error message, no msg";
              var t = {
                "d": void 0
              };
              try {
                e.assertMapHasNoUndefine(t);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'Object should have no undefines, but has : "d"'), !0), 
              a.case = "check error message, msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.assertMapHasNoUndefine(t, n);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, '90 "d"'), !0), 
              a.case = "check error message, msg string", t = {
                "d": void 0
              };
              try {
                e.assertMapHasNoUndefine(t, "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg "d"'), !0), 
              a.case = "check error message, msg string & msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.assertMapHasNoUndefine(t, "msg", n);
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'msg 90 "d"'), !0), 
              a.case = "check error message, msg routine", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.assertMapHasNoUndefine(t, () => "This is explanation");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, 'This is explanation "d"'), !0), 
              a.case = "check error message, four or more arguments", t = {
                "d": void 0
              }, n = function() {
                return r.a + r.b;
              };
              try {
                e.assertMapHasNoUndefine(r, n, "msg", "msg");
              } catch (e) {
                err = e;
              }
              a.identical(err instanceof Error, !0), a.identical(e.strHas(err.message, "Expects one, two or three arguments"), !0);
            }
            //
            ,
            //
            assert: function assert(a) {
              var r, n = "short error description", t = new RegExp(n);
              a.case = "assert successful condition";
              var i = e.assert(!0);
              a.identical(i, !0), a.case = "passed failure condition : should generates exception";
              try {
                e.assert(!1);
              } catch (e) {
                r = e;
              }
              a.identical(r instanceof Error, !0), a.case = "passed failure condition with passed message : should generates exception with message";
              try {
                e.assert(!1, n);
              } catch (e) {
                r = e;
              }
              a.identical(t.test(r.message), !0);
            },
            diagnosticStack: 
            //
            function diagnosticStack(a) {
              /* - */
              a.case = "trivial";
              var r = function function1() {
                return function function2() {
                  return function function3() {
                    debugger;
                    return e.diagnosticStack();
                  }();
                }();
              }();
              r = r.split("\n");
              debugger;
              [ "function3", "function2", "function1", "Diagnostics.test.s" ].forEach(function(e, n) {
                var t = new RegExp(e);
                a.description = e, a.identical(t.test(r[n]), !0);
              });
              debugger;
              /* - */
              // test.case = 'second';
              // var got = function1();
              // debugger;
              // got = got.split( '\n' ).slice( -5, -1 ).join( '\n' );
              // debugger;
              // expectedTrace.forEach( function( expectedStr, i )
              // {
              //   var expectedRegexp = new RegExp( expectedStr );
              //   test.identical( expectedRegexp.test( got[ i ] ), true );
              // });
                        }
          }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Diagnostics_test_s
  function Entity_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Entity.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Entity_test_s
    function Entity_test_s_naked() {
      !function _Entity_test_s_() {
        "use strict";
        //
        function eachSampleExperiment(a) {
          debugger;
          var r = e.eachSample({
            sets: [ [ 0, 1 ], [ 2, 3 ] ]
          }), n = [ [ 0, 2 ], [ 1, 2 ], [ 0, 3 ], [ 1, 3 ] ];
          a.identical(r, n), a.isNot(e.unrollIs(r)), a.is(e.arrayIs(r)), r = e.eachSample({
            sets: [ e.unrollMake([ 0, 1 ]), e.unrollMake([ 2, 3 ]) ]
          }), n = [ [ 0, 2 ], [ 1, 2 ], [ 0, 3 ], [ 1, 3 ] ], a.identical(r, n), a.isNot(e.unrollIs(r)), 
          a.is(e.arrayIs(r));
        }
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {};
        eachSampleExperiment.experimental = 1, a = {
          name: "Tools/base/l1/Entity",
          silencing: 1,
          // verbosity : 4,
          // importanceOfNegative : 3,
          tests: {
            eachSample: 
            // --
            // routines
            // --
            function eachSample(a) {
              a.case = "empty sets";
              var r = e.eachSample([]), n = [ [] ];
              a.identical(r, n), r = e.eachSample({
                sets: {}
              }), n = [ {} ], a.identical(r, n), r = e.eachSample({}, null), n = [ {} ], a.identical(r, n), 
              a.case = "empty sets and unroll, Array", r = e.eachSample(e.unrollMake([])), n = [ [] ], 
              a.identical(r, n), a.is(e.arrayIs(r)), a.isNot(e.unrollIs(r)), r = e.eachSample(new Array()), 
              n = [ [] ], a.identical(r, n), a.is(e.arrayIs(r));
              var t = e.arrayFrom(new Float32Array());
              r = e.eachSample(t), n = [ [] ], a.identical(r, n), a.is(e.arrayIs(r)), r = e.eachSample(e.argumentsArrayMake(0), null), 
              n = [ [] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              /* - */
              a.case = "sets with primitive", r = e.eachSample([ 1 ]), n = [ [ 1 ] ], a.identical(r, n), 
              r = e.eachSample({
                a: 1
              }, null), n = [ {
                a: 1
              } ], a.identical(r, n), r = e.eachSample([ 1, 2, null ]), n = [ [ 1, 2, null ] ], 
              a.identical(r, n), r = e.eachSample({
                a: 1,
                b: 2,
                c: null
              }, null), n = [ {
                a: 1,
                b: 2,
                c: null
              } ], a.identical(r, n), a.case = "sets with primitive and unroll, Array", r = e.eachSample(e.unrollMake([ 1 ])), 
              n = [ [ 1 ] ], a.identical(r, n), a.is(e.arrayIs(r)), a.isNot(e.unrollIs(r)), r = e.eachSample(new Array([ 1 ])), 
              n = [ [ 1 ] ], a.identical(r, n), a.is(e.arrayIs(r)), t = e.arrayFrom(new Float32Array([ 1 ])), 
              r = e.eachSample(t), n = [ [ 1 ] ], a.identical(r, n), a.is(e.arrayIs(r)), r = e.eachSample(e.argumentsArrayMake([ 1 ]), null), 
              n = [ [ 1 ] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              /* - */
              a.case = "sets with empty array, empty map", r = e.eachSample([ [] ]), n = [ [ void 0 ] ], 
              a.identical(r, n), r = e.eachSample({
                a: []
              }, null), n = [ {
                a: void 0
              } ], a.identical(r, n), r = e.eachSample([ [], [] ]), n = [ [ void 0, void 0 ] ], 
              a.identical(r, n), r = e.eachSample({
                a: [],
                b: []
              }, null), n = [ {
                a: void 0,
                b: void 0
              } ], a.identical(r, n), r = e.eachSample([ [], [], [] ]), n = [ [ void 0, void 0, void 0 ] ], 
              a.identical(r, n), r = e.eachSample({
                a: [],
                b: [],
                c: []
              }, null), n = [ {
                a: void 0,
                b: void 0,
                c: void 0
              } ], a.identical(r, n), a.case = "sets with empty unrolls, Arrays", r = e.eachSample(e.unrollMake([ [], [] ])), 
              n = [ [ void 0, void 0 ] ], a.identical(r, n), a.isNot(e.unrollIs(r)), a.is(e.arrayIs(r)), 
              r = e.eachSample(new Array([ [], [], [] ])), n = [ [ [] ], [ [] ], [ [] ] ], a.identical(r, n), 
              a.is(e.arrayIs(r)), t = e.arrayFrom(new Float32Array([ [], [], [] ])), r = e.eachSample(t), 
              n = [ [ 0, 0, 0 ] ], a.identical(r, n), a.is(e.arrayIs(r)), r = e.eachSample(e.argumentsArrayMake([ [], [] ])), 
              n = [ [ void 0, void 0 ] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              /* - */
              a.case = "sets with primitive, result : null", r = e.eachSample({
                sets: [ 1, 2, 3 ],
                result: 0
              }), n = 0, a.identical(r, n), r = e.eachSample({
                sets: {
                  a: 1,
                  b: 2,
                  c: null
                },
                result: 0
              }), n = 0, a.identical(r, n), a.case = "sets with unroll, Array, result : null", 
              r = e.eachSample({
                sets: e.unrollMake([ 1, 2, 3 ]),
                result: 0
              }), n = 0, a.identical(r, n), a.is(e.primitiveIs(r)), r = e.eachSample({
                sets: new Array([ 1, 2, 3 ]),
                result: 0
              }), n = 2, a.identical(r, n), a.is(e.primitiveIs(r)), t = e.arrayFrom(new Float32Array([ 1, 2, 3 ])), 
              r = e.eachSample({
                sets: t,
                result: 0
              }), n = 0, a.identical(r, n), a.is(e.primitiveIs(r)), r = e.eachSample({
                sets: e.argumentsArrayMake([ 1, 2, 3 ]),
                result: 0
              }), n = 0, a.identical(r, n), a.is(e.primitiveIs(r)), 
              /* - */
              a.case = "sets with single not empty array, single not empty map", r = e.eachSample([ [ 1, 2, null, "str" ] ]), 
              n = [ [ 1 ], [ 2 ], [ null ], [ "str" ] ], a.identical(r, n), r = e.eachSample({
                a: [ 1, 2, null, "str" ]
              }, null), n = [ {
                a: 1
              }, {
                a: 2
              }, {
                a: null
              }, {
                a: "str"
              } ], a.identical(r, n), a.case = "sets with single not empty unroll, Array", r = e.eachSample(e.unrollMake([ [ 1, 2, null, "str" ] ])), 
              n = [ [ 1 ], [ 2 ], [ null ], [ "str" ] ], a.identical(r, n), a.isNot(e.unrollIs(r)), 
              a.is(e.arrayIs(r)), r = e.eachSample(e.argumentsArrayMake([ [ 1, 2, null, "str" ] ])), 
              n = [ [ 1 ], [ 2 ], [ null ], [ "str" ] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              r = e.eachSample(new Array([ [ 1, 2, null, "str" ] ])), n = [ [ [ 1, 2, null, "str" ] ] ], 
              a.identical(r, n), a.is(e.arrayIs(r)), t = e.arrayFrom(new Float32Array([ [ 1, 2, 3 ] ])), 
              r = e.eachSample(t), a.notIdentical(r, [ [ [ 1, 2, 3 ] ] ]), a.is(e.arrayIs(r)), 
              /* - */
              a.case = "simplest, leftToRight : 1", r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ] ]
              }), n = [ [ 0, 2 ], [ 1, 2 ], [ 0, 3 ], [ 1, 3 ] ], a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ]
                }
              }), n = [ {
                a: 0,
                b: 2
              }, {
                a: 1,
                b: 2
              }, {
                a: 0,
                b: 3
              }, {
                a: 1,
                b: 3
              } ], a.identical(r, n), r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ], 6 ]
              }), n = [ [ 0, 2, 6 ], [ 1, 2, 6 ], [ 0, 3, 6 ], [ 1, 3, 6 ] ], a.identical(r, n), 
              r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ],
                  c: 6
                }
              }), n = [ {
                a: 0,
                b: 2,
                c: 6
              }, {
                a: 1,
                b: 2,
                c: 6
              }, {
                a: 0,
                b: 3,
                c: 6
              }, {
                a: 1,
                b: 3,
                c: 6
              } ], a.identical(r, n), r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ], [ 6, null ] ]
              }), n = [ [ 0, 2, 6 ], [ 1, 2, 6 ], [ 0, 3, 6 ], [ 1, 3, 6 ], [ 0, 2, null ], [ 1, 2, null ], [ 0, 3, null ], [ 1, 3, null ] ], 
              a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ],
                  c: [ 6, null ]
                }
              }), n = [ {
                a: 0,
                b: 2,
                c: 6
              }, {
                a: 1,
                b: 2,
                c: 6
              }, {
                a: 0,
                b: 3,
                c: 6
              }, {
                a: 1,
                b: 3,
                c: 6
              }, {
                a: 0,
                b: 2,
                c: null
              }, {
                a: 1,
                b: 2,
                c: null
              }, {
                a: 0,
                b: 3,
                c: null
              }, {
                a: 1,
                b: 3,
                c: null
              } ], a.identical(r, n), r = e.eachSample({
                sets: [ e.argumentsArrayMake([ 0, 1 ]), e.argumentsArrayMake([ 2, 3 ]) ]
              }), n = [ [ 0, 2 ], [ 1, 2 ], [ 0, 3 ], [ 1, 3 ] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              r = e.eachSample({
                sets: [ new Array([ 0, 1 ]), new Array([ 2, 3 ]) ]
              }), n = [ [ [ 0, 1 ], [ 2, 3 ] ] ], a.identical(r, n), a.is(e.arrayIs(r));
              var i = e.arrayFrom(new Float32Array([ 0, 1 ])), c = e.arrayFrom(new Float32Array([ 2, 3 ]));
              r = e.eachSample({
                sets: [ i, c ]
              }), n = [ [ 0, 2 ], [ 1, 2 ], [ 0, 3 ], [ 1, 3 ] ], a.identical(r, n), a.is(e.arrayIs(r)), 
              /* - */
              a.case = "simplest leftToRight : 0", r = e.eachSample({
                sets: [ [ 0, 1 ], [ 5, 6 ] ],
                leftToRight: 0
              }), n = [ [ 0, 5 ], [ 0, 6 ], [ 1, 5 ], [ 1, 6 ] ], a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 5, 6 ]
                },
                leftToRight: 0
              }), n = [ {
                a: 0,
                b: 5
              }, {
                a: 0,
                b: 6
              }, {
                a: 1,
                b: 5
              }, {
                a: 1,
                b: 6
              } ], a.identical(r, n), r = e.eachSample({
                sets: [ [ 0, 1 ], [ "str", null ], [ !0, 2 ] ],
                leftToRight: 0
              }), n = [ [ 0, "str", !0 ], [ 0, "str", 2 ], [ 0, null, !0 ], [ 0, null, 2 ], [ 1, "str", !0 ], [ 1, "str", 2 ], [ 1, null, !0 ], [ 1, null, 2 ] ], 
              a.identical(r, n), 
              /* - */
              a.case = "simplest, leftToRight : 1, result : 0", r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ] ],
                result: 0
              }), n = 3, a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ]
                },
                result: 0
              }), n = 3, a.identical(r, n), r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ], 6 ],
                result: 0
              }), n = 3, a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ],
                  c: 6
                },
                result: 0
              }), n = 3, a.identical(r, n), r = e.eachSample({
                sets: [ [ 0, 1 ], [ 2, 3 ], [ 6, null ] ],
                result: 0
              }), n = 7, a.identical(r, n), r = e.eachSample({
                sets: {
                  a: [ 0, 1 ],
                  b: [ 2, 3 ],
                  c: [ 6, null ]
                },
                result: 0
              }), n = 7, a.identical(r, n), a.case = "simplest, leftToRight : 1, unroll, Array", 
              r = e.eachSample({
                sets: [ e.unrollMake([ 0, 1 ]), e.unrollMake([ 2, 3 ]) ],
                result: 0
              }), n = 3, a.identical(r, n), a.is(e.primitiveIs(r)), r = e.eachSample({
                sets: [ e.argumentsArrayMake([ 0, 1 ]), e.argumentsArrayMake([ 2, 3 ]) ],
                result: 0
              }), n = 3, a.identical(r, n), a.is(e.primitiveIs(r)), r = e.eachSample({
                sets: [ new Array([ 0, 1 ]), new Array([ 2, 3 ]) ],
                result: 0
              }), n = 0, a.identical(r, n), a.is(e.primitiveIs(r)), i = e.arrayFrom(new Float32Array([ 0, 1 ])), 
              c = e.arrayFrom(new Float32Array([ 2, 3 ])), r = e.eachSample({
                sets: [ i, c ],
                result: 0
              }), n = 3, a.identical(r, n), a.is(e.primitiveIs(r)), a.case = "not argument, extra arguments", 
              a.shouldThrowErrorSync(() => e.eachSample()), a.shouldThrowErrorSync(() => e.eachSample([ [ 1 ], [ 2 ] ], null, [ 1 ])), 
              a.case = "o.sets is not arraylike, not mapLike", a.shouldThrowErrorSync(() => e.eachSample({})), 
              a.shouldThrowErrorSync(() => e.eachSample(1)), a.shouldThrowErrorSync(() => e.eachSample("str", null)), 
              a.case = "onEach is not a routine or null", a.shouldThrowErrorSync(() => e.eachSample([ [ 1 ], [ 2 ] ], "str")), 
              a.case = "o.base has a value";
              var s = {
                sets: [ [ 1, 0 ], [ 2, 3 ] ],
                base: [ 5 ]
              };
              a.shouldThrowErrorSync(() => e.eachSample(s)), a.case = "o.add has a value", s = {
                sets: [ [ 1, 0 ], [ 2, 3 ] ],
                add: [ 5 ]
              }, a.shouldThrowErrorSync(() => e.eachSample(s));
            },
            eachSampleExperiment: eachSampleExperiment,
            entityEach: 
            //
            function entityEach(a) {
              a.open("src is an ArrayLike"), a.case = "empty arrayLike objects";
              var r = [];
              e.entityEach(r, e => n = typeof e), a.identical(n, void 0);
              var n = [];
              r = e.unrollMake(0), e.entityEach(r, (e, a) => n[a] = e + a), a.identical(n, []), 
              a.isNot(e.unrollIs(n)), a.is(e.arrayIs(n)), n = [], r = e.argumentsArrayMake(0), 
              e.entityEach(r, (e, a) => n[a] = e + a), a.identical(n, []), a.is(e.arrayIs(n)), 
              n = [], r = new Array(0), e.entityEach(r, (e, a) => n[a] = e + a), a.identical(n, r), 
              a.is(e.arrayIs(n)), n = [], r = new Float32Array(0), e.entityEach(r, (e, a) => n[a] = e + a), 
              a.identical(n, []), a.is(e.arrayIs(n)), 
              //
              a.case = "not empty arrayLike objects", n = [], r = [ 0, 1, 2 ], e.entityEach(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), n = [], r = e.unrollMake([ 0, 1, e.unrollMake([ 2 ]) ]), 
              e.entityEach(r, (e, a) => n[a] = e * e + a), a.identical(n, [ 0, 2, 6 ]), a.isNot(e.unrollIs(n)), 
              a.is(e.arrayIs(r)), n = [], r = e.argumentsArrayMake([ 0, 1, 2 ]), e.entityEach(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), n = [], r = new Array(0, 1, 2), 
              e.entityEach(r, (e, a) => n[a] = e * e + a), a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), 
              n = [], r = new Float32Array([ 0, 1, 2 ]), e.entityEach(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), 
              //
              a.case = "routine counter";
              var t = function(a, r) {
                e.strIs(a) && r >= 0 ? n += 10 : n -= 1;
              };
              n = 0, e.entityEach(1, t), a.identical(n, -1), n = 0, e.entityEach("abc", t), a.identical(n, -1), 
              n = 0, e.entityEach([ "abc", 1, "ab", "a" ], t), a.identical(n, 29), n = 0, e.entityEach([ {
                a: 1
              }, {
                b: 2
              } ], t), a.identical(n, -2), n = 0, r = e.unrollFrom([ 1, "str", e.unrollMake([ 2, "str" ]) ]), 
              e.entityEach(r, t), a.identical(n, 18), n = 0, r = e.argumentsArrayMake([ 1, "str", [ 2, "str" ] ]), 
              e.entityEach(r, t), a.identical(n, 8), n = 0, r = new Array(1, "str", [ 2, "str" ]), 
              e.entityEach(r, t), a.identical(n, 8), n = 0, r = new Float32Array([ 1, 1, [ 2 ] ]), 
              e.entityEach(r, t), a.identical(n, -3), a.case = "Third argument in onEach", t = function(a, r, t) {
                e.longIs(t) ? n = t : n += 10;
              }, r = [ 0, 1, 3, 5 ], e.entityEach(r, t), a.identical(n, r), r = e.unrollMake([ 0, 1, e.unrollFrom([ 3, 5 ]) ]), 
              e.entityEach(r, t), a.identical(n, [ 0, 1, 3, 5 ]), a.is(e.unrollIs(n)), a.is(e.arrayIs(n)), 
              r = e.argumentsArrayMake([ 0, 1, [ 3, 5 ] ]), e.entityEach(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Array(1, 2, null, !0), e.entityEach(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Float32Array([ 1, 2, 1, 3 ]), e.entityEach(r, t), a.equivalent(n, [ 1, 2, 1, 3 ]), 
              a.is(e.longIs(n)), a.close("src is an ArrayLike"), 
              /* - */
              a.open("src is an object"), n = {}, e.entityEach({}, e => n = e), a.identical(n, {}), 
              n = {}, e.entityEach(Object.create(null), (e, a) => n[a] = e + a), a.identical(n, {}), 
              n = {}, e.entityEach({
                a: 1,
                b: 3,
                c: 5
              }, (e, a) => n[a] = e * e + a), a.identical(n, {
                a: "1a",
                b: "9b",
                c: "25c"
              }), 
              //
              a.case = "routine counter", t = function(a, r) {
                e.strIs(a) && r ? n += 10 : n -= 1;
              }, n = 0, e.entityEach("abc", t), a.identical(n, -1), n = 0, e.entityEach({
                a: "abc",
                b: {
                  a: 1
                },
                c: [ null ],
                d: void 0
              }, t), a.identical(n, 7), n = 0, e.entityEach({
                a: "abc",
                b: 1,
                c: "ab",
                d: "a"
              }, t), a.identical(n, 29), 
              //
              a.case = "Third argument in onEach", t = function(a, r, t) {
                e.objectIs(t) ? n = t : n += 10;
              }, n = {}, r = {
                a: 1,
                b: 2,
                c: 3
              }, e.entityEach(r, t), a.identical(n, r), a.close("src is an object"), 
              /* - */
              a.case = "src is not ArrayLike or ObjectLike", e.entityEach(null, e => n = typeof e), 
              a.identical(n, "object"), e.entityEach(1, e => n = typeof e), a.identical(n, "number"), 
              e.entityEach("a", e => n = e + 2), a.identical(n, "a2"), e.entityEach(function b() {
                return "a";
              }, e => n = typeof e), a.identical(n, "function"), e.entityEach(function b() {
                return "a";
              }, (e, a) => n = typeof e + " " + typeof a), a.identical(n, "function undefined"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityEach()), a.case = "only one argument", 
              a.shouldThrowErrorSync(() => e.entityEach([ "a" ])), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityEach([ "a" ], e => e, e => e)), a.case = "onEach has more then three args", 
              a.shouldThrowErrorSync(() => e.entityEach([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityEach({
                a: 2
              }, []));
            }
            //
            ,
            entityEachKey: function entityEachKey(a) {
              a.open("src is an ArrayLike"), a.case = "empty arrayLike objects";
              var r = [];
              e.entityEachKey(r, e => n = typeof e), a.identical(n, void 0);
              var n = [];
              r = e.unrollMake(0), e.entityEachKey(r, (e, a) => n[a] = e + a), a.identical(n, []), 
              a.isNot(e.unrollIs(n)), a.is(e.arrayIs(n)), n = [], r = e.argumentsArrayMake(0), 
              e.entityEachKey(r, (e, a) => n[a] = e + a), a.identical(n, []), a.is(e.longIs(r)), 
              n = [], r = new Array(0), e.entityEachKey(r, (e, a) => n[a] = e + a), a.identical(n, r), 
              a.is(e.longIs(r)), n = [], r = new Float32Array(0), e.entityEachKey(r, (e, a) => n[a] = e + a), 
              a.identical(n, []), 
              //
              a.case = "not empty arrayLike objects", n = [], r = [ 0, 1, 2 ], e.entityEachKey(r, (e, a, r) => n[r] = e * e), 
              a.identical(n, [ 0, 1, 4 ]), n = [], r = e.unrollMake([ 0, 1, e.unrollMake([ 2 ]) ]), 
              e.entityEachKey(r, (e, a, r) => n[r] = e * e), a.identical(n, [ 0, 1, 4 ]), a.isNot(e.unrollIs(n)), 
              a.is(e.arrayIs(r)), n = [], r = e.argumentsArrayMake([ 0, 1, 2 ]), e.entityEachKey(r, (e, a, r) => n[r] = e * e), 
              a.identical(n, [ 0, 1, 4 ]), a.is(e.longIs(r)), n = [], r = new Array(0, 1, 2), 
              e.entityEachKey(r, (e, a, r) => n[r] = e * e), a.identical(n, [ 0, 1, 4 ]), a.is(e.longIs(r)), 
              n = [], r = new Float32Array([ 0, 1, 2 ]), e.entityEachKey(r, (e, a, r) => n[r] = e * e), 
              a.identical(n, [ 0, 1, 4 ]), a.is(e.longIs(r)), 
              //
              a.case = "routine counter";
              var t = function(a, r) {
                e.strIs(a) && void 0 === r ? n += 10 : n -= 1;
              };
              n = 0, e.entityEachKey(1, t), a.identical(n, -1), n = 0, e.entityEachKey("abc", t), 
              a.identical(n, 10), n = 0, e.entityEachKey([ "abc", 1, "ab", "a", {
                a: 1
              } ], t), a.identical(n, 28), n = 0, r = e.unrollFrom([ 1, "str", e.unrollMake([ {
                a: "abc"
              }, "str" ]) ]), e.entityEachKey(r, t), a.identical(n, 18), n = 0, r = e.argumentsArrayMake([ 1, "str", [ [ "abc" ], "str" ] ]), 
              e.entityEachKey(r, t), a.identical(n, 8), n = 0, r = new Array(1, "str", [ 2, "str" ]), 
              e.entityEachKey(r, t), a.identical(n, 8), n = 0, r = new Float32Array([ 1, 1, [ 2 ] ]), 
              e.entityEachKey(r, t), a.identical(n, -3), a.case = "Third argument in onEach", 
              t = function(a, t, i) {
                e.longIs(arguments[3]) ? n = r : n += 10;
              }, r = [ 0, 1, 3, 5 ], e.entityEachKey(r, t), a.identical(n, r), r = e.unrollMake([ 0, 1, e.unrollFrom([ 3, 5 ]) ]), 
              e.entityEachKey(r, t), a.identical(n, [ 0, 1, 3, 5 ]), a.is(e.unrollIs(n)), a.is(e.arrayIs(n)), 
              r = e.argumentsArrayMake([ 0, 1, [ 3, 5 ] ]), e.entityEachKey(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Array(1, 2, null, !0), e.entityEachKey(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Float32Array([ 1, 2, 1, 3 ]), e.entityEachKey(r, t), 
              a.equivalent(n, [ 1, 2, 1, 3 ]), a.is(e.longIs(n)), a.close("src is an ArrayLike"), 
              /* - */
              a.open("src is an ObjectLike"), a.case = "not onEach", n = {}, e.entityEachKey({}, e => n = e), 
              a.identical(n, {}), n = {}, e.entityEachKey(Object.create(null), (e, a) => n[a] = e + a), 
              a.identical(n, {}), n = {}, e.entityEachKey({
                a: 1,
                b: 3,
                c: 5
              }, (e, a) => n[e] = a * a + e), a.identical(n, {
                a: "1a",
                b: "9b",
                c: "25c"
              }), 
              //
              a.case = "routine counter", t = function(a, r) {
                e.strIs(r) && a ? n += 10 : n -= 1;
              }, n = 0, e.entityEachKey("abc", t), a.identical(n, -1), n = 0, e.entityEachKey({
                a: "abc"
              }, t), a.identical(n, 10), n = 0, e.entityEachKey({
                a: "abc",
                b: 1,
                c: "ab",
                d: null
              }, t), a.identical(n, 18), n = 0, e.entityEachKey({
                a: [ "a", "b" ],
                b: {
                  e: 1
                }
              }, t), a.identical(n, -2), 
              //
              a.case = "Third argument in onEach", t = function(e, a, r) {
                n[r] = e + a;
              }, n = {}, e.entityEachKey({
                a: 1,
                b: 2,
                c: 3
              }, t), a.identical(n, {
                0: "a1",
                1: "b2",
                2: "c3"
              }), a.close("src is an ObjectLike"), 
              /* - */
              a.case = "src is not ArrayLike or ObjectLike", e.entityEachKey(null, e => n = typeof e), 
              a.identical(n, "object"), e.entityEachKey(1, e => n = typeof e), a.identical(n, "number"), 
              e.entityEachKey("a", e => n = e + 2), a.identical(n, "a2"), e.entityEachKey(function b() {
                return "a";
              }, (e, a) => n = typeof e + " " + typeof a), a.identical(n, "function undefined"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityEachKey()), a.case = "only one argument", 
              a.shouldThrowErrorSync(() => e.entityEachKey([ "a" ])), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityEachKey([ "a" ], e => e, e => e)), a.case = "onEach has more then three arg", 
              a.shouldThrowErrorSync(() => e.entityEachKey([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityEachKey({
                a: 2
              }, []));
            }
            //
            ,
            entityEachOwn: function entityEachOwn(a) {
              a.open("src is an ArrayLike"), a.case = "empty arrayLike objects";
              var r = [];
              e.entityEachOwn(r, e => n = typeof e), a.identical(n, void 0);
              var n = [];
              r = e.unrollMake(0), e.entityEachOwn(r, (e, a) => n[a] = e + a), a.identical(n, []), 
              a.isNot(e.unrollIs(n)), a.is(e.arrayIs(n)), n = [], r = e.argumentsArrayMake(0), 
              e.entityEachOwn(r, (e, a) => n[a] = e + a), a.identical(n, []), a.is(e.arrayIs(n)), 
              n = [], r = new Array(0), e.entityEachOwn(r, (e, a) => n[a] = e + a), a.identical(n, r), 
              a.is(e.arrayIs(n)), n = [], r = new Float32Array(0), e.entityEachOwn(r, (e, a) => n[a] = e + a), 
              a.identical(n, []), a.is(e.arrayIs(n)), 
              //
              a.case = "not empty arrayLike objects", n = [], r = [ 0, 1, 2 ], e.entityEachOwn(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), n = [], r = e.unrollMake([ 0, 1, e.unrollMake([ 2 ]) ]), 
              e.entityEachOwn(r, (e, a) => n[a] = e * e + a), a.identical(n, [ 0, 2, 6 ]), a.isNot(e.unrollIs(n)), 
              a.is(e.arrayIs(r)), n = [], r = e.argumentsArrayMake([ 0, 1, 2 ]), e.entityEachOwn(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), n = [], r = new Array(0, 1, 2), 
              e.entityEachOwn(r, (e, a) => n[a] = e * e + a), a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), 
              n = [], r = new Float32Array([ 0, 1, 2 ]), e.entityEachOwn(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, [ 0, 2, 6 ]), a.is(e.longIs(r)), 
              //
              a.case = "routine counter";
              var t = function(a, r) {
                e.strIs(a) && r >= 0 ? n += 10 : n -= 1;
              };
              n = 0, e.entityEachOwn(1, t), a.identical(n, -1), n = 0, e.entityEachOwn("abc", t), 
              a.identical(n, -1), n = 0, e.entityEachOwn([ "abc", 1, "ab", "a" ], t), a.identical(n, 29), 
              n = 0, e.entityEachOwn([ {
                a: 1
              }, {
                b: 2
              } ], t), a.identical(n, -2), n = 0, r = e.unrollFrom([ 1, "str", e.unrollMake([ 2, "str" ]) ]), 
              e.entityEachOwn(r, t), a.identical(n, 18), n = 0, r = e.argumentsArrayMake([ 1, "str", [ 2, "str" ] ]), 
              e.entityEachOwn(r, t), a.identical(n, 8), n = 0, r = new Array(1, "str", [ 2, "str" ]), 
              e.entityEachOwn(r, t), a.identical(n, 8), n = 0, r = new Float32Array([ 1, 1, [ 2 ] ]), 
              e.entityEachOwn(r, t), a.identical(n, -3), a.case = "Third argument in onEach", 
              t = function(a, r, t) {
                e.longIs(t) ? n = t : n += 10;
              }, r = [ 0, 1, 3, 5 ], e.entityEachOwn(r, t), a.identical(n, r), r = e.unrollMake([ 0, 1, e.unrollFrom([ 3, 5 ]) ]), 
              e.entityEachOwn(r, t), a.identical(n, [ 0, 1, 3, 5 ]), a.is(e.unrollIs(n)), a.is(e.arrayIs(n)), 
              r = e.argumentsArrayMake([ 0, 1, [ 3, 5 ] ]), e.entityEachOwn(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Array(1, 2, null, !0), e.entityEachOwn(r, t), a.identical(n, r), 
              a.is(e.longIs(n)), r = new Float32Array([ 1, 2, 1, 3 ]), e.entityEachOwn(r, t), 
              a.equivalent(n, [ 1, 2, 1, 3 ]), a.is(e.longIs(n)), a.close("src is an ArrayLike"), 
              /* - */
              a.open("src is an ObjectLike"), n = {}, e.entityEachOwn({}, e => n = e), a.identical(n, {}), 
              n = {}, r = Object.create(null);
              var i = Object.create(r);
              e.entityEachOwn(r, (e, a) => n[a] = e + a), a.identical(n, {}), e.entityEachOwn(i, (e, a) => n[a] = e + a), 
              a.identical(n, {}), n = {}, (r = Object.create(null)).a = 1, r.b = 3, i = Object.create(r), 
              e.entityEachOwn(i, (e, a) => n[a] = e * e + a), a.identical(n, {}), e.entityEachOwn(r, (e, a) => n[a] = e * e + a), 
              a.identical(n, {
                a: "1a",
                b: "9b"
              }), a.case = "routine counter", t = function(a, r) {
                e.strIs(a) && r ? n += 10 : n -= 1;
              }, n = 0, e.entityEachOwn(1, t), a.identical(n, -1), n = 0, e.entityEachOwn({
                a: "abc",
                b: 1,
                c: "ab",
                d: null
              }, t), a.identical(n, 18), n = 0, r = {
                name: "object",
                toString: 1,
                toSource: null
              }, i = Object.create(r), e.entityEachOwn(i, t), a.identical(n, 0), e.entityEachOwn(r, t), 
              a.identical(n, 8), n = 0, (r = Object.create(null)).a = [ "a", "b" ], r.b = {
                a: 1
              }, (i = Object.create(r)).c = "str", a.identical(r.a, i.a), a.identical(r.b, i.b), 
              e.entityEachOwn(r, t), a.identical(n, -2), e.entityEachOwn(i, t), a.identical(n, 8), 
              a.case = "Third argument in onEach", t = function(a, r, t) {
                e.objectIs(t) ? n = t : n += 10;
              }, n = {}, (r = Object.create(null)).a = "str", i = Object.create(r), e.entityEachOwn(i, t), 
              a.identical(n, {}), e.entityEachOwn(r, t), a.identical(n, r), a.close("src is an ObjectLike"), 
              /* - */
              a.case = "src is not ArrayLike or ObjectLike", e.entityEachOwn(null, e => n = typeof e), 
              a.identical(n, "object"), e.entityEachOwn(1, e => n = typeof e), a.identical(n, "number"), 
              e.entityEachOwn("a", e => n = e + 2), a.identical(n, "a2"), e.entityEachOwn(function b() {
                return "a";
              }, (e, a) => n = typeof e + " " + typeof a), a.identical(n, "function undefined"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityEachOwn()), a.case = "only one argument", 
              a.shouldThrowErrorSync(() => e.entityEachOwn([ "a" ])), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityEachOwn([ "a" ], e => e, e => e)), a.case = "onEach has more then three arg", 
              a.shouldThrowErrorSync(() => e.entityEachOwn([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityEachOwn({
                a: 2
              }, []));
            }
            //
            ,
            entityAll: function entityAll(a) {
              a.open("onEach is routine"), a.case = "array";
              var r = e.entityAll([ 1, "str", void 0 ], (e, a) => !!e && a + 2 < 4);
              a.identical(r, !1), r = e.entityAll([ 1, "str", {
                a: 2
              }, 4 ], (e, a) => !!e && a + 2 < 6), a.identical(r, !0), r = e.entityAll([ 1, "str", {
                a: 2
              }, !1 ], (e, a) => !!e && a + 2 < 6), a.identical(r, !1), r = e.entityAll([ 1, "str", 3, null ], () => void 0), 
              a.identical(r, void 0), a.case = "unroll";
              var n = e.unrollFrom([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]);
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !1), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), void 0, 4 ]), 
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityAll(n, () => void 0), a.identical(r, void 0), a.case = "argument array", 
              n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !1), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = e.argumentsArrayMake([ 1, 2, [ "str" ], !1, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityAll(n, () => void 0), 
              a.identical(r, void 0), a.case = "Array", n = new Array(1, 2, [ "str" ], 3, 4), 
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !1), n = new Array(1, 2, [ "str" ], 3, 4), 
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = new Array(1, 2, [ "str" ], !1, 4), 
              r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = new Array(1, 2, [ "str" ], 3, 4), 
              r = e.entityAll(n, () => void 0), a.identical(r, void 0), a.case = "Float32Array", 
              n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !1), n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = new Float32Array([ 1, 2, [ 8 ], !1, 4 ]), r = e.entityAll(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), r = e.entityAll(n, () => void 0), 
              a.identical(r, void 0), a.case = "ObjectLike", r = e.entityAll({
                1: 2,
                c: 4,
                a: void 0
              }, (e, a) => e === a), a.identical(r, !1), r = e.entityAll({
                "a": "a",
                4: "4",
                "true": "true"
              }, (e, a) => e === a), a.identical(r, !0), r = e.entityAll({
                1: 2,
                2: 3,
                a: null
              }, (e, a) => e !== a), a.identical(r, !0), r = e.entityAll({
                a: 1,
                b: 3,
                c: !0
              }, (e, a) => e !== a), a.identical(r, !0), r = e.entityAll({
                "a": "a",
                "b": "str"
              }, (e, a) => typeof e == typeof a), a.identical(r, !0), r = e.entityAll({
                a: 1,
                b: !1
              }, (e, a) => e === a), a.identical(r, !1), r = e.entityAll({
                a: 1,
                b: !1
              }, (e, a, r) => r.length !== a), a.identical(r, !0), a.case = "no ArrayLike, no ObjectLike", 
              r = e.entityAll(void 0, (e, a) => e !== a), a.identical(r, !1), r = e.entityAll(null, (e, a) => e === a), 
              a.identical(r, !1), r = e.entityAll(1, (e, a) => e === a), a.identical(r, !1), r = e.entityAll("str", (e, a) => e === a), 
              a.identical(r, !1), r = e.entityAll(!1, (e, a) => e === a), a.identical(r, !1), 
              r = e.entityAll(!0, (e, a) => e !== a), a.identical(r, !0), r = e.entityAll(!0, (e, a, r) => e !== r), 
              a.identical(r, !0), a.close("onEach is routine"), 
              /* - */
              a.open("onEach is null"), a.case = "array", r = e.entityAll([ 1, "str", void 0 ]), 
              a.identical(r, void 0), r = e.entityAll([ 1, "str", {
                a: 2
              }, 4 ]), a.identical(r, !0), r = e.entityAll([ 1, "str", {
                a: 2
              }, !1 ]), a.identical(r, !1), a.case = "unroll", n = e.unrollFrom([ 1, 2, e.unrollFrom([ "str" ]), null, 4 ]), 
              r = e.entityAll(n), a.identical(r, null), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityAll(n), a.identical(r, !0), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), !1, 4 ]), 
              r = e.entityAll(n), a.identical(r, !1), a.case = "argument array", n = e.argumentsArrayMake([ 1, 2, [ "str" ], void 0, 4 ]), 
              r = e.entityAll(n), a.identical(r, void 0), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), 
              r = e.entityAll(n), a.identical(r, !0), n = e.argumentsArrayMake([ 1, 2, [ "str" ], !1, 4 ]), 
              r = e.entityAll(n), a.identical(r, !1), a.case = "Array", n = new Array(1, 2, [ "str" ], null, 4), 
              r = e.entityAll(n), a.identical(r, null), n = new Array(1, 2, [ "str" ], 3, 4), 
              r = e.entityAll(n), a.identical(r, !0), n = new Array(1, 2, [ "str" ], !1, 4), r = e.entityAll(n), 
              a.identical(r, !1), a.case = "Float32Array", n = new Float32Array([ null, 2, [ 8 ], 3, 4 ]), 
              r = e.entityAll(n), a.identical(r, 0), n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), 
              r = e.entityAll(n), a.identical(r, !0), n = new Float32Array([ 1, 2, [ 8 ], "str", 4 ]), 
              r = e.entityAll(n), a.identical(r, NaN), a.case = "ObjectLike", r = e.entityAll({
                1: 2,
                c: 4,
                a: void 0
              }), a.identical(r, void 0), r = e.entityAll({
                1: 2,
                2: 3,
                a: null
              }), a.identical(r, null), r = e.entityAll({
                a: 1,
                b: 3,
                c: !0
              }), a.identical(r, !0), r = e.entityAll({
                a: "a",
                b: "str"
              }), a.identical(r, !0), r = e.entityAll({
                a: 1,
                b: !1
              }), a.identical(r, !1), a.case = "no ArrayLike, no ObjectLike", r = e.entityAll(void 0), 
              a.identical(r, void 0), r = e.entityAll(null), a.identical(r, null), r = e.entityAll(1), 
              a.identical(r, !0), r = e.entityAll("str"), a.identical(r, !0), r = e.entityAll(!1), 
              a.identical(r, !1), r = e.entityAll(!0), a.identical(r, !0), a.close("onEach is null"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityAll()), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityAll([ "a" ], e => e, e => e)), a.case = "onEach has more then three arg", 
              a.shouldThrowErrorSync(() => e.entityAll([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityAll({
                a: 2
              }, []));
            }
            //
            ,
            entityAny: function entityAny(a) {
              a.open("onEach is routine"), a.case = "array";
              var r = e.entityAny([ 1, "str", void 0 ], (e, a) => !!e && a + 2 < 4);
              a.identical(r, !0), r = e.entityAny([ !1, !1, void 0 ], (e, a) => !!e && a + 2 < 6), 
              a.identical(r, !1), r = e.entityAny([ 1, "str", {
                a: 2
              }, !1 ], (e, a) => !!e && a + 2 < 6), a.identical(r, !0), r = e.entityAny([ 1, "str", 3, null ], () => void 0), 
              a.identical(r, !1), a.case = "unroll";
              var n = e.unrollFrom([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]);
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !0), n = e.unrollMake([ void 0, !1, e.unrollFrom(null) ]), 
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = e.unrollMake([ void 0, !1, e.unrollFrom([ "str" ]) ]), 
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityAny(n, () => void 0), a.identical(r, !1), a.case = "argument array", 
              n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityAny(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !0), n = e.argumentsArrayMake([ !1, null, void 0 ]), r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = e.argumentsArrayMake([ 1, 2, [ "str" ], !1, 4 ]), r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityAny(n, () => void 0), 
              a.identical(r, !1), a.case = "Array", n = new Array(1, 2, [ "str" ], 3, 4), r = e.entityAny(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !0), n = new Array(!1, void 0, null), r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = new Array(1, 2, [ "str" ], !1, 4), r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = new Array(1, 2, [ "str" ], 3, 4), r = e.entityAny(n, () => void 0), 
              a.identical(r, !1), a.case = "Float32Array", n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), 
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !0), n = new Float32Array([ "a", void 0, !1, null ]), 
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = new Float32Array([ 1, 2, [ 8 ], !1, 4 ]), 
              r = e.entityAny(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), 
              r = e.entityAny(n, () => void 0), a.identical(r, !1), a.case = "ObjectLike", r = e.entityAny({
                1: 2,
                c: 4,
                a: void 0
              }, (e, a) => e === a), a.identical(r, !1), r = e.entityAny({
                "a": !1,
                4: !1,
                "true": "true"
              }, (e, a) => e === a), a.identical(r, !0), r = e.entityAny({
                1: 2,
                2: 3,
                a: null
              }, (e, a) => typeof e == typeof a), a.identical(r, !1), r = e.entityAny({
                "a": [],
                "b": "str"
              }, (e, a) => typeof e == typeof a), a.identical(r, !0), r = e.entityAny({
                a: 1,
                b: !1
              }, (e, a) => e === a), a.identical(r, !1), r = e.entityAny({
                a: 1,
                b: !1
              }, (e, a, r) => e !== r), a.identical(r, !0), a.case = "no ArrayLike, no ObjectLike", 
              r = e.entityAny(void 0, (e, a) => e !== a), a.identical(r, !1), r = e.entityAny(null, (e, a) => e === a), 
              a.identical(r, !1), r = e.entityAny(1, (e, a) => e !== a), a.identical(r, !0), r = e.entityAny("str", (e, a) => e === a), 
              a.identical(r, !1), r = e.entityAny(!1, (e, a) => e !== a), a.identical(r, !0), 
              r = e.entityAny(!0, (e, a) => e !== a), a.identical(r, !0), r = e.entityAny(!0, (e, a, r) => e !== r), 
              a.identical(r, !0), a.close("onEach is routine"), 
              /* - */
              a.open("onEach is null"), a.case = "array", r = e.entityAny([ 1, "str", void 0 ]), 
              a.identical(r, 1), r = e.entityAny([ "str", 1, {
                a: 2
              }, 4 ]), a.identical(r, "str"), r = e.entityAny([ !1, null, void 0 ]), a.identical(r, !1), 
              a.case = "unroll", n = e.unrollFrom([ !1, 2, e.unrollFrom([ "str" ]), null, 4 ]), 
              r = e.entityAny(n), a.identical(r, 2), n = e.unrollMake([ void 0, !1, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityAny(n), a.identical(r, "str"), n = e.unrollMake([ null, void 0, !1 ]), 
              r = e.entityAny(n), a.identical(r, !1), a.case = "argument array", n = e.argumentsArrayMake([ null, !1, [ "str" ], void 0, 4 ]), 
              r = e.entityAny(n), a.identical(r, [ "str" ]), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), 
              r = e.entityAny(n), a.identical(r, 1), n = e.argumentsArrayMake([ null, !1, void 0 ]), 
              r = e.entityAny(n), a.identical(r, !1), a.case = "Array", n = new Array(!1, "ab", [ "str" ], null, 4), 
              r = e.entityAny(n), a.identical(r, "ab"), n = new Array(null, 22, [ "str" ], 3, 4), 
              r = e.entityAny(n), a.identical(r, 22), n = new Array(null, !1, void 0), r = e.entityAny(n), 
              a.identical(r, !1), a.case = "Float32Array", n = new Float32Array([ 5, 2, [ "str" ], 3, 4 ]), 
              r = e.entityAny(n), a.identical(r, 5), n = new Float32Array([ void 0, [ 8 ], 3, 4 ]), 
              r = e.entityAny(n), a.identical(r, 8), n = new Float32Array([ "str", void 0, {
                a: 2
              } ]), r = e.entityAny(n), a.identical(r, !1), a.case = "ObjectLike", r = e.entityAny({
                1: 2,
                c: 4,
                a: void 0
              }), a.identical(r, 2), r = e.entityAny({
                1: 2,
                2: 3,
                a: null
              }), a.identical(r, 2), r = e.entityAny({
                a: !1,
                b: null,
                c: void 0
              }), a.identical(r, !1), r = e.entityAny({
                a: "a",
                b: "str"
              }), a.identical(r, "a"), r = e.entityAny({
                a: 1,
                b: !1
              }), a.identical(r, 1), a.case = "no ArrayLike, no ObjectLike", r = e.entityAny(void 0), 
              a.identical(r, !1), r = e.entityAny(null), a.identical(r, !1), r = e.entityAny(1), 
              a.identical(r, 1), r = e.entityAny("str"), a.identical(r, "str"), r = e.entityAny(!1), 
              a.identical(r, !1), r = e.entityAny(!0), a.identical(r, !0), a.close("onEach is null"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityAny()), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityAny([ "a" ], e => e, e => e)), a.case = "onEach has more then three arg", 
              a.shouldThrowErrorSync(() => e.entityAny([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityAny({
                a: 2
              }, []));
            }
            //
            ,
            entityNone: function entityNone(a) {
              a.open("onEach is routine"), a.case = "array";
              var r = e.entityNone([ 1, "str", void 0 ], (e, a) => !!e && a + 2 < 4);
              a.identical(r, !1), r = e.entityNone([ !1, !1, void 0 ], (e, a) => !!e && a + 2 < 6), 
              a.identical(r, !0), r = e.entityNone([ 1, "str", {
                a: 2
              }, !1 ], (e, a) => !!e && a + 2 < 6), a.identical(r, !1), r = e.entityNone([ 1, "str", 3, null ], () => void 0), 
              a.identical(r, !0), a.case = "unroll";
              var n = e.unrollFrom([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]);
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !1), n = e.unrollMake([ void 0, !1, e.unrollFrom(null) ]), 
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = e.unrollMake([ void 0, !1, e.unrollFrom([ "str" ]) ]), 
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = e.unrollMake([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityNone(n, () => void 0), a.identical(r, !0), a.case = "argument array", 
              n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityNone(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !1), n = e.argumentsArrayMake([ !1, null, void 0 ]), r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = e.argumentsArrayMake([ 1, 2, [ "str" ], !1, 4 ]), r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), r = e.entityNone(n, () => void 0), 
              a.identical(r, !0), a.case = "Array", n = new Array(1, 2, [ "str" ], 3, 4), r = e.entityNone(n, (e, a) => !!e && a + 2 < 4), 
              a.identical(r, !1), n = new Array(!1, void 0, null), r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !0), n = new Array(1, 2, [ "str" ], !1, 4), r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), 
              a.identical(r, !1), n = new Array(1, 2, [ "str" ], 3, 4), r = e.entityNone(n, () => void 0), 
              a.identical(r, !0), a.case = "Float32Array", n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), 
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 4), a.identical(r, !1), n = new Float32Array([ "a", void 0, !1, null ]), 
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !0), n = new Float32Array([ 1, 2, [ 8 ], !1, 4 ]), 
              r = e.entityNone(n, (e, a) => !!e && a + 2 < 7), a.identical(r, !1), n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), 
              r = e.entityNone(n, () => void 0), a.identical(r, !0), a.case = "ObjectLike", r = e.entityNone({
                1: 2,
                c: 4,
                a: void 0
              }, (e, a) => e === a), a.identical(r, !0), r = e.entityNone({
                "a": !1,
                4: !1,
                "true": "true"
              }, (e, a) => e === a), a.identical(r, !1), r = e.entityNone({
                1: 2,
                2: 3,
                a: null
              }, (e, a) => typeof e == typeof a), a.identical(r, !0), r = e.entityNone({
                "a": [],
                "b": "str"
              }, (e, a) => typeof e == typeof a), a.identical(r, !1), r = e.entityNone({
                a: 1,
                b: !1
              }, (e, a) => e === a), a.identical(r, !0), r = e.entityNone({
                a: 1,
                b: !1
              }, (e, a, r) => r.length === e), a.identical(r, !0), a.case = "no ArrayLike, no ObjectLike", 
              r = e.entityNone(void 0, (e, a) => e !== a), a.identical(r, !0), r = e.entityNone(null, (e, a) => e === a), 
              a.identical(r, !0), r = e.entityNone(1, (e, a) => e !== a), a.identical(r, !1), 
              r = e.entityNone("str", (e, a) => e === a), a.identical(r, !0), r = e.entityNone(!1, (e, a) => e !== a), 
              a.identical(r, !1), r = e.entityNone(!0, (e, a) => e !== a), a.identical(r, !1), 
              r = e.entityNone(!0, (e, a, r) => e !== r), a.identical(r, !1), a.close("onEach is routine"), 
              /* - */
              a.open("onEach is undefined"), a.case = "array", r = e.entityNone([ 1, "str", void 0 ]), 
              a.identical(r, !1), r = e.entityNone([ "str", 1, {
                a: 2
              }, 4 ]), a.identical(r, !1), r = e.entityNone([ !1, null, void 0 ]), a.identical(r, !0), 
              a.case = "unroll", n = e.unrollFrom([ !1, 2, e.unrollFrom([ "str" ]), null, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = e.unrollMake([ void 0, !1, e.unrollFrom([ "str" ]), 3, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = e.unrollMake([ null, void 0, !1 ]), 
              r = e.entityNone(n), a.identical(r, !0), a.case = "argument array", n = e.argumentsArrayMake([ null, !1, [ "str" ], void 0, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = e.argumentsArrayMake([ null, !1, void 0 ]), 
              r = e.entityNone(n), a.identical(r, !0), a.case = "Array", n = new Array(!1, "ab", [ "str" ], null, 4), 
              r = e.entityNone(n), a.identical(r, !1), n = new Array(null, 22, [ "str" ], 3, 4), 
              r = e.entityNone(n), a.identical(r, !1), n = new Array(null, !1, void 0), r = e.entityNone(n), 
              a.identical(r, !0), a.case = "Float32Array", n = new Float32Array([ 5, 2, [ "str" ], 3, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = new Float32Array([ void 0, [ 8 ], 3, 4 ]), 
              r = e.entityNone(n), a.identical(r, !1), n = new Float32Array([ "str", void 0, {
                a: 2
              } ]), r = e.entityNone(n), a.identical(r, !0), a.case = "ObjectLike", r = e.entityNone({
                1: 2,
                c: 4,
                a: void 0
              }), a.identical(r, !1), r = e.entityNone({
                1: 2,
                2: 3,
                a: null
              }), a.identical(r, !1), r = e.entityNone({
                a: !1,
                b: null,
                c: void 0
              }), a.identical(r, !0), r = e.entityNone({
                a: "a",
                b: "str"
              }), a.identical(r, !1), r = e.entityNone({
                a: 1,
                b: !1
              }), a.identical(r, !1), a.case = "no ArrayLike, no ObjectLike", r = e.entityNone(void 0), 
              a.identical(r, !0), r = e.entityNone(null), a.identical(r, !0), r = e.entityNone(1), 
              a.identical(r, !1), r = e.entityNone("str"), a.identical(r, !1), r = e.entityNone(!1), 
              a.identical(r, !0), r = e.entityNone(!0), a.identical(r, !1), a.close("onEach is undefined"), 
              a.case = "without arguments", a.shouldThrowErrorSync(() => e.entityNone()), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.entityNone([ "a" ], e => e, e => e)), a.case = "onEach has more then three arguments", 
              a.shouldThrowErrorSync(() => e.entityNone([ 1 ], (e, a, r, n) => e + a + r + n)), 
              a.case = "onEach is not a routine", a.shouldThrowErrorSync(() => e.entityNone({
                a: 2
              }, []));
            }
            //
            ,
            entityMap: function entityMap(a) {
              function constr() {
                this.a = 1, this.b = 3, this.c = 4;
              }
              a.open("src is arrayLike"), a.case = "simple test with mapping array by sqr";
              var r = e.entityMap([ 3, 4, 5 ], (e, a, r) => e * e);
              a.identical(r, [ 9, 16, 25 ]), a.case = "array";
              var n = [ 1, 2, null, "str" ];
              r = e.entityMap(n, (e, a, r) => e + a), a.identical(r, [ 1, 3, 2, "str3" ]), a.case = "unroll", 
              n = e.unrollFrom([ 1, 2, e.unrollFrom([ "str" ]), 3, 4 ]), r = e.entityMap(n, (e, a, r) => e + a), 
              a.identical(r, [ 1, 3, "str2", 6, 8 ]), a.is(e.arrayIs(r)), a.isNot(e.unrollIs(r)), 
              a.case = "argument array", n = e.argumentsArrayMake([ 1, 2, [ "str" ], 3, 4 ]), 
              r = e.entityMap(n, (e, a, r) => e + a), a.identical(r, [ 1, 3, "str2", 6, 8 ]), 
              a.is(e.arrayIs(r)), a.case = "Array", n = new Array(1, 2, [ "str" ], 3, 4), r = e.entityMap(n, (e, a, r) => e + a), 
              a.identical(r, [ 1, 3, "str2", 6, 8 ]), a.is(e.arrayIs(r)), a.case = "Float32Array", 
              n = new Float32Array([ 1, 2, [ 8 ], 3, 4 ]), r = e.entityMap(n, (e, a, r) => e + a), 
              a.equivalent(r, [ 1, 3, 10, 6, 8 ]), a.is(e.longIs(r)), a.close("src is arrayLike"), 
              /* - */
              a.open("src is objectLike"), a.case = "simple test with mapping object by sqr", 
              r = e.entityMap({
                3: 3,
                4: 4,
                5: 5
              }, (e, a, r) => e * e), a.identical(r, {
                3: 9,
                4: 16,
                5: 25
              }), a.is(e.mapIs(r)), n = {
                a: 1,
                b: 2,
                c: null,
                d: "str"
              }, r = e.entityMap(n, (e, a, r) => e + a), a.identical(r, {
                a: "1a",
                b: "2b",
                c: "nullc",
                d: "strd"
              }), a.is(e.mapIs(r)), a.case = "routine constructor", r = e.entityMap(new constr(), (e, a, r) => e * e + a), 
              a.identical(r, {
                a: "1a",
                b: "9b",
                c: "16c"
              }), a.is(!(r instanceof constr)), a.is(e.mapIs(r)), a.case = "simple test with mapping object by sqr : check callback arguments";
              var t = {};
              r = e.entityMap(Object.assign({}, {
                "a": 1,
                "b": 3,
                "c": 4
              }), function(e, a, r) {
                return t && (t = r), e * e + a;
              }), a.identical(t, {
                "a": 1,
                "b": 3,
                "c": 4
              }), a.case = "mapping object by sqr : source object should be unmodified", a.identical(Object.is(r, Object.assign({}, {
                "a": 1,
                "b": 3,
                "c": 4
              })), !1), a.close("src is objectLike"), 
              /* - */
              a.case = "no ArrayLike, no ObjectLike", r = e.entityMap(2, (e, a, r) => e + e), 
              a.identical(r, 4), r = e.entityMap("a", (e, a, r) => e + e), a.identical(r, "aa"), 
              a.case = "missed arguments", a.shouldThrowError(() => e.entityMap()), a.case = "extra argument", 
              a.shouldThrowError(() => e.entityMap([ 1, 3 ], callback1, callback2)), a.case = "passed argument has undefines", 
              a.shouldThrowError(() => e.entityMap([ 1, void 0 ], (e, a) => e)), a.shouldThrowError(() => e.entityMap({
                a: 2,
                b: void 0
              }, (e, a) => e)), a.shouldThrowError(() => e.entityMap(void 0, (e, a) => e)), a.case = "second argument is not routine", 
              a.shouldThrowError(() => e.entityMap([ 1, 2 ], {}));
            }
            //
            //TODO : need to check actuality of this test
            // it works correctly
            ,
            entityFilter: function entityFilter(a) {
              a.open("onEach is routine");
              var r = function(e, a, r) {
                if (!(e < 0)) return Math.sqrt(e);
              };
              a.case = "number";
              var n = e.entityFilter(3, r);
              a.identical(n, Math.sqrt(3)), a.case = "string", n = e.entityFilter("str", e => e + " " + e), 
              a.identical(n, "str str"), a.case = "simple test with mapping array by sqrt", n = e.entityFilter([ 9, -16, 25, 36, -49 ], r), 
              a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]);
              var t = e.unrollMake([ 9, e.unrollMake([ -16, 25, e.unrollFrom([ 36, -49 ]) ]) ]);
              n = e.entityFilter(t, r), a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]), 
              a.isNot(e.unrollIs(n)), t = e.argumentsArrayMake([ 9, -16, 25, 36, -49 ]), n = e.entityFilter(t, r), 
              a.identical(n, [ 3, 5, 6 ]), t = new Array(9, -16, 25, 36, -49), n = e.entityFilter(t, r), 
              a.identical(n, [ 3, 5, 6 ]), t = new Float32Array([ 9, -16, 25, 36, -49 ]), t = Array.from(t), 
              n = e.entityFilter(t, r), a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]), 
              a.case = "simple test with mapping object by sqrt", n = e.entityFilter({
                3: 9,
                4: 16,
                5: 25,
                6: -36
              }, r), a.identical(n, {
                3: 3,
                4: 4,
                5: 5
              }), a.notIdentical(n, {
                3: 3,
                4: 4,
                5: 5,
                6: 6
              }), a.case = "callback in routine", n = function() {
                return e.entityFilter(arguments, r);
              }(9, -16, 25, 36, -49), a.identical(n, [ 3, 5, 6 ]), a.case = "src is array, filter make unrolls";
              var i = (a, r, n) => e.unrollMake([ a ]);
              t = [ 1, [ 2, 3 ], [ "str", null, void 0 ] ], n = e.entityFilter(t, i), a.identical(n, [ 1, [ 2, 3 ], [ "str", null, void 0 ] ]), 
              a.isNot(e.unrollIs(n)), a.is(e.arrayIs(n)), a.case = "src is array, filter check equality", 
              i = ((e, a, r) => e === a), t = [ 0, 2, 2, [ "str", null ], void 0 ], n = e.entityFilter(t, i), 
              a.identical(n, [ !0, !1, !0, !1, !1 ]), a.notIdentical(n, [ !0, !1, !0, !1, !1, !1 ]), 
              a.is(e.arrayIs(n)), a.close("onEach is routine"), 
              /* - */
              a.case = "onEach is objectLike - condition, one entry", r = {
                3: 9
              }, n = e.entityFilter({
                a: {
                  3: 9
                },
                b: {
                  3: 4
                }
              }, r), a.identical(n, {
                a: {
                  3: 9
                }
              }), a.case = "onEach is objectLike - condition, a few entry", r = {
                3: 9
              }, t = {
                a: {
                  3: 9
                },
                b: {
                  3: 4
                },
                c: {
                  3: 9
                },
                d: {
                  3: 9
                }
              }, n = e.entityFilter(t, r), a.identical(n, {
                a: {
                  3: 9
                },
                c: {
                  3: 9
                },
                d: {
                  3: 9
                }
              }), a.case = "onEach is objectLike - condition, entry nested to next level", r = {
                3: 9
              }, t = {
                a: {
                  b: {
                    3: 9
                  }
                }
              }, n = e.entityFilter(t, r), a.identical(n, {}), a.notIdentical(n, {
                a: {
                  b: {
                    3: 9
                  }
                }
              }), a.case = "onEach is objectLike - routine, entry nested to next level", r = {
                3: i = function(e) {
                  return !0;
                }
              }, t = {
                a: {
                  3: 9
                }
              }, n = e.entityFilter(t, r), a.identical(n, {}), a.notIdentical(n, {
                a: {
                  3: 9
                }
              }), a.case = "onEach is objectLike - condition, identical entry", r = {
                3: i = function(e) {
                  return !0;
                }
              }, t = {
                a: {
                  3: i
                }
              }, n = e.entityFilter(t, r), a.identical(n, {
                a: {
                  3: i
                }
              }), a.notIdentical(n, {}), a.case = "missed arguments", a.shouldThrowErrorSync(() => e.entityFilter()), 
              a.case = "extra argument", a.shouldThrowErrorSync(() => e.entityFilter([ 1, 3 ], () => !0, 1)), 
              a.case = "onEach is not routine", a.shouldThrowErrorSync(() => e.entityFilter([ 1, 3 ], "callback")), 
              a.case = "src is undefined", a.shouldThrowErrorSync(() => e.entityFilter(void 0, callback1));
            },
            entityFilterDeep: 
            //
            function entityFilterDeep(a) {
              a.open("onEach is routine");
              var r = function(e, a, r) {
                if (!(e < 0)) return Math.sqrt(e);
              };
              a.case = "simple test with mapping array by sqrt";
              var n = e.entityFilterDeep([ 9, -16, 25, 36, -49 ], r);
              a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]);
              var t = e.unrollMake([ 9, e.unrollMake([ -16, 25, e.unrollFrom([ 36, -49 ]) ]) ]);
              n = e.entityFilterDeep(t, r), a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]), 
              a.isNot(e.unrollIs(n)), t = e.argumentsArrayMake([ 9, -16, 25, 36, -49 ]), n = e.entityFilterDeep(t, r), 
              a.identical(n, [ 3, 5, 6 ]), t = new Array(9, -16, 25, 36, -49), n = e.entityFilterDeep(t, r), 
              a.identical(n, [ 3, 5, 6 ]), t = new Float32Array([ 9, -16, 25, 36, -49 ]), t = Array.from(t), 
              n = e.entityFilterDeep(t, r), a.identical(n, [ 3, 5, 6 ]), a.notIdentical(n, [ 3, 4, 5, 6, 7 ]), 
              a.case = "simple test with mapping object by sqrt", n = e.entityFilterDeep({
                3: 9,
                4: 16,
                5: 25,
                6: -36
              }, r), a.identical(n, {
                3: 3,
                4: 4,
                5: 5
              }), a.notIdentical(n, {
                3: 3,
                4: 4,
                5: 5,
                6: 6
              }), a.case = "callback in routine", n = function() {
                return e.entityFilterDeep(arguments, r);
              }(9, -16, 25, 36, -49), a.identical(n, [ 3, 5, 6 ]), a.case = "src is array, filter make unrolls";
              var i = (a, r, n) => e.unrollMake([ a ]);
              t = [ 1, [ 2, 3 ], [ "str", null, void 0 ] ], n = e.entityFilterDeep(t, i), a.identical(n, [ 1, [ 2, 3 ], [ "str", null, void 0 ] ]), 
              a.isNot(e.unrollIs(n)), a.is(e.arrayIs(n)), a.case = "src is array, filter check equality", 
              i = ((e, a, r) => e === a), t = [ 0, 2, 2, [ "str", null ], void 0 ], n = e.entityFilterDeep(t, i), 
              a.identical(n, [ !0, !1, !0, !1, !1 ]), a.notIdentical(n, [ !0, !1, !0, !1, !1, !1 ]), 
              a.is(e.arrayIs(n)), a.close("onEach is routine"), 
              /* - */
              a.case = "onEach is objectLike - condition, one entry", r = {
                3: 9
              }, n = e.entityFilterDeep({
                a: {
                  3: 9
                },
                b: {
                  3: 4
                }
              }, r), a.identical(n, {
                a: {
                  3: 9
                }
              }), a.case = "onEach is objectLike - condition, a few entry", r = {
                3: 9
              }, t = {
                a: {
                  3: 9
                },
                b: {
                  4: 4
                },
                c: {
                  3: 9
                },
                d: {
                  3: 9
                }
              }, n = e.entityFilterDeep(t, r), a.identical(n, {
                a: {
                  3: 9
                },
                c: {
                  3: 9
                },
                d: {
                  3: 9
                }
              }), a.case = "onEach is objectLike - condition, entry nested to next levels", r = {
                3: 9
              }, t = {
                a: {
                  a: {
                    b: {
                      c: {
                        3: 9,
                        4: 6
                      }
                    }
                  }
                }
              }, n = e.entityFilterDeep(t, r), a.identical(n, {}), a.notIdentical(n, {
                a: {
                  a: {
                    b: {
                      c: {
                        3: 9,
                        4: 6
                      }
                    }
                  }
                }
              }), a.case = "onEach is objectLike - routine, entry nested to next level", r = {
                3: i = function(e) {
                  return !0;
                }
              }, t = {
                a: {
                  b: {
                    3: 9
                  }
                }
              }, n = e.entityFilterDeep(t, r), a.identical(n, {
                a: {
                  b: {
                    3: 9
                  }
                }
              }), a.notIdentical(n, {}), a.case = "onEach is objectLike - routine, entry nested to next level", 
              r = {
                3: i = function(e) {
                  for (let a in e) if (e[a] = e[a] + 5, 10 !== e[a]) return !1;
                  return !0;
                }
              }, t = {
                a: {
                  b: 5,
                  c: 5,
                  d: 5
                }
              }, n = e.entityFilterDeep(t, r), a.identical(n, {
                a: {
                  b: 5,
                  c: 5,
                  d: 5
                }
              }), a.notIdentical(n, {}), a.case = "onEach is objectLike - condition, identical entry", 
              r = {
                3: i = function(e) {
                  return !0;
                }
              }, t = {
                a: {
                  3: i
                }
              }, n = e.entityFilterDeep(t, r), a.identical(n, {
                a: {
                  3: i
                }
              }), a.notIdentical(n, {}), a.case = "missed arguments", a.shouldThrowErrorSync(() => e.entityFilterDeep()), 
              a.case = "extra argument", a.shouldThrowErrorSync(() => e.entityFilterDeep([ 1, 3 ], () => !0, 1)), 
              a.case = "onEach is not routine", a.shouldThrowErrorSync(() => e.entityFilterDeep([ 1, 3 ], "callback")), 
              a.case = "src is not arrayLike or mapLike", a.shouldThrowErrorSync(() => e.entityFilterDeep(void 0, callback1));
            }
            //
            ,
            enityExtend: function enityExtend(a) {
              a.case = "src and dst is ArrayLike";
              var r = e.enityExtend([ 9, -16 ], [ 3, 5, 6 ]);
              a.identical(r, [ 3, 5, 6 ]), r = e.enityExtend([], [ 3, 5, 6 ]), a.identical(r, [ 3, 5, 6 ]), 
              a.case = "src and dst is ObjectLike", r = e.enityExtend({
                a: 1
              }, {
                a: 3,
                b: 5,
                c: 6
              }), a.identical(r, {
                a: 3,
                b: 5,
                c: 6
              }), r = e.enityExtend({}, {
                a: 3,
                b: 5,
                c: 6
              }), a.identical(r, {
                a: 3,
                b: 5,
                c: 6
              }), r = e.enityExtend({
                d: 4
              }, {
                a: 3,
                b: 5,
                c: 6
              }), a.identical(r, {
                d: 4,
                a: 3,
                b: 5,
                c: 6
              }), a.case = "dst is ObjectLike, src is ArrayLike", r = e.enityExtend({}, [ 3, 5, 6 ]), 
              a.identical(r, {
                0: 3,
                1: 5,
                2: 6
              }), r = e.enityExtend({
                a: 1
              }, [ 3, 5, 6 ]), a.identical(r, {
                a: 1,
                0: 3,
                1: 5,
                2: 6
              }), a.case = "src is ObjectLike, dst is ArrayLike", r = e.enityExtend([ 9, -16 ], {
                a: 3,
                b: 5,
                c: 6
              }), a.identical(r, [ 9, -16 ]), r = e.enityExtend([], {
                a: 3,
                b: 5,
                c: 6
              }), a.identical(r, []), r = e.enityExtend([ 1, 2, -3 ], {
                0: 3,
                1: 5,
                2: 6
              }), a.identical(r, [ 3, 5, 6 ]), a.case = "src is not ObjectLike or ArrayLike", 
              r = e.enityExtend([ 9, -16 ], 1), a.identical(r, 1), r = e.enityExtend([], "str"), 
              a.identical(r, "str"), r = e.enityExtend({
                a: 1
              }, 1), a.identical(r, 1), r = e.enityExtend({}, "str"), a.identical(r, "str"), a.case = "missed arguments", 
              a.shouldThrowError(function() {
                e.enityExtend();
              }), a.case = "extra argument", a.shouldThrowError(function() {
                e.enityExtend([ 1, 3 ], [ 1, 3 ], [ 1, 3 ]);
              }), a.case = "dst is undefined", a.shouldThrowError(function() {
                e.enityExtend(void 0, [ 0, 1 ]);
              }), a.shouldThrowError(function() {
                e.enityExtend(void 0, {
                  a: 1,
                  b: 2
                });
              }), a.shouldThrowError(function() {
                e.enityExtend(null, [ 0, 1 ]);
              }), a.shouldThrowError(function() {
                e.enityExtend(null, {
                  a: 1,
                  b: 2
                });
              });
            },
            entityAssign: 
            //
            function entityAssign(a) {
              a.case = "src null";
              var r = new String("string"), n = null, t = e.entityAssign(r, n), i = null;
              a.identical(t, i), a.case = "dst.copy", r = {
                copy: function(e) {
                  for (var a in e) this[a] = e[a];
                }
              }, n = {
                src: "string",
                num: 123
              }, e.entityAssign(r, n), t = r, i = {
                copy: r.copy,
                src: "string",
                num: 123
              }, a.identical(t, i), a.case = "src.clone", r = 1, n = {
                src: "string",
                num: 123,
                clone: function() {
                  return {
                    src: "string",
                    num: 123
                  };
                }
              }, t = e.entityAssign(r, n), i = {
                src: "string",
                num: 123
              }, a.identical(t, i), a.is(t !== i), a.is(t !== n), a.case = "src.slice returns copy of array", 
              r = [], n = [ 1, 2, 3 ], t = e.entityAssign(r, n), i = n, a.identical(t, i), a.case = "dst.set ", 
              r = {
                set: function(e) {
                  this.value = e.value;
                }
              }, n = {
                value: 100
              }, e.entityAssign(r, n), t = r, i = {
                set: r.set,
                value: 100
              }, a.identical(t, i), a.case = "onRecursive ", r = {}, n = {
                value: 100,
                a: {
                  b: 101
                }
              }, e.entityAssign(r, n, function onRecursive(a, r, n) {
                e.assert(e.strIs(n)), a[n] = r[n];
              }), t = r, i = n, a.identical(t, i), a.case = "atomic ", n = 2, t = e.entityAssign(null, n), 
              i = n, a.identical(t, i), a.case = "missed arguments", a.shouldThrowError(function() {
                e.entityAssign();
              }), a.case = 'src.clone throws "unexpected"', a.shouldThrowError(function() {
                var a = {
                  src: "string",
                  num: 123,
                  clone: function() {
                    return e.cloneObject({
                      src: this
                    });
                  }
                };
                e.entityAssign({}, a);
              });
            }
            //
            ,
            entityAssignFieldFromContainer: function entityAssignFieldFromContainer(a) {
              a.case = "non recursive";
              var r = {}, n = {
                a: "string"
              }, t = "a", i = e.entityAssignFieldFromContainer(r, n, t), c = r[t];
              a.identical(i, c), a.case = "undefined", r = {}, n = {
                a: void 0
              }, t = "a", i = e.entityAssignFieldFromContainer(r, n, t), c = void 0, a.identical(i, c), 
              a.case = "recursive", r = {}, n = {
                a: "string"
              }, t = "a", i = e.entityAssignFieldFromContainer(r, n, t, function onRecursive(a, r, n) {
                e.assert(e.strIs(n)), a[n] = r[n];
              }), c = r[t], a.identical(i, c), a.case = "argument missed", a.shouldThrowError(function() {
                e.entityAssignFieldFromContainer();
              });
            }
            //
            ,
            _entityMost: function _entityMost(a) {
              function sqr(e) {
                return e * e;
              }
              var r = [ 3, 1, 9, 0, 5 ], n = [ 3, -4, 9, -16, 5, -2 ], t = {
                a: 25,
                b: 16,
                c: 9
              }, i = n.slice();
              a.case = "test entityMost with array and default onElement and returnMax = true";
              var c = e._entityMost(r, void 0, !0);
              a.identical(c, {
                index: 2,
                key: 2,
                value: 9,
                element: 9
              }), a.case = "test entityMost with array and default onElement and returnMax = false", 
              c = e._entityMost(r, void 0, !1), a.identical(c, {
                index: 3,
                key: 3,
                value: 0,
                element: 0
              }), a.case = "test entityMost with array simple onElement function and returnMax = true", 
              c = e._entityMost(n, sqr, !0), a.identical(c, {
                index: 3,
                key: 3,
                value: 256,
                element: -16
              }), a.case = "test entityMost with array : passed array should be unmodified", a.identical(n, i), 
              a.case = "test entityMost with array simple onElement function and returnMax = false", 
              c = e._entityMost(n, sqr, !1), a.identical(c, {
                index: 5,
                key: 5,
                value: 4,
                element: -2
              }), a.case = "test entityMost with map and default onElement and returnMax = true", 
              c = e._entityMost(t, void 0, !0), a.identical(c, {
                index: 0,
                key: "a",
                value: 25,
                element: 25
              }), a.case = "test entityMost with map and returnMax = false", c = e._entityMost(t, Math.sqrt, !1), 
              a.identical(c, {
                index: 2,
                key: "c",
                value: 3,
                element: 9
              }), a.case = "missed arguments", a.shouldThrowError(function() {
                e._entityMost();
              }), a.case = "extra argument", a.shouldThrowError(function() {
                e._entityMost([ 1, 3 ], sqr, !0, !1);
              }), a.case = "second argument is not routine", a.shouldThrowError(function() {
                e._entityMost([ 1, 3 ], "callback", !0);
              });
            },
            entityMin: 
            //
            function entityMin(a) {
              function sqr(e) {
                return e * e;
              }
              var r = [ 3, -4, 9, -16, 5, -2 ], n = r.slice();
              a.case = "test entityMin with array and without onElement callback";
              var t = e.entityMin([ 3, 1, 9, 0, 5 ]);
              a.identical(t, {
                index: 3,
                key: 3,
                value: 0,
                element: 0
              }), a.case = "test entityMin with array simple onElement function", t = e.entityMin(r, sqr), 
              a.identical(t, {
                index: 5,
                key: 5,
                value: 4,
                element: -2
              }), a.case = "test entityMin with array : passed array should be unmodified", a.identical(r, n), 
              a.case = "test entityMin with map", t = e.entityMin({
                a: 25,
                b: 16,
                c: 9
              }), a.identical(t, {
                index: 2,
                key: "c",
                value: 9,
                element: 9
              }), a.case = "missed arguments", a.shouldThrowError(function() {
                e.entityMin();
              }), a.case = "extra argument", a.shouldThrowError(function() {
                e.entityMin([ 1, 3 ], sqr, !0);
              }), a.case = "second argument is not routine", a.shouldThrowError(function() {
                e.entityMin([ 1, 3 ], "callback");
              });
            },
            entityMax: 
            //
            function entityMax(a) {
              function sqr(e) {
                return e * e;
              }
              var r = [ 3, -4, 9, -16, 5, -2 ], n = r.slice();
              a.case = "test entityMax with array";
              var t = e.entityMax([ 3, 1, 9, 0, 5 ]);
              a.identical(t, {
                index: 2,
                key: 2,
                value: 9,
                element: 9
              }), a.case = "test entityMax with array and simple onElement function", t = e.entityMax(r, sqr), 
              a.identical(t, {
                index: 3,
                key: 3,
                value: 256,
                element: -16
              }), a.case = "test entityMax with array : passed array should be unmodified", a.identical(r, n), 
              a.case = "test entityMax with map", t = e.entityMax({
                a: 25,
                b: 16,
                c: 9
              }, Math.sqrt), a.identical(t, {
                index: 0,
                key: "a",
                value: 5,
                element: 25
              }), a.case = "missed arguments", a.shouldThrowError(function() {
                e.entityMax();
              }), a.case = "extra argument", a.shouldThrowError(function() {
                e.entityMax([ 1, 3 ], sqr, !0);
              }), a.case = "second argument is not routine", a.shouldThrowError(function() {
                e.entityMax([ 1, 3 ], "callback");
              });
            },
            //
            entityLength: 
            //
            function entityLength(a) {
              // array like entity
              function Constr1() {
                this.a = 34, this.b = "s", this[100] = "sms";
              }
              var r = function() {
                return arguments;
              }(0, 1, 2, 4);
              Constr1.prototype.toString = function() {
                console.log("some message");
              }, Constr1.prototype.c = 99;
              var n = new Constr1(), t = {};
              Object.defineProperties(t, // add properties, only one is enumerable
              {
                "property1": {
                  value: !0,
                  writable: !0
                },
                "property2": {
                  value: "Hello",
                  writable: !0
                },
                "property3": {
                  enumerable: !0,
                  value: "World",
                  writable: !0
                }
              }), a.case = "entity is undefined";
              var i = e.entityLength(void 0);
              a.identical(i, 0), a.case = "entity is number", i = e.entityLength(34), a.identical(i, 1), 
              a.case = "entity is string", i = e.entityLength("hello"), a.identical(i, 1), a.case = "entity is array", 
              i = e.entityLength([ 23, 17, , 34 ]), a.identical(i, 4), a.case = "entity is nested array", 
              i = e.entityLength([ 0, 1, [ 2, 4 ] ]), a.identical(i, 3), a.case = "entity is object", 
              i = e.entityLength({
                a: 1,
                b: 2,
                c: 3
              }), a.identical(i, 3), a.case = "entity is nested object", i = e.entityLength({
                a: 1,
                b: {
                  e: 2,
                  c: 3
                }
              }), a.identical(i, 2), a.case = "entity is array like", i = e.entityLength(r), a.identical(i, 4), 
              a.case = "entity is array like", i = e.entityLength(r), a.identical(i, 4), console.log(e.toStr(n)), 
              a.case = "entity is created instance of class", i = e.entityLength(n), a.identical(i, 3), 
              a.case = "some properties are non enumerable", i = e.entityLength(t), a.identical(i, 1);
            },
            entitySize: 
            //
            function entitySize(a) {
              a.case = "string";
              var r = e.entitySize("str"), n = 3;
              a.identical(r, n), 
              // wrong because routine has this code
              // if( _.numberIs( src ) )
              // return 8;
              // so, expected should be 8
              a.case = "atomic type", r = e.entitySize(6), n = 8, a.identical(r, n), a.case = "buffer", 
              r = e.entitySize(new ArrayBuffer(10)), n = 10, a.identical(r, n), 
              // wrong because routine has code
              // if( _.longIs( src ) )
              // {
              //   let result = 0;
              //   for( let i = 0; i < src.length; i++ )
              //   {
              //     result += _.entitySize( src[ i ] );
              //     if( isNaN( result ) )
              //     break;
              //   }
              //   return result;
              // }
              // so, expected should be 3 * 8 = 24
              a.case = "arraylike", r = e.entitySize([ 1, 2, 3 ]), n = 24, a.identical(r, n), 
              // wrong because routine has code
              // if( _.mapIs( src ) )
              // {
              //   let result = 0;
              //   for( let k in src )
              //   {
              //     result += _.entitySize( k );
              //     result += _.entitySize( src[ k ] );
              //     if( isNaN( result ) )
              //     break;
              //   }
              //   return result;
              // }
              // so, expected should be 1 + 8 + 1 + 8 = 18
              a.case = "object", r = e.entitySize({
                a: 1,
                b: 2
              }), n = 18, a.identical(r, n), 
              // wrong because routine has code
              // if( !_.definedIs( src ) )
              // return 8;
              // so, expected should be 8
              a.case = "empty call", r = e.entitySize(void 0), n = 8, a.identical(r, n), a.case = "no arguments", 
              a.shouldThrowError(function() {
                e.entitySize();
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e.entitySize(1, 2);
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e.entitySize(1, void 0);
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e.entitySize([], void 0);
              });
            }
          }
        }, a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Entity_test_s
  function Long_test_s() {
    let r = _starter_._pathResolve(a, "dwtools/abase/l1.test/Long.test.s"), n = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), t = _starter_._fileCreate(r, n, // == begin of file Long_test_s
    function Long_test_s_naked() {
      !function _Long_test_s_() {
        "use strict";
        //
        /*
qqq : improve, add exception checking ceases
*/
        function longSlice(e) {
          function makeU8() {
            return new U8x(arguments);
          }
          /* */          function runFor(r) {
            e.case = "empty";
            var n = r(), t = a.longSlice(n), i = r();
            e.identical(t, i), e.is(n !== t), n = r(), t = a.longSlice(n, 0), i = r(), e.identical(t, i), 
            e.is(n !== t), n = r(), t = a.longSlice(n, 0, 5), i = r(), e.identical(t, i), e.is(n !== t), 
            n = r(), t = a.longSlice(n, -1, 5), i = r(), e.identical(t, i), e.is(n !== t), n = r(), 
            t = a.longSlice(n, 0, -1), i = r(), e.identical(t, i), e.is(n !== t), e.case = "single element", 
            n = r(3), t = a.longSlice(n), i = r(3), e.identical(t, i), e.is(n !== t), n = r(3), 
            t = a.longSlice(n, 0), i = r(3), e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, 0, -1), 
            i = r(), e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, 0, 10), 
            i = r(3), e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, 0, -10), 
            i = r(), e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, -1), i = r(3), 
            e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, -1, 10), i = r(3), 
            e.identical(t, i), e.is(n !== t), n = r(3), t = a.longSlice(n, -1, -2), i = r(), 
            e.identical(t, i), e.is(n !== t), e.case = "just pass srcLong", n = r(1, 2, 3, 4, 5, 6, 7), 
            t = a.longSlice(n), i = n, e.identical(t, i), e.is(n !== t), e.case = "make copy of source", 
            n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 0), i = r(1, 2, 3, 4, 5, 6, 7), e.identical(t, i), 
            e.is(n !== t), n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, -1), i = r(7), e.identical(t, i), 
            e.case = "third argument is not provided", n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 2), 
            i = r(3, 4, 5, 6, 7), e.identical(t, i), e.case = "second argument is undefined", 
            n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, void 0, 4), i = r(1, 2, 3, 4), e.identical(t, i), 
            e.case = "from two to six", n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 2, 6), 
            i = r(3, 4, 5, 6), e.identical(t, i), e.case = "indexes are out of bound", n = r(1, 2, 3), 
            t = a.longSlice(n, 5, 8), i = r(), e.identical(t, i), e.case = "left bound is negative", 
            n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, -1, n.length), i = r(7), e.identical(t, i), 
            e.is(n !== t), e.case = "rigth bound is negative", n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 0, -1), 
            i = r(1, 2, 3, 4, 5, 6), e.identical(t, i), e.is(n !== t), e.case = "rigth bound is out of range", 
            n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 0, n.length + 2), i = n, e.identical(t, i), 
            e.is(n !== t), e.case = "etc", n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n), e.is(t.constructor === n.constructor), 
            e.is(t !== n), e.identical(t, n), n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 0), 
            e.is(t.constructor === n.constructor), e.is(t !== n), e.identical(t, n), n = r(1, 2, 3, 4, 5, 6, 7), 
            i = r(7), t = a.longSlice(n, -1), e.is(t.constructor === n.constructor), e.is(t !== n), 
            e.identical(t, i), n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, 0, 1), e.is(t.constructor === n.constructor), 
            e.is(t !== n), e.identical(t, r(1)), n = r(1, 2, 3, 4, 5, 6, 7), t = a.longSlice(n, n.length, n.length), 
            e.is(t.constructor === n.constructor), e.is(t !== n), e.identical(t, r()), n = r(1, 2, 3, 4, 5, 6, 7), 
            t = a.longSlice(n, -1, n.length + 1), e.is(t.constructor === n.constructor), e.is(t !== n), 
            e.identical(t, r(7)), e.case = "no arguments", e.shouldThrowErrorSync(function() {
              a.longSlice();
            }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
              a.longSlice("x");
            }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
              a.longSlice([ 1 ], "x", 1);
            }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
              a.longSlice([ 1 ], 0, "x");
            }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
              var e = new ArrayBuffer();
              a.longSlice(e);
            });
          }
          e.open("Array"), runFor(
          /* */
          function makeArray() {
            for (var e = [], a = 0; a < arguments.length; a++) e.push(arguments[a]);
            return e;
          }), e.close("Array"), e.open("ArgumentsArray"), runFor(makeU8), e.close("ArgumentsArray"), 
          e.open("F32x"), runFor(function makeF32() {
            return new F32x(arguments);
          }), e.close("F32x"), e.open("U8x"), runFor(makeU8), e.close("U8x"), e.case = "raw buffer", 
          e.shouldThrowErrorSync(function() {
            a.longSlice(new ArrayBuffer());
          });
        }
        void 0 !== t && i("../Layer2.s").include("wTesting");
        var a = wTools;
        // --
        // buffer
        // --
                longSlice.timeOut = 2e4;
        //
        var r = {
          name: "Tools/base/l1/Long",
          silencing: 1,
          enabled: 1,
          // verbosity : 9,
          // routine : 'bufferRelen',
          tests: {
            // buffer
            bufferFrom: function bufferFrom(e) {
              /*src: number,str,array,raw,typed,node */
              /*bufferConstructor: typed,raw,node */
              /* typed buffer */
              e.case = "src:number,bufferConstructor:typed buffer";
              var r = 1, n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ r ]);
              e.identical(n, t), e.case = "src:str,bufferConstructor:typed buffer", r = "abc", 
              n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t), e.case = "src:array,bufferConstructor:typed buffer", 
              r = [ 97, 98, 99 ], n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t), e.case = "src:raw buffer,bufferConstructor:typed buffer", 
              r = new ArrayBuffer(3), n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ 0, 0, 0 ]), e.identical(n, t), e.case = "src:typed,bufferConstructor:typed buffer", 
              r = new Int32Array([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t), "nodejs" === Config.platform && (e.case = "src:node buffer,bufferConstructor:typed buffer", 
              r = Buffer.from([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: Uint8Array
              }), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t))
              /* raw buffer */ , e.case = "src:number,bufferConstructor:raw buffer", r = 1, n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = new Uint8Array([ 1 ]).buffer, e.identical(n, t), e.case = "src:str,bufferConstructor:raw buffer", 
              r = "abc", n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = new Uint8Array([ 97, 98, 99 ]).buffer, e.identical(n, t), e.case = "src:array,bufferConstructor:raw buffer", 
              r = [ 97, 98, 99 ], n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = new Uint8Array([ 97, 98, 99 ]).buffer, e.identical(n, t), e.case = "src:raw buffer,bufferConstructor:raw buffer", 
              r = new ArrayBuffer(3), n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = r, e.identical(n, t), e.case = "src:typed,bufferConstructor:raw buffer", 
              r = new Int32Array([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = new Int32Array([ 97, 98, 99 ]).buffer, e.identical(n, t), "nodejs" === Config.platform && (e.case = "src:node buffer,bufferConstructor:raw buffer", 
              r = Buffer.from([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: ArrayBuffer
              }), t = new Uint8Array([ 97, 98, 99 ]).buffer, e.identical(n, t)), "nodejs" !== !Config.platform && (
              /* node buffer */
              e.case = "src:number,bufferConstructor:node buffer", r = 1, n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = Buffer.from([ r ]), e.identical(n, t), e.case = "src:str,bufferConstructor:node buffer", 
              r = "abc", n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = Buffer.from(r), e.identical(n, t), e.case = "src:array,bufferConstructor:node buffer", 
              r = [ 97, 98, 99 ], n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = Buffer.from(r), e.identical(n, t), e.case = "src:raw buffer,bufferConstructor:node buffer", 
              r = new ArrayBuffer(3), n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = Buffer.from(r), e.identical(n, t), e.case = "src:typed,bufferConstructor:node buffer", 
              r = new Int32Array([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = Buffer.from(r.buffer, r.buteOffset, r.byteLength), e.identical(n, t), e.case = "src:node buffer,bufferConstructor:node buffer", 
              r = Buffer.from([ 97, 98, 99 ]), n = a.bufferFrom({
                src: r,
                bufferConstructor: Buffer
              }), t = r, e.identical(n, t));
            }
            //
            ,
            bufferRelen: function bufferRelen(e) {
              e.case = "second argument is more than ints.length";
              var r = new Int8Array([ 3, 7, 13 ]), n = c = a.bufferRelen(r, 4);
              // [ 3, 7, 13, 0 ];
              e.identical(c, n), e.case = "second argument is less than ints2.length";
              var t = new Int16Array([ 3, 7, 13, 33, 77 ]);
              n = c = a.bufferRelen(t, 3), // [ 3, 7, 13 ];
              e.identical(c, n), e.case = "invalid values are replaced by zero";
              var i = new Int32Array([ 3, "a", 13, "b", 77 ]);
              n = c = a.bufferRelen(i, 6), // [ 3, 0, 13, 0, 77, 0 ];
              e.identical(c, n), e.case = "returns the initial typed array";
              var c, s = new Float32Array([ 3.35, 7.5, 13.35, 33.75, 77.25 ]);
              n = c = a.bufferRelen(s, 5), // [ 3.3499999046325684, 7.5, 13.350000381469727, 33.75, 77.25 ];
              e.identical(c, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.bufferRelen();
              });
            },
            bufferRetype: 
            //
            function bufferRetype(e) {
              e.case = "converts and returns the new type of Int16Array";
              var r, n = new Int8Array([ 1, 2, 3, 4, 5, 6 ]), t = r = a.bufferRetype(n, Int16Array);
              // [ 513, 1027, 1541 ];
              e.identical(r, t), e.case = "converts and returns the new type of Int8Array", n = new Int16Array([ 513, 1027, 1541 ]), 
              t = r = a.bufferRetype(n, Int8Array), // [ 1, 2, 3, 4, 5, 6 ];
              e.identical(r, t), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.bufferRetype();
              }), e.case = "arguments are wrong", e.shouldThrowErrorSync(function() {
                a.bufferRetype("wrong argument", "wrong argument");
              });
            },
            bufferRawFrom: 
            //
            function bufferRawFrom(e) {
              e.case = "typed";
              var r = new Uint8Array(3), n = a.bufferRawFrom(r), t = new ArrayBuffer(3);
              e.identical(n, t), e.case = "raw", r = new ArrayBuffer(3), n = a.bufferRawFrom(r), 
              t = r, e.identical(n, t), e.case = "view";
              var i = new ArrayBuffer(10);
              r = new DataView(i), n = a.bufferRawFrom(r), t = i, e.identical(n, t), e.case = "str", 
              r = "abc", n = a.bufferRawFrom(r), t = new Uint8Array([ 97, 98, 99 ]).buffer, e.identical(n, t), 
              "nodejs" === Config.platform && (e.case = "node-buffer", r = Buffer.from("abc"), 
              n = a.bufferRawFrom(r), t = new Uint8Array([ 97, 98, 99 ]).buffer, e.identical(n, t))
              /* - */ , e.case = "unknown source", e.shouldThrowErrorSync(() => a.bufferRawFrom(5)), 
              e.shouldThrowErrorSync(() => a.bufferRawFrom({}));
            }
            //
            ,
            bufferBytesFrom: function bufferBytesFrom(e) {
              e.case = "raw";
              var r = new ArrayBuffer(3), n = a.bufferBytesFrom(r), t = new Uint8Array([ 0, 0, 0 ]);
              e.identical(n, t), e.case = "arr", r = [ 97, 98, 99 ], n = a.bufferBytesFrom(r), 
              t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t), e.case = "typed", r = new Int8Array([ 97, 98, 99 ]), 
              n = a.bufferBytesFrom(r), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t), 
              e.case = "view";
              var i = new ArrayBuffer(3);
              r = new DataView(i), n = a.bufferBytesFrom(r), t = new Uint8Array([ 0, 0, 0 ]), 
              e.identical(n, t), e.case = "str", r = "abc", n = a.bufferBytesFrom(r), t = new Uint8Array([ 97, 98, 99 ]), 
              e.identical(n, t), "nodejs" === Config.platform && (e.case = "node", r = Buffer.from("abc"), 
              n = a.bufferBytesFrom(r), t = new Uint8Array([ 97, 98, 99 ]), e.identical(n, t))
              /* - */ , e.case = "unknown source", e.shouldThrowErrorSync(() => a.bufferBytesFrom(5)), 
              // test.shouldThrowErrorSync( () => _.bufferBytesFrom( [] ) );
              e.shouldThrowErrorSync(() => a.bufferBytesFrom({}));
            }
            //
            ,
            bufferNodeFrom: function bufferNodeFrom(e) {
              if ("nodejs" === Config.platform) {
                e.case = "raw";
                var r = new ArrayBuffer(3), n = a.bufferNodeFrom(r), t = Buffer.from([ 0, 0, 0 ]);
                e.identical(n, t), e.case = "typed", r = new Int8Array([ 97, 98, 99 ]), n = a.bufferNodeFrom(r), 
                t = Buffer.from([ 97, 98, 99 ]), e.identical(n, t), e.case = "view";
                var i = new ArrayBuffer(3);
                r = new DataView(i), n = a.bufferNodeFrom(r), t = Buffer.from([ 0, 0, 0 ]), e.identical(n, t), 
                e.case = "str", r = "abc", n = a.bufferNodeFrom(r), t = Buffer.from(r), e.identical(n, t), 
                e.case = "node", r = Buffer.from("abc"), n = a.bufferNodeFrom(r), t = r, e.identical(n, t), 
                e.case = "empty raw", r = new ArrayBuffer(0), n = a.bufferNodeFrom(r), t = Buffer.alloc(0), 
                e.identical(n, t), e.case = "empty typed", r = new Int8Array([]), n = a.bufferNodeFrom(r), 
                t = Buffer.alloc(0), e.identical(n, t), e.case = "empty node", r = Buffer.alloc(0), 
                n = a.bufferNodeFrom(r), t = r, e.identical(n, t), e.case = "array", r = [ 97, 98, 99 ], 
                n = a.bufferNodeFrom(r), t = Buffer.from(r), e.identical(n, t), e.case = "object", 
                r = new String("abc"), n = a.bufferNodeFrom(r), t = Buffer.from([ 97, 98, 99 ]), 
                e.identical(n, t), e.case = "unknown source", e.shouldThrowErrorSync(() => a.bufferNodeFrom(5)), 
                // test.shouldThrowErrorSync( () => _.bufferNodeFrom( [] ) );
                e.shouldThrowErrorSync(() => a.bufferNodeFrom({}));
              }
            }
            //
            ,
            bufferRawFromTyped: function bufferRawFromTyped(e) {
              var r = new ArrayBuffer(10), n = new Int8Array(r);
              e.case = "returns the same length of typed array";
              var t = i = a.bufferRawFromTyped(n);
              // [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
              e.identical(i, t);
              var i, c = new ArrayBuffer(10), s = new Int8Array(c, 2);
              e.case = "returns the new sub typed array", t = i = a.bufferRawFromTyped(s), // [ 0, 0, 0, 0, 0, 0 ]
              e.identical(i, t), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.bufferRawFromTyped();
              }), e.case = "arguments are wrong", e.shouldThrowErrorSync(function() {
                a.bufferRawFromTyped("wrong argument");
              });
            }
            //
            ,
            // type test
            arrayIs: function arrayIs(e) {
              e.case = "an empty array";
              var r = a.arrayIs([]), n = !0;
              e.identical(r, n), e.case = "an array", r = a.arrayIs([ 1, 2, 3 ]), n = !0, e.identical(r, n), 
              e.case = "object", r = a.arrayIs({}), n = !1, e.identical(r, n), e.case = "number", 
              r = a.arrayIs(6), n = !1, e.identical(r, n), e.case = "string", r = a.arrayIs("abc"), 
              n = !1, e.identical(r, n), e.case = "boolean", r = a.arrayIs(!0), n = !1, e.identical(r, n), 
              e.case = "function", r = a.arrayIs(function() {}), n = !1, e.identical(r, n), e.case = "a pseudo array", 
              r = function() {
                return a.arrayIs(arguments);
              }("Hello there!"), n = !1, e.identical(r, n), e.case = "no argument", r = a.arrayIs(), 
              n = !1, e.identical(r, n), e.case = "null", r = a.arrayIs(), n = !1, e.identical(r, n);
            }
            //
            ,
            longIs: function longIs(e) {
              e.case = "an empty array";
              var r = a.longIs([]), n = !0;
              e.identical(r, n), e.case = "an array", r = a.longIs([ 1, 2, 3 ]), n = !0, e.identical(r, n), 
              e.case = "a pseudo array", r = a.longIs(arguments), n = !0, e.identical(r, n), e.case = "raw array buffer", 
              r = a.longIs(new ArrayBuffer(10)), n = !1, e.identical(r, n), e.case = "typed array buffer", 
              r = a.longIs(new Float32Array(10)), n = !0, e.identical(r, n), e.case = "no argument", 
              r = a.longIs(), n = !1, e.identical(r, n), e.case = "null", r = a.longIs(null), 
              n = !1, e.identical(r, n), e.case = "function", r = a.longIs(function() {}), n = !1, 
              e.identical(r, n), e.case = "string", r = a.longIs("x"), n = !1, e.identical(r, n), 
              e.case = "number", r = a.longIs(1), n = !1, e.identical(r, n), e.case = "boolean", 
              r = a.longIs(!0), n = !1, e.identical(r, n), e.case = "object", r = a.longIs({}), 
              n = !1, e.identical(r, n);
            }
            //
            ,
            constructorLikeArray: function constructorLikeArray(e) {
              e.case = "an array";
              var r = a.constructorLikeArray([].constructor), n = !0;
              e.identical(r, n), e.case = "arguments, not possible to say yes by constructor", 
              r = a.constructorLikeArray(arguments.constructor), n = !1, e.identical(r, n), e.case = "raw array buffer";
              debugger;
              r = a.constructorLikeArray(new ArrayBuffer(10).constructor), n = !1, e.identical(r, n), 
              e.case = "typed array buffer", r = a.constructorLikeArray(new Float32Array(10).constructor), 
              n = !0, e.identical(r, n), e.case = "no argument", r = a.constructorLikeArray(), 
              n = !1, e.identical(r, n), e.case = "null", r = a.constructorLikeArray(null), n = !1, 
              e.identical(r, n), e.case = "number", r = a.constructorLikeArray(1), n = !1, e.identical(r, n), 
              e.case = "function", r = a.constructorLikeArray(function() {}.constructor), n = !1, 
              e.identical(r, n), e.case = "string", r = a.constructorLikeArray("x".constructor), 
              n = !1, e.identical(r, n), e.case = "string", r = a.constructorLikeArray("x"), n = !1, 
              e.identical(r, n), e.case = "object", r = a.constructorLikeArray({}.constructor), 
              n = !1, e.identical(r, n);
            }
            //
            ,
            hasLength: function hasLength(e) {
              e.case = "an empty array";
              var r = a.hasLength([]), n = !0;
              e.identical(r, n), e.case = "an array", r = a.hasLength([ 1, 2, 3 ]), n = !0, e.identical(r, n), 
              e.case = "a pseudo array", r = function() {
                return a.hasLength(arguments);
              }("Hello there!"), n = !0, e.identical(r, n), e.case = "an array-like", r = a.hasLength({
                0: 1,
                1: 2,
                2: 3,
                "length": 3
              }), n = !0, e.identical(r, n), e.case = "a Function.length", r = a.hasLength(function fn(e, a, r) {}), 
              n = !0, e.identical(r, n), e.case = 'a "string".length', r = a.hasLength("Hello there!"), 
              n = !0, e.identical(r, n), e.case = "no arguments", r = a.hasLength(), n = !1, e.identical(r, n), 
              e.case = "null", r = a.hasLength(), n = !1, e.identical(r, n);
            },
            // producer
            argumentsArrayMake: 
            // --
            // producer
            // --
            function argumentsArrayMake(e) {
              e.case = "empty";
              var r = [], n = a.argumentsArrayMake(r), t = [];
              e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "single number", 
              r = [ 0 ], n = a.argumentsArrayMake(r), t = [ 0 ], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), 
              e.is(r !== n), e.case = "single string", r = [ "a" ], n = a.argumentsArrayMake(r), 
              t = [ "a" ], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "several", 
              r = [ 1, 2, 3 ], n = a.argumentsArrayMake(r), t = [ 1, 2, 3 ], e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "zero length", n = a.argumentsArrayMake(0), 
              t = new Array(0), e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), 
              e.case = "length", n = a.argumentsArrayMake(3), t = new Array(3), e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake();
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake([], []);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake({});
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayMake("1");
              });
            }
            //
            ,
            argumentsArrayFrom: function argumentsArrayFrom(e) {
              e.case = "empty";
              var r = [], n = a.argumentsArrayFrom(r), t = [];
              e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "single number", 
              r = [ 0 ], n = a.argumentsArrayFrom(r), t = [ 0 ], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), 
              e.is(r !== n), e.case = "single string", r = [ "a" ], n = a.argumentsArrayFrom(r), 
              t = [ "a" ], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "several", 
              r = [ 1, 2, 3 ], n = a.argumentsArrayFrom(r), t = [ 1, 2, 3 ], e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r !== n), e.case = "zero length", n = a.argumentsArrayFrom(0), 
              t = new Array(0), e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r !== n), 
              e.case = "length", n = a.argumentsArrayFrom(3), t = new Array(3), e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r !== n), 
              /* */
              e.case = "preserving empty", r = a.argumentsArrayMake([]), n = a.argumentsArrayFrom(r), 
              t = [], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), e.is(r === n), e.case = "preserving single number", 
              r = a.argumentsArrayMake([ 0 ]), n = a.argumentsArrayFrom(r), t = [ 0 ], e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r === n), e.case = "preserving single string", 
              r = a.argumentsArrayMake([ "a" ]), n = a.argumentsArrayFrom(r), t = [ "a" ], e.equivalent(n, t), 
              e.is(a.argumentsArrayIs(n)), e.is(r === n), e.case = "preserving several", r = a.argumentsArrayMake([ 1, 2, 3 ]), 
              n = a.argumentsArrayFrom(r), t = [ 1, 2, 3 ], e.equivalent(n, t), e.is(a.argumentsArrayIs(n)), 
              e.is(r === n), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom();
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom([], []);
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom({});
              }), e.shouldThrowErrorSync(function() {
                a.argumentsArrayFrom("1");
              });
            }
            //
            /* qqq : implement bufferMakeSimilar */ ,
            longMake: function longMake(e) {
              e.case = "an empty array";
              var r = a.longMake([], 0), n = [];
              e.identical(r, n), e.case = "length = 1", r = a.longMake([], 1), n = [ ,  ], e.identical(r, n), 
              e.case = "length = 2", r = a.longMake([ 1, 2, 3 ], 2), n = [ , ,  ], e.identical(r, n), 
              e.case = "length = 4", r = a.longMake([ 1, 2, 3 ], 4), n = [ , , , ,  ], e.identical(r, n), 
              e.case = "same length";
              var t = [ 1, 2, 3 ];
              r = a.longMake(t), e.identical(r.length, 3), e.is(r !== t), t = [];
              var i = a.arrayFillWhole(Buffer.alloc(5), 1);
              r = a.longMake(t, Array.from(i)), e.identical(r.length, 5), e.is(a.arrayIs(r)), 
              e.identical(r, [ 1, 1, 1, 1, 1 ]), (t = new Uint8Array(5))[0] = 1, r = a.longMake(t), 
              e.is(a.bufferTypedIs(r)), e.identical(r.length, 5), e.is(r !== t), t = new Uint8Array(5), 
              i = [ 1, 2, 3, 4, 5 ], r = a.longMake(t, i), e.is(a.bufferTypedIs(r)), e.is(r instanceof Uint8Array), 
              e.identical(r.length, 5);
              for (var c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "typedArray", (t = new Uint8Array(5))[0] = 1, r = a.longMake(t, 4), 
              e.is(a.bufferTypedIs(r)), e.identical(r.length, 4), e.is(r !== t), e.case = "ArrayBuffer", 
              t = new ArrayBuffer(5), r = a.longMake(t, 4), e.is(a.bufferRawIs(r)), e.identical(r.byteLength, 4), 
              e.case = "NodeBuffer", r = a.longMake(Buffer.alloc(5)), e.is(a.bufferNodeIs(r)), 
              e.identical(r.length, 5), e.case = "NodeBuffer and src", i = a.arrayFillWhole(new Uint8Array(5), 1), 
              r = a.longMake(Buffer.alloc(5), i), e.is(a.bufferNodeIs(r)), e.identical(r.length, 5), 
              c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "NodeBuffer as src", i = Buffer.alloc(10), s = 0; s < i.length; s++) i[s] = s;
              for (r = a.longMake([], Array.from(i)), e.is(a.arrayIs(r)), e.identical(r.length, i.length), 
              c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "ins as Array", r = a.longMake(Array, 5), e.is(a.arrayIs(r)), 
              e.identical(r.length, 5), e.case = "ins as Array", i = [ 1, 2, 3 ], r = a.longMake(Array, i), 
              e.is(a.arrayIs(r)), e.identical(r.length, 3), e.identical(r, i), e.case = "ins as Array", 
              i = a.arrayFillWhole(new Float32Array(5), 1), r = a.longMake(Array, i), e.is(a.arrayIs(r)), 
              e.identical(r.length, 5), e.identical(r, [ 1, 1, 1, 1, 1 ]), e.case = "ins as Buffer", 
              i = a.arrayFillWhole(new Float32Array(5), 1), r = a.longMake(Buffer, i), e.is(a.bufferNodeIs(r)), 
              e.identical(r.length, 5), c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "ins as Array", i = a.arrayFillWhole(Buffer.alloc(5), 1), 
              r = a.longMake(Array, i), e.is(a.arrayIs(r)), e.identical(r.length, 5), c = !0, 
              s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "ins as TypedArray", i = [ 1, 2, 3 ], r = a.longMake(Uint8Array, i), 
              e.is(a.bufferTypedIs(r)), e.identical(r.length, 3), c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              for (e.is(c), e.case = "ins as TypedArray", i = a.arrayFillWhole(Buffer.alloc(5), 1), 
              r = a.longMake(Float32Array, i), e.is(a.bufferTypedIs(r)), e.identical(r.length, 5), 
              c = !0, s = 0; s < i.length; s++) c = r[s] === i[s];
              e.is(c), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.longMake();
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.longMake("wrong argument");
              }), e.case = "arguments[1] is wrong", e.shouldThrowErrorSync(function() {
                a.longMake([ 1, 2, 3 ], "wrong type of argument");
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.longMake([ 1, 2, 3 ], 4, "redundant argument");
              }), e.case = "argument is not wrapped into array", e.shouldThrowErrorSync(function() {
                a.longMake(1, 2, 3, 4);
              });
            },
            longMakeZeroed: 
            //
            /*

qqq : implement bufferMakeZeroed routine and test routine

*/
            function longMakeZeroed(e) {
              e.case = "Array";
              var r = a.longMakeZeroed(Array, 1), n = [ 0 ];
              e.identical(r, n), 
              //
              e.case = "Array", r = a.longMakeZeroed(Array, new Float32Array(2)), n = [ 0, 0 ], 
              e.identical(r, n), 
              //
              e.case = "ArrayBuffer", r = a.longMakeZeroed(ArrayBuffer, 3), e.is(a.bufferRawIs(r)), 
              e.identical(r.byteLength, 3), 
              //
              e.case = "Uint8Array", r = a.longMakeZeroed(Uint8Array, [ 1, 2, 3 ]), e.is(a.bufferTypedIs(r)), 
              e.identical(r.length, 3);
              for (var t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              e.is(t), 
              //
              // test.case = 'Uint8Array';
              // var got = _.longMakeZeroed( Buffer, new ArrayBuffer( 3) );
              // test.is( _.bufferNodeIs( got ) );
              // test.identical( got.length, 3 );
              // var isEqual = true;
              // for( var i = 0; i < got.length; i++ )
              // isEqual = got[ i ] === 0 ? true : false;
              // test.is( isEqual );
              //
              e.case = "an empty array", r = a.longMakeZeroed([], 0), n = [], e.identical(r, n), 
              //
              e.case = "length = 1", r = a.longMakeZeroed([], 1), n = [ 0 ], e.identical(r, n), 
              //
              e.case = "length = 2", r = a.longMakeZeroed([ 1, 2, 3 ], 2), n = [ 0, 0 ], e.identical(r, n), 
              //
              e.case = "length = 4", r = a.longMakeZeroed([ 1, 2, 3 ], 4), n = [ 0, 0, 0, 0 ], 
              e.identical(r, n), 
              //
              e.case = "same length";
              var c = [ 1, 2, 3 ];
              for (r = a.longMakeZeroed(c), e.identical(r.length, 3), e.identical(r, [ 0, 0, 0 ]), 
              //
              // test.case = 'same length';
              // var ins = new ArrayBuffer(5);
              // var got = _.longMakeZeroed( ins );
              // test.is( _.bufferRawIs( got ) );
              // test.identical( got.byteLength, 5 );
              //
              e.case = "same length", r = a.longMakeZeroed(ArrayBuffer, 5), e.is(a.bufferRawIs(r)), 
              e.identical(r.byteLength, 5), 
              //
              e.case = "same length, ins is a typed array", c = a.arrayFillWhole(new Uint8Array(5), 1), 
              r = a.longMakeZeroed(c), e.identical(r.length, 5), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              for (e.is(t), 
              //
              e.case = "same length, ins is a node buffer", c = a.arrayFillWhole(Buffer.alloc(5), 1), 
              r = a.longMakeZeroed(c), e.identical(r.length, 5), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              e.is(t), c = [];
              //
              var s = a.arrayFillWhole(Buffer.alloc(5), 1);
              for (r = a.longMakeZeroed(c, s), e.identical(r.length, 5), e.is(a.arrayIs(r)), e.identical(r, [ 0, 0, 0, 0, 0 ]), 
              (c = new Uint8Array(5))[0] = 1, r = a.longMakeZeroed(c), e.is(a.bufferTypedIs(r)), 
              e.identical(r.length, 5), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              for (e.is(t), 
              //
              e.case = "typedArray", (c = new Uint8Array(5))[0] = 1, r = a.longMakeZeroed(c, 4), 
              e.is(a.bufferTypedIs(r)), e.identical(r.length, 4), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              for (e.is(t), 
              //
              e.case = "ArrayBuffer", c = new ArrayBuffer(5), r = a.longMakeZeroed(c, 4), e.is(a.bufferRawIs(r)), 
              e.identical(r.byteLength, 4), r = new Uint8Array(r), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              for (e.is(t), 
              //
              // test.case = 'ArrayBuffer';
              // var ins = [];
              // var src = new ArrayBuffer( 5 );
              // var got = _.longMakeZeroed( ins, src );
              // test.is( _.arrayIs( got ) );
              // test.identical( got.length, 5 );
              // var isEqual = true;
              // for( var i = 0; i < got.length; i++ )
              // isEqual = got[ i ] === 0 ? true : false;
              // test.is( isEqual );
              //
              e.case = "NodeBuffer", r = a.longMakeZeroed(Buffer.alloc(5)), e.is(a.bufferNodeIs(r)), 
              e.identical(r.length, 5), t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              for (e.is(t), 
              //
              e.case = "NodeBuffer and src", s = new Int8Array(5), i = 0; i < s.length; i++) s[i] = i;
              for (r = a.longMakeZeroed(Buffer.alloc(5), s), e.is(a.bufferNodeIs(r)), e.identical(r.length, 5), 
              t = !0, i = 0; i < r.length; i++) t = 0 === r[i];
              e.is(t), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.longMakeZeroed();
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.longMakeZeroed("wrong argument");
              }), e.case = "arguments[1] is wrong", e.shouldThrowErrorSync(function() {
                a.longMakeZeroed([ 1, 2, 3 ], "wrong type of argument");
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.longMakeZeroed([ 1, 2, 3 ], 4, "redundant argument");
              }), e.case = "argument is not wrapped into array", e.shouldThrowErrorSync(function() {
                a.longMakeZeroed(1, 2, 3, 4);
              });
            }
            //
            ,
            arrayMake: function arrayMake(e) {
              e.case = "empty";
              var r = [], n = a.arrayMake(r), t = [];
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "single number", 
              r = [ 0 ], n = a.arrayMake(r), t = [ 0 ], e.equivalent(n, t), e.is(a.arrayIs(n)), 
              e.is(r !== n), e.case = "single string", r = [ "a" ], n = a.arrayMake(r), t = [ "a" ], 
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "several", r = [ 1, 2, 3 ], 
              n = a.arrayMake(r), t = [ 1, 2, 3 ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), 
              e.case = "zero length", n = a.arrayMake(0), t = new Array(0), e.equivalent(n, t), 
              e.is(a.arrayIs(n)), e.is(r !== n), e.case = "length", n = a.arrayMake(3), t = new Array(3), 
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "from empty Float32", 
              r = new Float32Array(), n = a.arrayMake(r), t = [], e.equivalent(n, t), e.is(a.arrayIs(n)), 
              e.is(r !== n), e.case = "from Float32", r = new Float32Array([ 1, 2, 3 ]), n = a.arrayMake(r), 
              t = [ 1, 2, 3 ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "from empty arguments array", 
              r = a.argumentsArrayMake([]), n = a.arrayMake(r), t = [], e.equivalent(n, t), e.is(a.arrayIs(n)), 
              e.is(r !== n), e.case = "from arguments array", r = a.argumentsArrayMake([ 1, 2, 3 ]), 
              n = a.arrayMake(r), t = [ 1, 2, 3 ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), 
              e.case = "from empty unroll", r = a.unrollMake([]), n = a.arrayMake(r), t = [], 
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "from unroll", r = a.unrollMake([ 1, 2, 3 ]), 
              n = a.arrayMake(r), t = [ 1, 2, 3 ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), 
              e.shouldThrowErrorSync(function() {
                a.arrayMake();
              }), e.shouldThrowErrorSync(function() {
                a.arrayMake(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayMake([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayMake([], []);
              }), e.shouldThrowErrorSync(function() {
                a.arrayMake({});
              }), e.shouldThrowErrorSync(function() {
                a.arrayMake("1");
              });
            }
            //
            ,
            arrayFrom: function arrayFrom(e) {
              e.case = "empty";
              var r = new Float32Array([]), n = a.arrayFrom(r), t = [];
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "single number", 
              r = new Float32Array([ 0 ]), n = a.arrayFrom(r), t = [ 0 ], e.equivalent(n, t), 
              e.is(a.arrayIs(n)), e.is(r !== n), e.case = "single string", r = a.argumentsArrayMake([ "a" ]), 
              n = a.arrayFrom(r), t = [ "a" ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), 
              e.case = "several", r = new Float32Array([ 1, 2, 3 ]), n = a.arrayFrom(r), t = [ 1, 2, 3 ], 
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "zero length", n = a.arrayFrom(0), 
              t = new Array(0), e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "length", 
              n = a.arrayFrom(3), t = new Array(3), e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r !== n), 
              /* */
              e.case = "preserving empty", r = a.arrayMake([]), n = a.arrayFrom(r), t = [], e.equivalent(n, t), 
              e.is(a.arrayIs(n)), e.is(r === n), e.case = "preserving single number", r = a.arrayMake([ 0 ]), 
              n = a.arrayFrom(r), t = [ 0 ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r === n), 
              e.case = "preserving single string", r = a.arrayMake([ "a" ]), n = a.arrayFrom(r), 
              t = [ "a" ], e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(r === n), e.case = "preserving several", 
              r = a.arrayMake([ 1, 2, 3 ]), n = a.arrayFrom(r), t = [ 1, 2, 3 ], e.equivalent(n, t), 
              e.is(a.arrayIs(n)), e.is(r === n), e.shouldThrowErrorSync(function() {
                a.arrayFrom();
              }), e.shouldThrowErrorSync(function() {
                a.arrayFrom(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFrom([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFrom([], []);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFrom({});
              }), e.shouldThrowErrorSync(function() {
                a.arrayFrom("1");
              });
            }
            //
            ,
            arrayFromCoercing: function arrayFromCoercing(e) {
              e.case = "an array";
              var r = a.arrayFromCoercing([ 3, 7, 13, "abc", !1, void 0, null, {} ]), n = [ 3, 7, 13, "abc", !1, void 0, null, {} ];
              e.identical(r, n), e.case = "an object", r = a.arrayFromCoercing({
                a: 3,
                b: 7,
                c: 13
              }), n = [ [ "a", 3 ], [ "b", 7 ], [ "c", 13 ] ], e.identical(r, n), e.case = "a string", 
              r = a.arrayFromCoercing("3, 7, 13, 3.5abc, 5def, 7.5ghi, 13jkl"), n = [ 3, 7, 13, 3.5, 5, 7.5, 13 ], 
              e.identical(r, n), e.case = "arguments[...]";
              var t = function() {
                return arguments;
              }(3, 7, 13, "abc", !1, void 0, null, {
                greeting: "Hello there!"
              });
              r = a.arrayFromCoercing(t), n = [ 3, 7, 13, "abc", !1, void 0, null, {
                greeting: "Hello there!"
              } ], e.identical(r, n), e.case = "no argument", e.shouldThrowErrorSync(function() {
                a.arrayFromCoercing();
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayFromCoercing(6);
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayFromCoercing(!0);
              });
            }
            //
            ,
            scalarAppend: function scalarAppend(e) {
              e.case = "none arguments";
              var r = a.scalarAppend();
              e.identical(r, []), e.case = "single undefined", r = a.scalarAppend(void 0), e.identical(r, []), 
              e.case = "two undefined", r = a.scalarAppend(void 0, void 0), e.identical(r, []), 
              e.case = "three undefined", r = a.scalarAppend(void 0, void 0, void 0), e.identical(r, []), 
              e.case = "dstArray is undefined, src is scalar", r = a.scalarAppend(void 0, 1), 
              e.identical(r, 1), e.case = "dstArray is undefined, src is array";
              var n = [ 1 ];
              r = a.scalarAppend(void 0, n), e.identical(r, [ 1 ]), e.is(n !== r), e.case = "dstArray is scalar, src is undefined", 
              r = a.scalarAppend(1, void 0), e.identical(r, 1), e.case = "dstArray is array, src is undefined";
              var t = [ 1 ];
              r = a.scalarAppend(t, void 0), e.identical(r, [ 1 ]), e.is(t === r), e.case = "dstArray is null, src is scalar", 
              r = a.scalarAppend(null, 1), e.identical(r, [ null, 1 ]), e.case = "dstArray is null, src is array", 
              n = [ 1 ], r = a.scalarAppend(null, n), e.identical(r, [ null, 1 ]), e.is(n !== r), 
              e.case = "nothing", r = a.scalarAppend([], []), e.identical(r, []), e.case = "simple", 
              t = [], r = a.scalarAppend(t, [ 1, 2, 3 ]), e.identical(t, [ 1, 2, 3 ]), e.is(r === t), 
              t = [ 1, 2, 3 ], r = a.scalarAppend(t, [ 4, 5 ]), e.identical(t, [ 1, 2, 3, 4, 5 ]), 
              e.is(r === t), t = [ 1, 1, 1 ], r = a.scalarAppend(t, [ 1, 1 ]), e.identical(t, [ 1, 1, 1, 1, 1 ]), 
              e.is(r === t), t = [ 1, 2, 3 ], r = a.scalarAppend(t, [ 1 ], [ 2 ], [ 3, [ 5 ] ]), 
              e.identical(t, [ 1, 2, 3, 1, 2, 3, [ 5 ] ]), e.is(r === t), t = [ 1, 2, 3 ];
              var i = [ [ 1 ], [ 2 ], [ 3, [ 5 ] ] ];
              r = a.scalarAppend(t, i), e.identical(t, [ 1, 2, 3, [ 1 ], [ 2 ], [ 3, [ 5 ] ] ]), 
              e.is(r === t), e.case = "arguments are not arrays", t = [], r = a.scalarAppend(t, [ 1, 2, 3 ]), 
              e.identical(t, [ 1, 2, 3 ]), e.is(r === t), e.case = "mixed arguments types", t = [ 1 ], 
              i = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ], r = a.scalarAppend(t, i), e.identical(t, [ 1, "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.is(r === t), e.case = "mixed arguments types", t = [ 1 ], r = a.scalarAppend(t, "a", 1, [ {
                a: 1
              } ], {
                b: 2
              }), e.identical(t, [ 1, "a", 1, {
                a: 1
              }, {
                b: 2
              } ]), e.is(r === t), e.case = "argument is undefined", t = [ 1 ], r = a.scalarAppend(t, void 0), 
              e.identical(t, [ 1 ]), e.is(r === t), e.case = "argument is undefined", t = [], 
              r = a.scalarAppend(t, [ 1 ], [ 3 ]), e.identical(t, [ 1, 3 ]), e.is(r === t), e.case = "argument is undefined", 
              t = [ 0 ], r = a.scalarAppend(t, [ 1 ], [ 3 ]), e.identical(t, [ 0, 1, 3 ]), e.is(r === t), 
              e.case = "argument is undefined", t = [], r = a.scalarAppend(t, void 0), e.identical(t, []), 
              e.is(r === t), e.case = "array has undefined", t = [ 1 ], r = a.scalarAppend(t, [ void 0, 2 ]), 
              e.identical(t, [ 1, void 0, 2 ]), e.is(r === t), e.case = "array has undefined", 
              r = a.scalarAppend(1, [ 2 ]), e.identical(r, [ 1, 2 ]);
            }
            //
            ,
            arrayMakeRandom: function arrayMakeRandom(e) {
              e.case = "an empty object";
              var r = a.arrayMakeRandom({});
              e.identical(r.length, 1), e.is(r[0] >= 0 && r[0] <= 1), e.case = "a number";
              var n = r = a.arrayMakeRandom(5);
              e.identical(r.length, 5), r = a.arrayMakeRandom(-1), n = [], e.identical(r, n), 
              e.case = "an object", n = r = a.arrayMakeRandom({
                length: 5,
                range: [ 1, 9 ],
                int: !0
              }), e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayMakeRandom();
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arrayMakeRandom("wrong argument");
              });
            },
            scalarToVector: 
            //
            function scalarToVector(e) {
              e.case = "nothing";
              var r = a.scalarToVector([], 0), n = [];
              e.identical(r, n), e.case = "static array", r = a.scalarToVector(3, 7), n = [ 3, 3, 3, 3, 3, 3, 3 ], 
              e.identical(r, n), e.case = "original array", r = a.scalarToVector([ 3, 7, 13 ], 3), 
              n = [ 3, 7, 13 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.scalarToVector();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.scalarToVector([ 1, 2, 3 ]);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.scalarToVector([ 1, 2, 3 ], 3, "redundant argument");
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.scalarToVector("wrong argument", "wrong argument");
              }), e.case = "second argument too much", e.shouldThrowErrorSync(function() {
                a.scalarToVector([ 1, 2, 3 ], 4);
              }), e.case = "first three arguments are not wrapped into array", e.shouldThrowErrorSync(function() {
                a.scalarToVector(1, 2, 3, 3);
              });
            },
            arrayFromRange: 
            //
            function arrayFromRange(e) {
              e.case = "single zero";
              var r = a.arrayFromRange([ 0, 1 ]), n = [ 0 ];
              e.identical(r, n), e.case = "nothing", r = a.arrayFromRange([ 1, 1 ]), n = [], e.identical(r, n), 
              e.case = "single not zero", r = a.arrayFromRange([ 1, 2 ]), n = [ 1 ], e.identical(r, n), 
              e.case = "couple of elements", r = a.arrayFromRange([ 1, 3 ]), n = [ 1, 2 ], e.identical(r, n), 
              e.case = "single number as argument", r = a.arrayFromRange(3), n = [ 0, 1, 2 ], 
              e.identical(r, n), e.case = "complex case", r = a.arrayFromRange([ 3, 9 ]), n = [ 3, 4, 5, 6, 7, 8 ], 
              e.identical(r, n), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arrayFromRange([ 1, 3 ], "wrong arguments");
              }), e.case = "argument not wrapped into array", e.shouldThrowErrorSync(function() {
                a.arrayFromRange(1, 3);
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayFromRange("wrong arguments");
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayFromRange();
              });
            },
            arrayAs: 
            //
            function arrayAs(e) {
              e.case = "an empty array";
              var r = a.arrayAs([]), n = [];
              e.identical(r, n), e.case = "null", r = a.arrayAs(null), n = [], e.identical(r, n), 
              e.case = "array contains an object", r = a.arrayAs({
                a: 1,
                b: 2
              }), n = [ {
                a: 1,
                b: 2
              } ], e.identical(r, n), e.case = "array contains boolean", r = a.arrayAs(!0), n = [ !0 ], 
              e.identical(r, n), e.case = "nothing", e.shouldThrowErrorSync(() => a.arrayAs()), 
              e.case = "undefined", e.shouldThrowErrorSync(() => a.arrayAs(void 0));
            },
            arrayToMap: 
            //
            function arrayToMap(e) {
              e.case = "an empty object";
              var r = a.arrayToMap([]), n = {};
              e.identical(r, n), e.case = "an object", r = a.arrayToMap([ 3, [ 1, 2, 3 ], "abc", !1, void 0, null, {} ]), 
              n = {
                0: 3,
                1: [ 1, 2, 3 ],
                2: "abc",
                3: !1,
                4: void 0,
                5: null,
                6: {}
              }, e.identical(r, n), e.case = "arguments[...]";
              var t = function() {
                return arguments;
              }(3, "abc", !1, void 0, null, {
                greeting: "Hello there!"
              });
              r = a.arrayToMap(t), n = {
                0: 3,
                1: "abc",
                2: !1,
                3: void 0,
                4: null,
                5: {
                  greeting: "Hello there!"
                }
              }, e.identical(r, n), e.case = "longIs";
              var i = [];
              i.a = 1, r = a.arrayToMap(i), n = {}, e.identical(r, n), e.case = "no argument", 
              e.shouldThrowErrorSync(function() {
                a.arrayToMap();
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayToMap("wrong argument");
              });
            },
            arrayToStr: 
            //
            function arrayToStr(e) {
              e.case = "nothing";
              var r = a.arrayToStr([]), n = "";
              e.identical(r, n), e.case = "returns the string", r = a.arrayToStr("abcdefghijklmnopqrstuvwxyz", {
                type: "int"
              }), n = "a b c d e f g h i j k l m n o p q r s t u v w x y z ", e.identical(r, n), 
              e.case = "returns a single string representing the integer values", r = a.arrayToStr([ 1, 2, 3 ], {
                type: "int"
              }), n = "1 2 3 ", e.identical(r, n), e.case = "returns a single string representing the float values", 
              r = a.arrayToStr([ 3.5, 13.77, 7.33 ], {
                type: "float",
                precission: 4
              }), n = "3.500 13.77 7.330", e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayToStr();
              }), e.case = "in second argument property (type) is wrong", e.shouldThrowErrorSync(function() {
                a.arrayToStr([ 1, 2, 3 ], {
                  type: "wrong type"
                });
              }), e.case = "in second argument property (type) is not provided", e.shouldThrowErrorSync(function() {
                a.arrayToStr([ 1, 2, 3 ], {
                  precission: 4
                });
              }), e.case = "first argument is string", e.shouldThrowErrorSync(function() {
                a.arrayToStr("wrong argument", {
                  type: "float"
                });
              });
            }
            // --
            // unroll
            // --
            ,
            // unroll
            unrollIs: function unrollIs(e) {
              e.case = "unroll from empty array";
              var r = [], n = a.unrollMake(r);
              e.is(a.unrollIs(n)), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "unroll from not empty array", 
              r = [ 1 ], n = a.unrollMake(r), e.is(a.unrollIs(n)), e.is(a.arrayIs(n)), e.is(r !== n), 
              r = [ "str" ], n = a.unrollFrom(r), e.is(a.unrollIs(n)), e.is(a.arrayIs(n)), e.is(r !== n), 
              e.case = "not unroll", n = new Float32Array([ 3, 1, 2 ]), e.identical(a.unrollIs(n), !1), 
              e.identical(a.unrollIs([]), !1), e.identical(a.unrollIs(1), !1), e.identical(a.unrollIs("str"), !1), 
              e.case = "second argument is unroll", n = a.unrollMake([ 2, 4 ]), e.identical(a.unrollIs([ 1, "str" ], n), !1), 
              e.is(a.arrayIs(n)), n = a.unrollFrom([ 2, 4 ]), e.identical(a.unrollIs(1, n), !1), 
              e.is(a.arrayIs(n)), n = a.unrollMake([ 2, 4 ]), e.identical(a.unrollIs("str", n), !1), 
              e.is(a.arrayIs(n));
            }
            //
            ,
            unrollIsPopulated: function unrollIsPopulated(e) {
              e.case = "unroll from not empty array";
              var r = [ 1 ], n = a.unrollMake(r);
              e.is(a.unrollIsPopulated(n)), e.is(a.arrayIs(n)), e.is(r !== n), r = [ "str" ], 
              n = a.unrollFrom(r), e.is(a.unrollIsPopulated(n)), e.is(a.arrayIs(n)), e.is(r !== n), 
              r = [ [] ], n = a.unrollFrom(r), e.is(a.unrollIsPopulated(n)), e.is(a.arrayIs(n)), 
              e.is(r !== n), r = [ null ], n = a.unrollMake(r), e.is(a.unrollIsPopulated(n)), 
              e.is(a.arrayIs(n)), e.is(r !== n), e.case = "unroll from empty array", r = [], n = a.unrollFrom(r), 
              e.identical(a.unrollIsPopulated(n), !1), e.is(a.arrayIs(n)), e.is(r !== n), e.case = "not unroll", 
              n = new Float32Array([ 3, 1, 2 ]), e.identical(a.unrollIs(n), !1), e.identical(a.unrollIsPopulated([]), !1), 
              e.identical(a.unrollIsPopulated(1), !1), e.identical(a.unrollIsPopulated("str"), !1), 
              e.case = "second argument is unroll", n = a.unrollMake([ 2, 4 ]), e.identical(a.unrollIsPopulated([ 1, "str" ], n), !1), 
              e.is(a.arrayIs(n)), n = a.unrollFrom([ 2, 4 ]), e.identical(a.unrollIsPopulated(1, n), !1), 
              e.is(a.arrayIs(n)), n = a.unrollMake([ 2, 4 ]), e.identical(a.unrollIsPopulated("str", n), !1), 
              e.is(a.arrayIs(n));
            }
            //
            ,
            unrollMake: function unrollMake(e) {
              e.case = "null";
              var r = a.unrollMake(null);
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "empty";
              var n = [];
              r = a.unrollMake(n), e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(n !== r), e.case = "single number", n = [ 0 ], r = a.unrollMake(n), e.equivalent(r, [ 0 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.case = "single string", 
              n = [ "a" ], r = a.unrollMake(n), e.equivalent(r, [ "a" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.is(n !== r), e.case = "several", n = [ 1, 2, 3 ], r = a.unrollMake(n), 
              e.equivalent(r, [ 1, 2, 3 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), 
              e.case = "zero length", r = a.unrollMake(0);
              var t = new Array(0);
              e.equivalent(r, t), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(t !== r), e.case = "length", 
              r = a.unrollMake(3), t = new Array(3), e.equivalent(r, t), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(t !== r), e.case = "from empty Float32", n = new Float32Array(), r = a.unrollMake(n), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.case = "from Float32", 
              n = new Float32Array([ 1, 2, 3 ]), r = a.unrollMake(n), e.equivalent(r, [ 1, 2, 3 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.case = "from empty arguments array", 
              n = a.argumentsArrayMake([]), r = a.unrollMake(n), e.equivalent(r, []), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.is(n !== r), e.case = "from arguments array", n = a.argumentsArrayMake([ 1, 2, 3 ]), 
              r = a.unrollMake(n), e.equivalent(r, [ 1, 2, 3 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(n !== r), e.case = "from empty array", n = a.arrayMake([]), r = a.unrollMake(n), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.case = "from array", 
              n = a.arrayMake([ 1, 2, 3 ]), r = a.unrollMake(n), e.equivalent(r, [ 1, 2, 3 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.shouldThrowErrorSync(function() {
                a.unrollMake();
              }), e.shouldThrowErrorSync(function() {
                a.unrollMake(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.unrollMake([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.unrollMake([], []);
              }), e.shouldThrowErrorSync(function() {
                a.unrollMake({});
              }), e.shouldThrowErrorSync(function() {
                a.unrollMake("1");
              });
            }
            //
            /*
qqq : split all groups of test cases by / * - * / for all test routines
*/
            /*
qqq : test routine unrollFrom is poor
*/ ,
            unrollFrom: function unrollFrom(e) {
              e.case = "null";
              var r = a.unrollFrom(null);
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "src is unroll";
              var n = a.unrollMake(0);
              r = a.unrollFrom(n), e.identical(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(r !== []), n = a.unrollMake(2), r = a.unrollFrom(n), e.identical(r, [ void 0, void 0 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), n = a.unrollMake([ 1, "str", 3 ]), r = a.unrollFrom(n), 
              e.identical(r, [ 1, "str", 3 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(r !== [ 1, "str", 3 ]), 
              e.case = "from empty", n = [], r = a.unrollFrom(n), e.equivalent(r, n), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.is(n !== r), e.case = "from array with single element", n = [ 0 ], 
              r = a.unrollFrom(n), e.equivalent(r, n), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(n !== r), e.case = "several", n = [ 1, 2, "str" ], r = a.unrollFrom(n), e.equivalent(r, n), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), e.case = "unroll from number", 
              r = a.unrollFrom(0);
              var t = new Array(0);
              e.equivalent(r, t), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(t !== r), r = a.unrollFrom(3), 
              t = new Array(3), e.equivalent(r, t), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(t !== r), 
              e.case = "from Float32", n = new Float32Array(), r = a.unrollFrom(n), e.equivalent(r, []), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), n = new Float32Array([ 1, 2, 3 ]), 
              r = a.unrollFrom(n), e.equivalent(r, [ 1, 2, 3 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(n !== r), e.case = "from arguments array", n = a.argumentsArrayMake([]), r = a.unrollFrom(n), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(n !== r), n = a.argumentsArrayMake([ 1, 2, 3 ]), 
              r = a.unrollFrom(n), e.equivalent(r, [ 1, 2, 3 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(n !== r), e.shouldThrowErrorSync(function() {
                a.unrollFrom();
              }), e.shouldThrowErrorSync(function() {
                a.unrollFrom(1, 3);
              }), e.shouldThrowErrorSync(function() {
                a.unrollFrom([], 3);
              }), e.shouldThrowErrorSync(function() {
                a.unrollFrom([], []);
              }), e.shouldThrowErrorSync(function() {
                a.unrollFrom({});
              }), e.shouldThrowErrorSync(function() {
                a.unrollFrom("1");
              });
            }
            //
            ,
            unrollsFrom: function unrollsFrom(e) {
              e.case = "src has null";
              var r = a.unrollsFrom(null);
              e.equivalent(r, [ [] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              r = a.unrollsFrom(1, [], null, [ 1, {
                a: 2
              } ]);
              var n = [ [ void 0 ], [], [], [ 1, {
                a: 2
              } ] ];
              e.equivalent(r, n), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              e.is(a.unrollIs(r[3])), e.is(r !== n), e.case = "src has unroll";
              var t = a.unrollMake(0);
              r = a.unrollsFrom(t), e.identical(r, [ [] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(a.unrollIs(r[0])), e.is(r !== [ [] ]), t = a.unrollMake(2), r = a.unrollsFrom(t), 
              e.identical(r, [ [ void 0, void 0 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(a.unrollIs(r[0])), t = a.unrollMake([ 1, "str", 3 ]), r = a.unrollsFrom(t), 
              e.identical(r, [ [ 1, "str", 3 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              e.is(r !== [ [ 1, "str", 3 ] ]), t = a.unrollMake([ 1, "str", 3 ]), r = a.unrollsFrom(1, [], t), 
              n = [ [ void 0 ], [], [ 1, "str", 3 ] ], e.identical(r, n), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), e.is(a.unrollIs(r[2])), e.is(r !== n), 
              e.case = "src has unrolls from Array", t = new Array(0), r = a.unrollsFrom(t), e.equivalent(r, [ t ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), e.is([ t ] !== r), 
              t = new Array(3), r = a.unrollsFrom(t), e.equivalent(r, [ t ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), e.is([ t ] !== r), t = new Array(3), 
              r = a.unrollsFrom(1, [], [ "str", {} ], t), e.equivalent(r, [ [ void 0 ], [], [ "str", {} ], t ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), e.is(a.unrollIs(r[3])), 
              e.is([ t ] !== r), e.case = "src has unroll from Float32", t = new Float32Array(), 
              r = a.unrollsFrom(t), e.equivalent(r, [ [] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(a.unrollIs(r[0])), e.is([ t ] !== r), t = new Float32Array([ 1, 2, 3 ]), r = a.unrollsFrom(t), 
              e.equivalent(r, [ [ 1, 2, 3 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              e.is([ t ] !== r), t = new Float32Array([ 1, 2, 3 ]), r = a.unrollsFrom([], 1, t), 
              e.equivalent(r, [ [], [ void 0 ], [ 1, 2, 3 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(a.unrollIs(r[0])), e.is(a.unrollIs(r[1])), e.is(a.unrollIs(r[2])), e.is([ t ] !== r), 
              e.case = "from arguments array", t = a.argumentsArrayMake([]), r = a.unrollsFrom(t), 
              e.equivalent(r, [ [] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              e.is([ t ] !== r), t = a.argumentsArrayMake([ 1, 2, 3 ]), r = a.unrollsFrom(t), 
              e.equivalent(r, [ [ 1, 2, 3 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.is(a.unrollIs(r[0])), 
              e.is([ t ] !== r), t = a.argumentsArrayMake([ 1, 2, 3 ]), r = a.unrollsFrom([], 1, t), 
              e.equivalent(r, [ [], [ void 0 ], [ 1, 2, 3 ] ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.is(a.unrollIs(r[0])), e.is(a.unrollIs(r[1])), e.is(a.unrollIs(r[2])), e.is([ t ] !== r), 
              e.case = "not argument", e.shouldThrowError(function() {
                a.unrollsFrom();
              }), e.case = "argument is not array, not null", e.shouldThrowError(function() {
                a.unrollsFrom({});
              }), e.shouldThrowError(function() {
                a.unrollsFrom("1");
              }), e.shouldThrowError(function() {
                a.unrollsFrom(2, {});
              }), e.shouldThrowError(function() {
                a.unrollsFrom([ "1" ], [ 1, "str" ], "abc");
              });
            }
            //
            ,
            unrollFromMaybe: function unrollFromMaybe(e) {
              e.case = "src is unroll";
              var r = a.unrollMake(0), n = a.unrollFromMaybe(r);
              e.identical(n, []), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(n !== []), r = a.unrollMake(2), 
              n = a.unrollFromMaybe(r), e.identical(n, [ void 0, void 0 ]), e.is(a.arrayIs(n)), 
              e.is(a.unrollIs(n)), r = a.unrollMake([ 1, "str", 3 ]), n = a.unrollFromMaybe(r), 
              e.identical(n, [ 1, "str", 3 ]), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(n !== [ 1, "str", 3 ]), 
              e.case = "src is undefined", n = a.unrollFromMaybe(void 0), e.identical(n, void 0), 
              e.case = "src is map", n = a.unrollFromMaybe({}), e.identical(n, {}), e.is(a.mapIs(n)), 
              n = a.unrollFromMaybe({
                a: 0,
                b: "str"
              }), e.identical(n, {
                a: 0,
                b: "str"
              }), e.is(a.mapIs(n)), e.case = "src is incompatible primitive", n = a.unrollFromMaybe("str"), 
              e.identical(n, "str"), e.is(a.primitiveIs(n)), n = a.unrollFromMaybe(!0), e.identical(n, !0), 
              e.is(a.primitiveIs(n)), n = a.unrollFromMaybe(!1), e.identical(n, !1), e.is(a.primitiveIs(n)), 
              e.case = "from null", n = a.unrollFromMaybe(null), e.equivalent(n, []), e.is(a.arrayIs(n)), 
              e.is(a.unrollIs(n)), e.is([] !== n), e.case = "from empty", r = [], n = a.unrollFromMaybe(r), 
              e.equivalent(n, r), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(r !== n), e.case = "from array with single element", 
              r = [ 0 ], n = a.unrollFromMaybe(r), e.equivalent(n, r), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), 
              e.is(r !== n), e.case = "several", r = [ 1, 2, "str" ], n = a.unrollFromMaybe(r), 
              e.equivalent(n, r), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(r !== n), e.case = "unroll from number", 
              n = a.unrollFromMaybe(0);
              var t = new Array(0);
              e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(t !== n), n = a.unrollFromMaybe(3), 
              t = new Array(3), e.equivalent(n, t), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(t !== n), 
              e.case = "from Float32", r = new Float32Array(), n = a.unrollFromMaybe(r), e.equivalent(n, []), 
              e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(r !== n), r = new Float32Array([ 1, 2, 3 ]), 
              n = a.unrollFromMaybe(r), e.equivalent(n, [ 1, 2, 3 ]), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), 
              e.is(r !== n), e.case = "from arguments array", r = a.argumentsArrayMake([]), n = a.unrollFromMaybe(r), 
              e.equivalent(n, []), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), e.is(r !== n), r = a.argumentsArrayMake([ 1, 2, 3 ]), 
              n = a.unrollFromMaybe(r), e.equivalent(n, [ 1, 2, 3 ]), e.is(a.arrayIs(n)), e.is(a.unrollIs(n)), 
              e.is(r !== n), e.case = "routine has not argument", e.shouldThrowError(function() {
                a.unrollFromMaybe();
              }), e.case = "many arguments", e.shouldThrowError(function() {
                a.unrollFromMaybe(1, 3);
              }), e.shouldThrowError(function() {
                a.unrollFromMaybe([], 3);
              }), e.shouldThrowError(function() {
                a.unrollFromMaybe([], []);
              });
            }
            //
            ,
            unrollNormalize: function unrollNormalize(e) {
              e.case = "dst is array";
              var r = a.unrollNormalize([]);
              e.identical(r, []), e.is(a.arrayIs(r)), r = a.unrollNormalize([ 1, "str" ]), e.identical(r, [ 1, "str" ]), 
              e.is(a.arrayIs(r)), e.case = "dst is unroll", r = a.unrollNormalize(a.unrollMake([])), 
              e.identical(r, []), e.is(a.arrayIs(r)), r = a.unrollNormalize(a.unrollMake([ 1, "str" ])), 
              e.identical(r, [ 1, "str" ]), e.is(a.arrayIs(r)), e.case = "dst is unroll from array";
              var n = new Array(0);
              r = a.unrollNormalize(a.unrollFrom(n)), e.identical(r, []), e.is(a.arrayIs(r)), 
              n = new Array([]), r = a.unrollNormalize(a.unrollFrom(n)), e.identical(r, [ [] ]), 
              e.is(a.arrayIs(r)), n = new Array([ 1, 2, "str" ]), r = a.unrollNormalize(a.unrollFrom(n)), 
              e.identical(r, [ [ 1, 2, "str" ] ]), e.is(a.arrayIs(r)), e.case = "dst is unroll from array", 
              n = new Float32Array([]), r = a.unrollNormalize(a.unrollFrom(n)), e.identical(r, []), 
              e.is(a.arrayIs(r)), n = new Float32Array([ 1, 2, 3 ]), r = a.unrollNormalize(a.unrollFrom(n)), 
              e.identical(r, [ 1, 2, 3 ]), e.is(a.arrayIs(r)), e.case = "dst is complex unroll", 
              r = a.unrollNormalize(a.unrollFrom([ 1, a.unrollFrom([ 2, a.unrollFrom([ "str" ]) ]) ])), 
              e.identical(r, [ 1, 2, "str" ]), e.is(a.arrayIs(r)), e.case = "mixed types";
              var t = a.unrollMake([ "a", "b" ]), i = a.unrollFrom([ 1, 2 ]);
              r = a.unrollNormalize([ 0, null, t, i, void 0 ]), e.identical(r, [ 0, null, "a", "b", 1, 2, void 0 ]), 
              e.is(a.arrayIs(r)), t = a.unrollMake([ "a", "b" ]), i = a.unrollFrom([ 1, 2 ]), 
              r = a.unrollNormalize([ 0, [ null, t ], a.unrollFrom([ i, void 0 ]) ]), e.identical(r, [ 0, [ null, "a", "b" ], 1, 2, void 0 ]), 
              e.is(a.arrayIs(r)), e.case = "dst is empty", e.shouldThrowErrorSync(function() {
                a.unrollNormalize();
              }), e.case = "two arguments", e.shouldThrowErrorSync(function() {
                a.unrollNormalize([], []);
              }), e.case = "dst is not array", e.shouldThrowErrorSync(function() {
                a.unrollNormalize(null);
              }), e.shouldThrowErrorSync(function() {
                a.unrollNormalize(1);
              }), e.shouldThrowErrorSync(function() {
                a.unrollNormalize("str");
              });
            }
            //
            /* qqq
unrollAppend, unrollPrepend should have test groups :
- dst is null / unroll / array
- one argument / two arguments / three arguments
- first argument have array / unroll / complex unroll( unroll in unroll in unroll )
- non-first argument have array / unroll / complex unroll( unroll in unroll in unroll / Float32Array / ArgumentsArray

Dmytro: all tests is added
qqq: In unrollPrepend and unrollAppend test cases groups by number of arguments and it includes other test cases - array, unroll, complex unroll.
In previus routines improve unrollMake and unrollFrom tests.
Notice that unrollIs, unrollIsPopulated have not asserts.
*/
            //
            ,
            unrollPrepend: function unrollPrepend(e) {
              e.open("one argument"), e.case = "dst is null";
              var r = a.unrollPrepend(null);
              e.identical(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is unroll", 
              r = a.unrollPrepend(a.unrollMake([ 1, 2, "str" ])), e.identical(r, [ 1, 2, "str" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll";
              var n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]);
              r = a.unrollPrepend(n), e.identical(r, [ 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is array", r = a.unrollPrepend([ 1, 2, "str" ]), 
              e.identical(r, [ 1, 2, "str" ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.close("one argument"), 
              /* - */
              e.open("two arguments"), e.case = "dst is null, second arg is null", r = a.unrollPrepend(null, null), 
              e.identical(r, [ null ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is unroll", 
              r = a.unrollPrepend(null, a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, "str" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is complex unroll", 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(null, n), e.identical(r, [ 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is complex unroll";
              var t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], c = (r = a.unrollPrepend(null, a.unrollFrom([ 1, 2, t, i, 10 ])), 
              [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ]);
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is array", 
              r = a.unrollPrepend(null, [ 1, 2, "str" ]), e.identical(r, [ [ 1, 2, "str" ] ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollPrepend(null, n), e.identical(r, [ 1, 2, 3 ]), 
              e.is(a.arrayIs(r)), e.is(n !== r), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg makes from argumentsArray", 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), r = a.unrollPrepend(null, n), 
              e.identical(r, [ 1, 2, "str" ]), e.is(a.arrayIs(r)), e.is(n !== r), e.isNot(a.unrollIs(r)), 
              //
              e.case = "dst is array, second arg is null", r = a.unrollPrepend([ 1 ], null), e.identical(r, [ null, 1 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is unroll", 
              r = a.unrollPrepend([ 1 ], a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, "str", 1 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is complex unroll", 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend([ "str", 3 ], n), e.identical(r, [ 1, 2, 1, [], "str", "str2", "str", 3 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is array", 
              r = a.unrollPrepend([ "str", 2 ], [ 1, 2, "str" ]), e.identical(r, [ [ 1, 2, "str" ], "str", 2 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollPrepend([ "str", 0 ], n), 
              e.identical(r, [ 1, 2, 3, "str", 0 ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              e.case = "dst is array, second arg makes from argumentsArray", n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), 
              r = a.unrollPrepend([ "str", 0 ], n), e.identical(r, [ 1, 2, "str", "str", 0 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              //
              e.case = "dst is unroll, second arg is null";
              var s = a.unrollMake([ 1 ]);
              r = a.unrollPrepend(s, null), e.identical(r, [ null, 1 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.case = "dst is unroll, second arg is unroll", s = a.unrollMake([ 1 ]), r = a.unrollPrepend(s, a.unrollMake([ 1, "str" ])), 
              e.identical(r, [ 1, "str", 1 ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg is complex unroll", 
              s = a.unrollMake([ 1 ]), n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(s, n), e.identical(r, [ 1, 2, 1, [], "str", "str2", 1 ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg is array", s = a.unrollMake([ 1 ]), 
              r = a.unrollPrepend(s, [ 1, 2, "str" ]), e.identical(r, [ [ 1, 2, "str" ], 1 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), s = a.unrollMake([ "str", 0 ]), 
              r = a.unrollPrepend(s, n), e.identical(r, [ 1, 2, 3, "str", 0 ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg makes from argumentsArray", 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), s = a.unrollMake([ "str", 0 ]), 
              r = a.unrollPrepend(s, n), e.identical(r, [ 1, 2, "str", "str", 0 ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), 
              //
              e.case = "dst is complex unroll, second arg is null", s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(s, null), e.identical(r, [ null, 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is unroll", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(s, a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, "str", 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is complex unroll", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(s, n), e.identical(r, [ 1, 2, 1, [], "str", "str2", 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is array", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollPrepend(s, [ 1, 2, "str" ]), e.identical(r, [ [ 1, 2, "str" ], 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg makes from Float32Array", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollPrepend(s, n), e.identical(r, [ 1, 2, 3, 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg makes from argumentsArray", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), r = a.unrollPrepend(s, n), 
              e.identical(r, [ 1, 2, "str", 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.close("two arguments"), 
              /* - */
              e.open("three arguments or more"), e.case = "dst is null, complex unrolls", t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), 
              i = [ 7, a.unrollFrom([ 8, 9 ]) ], r = a.unrollPrepend(null, [ 1, 2, t ], [ i, 10 ]), 
              c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], e.identical(r, c), e.isNot(a.unrollIs(r)), 
              e.case = "dst is null, manually unrolled src", t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), 
              i = [ 7, a.unrollFrom([ 8, 9 ]) ], r = a.unrollPrepend(null, 1, 2, t, i, 10), c = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollPrepend(null, [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollPrepend(null, [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is unroll, complex unrolls", 
              t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], 
              r = a.unrollPrepend(a.unrollFrom([]), [ 1, 2 ], t, [ i, 10 ]), c = [ [ 1, 2 ], 3, 4, 5, 6, [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is unroll, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollPrepend(a.unrollMake([ 0 ]), [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ], 0 ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is unroll, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollPrepend(a.unrollMake([ 0 ]), [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ], 0 ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is array, complex unrolls", 
              t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], 
              r = a.unrollPrepend([], [ 1, 2 ], t, [ i, 10 ]), c = [ [ 1, 2 ], 3, 4, 5, 6, [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is array, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollPrepend([ 0 ], [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ], 0 ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is array, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollPrepend([ 0 ], [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ], 0 ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.close("three arguments or more"), e.case = "no args", 
              e.shouldThrowErrorSync(function() {
                a.unrollPrepend();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.unrollPrepend(1, 1);
              }), e.shouldThrowErrorSync(function() {
                a.unrollPrepend("str", 1);
              }), e.shouldThrowErrorSync(function() {
                a.unrollPrepend(void 0, 1);
              });
            }
            //
            ,
            unrollAppend: function unrollAppend(e) {
              e.open("one argument"), e.case = "dst is null";
              var r = a.unrollAppend(null);
              e.identical(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is unroll", 
              r = a.unrollAppend(a.unrollMake([ 1, 2, "str" ])), e.identical(r, [ 1, 2, "str" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll";
              var n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]);
              r = a.unrollAppend(n), e.identical(r, [ 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is array", r = a.unrollAppend([ 1, 2, "str" ]), 
              e.identical(r, [ 1, 2, "str" ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.close("one argument"), 
              /* - */
              e.open("two arguments"), e.case = "dst is null, second arg is null", r = a.unrollAppend(null, null), 
              e.identical(r, [ null ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is unroll", 
              r = a.unrollAppend(null, a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, "str" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is complex unroll", 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(null, n), e.identical(r, [ 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is complex unroll";
              var t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], c = (r = a.unrollAppend(null, a.unrollFrom([ 1, 2, t, i, 10 ])), 
              [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ]);
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg is array", 
              r = a.unrollAppend(null, [ 1, 2, "str" ]), e.identical(r, [ [ 1, 2, "str" ] ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is null, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollAppend(null, n), e.identical(r, [ 1, 2, 3 ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.is(n !== r), e.case = "dst is null, second arg makes from argumentsArray", 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), r = a.unrollAppend(null, n), 
              e.identical(r, [ 1, 2, "str" ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.is(n !== r), 
              //
              e.case = "dst is array, second arg is null", r = a.unrollAppend([ 1 ], null), e.identical(r, [ 1, null ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is unroll", 
              r = a.unrollAppend([ 1 ], a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, 1, "str" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is complex unroll", 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend([ "str", 3 ], n), e.identical(r, [ "str", 3, 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg is array", 
              r = a.unrollAppend([ "str", 2 ], [ 1, 2, "str" ]), e.identical(r, [ "str", 2, [ 1, 2, "str" ] ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is array, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollAppend([ "str", 0 ], n), 
              e.identical(r, [ "str", 0, 1, 2, 3 ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              e.case = "dst is array, second arg makes from argumentsArray", n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), 
              r = a.unrollAppend([ "str", 0 ], n), e.identical(r, [ "str", 0, 1, 2, "str" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              //
              e.case = "dst is unroll, second arg is null";
              var s = a.unrollMake([ 1 ]);
              r = a.unrollAppend(s, null), e.identical(r, [ 1, null ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              e.case = "dst is unroll, second arg is unroll", s = a.unrollMake([ 1 ]), r = a.unrollAppend(s, a.unrollMake([ 1, "str" ])), 
              e.identical(r, [ 1, 1, "str" ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg is complex unroll", 
              s = a.unrollMake([ 1 ]), n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(s, n), e.identical(r, [ 1, 1, 2, 1, [], "str", "str2" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg is array", s = a.unrollMake([ 1 ]), 
              r = a.unrollAppend(s, [ 1, 2, "str" ]), e.identical(r, [ 1, [ 1, 2, "str" ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg makes from Float32Array", 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), s = a.unrollMake([ "str", 0 ]), 
              r = a.unrollAppend(s, n), e.identical(r, [ "str", 0, 1, 2, 3 ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.case = "dst is unroll, second arg makes from argumentsArray", 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), s = a.unrollMake([ "str", 0 ]), 
              r = a.unrollAppend(s, n), e.identical(r, [ "str", 0, 1, 2, "str" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), 
              //
              e.case = "dst is complex unroll, second arg is null", s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(s, null), e.identical(r, [ 1, 2, 1, [], "str", "str2", null ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is unroll", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(s, a.unrollMake([ 1, "str" ])), e.identical(r, [ 1, 2, 1, [], "str", "str2", 1, "str" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is complex unroll", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(s, n), e.identical(r, [ 1, 2, 1, [], "str", "str2", 1, 2, 1, [], "str", "str2" ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg is array", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              r = a.unrollAppend(s, [ 1, 2, "str" ]), e.identical(r, [ 1, 2, 1, [], "str", "str2", [ 1, 2, "str" ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg makes from Float32Array", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollMake(new Float32Array([ 1, 2, 3 ])), r = a.unrollAppend(s, n), e.identical(r, [ 1, 2, 1, [], "str", "str2", 1, 2, 3 ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "dst is complex unroll, second arg makes from argumentsArray", 
              s = a.unrollFrom([ 1, 2, a.unrollMake([ 1, [] ]), a.unrollFrom([ "str", a.unrollMake([ "str2" ]) ]) ]), 
              n = a.unrollMake(a.argumentsArrayMake([ 1, 2, "str" ])), r = a.unrollAppend(s, n), 
              e.identical(r, [ 1, 2, 1, [], "str", "str2", 1, 2, "str" ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), e.close("two arguments"), 
              /* - */
              e.open("three arguments or more"), e.case = "dst is null, complex unrolls", t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), 
              i = [ 7, a.unrollFrom([ 8, 9 ]) ], r = a.unrollAppend(null, [ 1, 2, t ], [ i, 10 ]), 
              c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], e.identical(r, c), e.isNot(a.unrollIs(r)), 
              e.case = "dst is null, manually unrolled src", t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), 
              i = [ 7, a.unrollFrom([ 8, 9 ]) ], r = a.unrollAppend(null, 1, 2, t, i, 10), c = [ 1, 2, 3, 4, 5, 6, [ 7, 8, 9 ], 10 ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollAppend(null, [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is null, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollAppend(null, [ 1, 2, i ], [ t, 10 ]), c = [ [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is unroll, complex unrolls", 
              t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], 
              r = a.unrollAppend(a.unrollFrom([]), [ 1, 2 ], t, [ i, 10 ]), c = [ [ 1, 2 ], 3, 4, 5, 6, [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is unroll, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollAppend(a.unrollMake([ 0 ]), [ 1, 2, i ], [ t, 10 ]), c = [ 0, [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is unroll, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollAppend(a.unrollMake([ 0 ]), [ 1, 2, i ], [ t, 10 ]), c = [ 0, [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.is(a.unrollIs(r)), e.case = "dst is array, complex unrolls", 
              t = a.unrollFrom([ 3, 4, a.unrollFrom([ 5, 6 ]) ]), i = [ 7, a.unrollFrom([ 8, 9 ]) ], 
              r = a.unrollAppend([], [ 1, 2 ], t, [ i, 10 ]), c = [ [ 1, 2 ], 3, 4, 5, 6, [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is array, next args have unroll from argumentsArray", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(a.argumentsArrayMake([ 3, 4, a.unrollMake([ 5, 6 ]) ])), 
              r = a.unrollAppend([ 0 ], [ 1, 2, i ], [ t, 10 ]), c = [ 0, [ 1, 2, 3, 4, 5, 6 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.case = "dst is array, next args have unroll from Float32Array", 
              t = [ 7, a.unrollFrom([ 8, 9 ]) ], i = a.unrollFrom(new Float32Array([ 3, 4 ])), 
              r = a.unrollAppend([ 0 ], [ 1, 2, i ], [ t, 10 ]), c = [ 0, [ 1, 2, 3, 4 ], [ [ 7, 8, 9 ], 10 ] ], 
              e.identical(r, c), e.isNot(a.unrollIs(r)), e.close("three arguments or more"), e.case = "no args", 
              e.shouldThrowErrorSync(function() {
                a.unrollAppend();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.unrollAppend(1, 1);
              }), e.shouldThrowErrorSync(function() {
                a.unrollAppend("str", 1);
              }), e.shouldThrowErrorSync(function() {
                a.unrollAppend(void 0, 1);
              });
            }
            //
            ,
            unrollRemove: function unrollRemove(e) {
              e.case = "dst is null";
              var r = a.unrollRemove(null, 0);
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove(null, "str"), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove(null, null), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove(null, [ 1, 2, "str" ]), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove(null, a.unrollMake([ 1 ])), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "dst is unroll from null", 
              r = a.unrollRemove(a.unrollMake(null), "str"), e.equivalent(r, []), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), r = a.unrollRemove(a.unrollMake(null), a.unrollMake([ 1 ])), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), r = a.unrollRemove(a.unrollMake(null), a.unrollMake(null)), 
              e.equivalent(r, []), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), 
              /* - */
              e.open("dstArray is array"), e.case = "array remove element", r = a.unrollRemove([ 1, 1, 2, "str" ], 1), 
              e.equivalent(r, [ 2, "str" ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 1, 2, "str" ], "str"), 
              e.equivalent(r, [ 1, 1, 2 ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 1, 2, "str", {} ], 0), 
              e.equivalent(r, [ 1, 1, 2, "str", {} ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              e.case = "array remove array or object", r = a.unrollRemove([ 1, 1, 2, "str", [ 0 ] ], [ 0 ]), 
              e.equivalent(r, [ 1, 1, 2, "str", [ 0 ] ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), 
              r = a.unrollRemove([ 1, 1, 2, "str", {
                a: 1,
                b: "str"
              } ], {
                a: 1,
                b: "str"
              }), e.equivalent(r, [ 1, 1, 2, "str", {
                a: 1,
                b: "str"
              } ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "array remove elements", 
              r = a.unrollRemove([ 1, 1, 2, "str", [ 1 ] ], 1, [ 1 ]), e.equivalent(r, [ 2, "str", [ 1 ] ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 1, 2, "str", {
                a: 2
              }, "str" ], 0, {
                a: 2
              }, 4, "str"), e.equivalent(r, [ 1, 1, 2, {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 1, 2, "str", {
                a: 2
              } ], null, void 0, 4, []), e.equivalent(r, [ 1, 1, 2, "str", {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "array remove elements included array or object", 
              r = a.unrollRemove([ 1, 1, 2, "str", [ 0 ] ], 1, [ 0 ]), e.equivalent(r, [ 2, "str", [ 0 ] ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 1, 2, "str", {
                a: 1,
                b: "str"
              } ], 2, "str", {
                a: 1,
                b: "str"
              }), e.equivalent(r, [ 1, 1, {
                a: 1,
                b: "str"
              } ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), e.case = "array remove unroll", 
              r = a.unrollRemove([ 1, 1, 2, 3, "str", 3 ], a.unrollFrom([ 1, 3 ])), e.equivalent(r, [ 2, "str" ]), 
              e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 2, 1, 3, "str", [ 1 ] ], a.unrollFrom([ 1, 3, "str", [ 1 ] ])), 
              e.equivalent(r, [ 2, [ 1 ] ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r)), r = a.unrollRemove([ 1, 2, 3, "str", [ 1 ] ], a.unrollFrom([ 0, "a", [ 2 ] ])), 
              e.equivalent(r, [ 1, 2, 3, "str", [ 1 ] ]), e.is(a.arrayIs(r)), e.isNot(a.unrollIs(r));
              var n = a.unrollFrom([ 1, a.unrollMake([ 2, 3, a.unrollMake([ "str", [ 1 ] ]) ]) ]);
              r = a.unrollRemove([ 1, 2, 3, "str", [ 1 ] ], n), e.equivalent(r, [ [ 1 ] ]), e.is(a.arrayIs(r)), 
              e.isNot(a.unrollIs(r)), e.close("dstArray is array"), 
              /* - */
              e.open("dstArray is unroll"), e.case = "unroll remove element";
              var t = a.unrollMake([ 1, 1, 2, "str", [ 1 ] ]);
              r = a.unrollRemove(t, 1), e.equivalent(r, [ 2, "str", [ 1 ] ]), e.is(a.arrayIs(r)), 
              e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 1, 2, "str", {
                a: 2
              }, "str" ]), r = a.unrollRemove(t, "str"), e.equivalent(r, [ 1, 1, 2, {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 1, 2, "str", {
                a: 2
              } ]), r = a.unrollRemove(t, 4), e.equivalent(r, [ 1, 1, 2, "str", {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "unroll remove elements", 
              t = a.unrollMake([ 1, 1, 2, "str", [ 1 ] ]), r = a.unrollRemove(t, 1, [ 1 ]), e.equivalent(r, [ 2, "str", [ 1 ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 1, 2, "str", {
                a: 2
              }, "str" ]), r = a.unrollRemove(t, 0, {
                a: 2
              }, 4, "str"), e.equivalent(r, [ 1, 1, 2, {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 1, 2, "str", {
                a: 2
              } ]), r = a.unrollRemove(t, null, void 0, 4, []), e.equivalent(r, [ 1, 1, 2, "str", {
                a: 2
              } ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.case = "unroll remove unroll", 
              t = a.unrollMake([ 1, 1, 2, 3, "str", 3 ]), r = a.unrollRemove(t, a.unrollFrom([ 1, 3 ])), 
              e.equivalent(r, [ 2, "str" ]), e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 2, 1, 3, "str", [ 1 ] ]), 
              r = a.unrollRemove(t, a.unrollFrom([ 1, 3, "str", [ 1 ] ])), e.equivalent(r, [ 2, [ 1 ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), t = a.unrollMake([ 1, 2, 3, "str", [ 1 ] ]), 
              r = a.unrollRemove(t, a.unrollFrom([ 0, "a", [ 2 ] ])), e.equivalent(r, [ 1, 2, 3, "str", [ 1 ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), n = a.unrollFrom([ 1, a.unrollMake([ 2, 3, a.unrollMake([ "str", [ 1 ] ]) ]) ]), 
              r = a.unrollRemove(a.unrollFrom([ 1, 2, 3, "str", [ 1 ] ]), n), e.equivalent(r, [ [ 1 ] ]), 
              e.is(a.arrayIs(r)), e.is(a.unrollIs(r)), e.close("dstArray is unroll"), e.case = "no args", 
              e.shouldThrowError(function() {
                a.unrollRemove();
              }), e.case = "dst is not an array", e.shouldThrowError(function() {
                a.unrollRemove(1, 1);
              }), e.shouldThrowError(function() {
                a.unrollRemove("str", 1);
              }), e.shouldThrowError(function() {
                a.unrollRemove(void 0, 1);
              });
            }
            // !!!
            ,
            // long
            longAreRepeatedProbe: function longAreRepeatedProbe(e) {
              a.diagnosticEachLongType((r, n) => {
                a.diagnosticEachElementComparator(r, (r, t, i) => {
                  a.arrayIs(t) || n.isTyped && t || (e.open(n.name + ", " + i), function group(r, n) {
                    e.case = "empty";
                    var t = r([]), i = {
                      uniques: 0,
                      condensed: 0,
                      array: []
                    }, c = a.longAreRepeatedProbe(t, n);
                    e.identical(c, i), e.case = "single", t = r([ 0 ]), i = {
                      uniques: 1,
                      condensed: 1,
                      array: [ 0 ]
                    }, c = a.longAreRepeatedProbe(t, n), e.identical(c, i), e.case = "two zeros", t = r([ 0, 0 ]), 
                    i = {
                      uniques: 0,
                      condensed: 1,
                      array: [ 1, 1 ]
                    }, c = a.longAreRepeatedProbe(t, n), e.identical(c, i), e.case = "none unique", 
                    t = r([ 1, 2, 3, 1, 2, 3 ]), i = {
                      uniques: 0,
                      condensed: 3,
                      array: [ 1, 1, 1, 1, 1, 1 ]
                    }, c = a.longAreRepeatedProbe(t, n), e.identical(c, i), e.case = "several uniques", 
                    t = r([ 0, 1, 2, 3, 4, 1, 2, 3, 5 ]), i = {
                      uniques: 3,
                      condensed: 6,
                      array: [ 0, 1, 1, 1, 0, 1, 1, 1, 0 ]
                    }, c = a.longAreRepeatedProbe(t, n), e.identical(c, i);
                  }(r, t), e.close(n.name + ", " + i));
                });
              });
            }
            //
            ,
            longAllAreRepeated: function longAllAreRepeated(e) {
              var r = a.longAllAreRepeated([]);
              e.identical(r, !0), r = a.longAllAreRepeated([ 1, 1 ]), e.identical(r, !0), r = a.longAllAreRepeated([ 1 ]), 
              e.identical(r, !1), r = a.longAllAreRepeated([ 1, 2, 2 ]), e.identical(r, !1);
            }
            //
            ,
            longAnyAreRepeated: function longAnyAreRepeated(e) {
              var r = a.longAnyAreRepeated([]);
              e.identical(r, !1), r = a.longAnyAreRepeated([ 1, 1 ]), e.identical(r, !0), r = a.longAnyAreRepeated([ 1 ]), 
              e.identical(r, !1), r = a.longAnyAreRepeated([ 1, 2, 2 ]), e.identical(r, !0);
            }
            //
            ,
            longNoneAreRepeated: function longNoneAreRepeated(e) {
              var r = a.longNoneAreRepeated([]);
              e.identical(r, !0), r = a.longNoneAreRepeated([ 1, 1 ]), e.identical(r, !1), r = a.longNoneAreRepeated([ 1 ]), 
              e.identical(r, !0), r = a.longNoneAreRepeated([ 1, 2, 2 ]), e.identical(r, !1);
            }
            //
            ,
            // array transformer
            arraySub: function arraySub(e) {
              e.case = "nothing";
              var r = a.arraySub([], 0, 0), n = [];
              e.identical(r, n), e.case = "two arguments", r = a.arraySub([], 0), n = [], e.identical(r, n), 
              e.case = "full copy of an array", r = a.arraySub([ 1, 2, 3, 4, 5 ]), n = [ 1, 2, 3, 4, 5 ], 
              e.identical(r, n), e.case = "an array of two elements", r = a.arraySub([ 1, 2, 3, 4, 5 ], 2, 4), 
              n = [ 3, 4 ], e.identical(r, n), e.case = "from second index to the (arr.length - 1)", 
              r = a.arraySub([ 1, 2, 3, 4, 5 ], 2), n = [ 3, 4, 5 ], e.identical(r, n), e.case = "an offset from the end of the sequence", 
              r = a.arraySub([ 1, 2, 3, 4, 5 ], -4), n = [ 2, 3, 4, 5 ], e.identical(r, n), e.case = "the two negative index", 
              r = a.arraySub([ 1, 2, 3, 4, 5 ], -4, -2), n = [ 2, 3 ], e.identical(r, n), e.case = "the third index is negative", 
              r = a.arraySub([ 1, 2, 3, 4, 5 ], 1, -1), n = [ 2, 3, 4 ], e.identical(r, n), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySub();
              }), e.case = "first argument is wrong", e.shouldThrowErrorSync(function() {
                a.arraySub("wrong argument", 1, -1);
              }), e.case = "argument is not wrapped into array", e.shouldThrowErrorSync(function() {
                a.arraySub(1, 2, 3, 4, 5, 2, 4);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arraySub([ 1, 2, 3, 4, 5 ], 2, 4, "redundant argument");
              });
            },
            // arrayJoin,
            arrayGrow: 
            //
            //function arrayJoin( test )
            //{
            //  test.case = 'empty call';
            //  test.identical( _.arrayJoin(), null );
            //
            //  test.case = 'empty arrays';
            //  test.identical( _.arrayJoin( [], [] ), null );
            //
            //  test.case = 'simple';
            //
            //  var src = [ 1 ];
            //  var got = _.arrayJoin( src );
            //  var expected = src;
            //  test.identical( got, expected );
            //
            //  var src = [ 1 ];
            //  var got = _.arrayJoin( src, src );
            //  var expected = [ 1,1 ];
            //  test.identical( got, expected );
            //
            //  test.case = 'array + typedArray';
            //  var got = _.arrayJoin( [ 1 ], new Uint8Array([ 1,2 ]) );
            //  var expected = [ 1,1,2 ];
            //  test.identical( got, expected );
            //
            //  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), [ 1 ] );
            //  var expected = new Uint8Array( [ 1,2,1 ] );
            //  test.identical( got, expected );
            //
            //  test.case = 'typedArray + typedArray';
            //  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), new Uint8Array( [ 1,2 ] ) );
            //  var expected = new Uint8Array( [ 1,2,1,2 ] );
            //  test.identical( got, expected );
            //
            //  var got = _.arrayJoin( new Uint8Array( [ 1,2 ] ), new Uint16Array( [ 1,2 ] ) );
            //  var expected = new Uint8Array( [ 1,2,1,0,2,0 ] );
            //  test.identical( got, expected );
            //
            //  test.case = 'arrayBuffer + arrayBuffer';
            //  var src = new Uint8Array( [ 1,2 ] );
            //  var got = _.arrayJoin( src.buffer, src.buffer );
            //  test.is( _.bufferRawIs( got ) );
            //  var expected = new Uint8Array( [ 1,2,1,2 ] );
            //  test.identical( new Uint8Array( got ), expected );
            //
            //  test.case = 'arrayBuffer + array';
            //  var src = new Uint8Array( [ 1,2 ] );
            //  var got = _.arrayJoin( src.buffer, [ 1,2 ] );
            //  test.is( _.bufferRawIs( got ) );
            //  var expected = new Uint8Array( [ 1,2,1,2 ] );
            //  test.identical( new Uint8Array( got ), expected );
            //
            //  test.case = 'arrayBuffer + typedArray';
            //  var src = new Uint8Array( [ 1,2 ] );
            //  var got = _.arrayJoin( src.buffer, src );
            //  test.is( _.bufferRawIs( got ) );
            //  var expected = new Uint8Array( [ 1,2,1,2 ] );
            //  test.identical( new Uint8Array( got ), expected );
            //
            //  test.case = 'typedArray + arrayBuffer';
            //  var src = new Uint8Array( [ 1,2 ] );
            //  var got = _.arrayJoin( src, src.buffer );
            //  var expected = new Uint8Array( [ 1,2,1,2 ] );
            //  test.identical( got, expected );
            //
            //  test.case = 'typedArray + arrayBuffer + array';
            //  var src = new Uint8Array( [ 1 ] );
            //  var got = _.arrayJoin( src, src.buffer, [ 1 ] );
            //  var expected = new Uint8Array( [ 1,1,1 ] );
            //  test.identical( got, expected );
            //
            //  test.case = 'array + typedArray + arrayBuffer';
            //  var src = new Uint8Array( [ 1 ] );
            //  var got = _.arrayJoin( [ 1 ], src, src.buffer );
            //  var expected = [ 1,1,1 ];
            //  test.identical( got, expected );
            //
            //  test.case = 'arrayBuffer + array + typedArray';
            //  var src = new Uint8Array( [ 1 ] );
            //  var got = _.arrayJoin( src.buffer, [ 1 ], src  );
            //  test.is( _.bufferRawIs( got ) );
            //  var expected = new Uint8Array( [ 1,1,1 ] );
            //  test.identical( new Uint8Array( got ), expected );
            //
            //  if( Config.platform === 'nodejs' )
            //  {
            //    test.case = 'buffer';
            //    var got = _.arrayJoin( Buffer.from( '1' ), [ 1 ] );
            //    var expected = Buffer.from( [ 49,1 ] );
            //    test.identical( got, expected );
            //
            //    test.case = 'buffer + arrayBuffer';
            //    var raw = new Uint8Array( [ 1 ] ).buffer;
            //    var got = _.arrayJoin( Buffer.from( '1' ), raw );
            //    var expected = Buffer.from( [ 49,1 ] );
            //    test.identical( got, expected );
            //
            //    test.case = 'buffer + typedArray';
            //    var typed = new Uint8Array( [ 1 ] );
            //    var got = _.arrayJoin( Buffer.from( '1' ), typed );
            //    var expected = Buffer.from( [ 49,1 ] );
            //    test.identical( got, expected );
            //
            //    test.case = 'buffer + typedArray + raw + array';
            //    var typed = new Uint8Array( [ 1 ] );
            //    var got = _.arrayJoin( Buffer.from( '1' ), typed, typed.buffer, [ 1 ] );
            //    var expected = Buffer.from( [ 49,1,1,1 ] );
            //    test.identical( got, expected );
            //
            //    test.case = 'typedArray + buffer + raw + array';
            //    var typed = new Uint8Array( [ 1 ] );
            //    var got = _.arrayJoin( typed, Buffer.from( '1' ), typed.buffer, [ 1 ] );
            //    var expected = new Uint8Array( [ 1,49,1,1 ] );
            //    test.identical( got, expected );
            //
            //    test.case = 'raw + typedArray + buffer + array';
            //    var typed = new Uint8Array( [ 1 ] );
            //    var got = _.arrayJoin( typed.buffer, typed, Buffer.from( '1' ), [ 1 ] );
            //    var expected = new Uint8Array( [ 1,1,49,1 ] );
            //    test.identical( new Uint8Array( got ), expected );
            //
            //    test.case = 'array + raw + typedArray + buffer ';
            //    var typed = new Uint8Array( [ 1 ] );
            //    var got = _.arrayJoin( [ 1 ], typed.buffer, typed, Buffer.from( '1' )  );
            //    var expected = new Uint8Array( [ 1,1,1,49 ] );
            //    test.identical( new Uint8Array( got ), expected );
            //  }
            //
            //  if( !Config.debug )
            //  return;
            //
            //  test.shouldThrowErrorSync( () => _.arrayJoin( [ 1 ], '1' ) );
            //  test.shouldThrowErrorSync( () => _.arrayJoin( [ 1 ], { byteLength : 5 } ) );
            //
            //}
            //
            function arrayGrow(e) {
              var r = [ 1, 2, 3, 4, 5 ];
              //
              if (e.case = "defaults", 
              /* default call returns copy */
              n = a.arrayGrow(r), t = r, e.identical(n, t), e.case = "increase size of array", 
              /* without setting value */
              n = a.arrayGrow(r, 0, r.length + 2), t = r.length + 2, e.identical(n.length, t), 
              /* by setting value */
              n = a.arrayGrow(r, 0, r.length + 2, 0), t = [ 1, 2, 3, 4, 5, 0, 0 ], e.identical(n, t), 
              /* by taking only last element of source array */
              n = a.arrayGrow(r, r.length - 1, 2 * r.length, 0), t = [ 5, 0, 0, 0, 0, 0 ], e.identical(n, t), 
              e.case = "decrease size of array", 
              /**/
              n = a.arrayGrow(r, 0, 3), t = [ 1, 2, 3 ], e.identical(n, t), 
              /* setting value not affects on array */
              n = a.arrayGrow(r, 0, 3, 0), t = [ 1, 2, 3 ], e.identical(n, t), 
              /* begin index is negative */
              n = a.arrayGrow(r, -1, 3), t = [ void 0, 1, 2, 3 ], e.identical(n, t), 
              /* end index is negative */
              n = a.arrayGrow(r, 0, -1), t = [], e.identical(n, t), 
              /* begin index negative, set value */
              n = a.arrayGrow(r, -1, 3, 0), t = [ 0, 1, 2, 3 ], e.identical(n, t), "nodejs" === Config.platform) {
                e.case = "buffer";
                var n = a.arrayGrow(Buffer.from("123"), 0, 5, 0), t = [ 49, 50, 51, 0, 0 ];
                e.identical(n, t);
              }
              //
                            e.case = "invalid arguments type", 
              /**/
              e.shouldThrowErrorSync(function() {
                a.arrayGrow(1);
              })
              /**/ , e.shouldThrowErrorSync(function() {
                a.arrayGrow(r, "1", r.length);
              })
              /**/ , e.shouldThrowErrorSync(function() {
                a.arrayGrow(r, 0, "1");
              });
            },
            arrayResize: function arrayResize(e) {
              e.case = "defaults";
              var r, n = [ 1, 2, 3, 4, 5, 6, 7 ];
              /* Buffer */
              if (n.src = !0, 
              /* just pass array */
              t = a.arrayResize(n), e.identical(t.src, void 0), e.identical(t, n), 
              //
              e.case = "make copy of source", 
              /* third argument is not provided */
              t = a.arrayResize(n, 2), e.identical(t.src, void 0), i = [ 3, 4, 5, 6, 7 ], e.identical(t, i), 
              /* second argument is undefined */
              t = a.arrayResize(n, void 0, 4), e.identical(t.src, void 0), i = [ 1, 2, 3, 4 ], 
              e.identical(t, i), 
              /**/
              t = a.arrayResize(n, 0, 3), e.identical(t.src, void 0), i = [ 1, 2, 3 ], e.identical(t, i), 
              /* from two to six */
              e.case = "from two to six", t = a.arrayResize(n, 2, 6), e.identical(t.src, void 0), 
              i = [ 3, 4, 5, 6 ], e.identical(t, i), 
              /* rigth bound is negative */
              t = a.arrayResize(n, 0, -1), e.identical(t.src, void 0), i = [], e.identical(t, i), 
              /* both bounds are negative */
              t = a.arrayResize(n, -1, -3), e.identical(t.src, void 0), i = [], e.identical(t, i), 
              (r = new Uint16Array(n)).src = !0, t = a.arrayResize(r, 0, 3), e.identical(t.src, void 0), 
              i = new Uint16Array([ 1, 2, 3 ]), e.identical(t, i), "nodejs" === Config.platform) {
                e.case = "buffer";
                var t = a.arrayResize(Buffer.from("123"), 0, 5, 0), i = [ 49, 50, 51, 0, 0 ];
                e.identical(t, i);
              }
              /**/              e.case = "increase size of array", 
              /* rigth bound is out of range */
              t = a.arrayResize(n, 0, n.length + 2), e.identical(t.src, void 0), (i = n.slice()).push(void 0, void 0), 
              e.identical(t, i), 
              /* indexes are out of bound */
              t = a.arrayResize(n, n.length + 1, n.length + 3), e.identical(t.src, void 0), i = [ void 0, void 0 ], 
              e.identical(t, i), 
              /* left bound is negative */
              t = a.arrayResize(n, -1, n.length), e.identical(t.src, void 0), (i = n.slice()).unshift(void 0), 
              e.identical(t, i), 
              /* without setting value */
              t = a.arrayResize(n, 0, n.length + 2), e.identical(t.src, void 0), e.identical(t.length, n.length + 2), 
              /* by setting value */
              t = a.arrayResize(n, 0, n.length + 2, 0), e.identical(t.src, void 0), i = [ 1, 2, 3, 4, 5, 6, 7, 0, 0 ], 
              e.identical(t, i), 
              /* by taking only last element of source array */
              t = a.arrayResize(n, n.length - 1, n.length + 2, 0), e.identical(t.src, void 0), 
              i = [ 7, 0, 0 ], e.identical(t, i), e.case = "decrease size of array", 
              /* setting value not affects on array */
              t = a.arrayResize(n, 0, 3, 0), e.identical(t.src, void 0), i = [ 1, 2, 3 ], e.identical(t, i), 
              /* begin index is negative */
              t = a.arrayResize(n, -1, 3, 0), e.identical(t.src, void 0), i = [ 0, 1, 2, 3 ], 
              e.identical(t, i), 
              /* end index is negative */
              t = a.arrayResize(n, 0, -1), e.identical(t.src, void 0), i = [], e.identical(t, i), 
              /* begin index negative, set value */
              t = a.arrayResize(n, -1, 3, 0), e.identical(t.src, void 0), i = [ 0, 1, 2, 3 ], 
              e.identical(t, i), (r = new Uint16Array(n)).src = !0, t = a.arrayResize(r, 0, 4, 4), 
              e.identical(t.src, void 0), i = new Uint16Array([ 1, 2, 3, 4 ]), e.identical(t, i), 
              //
              "nodejs" === Config.platform && (e.case = "buffer", t = a.arrayResize(Buffer.from("123"), 0, 5, 0), 
              i = [ 49, 50, 51, 0, 0 ], e.identical(t, i)), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayResize();
              }), 
              /**/
              e.case = "invalid arguments type", 
              /**/
              e.shouldThrowErrorSync(function() {
                a.arrayResize(1);
              })
              /**/ , e.shouldThrowErrorSync(function() {
                a.arrayResize(n, "1", n.length);
              })
              /**/ , e.shouldThrowErrorSync(function() {
                a.arrayResize(n, 0, "1");
              })
              /**/ , e.case = "buffer", 
              /**/
              t = a.arrayResize(Buffer.from("123"), 0, 1), i = [ 49 ], e.identical(t, i), 
              //
              e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayResize("wrong argument", "wrong argument", "wrong argument");
              });
            },
            longSlice: longSlice,
            arrayDuplicate: 
            //
            function arrayDuplicate(e) {
              e.case = "couple of repeats";
              var r = a.arrayDuplicate([ "a", "b", "c" ]), n = [ "a", "a", "b", "b", "c", "c" ];
              e.identical(r, n), 
              /* */
              e.case = "numberOfAtomsPerElement 1 numberOfDuplicatesPerElement 1";
              var t = {
                src: [ 10, 20 ],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 1
              };
              r = a.arrayDuplicate(t), n = [ 10, 20 ], e.identical(r, n), 
              /* */
              e.case = "numberOfAtomsPerElement 1 numberOfDuplicatesPerElement 2", t = {
                src: [ 10, 20 ],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 2
              }, r = a.arrayDuplicate(t), n = [ 10, 10, 20, 20 ], e.identical(r, n), 
              /* */
              e.case = "numberOfAtomsPerElement 2 numberOfDuplicatesPerElement 1", t = {
                src: [ 10, 20 ],
                numberOfAtomsPerElement: 2,
                numberOfDuplicatesPerElement: 1
              }, r = a.arrayDuplicate(t), n = [ 10, 20 ], e.identical(r, n), 
              /* */
              e.case = "numberOfAtomsPerElement 2 numberOfDuplicatesPerElement 2", t = {
                src: [ 10, 20 ],
                numberOfAtomsPerElement: 2,
                numberOfDuplicatesPerElement: 2
              }, r = a.arrayDuplicate(t), n = [ 10, 20, 10, 20 ], e.identical(r, n), 
              /* */
              e.case = "result provided", t = {
                src: [ 10, 20 ],
                result: [ 1, 1, 1, 1 ],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 2
              }, r = a.arrayDuplicate(t), n = [ 10, 10, 20, 20 ], e.identical(r, n), 
              /* */
              e.case = "different options", t = {
                src: [ "abc", "def" ],
                result: new Array(6),
                numberOfAtomsPerElement: 2,
                numberOfDuplicatesPerElement: 3
              }, r = a.arrayDuplicate(t), n = [ "abc", "def", "abc", "def", "abc", "def" ], e.identical(r, n), 
              /* */
              e.case = "different options", t = {
                src: [ "abc", "def" ],
                result: [],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 1
              }, r = a.arrayDuplicate(t), n = [ "abc", "def" ], e.identical(r, n), 
              /* */
              e.case = "different options", t = {
                src: [ "abc", "def" ],
                result: [ 1, 2 ],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 1
              }, r = a.arrayDuplicate(t), n = [ 1, 2, "abc", "def" ], e.identical(r, n), 
              /* */
              e.case = "different options";
              var i = new Uint8Array(1);
              i[0] = 5, t = {
                src: [ 1, 2 ],
                result: i,
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 1
              }, r = a.arrayDuplicate(t), n = [ 5, 1, 2 ];
              for (var c = !0, s = 0; s < n.length; s++) n[s] !== r[s] && (c = !1);
              e.is(c), e.identical(r.length, n.length), 
              /* */
              e.case = "second argument is replaced and non-existent elements from options.src is replaced undefined", 
              t = {
                src: [ "abc", "def", void 0 ],
                numberOfAtomsPerElement: 3,
                numberOfDuplicatesPerElement: 3
              }, r = a.arrayDuplicate(t), n = [ "abc", "def", void 0, "abc", "def", void 0, "abc", "def", void 0 ], 
              e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayDuplicate();
              }), e.case = "second argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayDuplicate([ "a", "b", "c" ], "wrong argument");
              }), e.case = 'options.src is not provided or "undefined"', t = {
                src: void 0,
                result: [],
                numberOfAtomsPerElement: 3,
                numberOfDuplicatesPerElement: 3
              }, e.shouldThrowErrorSync(function() {
                a.arrayDuplicate(t, {
                  a: 13
                });
              }), e.case = "result provided, but not enough length", t = {
                src: [ 10, 20 ],
                result: [],
                numberOfAtomsPerElement: 1,
                numberOfDuplicatesPerElement: 2
              }, e.shouldThrowErrorSync(function() {
                a.arrayDuplicate(t);
              });
            },
            arrayMask: 
            //
            function arrayMask(e) {
              e.case = "nothing";
              var r = a.arrayMask([ 1, 2, 3, 4 ], [ void 0, null, 0, "" ]), n = [];
              e.identical(r, n), e.case = "adds last three values", r = a.arrayMask([ "a", "b", "c", 4, 5 ], [ 0, "", 1, 2, 3 ]), 
              n = [ "c", 4, 5 ], e.identical(r, n), e.case = "adds the certain values", r = a.arrayMask([ "a", "b", "c", 4, 5, "d" ], [ 3, 7, 0, "", 13, 33 ]), 
              n = [ "a", "b", 5, "d" ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayMask();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayMask([ 1, 2, 3, 4 ]);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arrayMask([ "a", "b", "c", 4, 5 ], [ 0, "", 1, 2, 3 ], "redundant argument");
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arrayMask("wrong argument", "wrong argument");
              }), e.case = "both arrays are empty", e.shouldThrowErrorSync(function() {
                a.arrayMask([], []);
              }), e.case = "length of the first array is not equal to the second array", e.shouldThrowErrorSync(function() {
                a.arrayMask([ 1, 2, 3 ], [ void 0, null, 0, "" ]);
              }), e.case = "length of the second array is not equal to the first array", e.shouldThrowErrorSync(function() {
                a.arrayMask([ 1, 2, 3, 4 ], [ void 0, null, 0 ]);
              });
            }
            //
            ,
            longUnduplicate: function longUnduplicate(e) {
              /* */
              function evaluator(e) {
                return e.v;
              }
              function equalizer(e, a) {
                return e.v === a.v;
              }
              /* */
              e.case = "dst=empty, two args";
              var r = [], n = void 0, t = a.longUnduplicate(r, n), i = [];
              e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "dst=empty, single arg", 
              r = [], n = void 0, t = a.longUnduplicate(r), i = [], e.identical(t, i), e.is(t === r), 
              e.is(t !== n), e.case = "src=empty", r = null, n = [], t = a.longUnduplicate(r, n), 
              i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "dst=empty, src=empty", 
              r = [], n = [], t = a.longUnduplicate(r, n), i = [], e.identical(t, i), e.is(t === r), 
              e.is(t !== n), 
              /* */
              e.case = "dst=array", r = [ 1, 1, 2, 3, 3, 4, 5, 5 ], n = void 0, t = a.longUnduplicate(r, n), 
              i = [ 1, 2, 3, 4, 5 ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "src=array", 
              r = null, n = [ 2, 2, 4, 4, 6, 6 ], t = a.longUnduplicate(r, n), i = [ 2, 4, 6 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "dst=array, src=array", 
              r = [ 1, 1, 2, 3, 3, 4, 5, 5 ], n = [ 2, 2, 4, 4, 6, 6 ], t = a.longUnduplicate(r, n), 
              i = [ 1, 2, 3, 4, 5, 6 ], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              /* */
              e.case = "dst=F32x", r = [ 1, 1, 2, 3, 3, 4, 5, 5 ], n = void 0, t = a.longUnduplicate(r, n), 
              i = [ 1, 2, 3, 4, 5 ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "src=F32x", 
              r = null, n = new F32x([ 2, 2, 4, 4, 6, 6 ]), t = a.longUnduplicate(r, n), i = new F32x([ 2, 4, 6 ]), 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t instanceof F32x), e.case = "dst=F32x, src=F32x", 
              r = [ 1, 1, 2, 3, 3, 4, 5, 5 ], n = new F32x([ 2, 2, 4, 4, 6, 6 ]), t = a.longUnduplicate(r, n), 
              i = [ 1, 2, 3, 4, 5, 6 ], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              /* */
              e.case = "dst=array, with evaluator", r = null, n = [ {
                v: 2
              }, {
                v: 2
              }, {
                v: 4
              }, {
                v: 4
              }, {
                v: 6
              }, {
                v: 6
              } ], t = a.longUnduplicate(r, n, evaluator), i = [ {
                v: 2
              }, {
                v: 4
              }, {
                v: 6
              } ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "dst=array, src=undefined, with evaluator", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = void 0, t = a.longUnduplicate(r, n, evaluator), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "dst=array, src=undefined, with evaluator in 2th argument", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = void 0, t = a.longUnduplicate(r, evaluator), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "dst=array, src=array, with evaluator", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = [ {
                v: 2
              }, {
                v: 2
              }, {
                v: 4
              }, {
                v: 4
              }, {
                v: 6
              }, {
                v: 6
              } ], t = a.longUnduplicate(r, n, evaluator), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 6
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              /* */
              e.case = "dst=array, with equalizer", r = null, n = [ {
                v: 2
              }, {
                v: 2
              }, {
                v: 4
              }, {
                v: 4
              }, {
                v: 6
              }, {
                v: 6
              } ], t = a.longUnduplicate(r, n, equalizer), i = [ {
                v: 2
              }, {
                v: 4
              }, {
                v: 6
              } ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "dst=array, src=undefined, with equalizer", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = void 0, t = a.longUnduplicate(r, n, equalizer), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "dst=array, src=undefined, with equalizer in 2th argument", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = void 0, t = a.longUnduplicate(r, equalizer), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "dst=array, src=array, with equalizer", 
              r = [ {
                v: 1
              }, {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 5
              } ], n = [ {
                v: 2
              }, {
                v: 2
              }, {
                v: 4
              }, {
                v: 4
              }, {
                v: 6
              }, {
                v: 6
              } ], t = a.longUnduplicate(r, n, equalizer), i = [ {
                v: 1
              }, {
                v: 2
              }, {
                v: 3
              }, {
                v: 4
              }, {
                v: 5
              }, {
                v: 6
              } ], e.identical(t, i), e.is(t === r), e.is(t !== n);
            }
            //
            ,
            arraySelect: function arraySelect(e) {
              e.case = "nothing";
              var r = a.arraySelect([], []), n = [];
              e.identical(r, n), e.case = "certain elements", r = a.arraySelect([ 1, 2, 3, 4, 5 ], [ 2, 3, 4 ]), 
              n = [ 3, 4, 5 ], e.identical(r, n), e.case = "array of undefined", r = a.arraySelect([ 1, 2, 3 ], [ 4, 5 ]), 
              n = [ void 0, void 0 ], e.identical(r, n), e.case = "using object", r = a.arraySelect([ 1, 1, 2, 2, 3, 3 ], {
                atomsPerElement: 2,
                indices: [ 0, 1, 2 ]
              }), n = [ 1, 1, 2, 2, 3, 3 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySelect();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arraySelect([ 1, 2, 3 ]);
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arraySelect("wrong argument", "wrong argument");
              }), e.case = "arguments are not wrapped into array", e.shouldThrowErrorSync(function() {
                a.arraySelect(1, 2, 3, 4, 5);
              });
            },
            // array manipulator
            arraySwap: 
            //
            function arraySwap(e) {
              e.case = "an element";
              var r = a.arraySwap([ 7 ], 0, 0), n = [ 7 ];
              e.identical(r, n), e.case = "reverses first index and last index", r = a.arraySwap([ 1, 2, 3, 4, 5 ], 0, 4), 
              n = [ 5, 2, 3, 4, 1 ], e.identical(r, n), e.case = "swaps first two", r = a.arraySwap([ 1, 2, 3 ]), 
              n = [ 2, 1, 3 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySwap();
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arraySwap("wrong argument", "wrong argument", "wrong argument");
              }), e.case = "arguments[1] and arguments[2] are out of bound", e.shouldThrowErrorSync(function() {
                a.arraySwap([ 1, 2, 3, 4, 5 ], -1, -4);
              }), e.case = "first five arguments are not wrapped into array", e.shouldThrowErrorSync(function() {
                a.arraySwap(1, 2, 3, 4, 5, 0, 4);
              });
            },
            arrayCutin: 
            //
            function arrayCutin(e) {
              debugger;
              e.case = "range as single number";
              /* */
              var r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, 2), t = [ 3 ];
              e.identical(n, t), e.identical(r, [ 1, 2, 4 ])
              /* */ , r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, -1), t = [], e.identical(n, t), 
              e.identical(r, [ 1, 2, 3, 4 ])
              /* */ , r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, 0, [ 0 ]), t = [ 1 ], e.identical(n, t), 
              e.identical(r, [ 0, 2, 3, 4 ])
              /* */ , r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, 0, []), t = [ 1 ], e.identical(n, t), 
              e.identical(r, [ 2, 3, 4 ])
              /* */ , r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, [ 0 ], []), t = [ 1, 2, 3, 4 ], 
              e.identical(n, t), e.identical(r, [])
              /* */ , t = (r = [ 1, 2, 3, 4 ]).slice().splice(1), n = a.arrayCutin(r, [ 1 ], [ 5 ]), 
              e.identical(n, t), e.identical(r, [ 1, 5 ])
              /* */ , r = [ 1, 2, 3, 4 ], n = a.arrayCutin(r, [ void 0, 1 ], [ 5 ]), e.identical(n, [ 1 ]), 
              e.identical(r, [ 5, 2, 3, 4 ]), 
              //
              e.case = "empth", r = [];
              var i = a.arrayCutin([], [], []);
              e.identical(i, []), e.identical(r, []), 
              /* */
              e.case = "remove two elements", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 1, 3 ], []), 
              t = [ 1, 4, 5 ], e.identical(r, t), t = [ 2, 3 ], e.identical(i, t), 
              /* */
              e.case = "remove two elements and incut three", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 1, 3 ], [ 11, 22, 33 ]), 
              t = [ 1, 11, 22, 33, 4, 5 ], e.identical(r, t), t = [ 2, 3 ], e.identical(i, t), 
              /* */
              e.case = "pass only begin of range", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 1 ], [ 11, 22, 33 ]), 
              t = [ 1, 11, 22, 33 ], e.identical(r, t), t = [ 2, 3, 4, 5 ], e.identical(i, t), 
              /* */
              e.case = "pass empty range", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [], [ 11, 22, 33 ]), 
              t = [ 11, 22, 33 ], e.identical(r, t), t = [ 1, 2, 3, 4, 5 ], e.identical(i, t), 
              /* */
              e.case = "pass number instead of range", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, 1, [ 11, 22, 33 ]), 
              t = [ 1, 11, 22, 33, 3, 4, 5 ], e.identical(r, t), t = [ 2 ], e.identical(i, t), 
              /* */
              e.case = "no source, number istead of range", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, 1), 
              t = [ 1, 3, 4, 5 ], e.identical(r, t), t = [ 2 ], e.identical(i, t), 
              /* */
              e.case = "no source", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 1, 3 ]), t = [ 1, 4, 5 ], 
              e.identical(r, t), t = [ 2, 3 ], e.identical(i, t), 
              /* */
              e.case = "out of bound, begin", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ -10, 2 ], [ 11, 22, 33 ]), 
              t = [ 11, 22, 33, 3, 4, 5 ], e.identical(r, t), t = [ 1, 2 ], e.identical(i, t), 
              /* */
              e.case = "out of bound, end", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 3, 10 ], [ 11, 22, 33 ]), 
              t = [ 1, 2, 3, 11, 22, 33 ], e.identical(r, t), t = [ 4, 5 ], e.identical(i, t), 
              /* */
              e.case = "out of bound, both sides", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ -10, 10 ], [ 11, 22, 33 ]), 
              t = [ 11, 22, 33 ], e.identical(r, t), t = [ 1, 2, 3, 4, 5 ], e.identical(i, t), 
              /* */
              e.case = "negative, both sides", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ -1, -1 ], [ 11, 22, 33 ]), 
              t = r, e.identical(r, t), t = [], e.identical(i, t), 
              /* */
              e.case = "zero, both sides", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 0, 0 ], [ 11, 22, 33 ]), 
              t = r, e.identical(r, t), t = [], e.identical(i, t), 
              /* first > last */
              e.case = "first > last", r = [ 1, 2, 3, 4, 5 ], i = a.arrayCutin(r, [ 9, 0 ], [ 11, 22, 33 ]), 
              t = r, e.identical(r, t), t = [], e.identical(i, t);
              /* Buffers */
              var c = [ Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, ArrayBuffer ];
              "nodejs" === Config.platform && c.push(Buffer);
              for (var s = 0; s < c.length; s++) {
                e.case = "buffers: " + c[s].name;
                for (var l = new c[s](5), o = 0; o < 5; o++) l[o] = o + 1;
                //array [ 1,2,3,4,5 ]
                /* simple cut */                n = a.arrayCutin(l, 0), t = [ 2, 3, 4, 5 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, 0, [ 9 ]), t = [ 9, 2, 3, 4, 5 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, 4), t = [ 1, 2, 3, 4 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, [ 0, 1 ]), t = [ 2, 3, 4, 5 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, [ 2, 5 ]), t = [ 1, 2 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, 4, [ 6, 7 ]), t = [ 1, 2, 3, 4, 6, 7 ], t = a.arrayCutin(new c[s](1), 0, t), 
                e.identical(n, t), n = a.arrayCutin(l, [ 4, 5 ], [ 6, 7 ]), t = [ 1, 2, 3, 4, 6, 7 ], 
                t = a.arrayCutin(new c[s](1), 0, t), e.identical(n, t), n = a.arrayCutin(l, 10, [ 6, 7 ]), 
                t = l, e.identical(n, t), n = a.arrayCutin(l, [ 0, 99 ]), t = new c[s](0), e.identical(n.byteLength, t.byteLength), 
                n = a.arrayCutin(l, [ 0, 99 ], [ 1, 2, 3, 4, 5 ]), t = l, e.identical(n, t), n = a.arrayCutin(l, [ 0, -1 ]), 
                t = l, e.identical(n, t), n = a.arrayCutin(l, [ -1, -1 ]), t = l, e.identical(n, t), 
                n = a.arrayCutin(l, [ 0, 0 ], [ 1 ]), t = l, e.identical(n, t), n = a.arrayCutin(l, [], []), 
                n = a.definedIs(n.length) ? n.length : n.byteLength, e.identical(n, 0);
              }
              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayCutin();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayCutin([ 1, 2, 3, 4, 5 ]);
              }), e.case = "redundant argument", e.shouldThrowErrorSync(function() {
                a.arrayCutin([ 1, "a", "b", "c", 5 ], [ 2, 3, 4 ], 1, 3, "redundant argument");
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arrayCutin("wrong argument", "wrong argument", "wrong argument", "wrong argument");
              }), e.case = "wrong type of argument", e.shouldThrowErrorSync(function() {
                a.arrayCutin([], [ "x" ], 3);
              });
            },
            arrayPut: 
            //
            function arrayPut(e) {
              e.case = "adds after second element";
              var r = a.arrayPut([ 1, 2, 3, 4, 5, 6, 9 ], 2, "str", !0, [ 7, 8 ]), n = [ 1, 2, "str", !0, 7, 8, 9 ];
              e.identical(r, n), e.case = "adds at the beginning", r = a.arrayPut([ 1, 2, 3, 4, 5, 6, 9 ], 0, "str", !0, [ 7, 8 ]), 
              n = [ "str", !0, 7, 8, 5, 6, 9 ], e.identical(r, n), e.case = "add to end", r = a.arrayPut([ 1, 2, 3 ], 3, 4, 5, 6), 
              n = [ 1, 2, 3, 4, 5, 6 ], e.identical(r, n), e.case = "offset is negative", r = a.arrayPut([ 1, 2, 3 ], -1, 4, 5, 6), 
              n = [ 5, 6, 3 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPut();
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arrayPut("wrong argument", "wrong argument", "str", !0, [ 7, 8 ]);
              });
            },
            // arrayFill,
            arrayFillTimes: 
            //
            function arrayFillTimes(e) {
              e.case = "empty array";
              var r = a.arrayFillTimes([], 1), n = [ 0 ];
              e.identical(r, n), e.case = "times is negative, times = length + times", r = a.arrayFillTimes([ 0, 0, 0 ], -1, 1), 
              n = [ 1, 1, 0 ], e.identical(r, n), e.case = "times is negative", r = a.arrayFillTimes([ 0, 0 ], -2, 1), 
              n = [ 0, 0 ], e.identical(r, n), e.case = "empty array, value passed", r = a.arrayFillTimes([], 1, 1), 
              n = [ 1 ], e.identical(r, n), e.case = "empty array, value is an array", r = a.arrayFillTimes([], 1, [ 1, 2, 3 ]), 
              n = [ [ 1, 2, 3 ] ], e.identical(r, n), e.case = "times > array.length", r = a.arrayFillTimes([ 0 ], 3, 1), 
              n = [ 1, 1, 1 ], e.identical(r, n), e.case = "times < array.length", r = a.arrayFillTimes([ 0, 0, 0 ], 1, 1), 
              n = [ 1, 0, 0 ], e.identical(r, n), e.case = "TypedArray";
              var t = new Uint16Array();
              r = a.arrayFillTimes(t, 3, 1), n = new Uint16Array([ 1, 1, 1 ]), e.identical(r, n), 
              e.case = "ArrayLike without fill routine", t = (() => arguments)(1), r = a.arrayFillTimes(t, 3, 1), 
              n = [ 1, 1, 1 ], e.identical(r, n), e.case = "no fill routine, times is negative", 
              (t = [ 1, 1, 1 ]).fill = null, r = a.arrayFillTimes(t, -1, 3), n = [ 3, 3, 1 ], 
              e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayFillTimes();
              }), e.case = "zero", e.shouldThrowErrorSync(function() {
                a.arrayFillTimes(0);
              }), e.case = "only one argument", e.shouldThrowErrorSync(function() {
                a.arrayFillTimes([]);
              }), e.case = "wrong argument type", e.shouldThrowErrorSync(function() {
                a.arrayFillTimes(new ArrayBuffer(), 1);
              });
            },
            arrayFillWhole: function arrayFillWhole(e) {
              e.case = "empty array";
              var r = a.arrayFillWhole([]), n = [];
              e.identical(r, n), e.case = "empty array, value passed", r = a.arrayFillWhole([], 1), 
              n = [], e.identical(r, n), e.case = "array with elements", r = a.arrayFillWhole([ 1, 1, 1 ]), 
              n = [ 0, 0, 0 ], e.identical(r, n), e.case = "array with elements", r = a.arrayFillWhole([ 1, 1, 1 ], 5), 
              n = [ 5, 5, 5 ], e.identical(r, n), e.case = "array with elements", (t = []).length = 3, 
              r = a.arrayFillWhole(t, 5), n = [ 5, 5, 5 ], e.identical(r, n), e.case = "TypedArray";
              var t = new Uint16Array(3);
              r = a.arrayFillWhole(t), n = new Uint16Array([ 0, 0, 0 ]), e.identical(r, n), e.case = "no fill routine", 
              (t = [ 1, 1, 1 ]).fill = null, r = a.arrayFillWhole(t, 2), n = [ 2, 2, 2 ], e.identical(r, n), 
              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayFillWhole();
              }), e.case = "wrong argument type", e.shouldThrowErrorSync(function() {
                a.arrayFillTimes(new ArrayBuffer(), 1);
              });
            },
            arraySupplement: 
            //
            function arraySupplement(e) {
              e.case = "nothing";
              var r = a.arraySupplement([]), n = [];
              e.identical(r, n), e.case = "only numbers", r = a.arraySupplement([ 4, 5 ], [ 1, 2, 3 ], [ 6, 7, 8, !0, 9 ], [ "a", "b", 33, 13, "e", 7 ]), 
              n = [ 4, 5, 33, 13, 9, 7 ], e.identical(r, n), e.case = "only numbers and undefined", 
              r = a.arraySupplement([ 4, 5 ], [ 1, 2, 3 ], [ 6, 7, !0, 9 ], [ "a", "b", 33, 13, "e", 7 ]), 
              n = [ 4, 5, 33, 13, void 0, 7 ], e.identical(r, n), e.case = "only numbers", r = a.arraySupplement([ "a", "b" ], [ 1, 2, 3 ], [ 6, 7, 8, !0, 9 ], [ "a", "b", 33, 13, "e", 7 ]), 
              n = [ 6, 7, 33, 13, 9, 7 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySupplement();
              }), e.case = "arguments are wrong", e.shouldThrowErrorSync(function() {
                a.arraySupplement("wrong argument", "wrong arguments");
              });
            },
            arrayExtendScreening: 
            //
            function arrayExtendScreening(e) {
              e.case = "returns an empty array";
              var r = a.arrayExtendScreening([], [], [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ]), n = [];
              e.identical(r, n), e.case = "returns the corresponding values by indexes of the first argument", 
              r = a.arrayExtendScreening([ 1, 2, 3 ], [], [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ]), n = [ 5, 6, 2 ], 
              e.identical(r, n), e.case = "creates a new array and returns the corresponding values by indexes of the first argument", 
              r = a.arrayExtendScreening([ 1, 2, 3 ], null, [ 0, 1, 2 ], [ 3, 4 ], [ 5, 6 ]), 
              n = [ 5, 6, 2 ], e.identical(r, n), e.case = "returns the corresponding values by indexes of the first argument", 
              r = a.arrayExtendScreening([ 1, 2, 3 ], [ 3, "abc", 7, 13 ], [ 0, 1, 2 ], [ 3, 4 ], [ "a", 6 ]), 
              n = [ "a", 6, 2, 13 ], e.identical(r, n), e.case = "returns the second argument", 
              r = a.arrayExtendScreening([], [ 3, "abc", 7, 13 ], [ 0, 1, 2 ], [ 3, 4 ], [ "a", 6 ]), 
              n = [ 3, "abc", 7, 13 ], e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayExtendScreening();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayExtendScreening([ 1, 2, 3, "abc", 13 ]);
              }), e.case = "next arguments are wrong", e.shouldThrowErrorSync(function() {
                a.arrayExtendScreening([ 1, 2, 3 ], [ 3, "abc", 7, 13 ], [ 3, 7 ], "wrong arguments");
              }), e.case = "arguments are wrong", e.shouldThrowErrorSync(function() {
                a.arrayExtendScreening("wrong argument", "wrong argument", "wrong arguments");
              });
            },
            // array checker
            arrayCompare: 
            //
            function arrayCompare(e) {
              e.case = "empty arrays";
              var r = a.arrayCompare([], []), n = 0;
              e.identical(r, n), e.case = "first array is empty", r = a.arrayCompare([], [ 1, 2 ]), 
              n = 0, e.identical(r, n), e.case = "length of the first array is less than second", 
              r = a.arrayCompare([ 4 ], [ 1, 2 ]), n = 3, e.identical(r, n), e.case = "arrays are equal", 
              r = a.arrayCompare([ 1, 5 ], [ 1, 5 ]), n = 0, e.identical(r, n), e.case = "a difference", 
              r = a.arrayCompare([ 1, 5 ], [ 1, 2 ]), n = 3, e.identical(r, n), e.case = "a negative difference", 
              r = a.arrayCompare([ 1, 5 ], [ 1, 6 ]), n = -1, e.identical(r, n), e.case = "array-like arguments";
              var t = function src1() {
                return arguments;
              }(1, 5), i = function src2() {
                return arguments;
              }(1, 2);
              r = a.arrayCompare(t, i), n = 3, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayCompare();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayCompare([ 1, 5 ]);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arrayCompare([ 1, 5 ], [ 1, 2 ], "redundant argument");
              }), e.case = "wrong type of arguments", e.shouldThrowErrorSync(function() {
                a.arrayCompare("wrong argument", "wrong argument");
              }), e.case = "second array is empty", e.shouldThrowErrorSync(function() {
                a.arrayCompare([ 1, 5 ], []);
              }), e.case = "length of the second array is less than first", e.shouldThrowErrorSync(function() {
                a.arrayCompare([ 1, 5 ], [ 1 ]);
              });
            },
            arraysAreIdentical: 
            //
            function arraysAreIdentical(e) {
              e.case = "empty arrays";
              var r = a.arraysAreIdentical([], []), n = !0;
              e.identical(r, n), e.case = "arrays are equal", r = a.arraysAreIdentical([ 1, 2, 3 ], [ 1, 2, 3 ]), 
              n = !0, e.identical(r, n), e.case = "array-like arguments", r = a.arraysAreIdentical(function src1() {
                return arguments;
              }(3, 7, 33), function src2() {
                return arguments;
              }(3, 7, 13)), n = !1, e.identical(r, n), e.case = "arrays are not equal", r = a.arraysAreIdentical([ 1, 2, 3, "Hi!" ], [ 1, 2, 3, "Hello there!" ]), 
              n = !1, e.identical(r, n), e.case = "arrays length are not equal", r = a.arraysAreIdentical([ 1, 2, 3 ], [ 1, 2 ]), 
              n = !1, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraysAreIdentical();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arraysAreIdentical([ 1, 2, 3 ]);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arraysAreIdentical([ 1, 2, 3 ], [ 1, 2 ], "redundant argument");
              });
            },
            arrayHasAny: 
            //
            function arrayHasAny(e) {
              e.case = "false";
              var r = a.arrayHasAny([]), n = !1;
              e.identical(r, n), e.case = "false", r = a.arrayHasAny([], !1, 7), n = !1, e.identical(r, n), 
              e.case = "true", r = a.arrayHasAny([ 5, "str", 42, !1 ], !1, 7), n = !0, e.identical(r, n), 
              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayHasAny();
              }), e.case = "first argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayHasAny("wrong argument", !1, 7);
              });
            },
            // array sequential search
            arrayLeftIndex: 
            //
            function arrayLeftIndex(e) {
              e.case = "nothing";
              var r = a.arrayLeftIndex([], 3), n = -1;
              e.identical(r, n), e.case = "second index", r = a.arrayLeftIndex([ 1, 2, 3 ], 3), 
              n = 2, e.identical(r, n), e.case = "zero index", r = a.arrayLeftIndex([ 1, 2, 3 ], 3, function(e, a) {
                return e < a;
              }), n = 0, e.identical(r, n), e.case = "nothing", r = a.arrayLeftIndex([ 1, 2, 3 ], 4), 
              n = -1, e.identical(r, n), e.case = "nothing", r = a.arrayLeftIndex([ 1, 2, 3 ], 3, function(e, a) {
                return e > a;
              }), n = -1, e.identical(r, n), e.case = "array-like arguments";
              var t = function arr() {
                return arguments;
              }(3, 7, 13);
              r = a.arrayLeftIndex(t, 13), n = 2, e.identical(r, n), e.case = "fromIndex", r = a.arrayLeftIndex([ 0, 0, 0, 0 ], 0, 0), 
              n = 0, e.identical(r, n), e.case = "fromIndex", r = a.arrayLeftIndex([ 0, 0, 0, 0 ], 0, 3), 
              n = 3, e.identical(r, n), e.case = "fromIndex", r = a.arrayLeftIndex([ 0, 0, 0, 0 ], 0, -1), 
              n = 3, e.identical(r, n), e.case = "fromIndex + evaluator", r = a.arrayLeftIndex([ 1, 1, 2, 2, 3, 3 ], 3, 2, function(e, a) {
                return e < a;
              }), n = 2, e.identical(r, n), e.case = "fromIndex + evaluator x2", r = a.arrayLeftIndex([ 6, 6, 5, 5 ], 3, 2, function(e) {
                return e + 1;
              }, function(e) {
                return 2 * e;
              }), n = 2, e.identical(r, n), e.case = "one argument", e.shouldThrowErrorSync(function() {
                a.arrayLeftIndex([ 1, 2, 3 ]);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayLeftIndex();
              }), e.case = "third argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayLeftIndex([ 1, 2, 3 ], 2, "wrong argument");
              });
            },
            arrayRightIndex: 
            //
            function arrayRightIndex(e) {
              e.case = "nothing";
              var r = a.arrayRightIndex([], 3), n = -1;
              e.identical(r, n), e.case = "second index", r = a.arrayRightIndex([ 1, 2, 3 ], 3), 
              n = 2, e.identical(r, n), e.case = "zero index", r = a.arrayRightIndex([ 1, 2, 3 ], 3, function(e, a) {
                return e < a;
              }), n = 1, e.identical(r, n), e.case = "nothing", r = a.arrayRightIndex([ 1, 2, 3 ], 4), 
              n = -1, e.identical(r, n), e.case = "nothing", r = a.arrayRightIndex([ 1, 2, 3 ], 3, function(e, a) {
                return e > a;
              }), n = -1, e.identical(r, n), e.case = "array-like arguments";
              var t = function arr() {
                return arguments;
              }(3, 7, 13);
              r = a.arrayRightIndex(t, 13), n = 2, e.identical(r, n), e.case = "fifth index", 
              r = a.arrayRightIndex("abcdef", "e", function(e, a) {
                return e > a;
              }), n = 5, e.identical(r, n), e.case = "third index", r = a.arrayRightIndex("abcdef", "d"), 
              n = 3, e.identical(r, n), e.case = "second index", r = a.arrayRightIndex("abcdef", "c", function(e) {
                return e;
              }), n = 2, e.identical(r, n), e.case = "fromIndex", r = a.arrayRightIndex([ 0, 0, 0, 0 ], 0, 0), 
              n = 0, e.identical(r, n), e.case = "fromIndex", r = a.arrayRightIndex([ 0, 0, 0, 0 ], 0, 3), 
              n = 3, e.identical(r, n), e.case = "fromIndex", r = a.arrayRightIndex([ 0, 1, 1, 0 ], 0, 1), 
              n = 0, e.identical(r, n), e.case = "fromIndex", r = a.arrayRightIndex([ 0, 1, 1, 0 ], 1, 2), 
              n = 2, e.identical(r, n), e.case = "fromIndex + evaluator", r = a.arrayRightIndex([ 1, 1, 2, 2, 3, 3 ], 3, 4, function(e, a) {
                return e < a;
              }), n = 3, e.identical(r, n), e.case = "fromIndex + evaluator x2", r = a.arrayRightIndex([ 6, 6, 5, 5 ], 3, 2, function(e) {
                return e + 1;
              }, function(e) {
                return 2 * e;
              }), n = 2, e.identical(r, n), e.case = "one argument", e.shouldThrowErrorSync(function() {
                a.arrayRightIndex([ 1, 2, 3 ]);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRightIndex();
              }), e.case = "third argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayRightIndex([ 1, 2, 3 ], 2, "wrong argument");
              });
            },
            arrayLeft: 
            //
            function arrayLeft(e) {
              e.case = "returns an object";
              var r = a.arrayLeft([ 1, 2, 3, 4, 5 ], 3), n = {
                index: 2,
                element: 3
              };
              e.identical(r, n), e.case = "returns an object", r = a.arrayLeft([ 1, 2, !1, "str", 5 ], "str", function(e, a) {
                return e === a;
              }), n = {
                index: 3,
                element: "str"
              }, e.identical(r, n), e.case = "returns an object", r = a.arrayLeft([ 1, 2, !1, "str", 5 ], 5, function(e) {
                return e;
              }), n = {
                index: 4,
                element: 5
              }, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayLeft();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayLeft([]);
              }), e.case = "third argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayLeft([ 1, 2, 3 ], 2, "wrong argument");
              });
            },
            arrayCountElement: 
            //
            function arrayCountElement(r) {
              r.case = "Empty array";
              var n = a.arrayCountElement([], 3), t = 0;
              r.identical(n, t), r.case = "Undefined element", n = a.arrayCountElement([], void 0), 
              t = 0, r.identical(n, t), r.case = "Null element", n = a.arrayCountElement([], null), 
              t = 0, r.identical(n, t), r.case = "No match", n = a.arrayCountElement([ 1, 2, "str", 10, 10, !0 ], "hi"), 
              t = 0, r.identical(n, t), r.case = "One match - bool", n = a.arrayCountElement([ 1, 2, "str", 10, 10, !0 ], !0), 
              t = 1, r.identical(n, t), r.case = "Two matching - number", n = a.arrayCountElement([ 1, 2, "str", 10, 10, !0 ], 10), 
              t = 2, r.identical(n, t), r.case = "Three matching - string", n = a.arrayCountElement([ "str", 10, "str", 10, !0, "str" ], "str"), 
              t = 3, r.identical(n, t), r.case = "longIs";
              var i = [ 1, 2, 3 ];
              i.a = 1, n = a.arrayCountElement(i, 1), t = 1, r.identical(n, t), 
              // Evaluators
              r.case = "Without evaluators - no match", n = a.arrayCountElement([ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ] ], 0), 
              t = 0, r.identical(n, t), r.case = "With evaluators - 1 matches", n = a.arrayCountElement([ [ 1, 3 ], [ 2, 2 ], [ 3, 1 ] ], 1, e => e[1], e => e + 2), 
              t = 1, r.identical(n, t), r.case = "With evaluators - 4 matches", n = a.arrayCountElement([ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ] ], 0, e => e[0], e => e), 
              t = 4, r.identical(n, t), r.case = "Without equalizer - two matches", n = a.arrayCountElement([ !0, !1, !0, !1 ], !0), 
              t = 2, r.identical(n, t), r.case = "With equalizer - 4 matches", n = a.arrayCountElement([ !0, !1, !0, !1 ], !0, (e, r) => a.typeOf(e) === a.typeOf(r)), 
              t = 4, r.identical(n, t), r.case = "With equalizer - 4 matches", n = a.arrayCountElement([ 1, 2, "str", 10, 10, !0 ], 10, (e, r) => a.typeOf(e) === a.typeOf(r)), 
              t = 4, r.identical(n, t), r.case = "no arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement();
              }), r.case = "not enough arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 1, 2, 3, "abc", 13 ]);
              }), r.case = "extra argument", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 1, 2, 3, !0 ], !0, "redundant argument");
              }), r.case = "first argument is wrong - undefined", r.shouldThrowErrorSync(function() {
                a.arrayCountElement(void 0, !0);
              }), r.case = "first argument is wrong - null", r.shouldThrowErrorSync(function() {
                a.arrayCountElement(null, !0);
              }), r.case = "first argument is wrong - string", r.shouldThrowErrorSync(function() {
                a.arrayCountElement("wrong argument", !0);
              }), r.case = "first argument is wrong - number", r.shouldThrowErrorSync(function() {
                a.arrayCountElement(3, !0);
              }), r.case = "third argument is wrong - have no arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 3, 4, 5, !0 ], 3, () => 3);
              }), r.case = "third argument is wrong - have three arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 3, 4, 5, !0 ], 3, (e, r, n) => a.typeOf(e) === a.typeOf(r) === a.typeOf(n));
              }), r.case = "fourth element is unnacessary", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 3, 4, 5, !0 ], 3, (e, r) => a.typeOf(e) === a.typeOf(r), e => e);
              }), r.case = "fourth argument is wrong - have no arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 3, 4, 5, !0 ], 3, (e, r) => a.typeOf(e) === a.typeOf(r), () => e);
              }), r.case = "fourth argument is wrong - have two arguments", r.shouldThrowErrorSync(function() {
                a.arrayCountElement([ 3, 4, 5, !0 ], 3, (e, r) => a.typeOf(e) === a.typeOf(r), (a, r) => e);
              });
            },
            arrayCountTotal: 
            //
            function arrayCountTotal(e) {
              // Zero
              e.case = "Empty array";
              var r = a.arrayCountTotal([]), n = 0;
              e.identical(r, n), e.case = "null", r = a.arrayCountTotal([ null ]), n = 0, e.identical(r, n), 
              e.case = "several nulls", r = a.arrayCountTotal([ null, null, null ]), n = 0, e.identical(r, n), 
              e.case = "Zero", r = a.arrayCountTotal([ 0 ]), n = 0, e.identical(r, n), e.case = "Several zeros", 
              r = a.arrayCountTotal([ 0, 0, 0, 0 ]), n = 0, e.identical(r, n), e.case = "Mix of nulls and zeros", 
              r = a.arrayCountTotal([ 0, null, null, 0, 0, 0, null ]), n = 0, e.identical(r, n), 
              // Array elements are numbers
              e.case = "Sum of no repeated elements", r = a.arrayCountTotal([ 1, 3, 5, 7, 9 ]), 
              n = 25, e.identical(r, n), e.case = "Sum of repeated elements", r = a.arrayCountTotal([ 2, 2, 4, 4, 6, 6 ]), 
              n = 24, e.identical(r, n), e.case = "Sum with negative numbers", r = a.arrayCountTotal([ 2, -3, 4, -4, 6, -7, 8 ]), 
              n = 6, e.identical(r, n), e.case = "Negative result", r = a.arrayCountTotal([ 2, -3, 4, -4, 6, -7 ]), 
              n = -2, e.identical(r, n), e.case = "Zero", r = a.arrayCountTotal([ 2, -2, 4, -4, 6, -6 ]), 
              n = 0, e.identical(r, n), 
              // Array elements are booleans
              e.case = "All true", r = a.arrayCountTotal([ !0, !0, !0, !0 ]), n = 4, e.identical(r, n), 
              e.case = "All false", r = a.arrayCountTotal([ !1, !1, !1, !1, !1 ]), n = 0, e.identical(r, n), 
              e.case = "Mix of true and false", r = a.arrayCountTotal([ !1, !1, !0, !1, !0, !1, !1, !0 ]), 
              n = 3, e.identical(r, n), 
              // Array elements are numbers and booleans
              e.case = "All true and numbers", r = a.arrayCountTotal([ !0, 2, 1, !0, !0, 0, !0 ]), 
              n = 7, e.identical(r, n), e.case = "All false and numbers", r = a.arrayCountTotal([ 1, !1, 0, !1, !1, 4, 3, !1, !1 ]), 
              n = 8, e.identical(r, n), e.case = "Mix of true, false and numbers", r = a.arrayCountTotal([ !1, !1, 0, !0, !1, 10, !0, !1, !1, !0, 2 ]), 
              n = 15, e.identical(r, n), e.case = "Mix of true, false, numbers and null", r = a.arrayCountTotal([ null, !1, !1, 0, !0, null, !1, 10, !0, !1, !1, !0, 2, null ]), 
              n = 15, e.identical(r, n), e.case = "Mix of true, false, numbers and null - negative result", 
              r = a.arrayCountTotal([ null, !1, !1, 0, !0, null, -8, !1, 10, !0, !1, -9, !1, !0, 2, null ]), 
              n = -2, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal();
              }), e.case = "Too many arguments", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal([ 1, 2, 3, "abc", 13 ], []);
              }), e.case = "srcArray is undefined", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal(void 0);
              }), e.case = "srcArray is null", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal(null);
              }), e.case = "srcArray is string", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal("wrong argument");
              }), e.case = "srcArray is number", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal(3);
              }), e.case = "srcArray contains strings", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal([ 1, "2", 3, "a" ]);
              }), e.case = "srcArray contains arrays", e.shouldThrowErrorSync(function() {
                a.arrayCountTotal([ 1, [ 2 ], 3, [ null ] ]);
              });
            },
            arrayCountUnique: 
            //
            function arrayCountUnique(e) {
              e.case = "nothing";
              var r = a.arrayCountUnique([]), n = 0;
              e.identical(r, n), e.case = "nothing", r = a.arrayCountUnique([ 1, 2, 3, 4, 5 ]), 
              n = 0, e.identical(r, n), e.case = "three pairs", r = a.arrayCountUnique([ 1, 1, 2, "abc", "abc", 4, !0, !0 ]), 
              n = 3, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayCountUnique();
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arrayCountUnique([ 1, 1, 2, "abc", "abc", 4, !0, !0 ], function(e) {
                  return e;
                }, "redundant argument");
              }), e.case = "first argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayCountUnique("wrong argument", function(e) {
                  return e;
                });
              }), e.case = "second argument is wrong", e.shouldThrowErrorSync(function() {
                a.arrayCountUnique([ 1, 1, 2, "abc", "abc", 4, !0, !0 ], "wrong argument");
              });
            },
            // array etc
            arraySum: 
            //
            function arraySum(e) {
              e.case = "nothing";
              var r = a.arraySum([]), n = 0;
              e.identical(r, n), e.case = "returns sum", r = a.arraySum([ 1, 2, 3, 4, 5 ]), n = 15, 
              e.identical(r, n), e.case = "returns sum", r = a.arraySum([ !0, !1, 13, "33" ], function(e) {
                return 2 * e;
              }), n = 94, e.identical(r, n), e.case = "converts and returns sum", r = a.arraySum([ 1, 2, 3, 4, 5 ], function(e) {
                return 2 * e;
              }), n = 30, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySum();
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arraySum([ 1, 2, 3, 4, 5 ], function(e) {
                  return 2 * e;
                }, "redundant argument");
              }), e.case = "first argument is wrong", e.shouldThrowErrorSync(function() {
                a.arraySum("wrong argument", function(e) {
                  return e / 2;
                });
              }), e.case = "second argument is wrong", e.shouldThrowErrorSync(function() {
                a.arraySum([ 1, 2, 3, 4, 5 ], "wrong argument");
              });
            },
            // array prepend
            arrayPrepend: 
            // ---
            // array transformation
            // ---
            function arrayPrepend(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrepend(null, 1);
              e.identical(r, [ 1 ]), e.case = "dstArray is empty";
              var n = [];
              r = a.arrayPrepend(n, null), e.identical(r, [ null ]), e.is(r === n), n = [], r = a.arrayPrepend(n, void 0), 
              e.identical(r, [ void 0 ]), e.is(r === n), n = [], r = a.arrayPrepend(n, 1), e.identical(r, [ 1 ]), 
              e.is(r === n), n = [], r = a.arrayPrepend(n, "1"), e.identical(r, [ "1" ]), e.is(r === n), 
              n = [], r = a.arrayPrepend(n, [ 1, 2 ]), e.identical(r, [ [ 1, 2 ] ]), e.is(r === n), 
              e.case = "simple", n = [ 1 ], r = a.arrayPrepend(n, 1), e.identical(r, [ 1, 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrepend(n, 2), e.identical(r, [ 2, 1 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayPrepend(n, 3), e.identical(r, [ 3, 1, 2, 3 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrepend(n, "1"), e.identical(r, [ "1", 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrepend(n, void 0), e.identical(r, [ void 0, 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrepend(n, -1), e.identical(r, [ -1, 1 ]), e.is(r === n), 
              e.case = "Array prepended as an element", n = [ 1 ], r = a.arrayPrepend(n, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.is(r === n), n = [ "Choose an option" ], r = a.arrayPrepend(n, [ 1, 0, -1 ]), 
              e.identical(r, [ [ 1, 0, -1 ], "Choose an option" ]), e.is(r === n), e.case = "no args", 
              e.shouldThrowErrorSync(function() {
                a.arrayPrepend();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrepend([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrepend(1, 1);
              });
            }
            //
            ,
            arrayPrependOnce: function arrayPrependOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependOnce(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayPrependOnce(n, 1), e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], r = a.arrayPrependOnce(n, 1), 
              e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], r = a.arrayPrependOnce(n, 2), e.identical(r, [ 2, 1 ]), 
              e.is(r === n), n = [ 1, 2, 3 ], r = a.arrayPrependOnce(n, 3), e.identical(r, [ 1, 2, 3 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependOnce(n, "1"), e.identical(r, [ "1", 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependOnce(n, -1), e.identical(r, [ -1, 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependOnce(n, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), 
              e.is(r === n), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayPrependOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayPrependOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayPrependOnce(n, 4, e => e.num, e => e), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayPrependOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayPrependOnceStrictly: function arrayPrependOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependOnceStrictly(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayPrependOnceStrictly(n, 1), e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependOnceStrictly(n, 2), e.identical(r, [ 2, 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependOnceStrictly(n, "1"), e.identical(r, [ "1", 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependOnceStrictly(n, -1), e.identical(r, [ -1, 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependOnceStrictly(n, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), 
              e.is(r === n), n = [ 1, 2, 2, 3, 3 ], r = a.arrayPrependOnceStrictly(n, 0), e.identical(r, [ 0, 1, 2, 2, 3, 3 ]), 
              e.is(r === n), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayPrependOnceStrictly(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayPrependOnceStrictly(n, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayPrependOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependOnceStrictly([ 1, 2, 3 ], 3);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //    _.arrayPrependOnceStrictly( [ 1,2,3 ], 3, 3 );
              // });
              e.shouldThrowErrorSync(function() {
                a.arrayPrependOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayPrepended: function arrayPrepended(e) {
              e.case = "dstArray is empty";
              var r = [], n = a.arrayPrepended(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [], n = a.arrayPrepended(r, null), 
              e.identical(r, [ null ]), e.identical(n, 0), r = [], n = a.arrayPrepended(r, void 0), 
              e.identical(r, [ void 0 ]), e.identical(n, 0), e.case = "simple", r = [ 1 ], n = a.arrayPrepended(r, 1), 
              e.identical(r, [ 1, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrepended(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayPrepended(r, 3), 
              e.identical(r, [ 3, 1, 2, 3 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrepended(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrepended(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, 0), e.case = "Array prepended as an element", 
              r = [ 1 ], n = a.arrayPrepended(r, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), e.identical(n, 0), 
              r = [ "Choose an option" ], n = a.arrayPrepended(r, [ 1, 0, -1 ]), e.identical(r, [ [ 1, 0, -1 ], "Choose an option" ]), 
              e.identical(n, 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrepended();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrepended([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrepended(1, 1);
              });
            }
            //
            ,
            arrayPrependedOnce: function arrayPrependedOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayPrependedOnce(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnce(r, 1), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayPrependedOnce(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayPrependedOnce(r, 3), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayPrependedOnce(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnce(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnce(r, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.identical(n, 0), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayPrependedOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayPrependedOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayPrependedOnce(r, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayPrependedOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnce();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnce(1, 1);
              });
            }
            //
            ,
            arrayPrependedOnceStrictly: function arrayPrependedOnceStrictly(e) {
              e.case = "simple";
              var r = [], n = a.arrayPrependedOnceStrictly(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnceStrictly(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnceStrictly(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnceStrictly(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayPrependedOnceStrictly(r, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.identical(n, 0), r = [ 1, 2, 2, 3, 3 ], n = a.arrayPrependedOnceStrictly(r, 0), 
              e.identical(r, [ 0, 1, 2, 2, 3, 3 ]), e.identical(n, 0), e.case = "equalizer 2 args", 
              r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayPrependedOnceStrictly(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayPrependedOnceStrictly(r, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnceStrictly([ 1, 2, 3 ], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayPrependElement: function arrayPrependElement(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependElement(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayPrependElement(n, 1), e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependElement(n, 1), e.identical(r, [ 1, 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependElement(n, 2), e.identical(r, [ 2, 1 ]), e.is(r === n), n = [ 1, 2, 3 ], 
              r = a.arrayPrependElement(n, 3), e.identical(r, [ 3, 1, 2, 3 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElement(n, "1"), e.identical(r, [ "1", 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElement(n, -1), e.identical(r, [ -1, 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElement(n, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), e.is(r === n), 
              e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependElement();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependElement([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependElement(1, 1);
              });
            }
            //
            ,
            arrayPrependElementOnce: function arrayPrependElementOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependElementOnce(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayPrependElementOnce(n, 1), e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependElementOnce(n, 2), e.identical(r, [ 2, 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayPrependElementOnce(n, "1"), e.identical(r, [ "1", 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElementOnce(n, -1), e.identical(r, [ -1, 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElementOnce(n, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), 
              e.is(r === n), e.case = "ins already in srcArray", n = [ 1 ], r = a.arrayPrependElementOnce(n, 1), 
              e.identical(r, [ 1 ]), e.is(r === n), n = [ 1, 2, 3 ], r = a.arrayPrependElementOnce(n, 3), 
              e.identical(r, [ 1, 2, 3 ]), e.is(r === n), n = [ !0, !1, !0 ], r = a.arrayPrependElementOnce(n, !1), 
              e.identical(r, [ !0, !1, !0 ]), e.is(r === n), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayPrependElementOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayPrependElementOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayPrependElementOnce(n, 4, e => e.num, e => e), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayPrependElementOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayPrependElementOnceStrictly: function arrayPrependElementOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependElementOnceStrictly(null, 1);
              e.identical(r, [ 1 ]), e.case = "dstArray is null", r = a.arrayPrependElementOnceStrictly(null, 1), 
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayPrependElementOnceStrictly(n, 1), e.identical(r, [ 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayPrependElementOnceStrictly(n, 2), e.identical(r, [ 2, 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependElementOnceStrictly(n, "1"), e.identical(r, [ "1", 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependElementOnceStrictly(n, -1), e.identical(r, [ -1, 1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayPrependElementOnceStrictly(n, [ 1 ]), e.identical(r, [ [ 1 ], 1 ]), 
              e.is(r === n), n = [ 1, 2, 2, 3, 3 ], r = a.arrayPrependElementOnceStrictly(n, 0), 
              e.identical(r, [ 0, 1, 2, 2, 3, 3 ]), e.is(r === n), e.case = "equalizer 2 args", 
              n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayPrependElementOnceStrictly(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayPrependElementOnceStrictly(n, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnceStrictly([ 1, 2, 3 ], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependElementOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayPrependedElement: function arrayPrependedElement(e) {
              e.case = "simple";
              var r = [], n = a.arrayPrependedElement(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayPrependedElement(r, 1), 
              e.identical(r, [ 1, 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayPrependedElement(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayPrependedElement(r, 3), 
              e.identical(r, [ 3, 1, 2, 3 ]), e.identical(n, 3), r = [ 1 ], n = a.arrayPrependedElement(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, "1"), r = [ 1 ], n = a.arrayPrependedElement(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayPrependedElement(r, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.identical(n, [ 1 ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElement();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElement([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElement(1, 1);
              });
            }
            //
            ,
            arrayPrependedElementOnce: function arrayPrependedElementOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayPrependedElementOnce(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayPrependedElementOnce(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 2), r = [ 1 ], n = a.arrayPrependedElementOnce(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, "1"), r = [ 1 ], n = a.arrayPrependedElementOnce(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayPrependedElementOnce(r, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.identical(n, [ 1 ]), e.case = "ins already in dstArray", 
              r = [ 1 ], n = a.arrayPrependedElementOnce(r, 1), e.identical(r, [ 1 ]), e.identical(n, void 0), 
              r = [ 1, 2, 3 ], n = a.arrayPrependedElementOnce(r, 3), e.identical(r, [ 1, 2, 3 ]), 
              e.identical(n, void 0), r = [ !1, !0, !1, !0 ], n = a.arrayPrependedElementOnce(r, !0), 
              e.identical(r, [ !1, !0, !1, !0 ]), e.identical(n, void 0), e.case = "equalizer 2 args", 
              r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayPrependedElementOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, {
                num: 4
              }), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayPrependedElementOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, void 0), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayPrependedElementOnce(r, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 4), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayPrependedElementOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, void 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnce();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnce(1, 1);
              });
            }
            //
            ,
            arrayPrependedElementOnceStrictly: function arrayPrependedElementOnceStrictly(e) {
              e.case = "simple";
              var r = [], n = a.arrayPrependedElementOnceStrictly(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayPrependedElementOnceStrictly(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 2), r = [ 1 ], n = a.arrayPrependedElementOnceStrictly(r, "1"), 
              e.identical(r, [ "1", 1 ]), e.identical(n, "1"), r = [ 1 ], n = a.arrayPrependedElementOnceStrictly(r, -1), 
              e.identical(r, [ -1, 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayPrependedElementOnceStrictly(r, [ 1 ]), 
              e.identical(r, [ [ 1 ], 1 ]), e.identical(n, [ 1 ]), r = [ 1, 2, 2, 3, 3 ], n = a.arrayPrependedElementOnceStrictly(r, 0), 
              e.identical(r, [ 0, 1, 2, 2, 3, 3 ]), e.identical(n, 0), e.case = "equalizer 2 args", 
              r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayPrependedElementOnceStrictly(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 4
              }, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, {
                num: 4
              }), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayPrependedElementOnceStrictly(r, 4, t), e.identical(r, [ 4, {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 4), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnceStrictly([ 1, 2, 3 ], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedElementOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayPrependArray: function arrayPrependArray(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArray(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArray([], []), e.identical(r, []), 
              e.case = "simple";
              var n = [];
              r = a.arrayPrependArray(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayPrependArray(n, [ 4, 5 ]), e.identical(n, [ 4, 5, 1, 2, 3 ]), 
              e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayPrependArray(n, [ 1, 1 ]), e.identical(n, [ 1, 1, 1, 1, 1 ]), 
              e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], r = a.arrayPrependArray(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              }, 1 ]), e.is(r === n), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArray(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], r = a.arrayPrependArray(n, [ void 0, 2 ]), 
              e.identical(n, [ void 0, 2, 1 ]), e.is(r === n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependArray([ 1, 2 ], 2);
              });
            },
            arrayPrependArrayOnce: 
            //
            function arrayPrependArrayOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArrayOnce(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArrayOnce([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayPrependArrayOnce(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              e.case = "prepends only unique elements", n = [ 1, 2, 3 ], r = a.arrayPrependArrayOnce(n, [ 2, 4, 5 ]), 
              e.identical(n, [ 4, 5, 1, 2, 3 ]), e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayPrependArrayOnce(n, [ 1 ]), 
              e.identical(n, [ 1, 1, 1 ]), e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], 
              r = a.arrayPrependArrayOnce(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, [ "a", [ {
                a: 1
              } ], {
                b: 2
              }, 1 ]), e.is(r === n), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnce(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependArrayOnce(n, [ void 0, 2 ]);
              }), e.identical(n, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayPrependArrayOnceStrictly: function arrayPrependArrayOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArrayOnceStrictly(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArrayOnceStrictly([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayPrependArrayOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.is(r === n), n = [ 1, 2, 3 ], r = a.arrayPrependArrayOnceStrictly(n, [ 4, 5 ]), 
              e.identical(n, [ 4, 5, 1, 2, 3 ]), e.is(r === n), n = [ 1, 2, 3, 1, 2, 3 ], r = a.arrayPrependArrayOnceStrictly(n, [ 4, 5 ]), 
              e.identical(n, [ 4, 5, 1, 2, 3, 1, 2, 3 ]), e.is(r === n), e.case = "argument is undefined", 
              n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependArrayOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly([ 1, 2 ], 2);
              }), e.case = "one of elements is not unique", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly(n, [ 4, 5, 2 ]);
              }), e.identical(n, [ 4, 5, 1, 2, 3 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArrayOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]);
            }
            //
            ,
            arrayPrependedArray: function arrayPrependedArray(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArray(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArray(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayPrependedArray(r, [ 2, 4, 5 ]), e.identical(r, [ 2, 4, 5, 1, 2, 3 ]), 
              e.identical(n, 3), r = [ 1, 1, 1 ], n = a.arrayPrependedArray(r, [ 1 ]), e.identical(r, [ 1, 1, 1, 1 ]), 
              e.identical(n, 1), e.case = "mixed arguments types", r = [ 1 ], n = a.arrayPrependedArray(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              }, 1 ]), e.identical(n, 4), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArray(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependedArray(r, [ void 0, 2 ]);
              }), e.identical(r, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArray([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayPrependedArrayOnce: function arrayPrependedArrayOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArrayOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArrayOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayPrependedArrayOnce(r, [ 2, 4, 5 ]), e.identical(r, [ 4, 5, 1, 2, 3 ]), 
              e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayPrependedArrayOnce(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), 
              e.identical(n, 0), e.case = "mixed arguments types", r = [ 1 ], n = a.arrayPrependedArrayOnce(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", [ {
                a: 1
              } ], {
                b: 2
              }, 1 ]), e.identical(n, 3), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnce(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependedArrayOnce(r, [ void 0, 2 ]);
              }), e.identical(r, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayPrependedArrayOnceStrictly: function arrayPrependedArrayOnceStrictly(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArrayOnceStrictly(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArrayOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only if all elements are unique", 
              r = [ 1, 2, 3 ], n = a.arrayPrependedArrayOnceStrictly(r, [ 3.5, 4, 5 ]), e.identical(r, [ 3.5, 4, 5, 1, 2, 3 ]), 
              e.identical(n, 3), r = [ 1, 1, 1 ], n = a.arrayPrependedArrayOnceStrictly(r, [ 0 ]), 
              e.identical(r, [ 0, 1, 1, 1 ]), e.identical(n, 1), e.case = "mixed arguments types", 
              r = [ 1 ], n = a.arrayPrependedArrayOnceStrictly(r, [ "a", 0, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", 0, [ {
                a: 1
              } ], {
                b: 2
              }, 1 ]), e.identical(n, 4), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependedArrayOnceStrictly(r, [ void 0, 2 ]);
              }), e.identical(r, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly([ 1, 2 ], 2);
              }), e.case = "One of args is not unique", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly([ 1, 1, 1 ], [ 1 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrayOnceStrictly([ 1, 2, 3 ], [ 2, 4, 5 ]);
              });
            }
            // --
            //arrayPrependElement*Arrays*
            // --
            ,
            arrayPrependArrays: function arrayPrependArrays(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArrays(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArrays([], []), e.identical(r, []), 
              e.case = "simple";
              var n = [];
              r = a.arrayPrependArrays(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayPrependArrays(n, [ 4, 5 ]), e.identical(n, [ 4, 5, 1, 2, 3 ]), 
              e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayPrependArrays(n, [ 1, 1 ]), e.identical(n, [ 1, 1, 1, 1, 1 ]), 
              e.is(r === n), n = [];
              var t = [ [ 1 ], [ 2 ], [ 3, [ 4 ] ] ];
              r = a.arrayPrependArrays(n, t), e.identical(n, [ 1, 2, 3, [ 4 ] ]), e.is(r === n), 
              n = [], t = [ 1, 2, 3 ], r = a.arrayPrependArrays(n, t), e.identical(n, [ 1, 2, 3 ]), 
              e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], t = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ], r = a.arrayPrependArrays(n, t), e.identical(n, [ "a", 1, {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.is(r === n), e.case = "array has undefined", n = [ 1 ], r = a.arrayPrependArrays(n, [ void 0, 2 ]), 
              e.identical(n, [ void 0, 2, 1 ]), e.is(r === n), e.case = "argument is undefined", 
              n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArrays(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrays();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrays(1, [ 2 ]);
              }), e.case = "second arg is no a ArrayLike", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrays([], 2);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependArrays([], [ 1 ], [ 2 ]);
              });
            }
            //
            ,
            arrayPrependArraysOnce: function arrayPrependArraysOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArraysOnce(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArraysOnce([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayPrependArraysOnce(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              e.case = "should keep sequence", n = [ 6 ];
              var t = [ [ 1, 2 ], 3, [ 6, 4, 5, 1, 2, 3 ] ];
              r = a.arrayPrependArraysOnce(n, t), e.identical(n, [ 1, 2, 3, 4, 5, 6 ]), e.identical(t, [ [ 1, 2 ], 3, [ 6, 4, 5, 1, 2, 3 ] ]), 
              e.is(r === n), e.case = "prepends only unique elements", n = [ 1, 2, 3 ], r = a.arrayPrependArraysOnce(n, [ 2, 4, 5 ]), 
              e.identical(n, [ 4, 5, 1, 2, 3 ]), e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayPrependArraysOnce(n, [ 1 ]), 
              e.identical(n, [ 1, 1, 1 ]), e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], 
              r = a.arrayPrependArraysOnce(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, [ "a", {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.is(r === n), n = [ 1, 2, 3, 4 ], r = a.arrayPrependArraysOnce(n, [ [ 1 ], [ 2 ], [ 3, [ 4 ], 5 ] ]), 
              e.identical(n, [ [ 4 ], 5, 1, 2, 3, 4 ]), e.is(r === n), n = [ 1, 3 ], r = a.arrayPrependArraysOnce(n, [ 1, 2, 3 ]), 
              e.identical(r, [ 2, 1, 3 ]), e.identical(n, r), e.case = "onEqualize", n = [ 1, 3 ], 
              r = a.arrayPrependArraysOnce(n, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 2, 1, 3 ]), e.identical(n, r), e.case = "argument is undefined", 
              n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnce(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependArraysOnce(n, [ void 0, 2 ]);
              }), e.identical(n, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnce();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnce(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnce([], [ 1, 2, 3 ], {});
              }), e.case = "second arg is no a ArrayLike", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnce([], 2);
              });
            }
            //
            ,
            arrayPrependArraysOnceStrictly: function arrayPrependArraysOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayPrependArraysOnceStrictly(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayPrependArraysOnceStrictly([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayPrependArraysOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.is(r === n), e.case = "should keep sequence", n = [ 6 ];
              var t = [ [ 1, 2 ], 3, [ 4, 5 ] ];
              r = a.arrayPrependArraysOnceStrictly(n, t), e.identical(n, [ 1, 2, 3, 4, 5, 6 ]), 
              e.identical(t, [ [ 1, 2 ], 3, [ 4, 5 ] ]), e.is(r === n), e.case = "mixed arguments types", 
              n = [ 1 ];
              var i = [ [ "a" ], [ {
                a: 1
              } ], {
                b: 2
              } ];
              r = a.arrayPrependArraysOnceStrictly(n, i), e.identical(n, [ "a", {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.is(r === n), n = [ 0 ], i = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ], r = a.arrayPrependArraysOnceStrictly(n, i), 
              e.identical(n, [ 1, 2, 3, [ 4, [ 5 ] ], 0 ]), e.is(r === n), e.case = "onEqualize", 
              n = [ 4, 5 ], r = a.arrayPrependArraysOnceStrictly(n, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5 ]), e.identical(n, r), e.case = "array has undefined", 
              n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependArraysOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly([], [ 1, 2, 3 ], {});
              }), e.case = "Same element in insArray and in dstArray", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly(n, [ 4, 2, 5 ]);
              }), e.identical(n, [ 4, 5, 1, 2, 3 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "second arg is no a ArrayLike", e.shouldThrowErrorSync(function() {
                a.arrayPrependArraysOnceStrictly([], 2);
              });
            }
            //
            ,
            arrayPrependedArrays: function arrayPrependedArrays(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArrays(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArrays(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [ 1, 2, 3 ], n = a.arrayPrependedArrays(r, [ 4, 5 ]), 
              e.identical(r, [ 4, 5, 1, 2, 3 ]), e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayPrependedArrays(r, [ 1, 1 ]), 
              e.identical(r, [ 1, 1, 1, 1, 1 ]), e.identical(n, 2), r = [], n = a.arrayPrependedArrays(r, [ [ 1 ], [ 2 ], [ 3, [ 4 ], 5 ] ]), 
              e.identical(r, [ 1, 2, 3, [ 4 ], 5 ]), e.identical(n, 5), r = [], n = a.arrayPrependedArrays(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "mixed arguments types", 
              r = [ 1 ], n = a.arrayPrependedArrays(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", 1, {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.identical(n, 4), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrays(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], n = a.arrayPrependedArrays(r, [ void 0, 2 ]), 
              e.identical(r, [ void 0, 2, 1 ]), e.identical(n, 2), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrays();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrays(1, [ 2 ]);
              }), e.case = "second arg is no a ArrayLike", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrays([], 2);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArrays([], [ 1 ], [ 2 ]);
              });
            }
            //
            ,
            arrayPrependedArraysOnce: function arrayPrependedArraysOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArraysOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "simple", r = [], n = a.arrayPrependedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "should keep sequence", 
              r = [ 6 ];
              var t = [ [ 1, 2 ], 3, [ 6, 4, 5, 1, 2, 3 ] ];
              n = a.arrayPrependedArraysOnce(r, t), e.identical(r, [ 1, 2, 3, 4, 5, 6 ]), e.identical(t, [ [ 1, 2 ], 3, [ 6, 4, 5, 1, 2, 3 ] ]), 
              e.identical(n, 5), e.case = "prepends only unique elements", r = [ 1, 2, 3 ], n = a.arrayPrependedArraysOnce(r, [ 2, 4, 5 ]), 
              e.identical(r, [ 4, 5, 1, 2, 3 ]), e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayPrependedArraysOnce(r, [ 1 ]), 
              e.identical(r, [ 1, 1, 1 ]), e.identical(n, 0), e.case = "mixed arguments types", 
              r = [ 1 ], n = a.arrayPrependedArraysOnce(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.identical(n, 3), r = [];
              var i = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ];
              n = a.arrayPrependedArraysOnce(r, i), e.identical(r, [ 1, 2, 3, [ 4, [ 5 ] ] ]), 
              e.identical(n, 4), r = [ 1, 3 ], n = a.arrayPrependedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 2, 1, 3 ]), e.identical(n, 1), e.case = "onEqualize", r = [ 1, 3 ], 
              i = [ 1, 2, 3 ], n = a.arrayPrependedArraysOnce(r, i, function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 2, 1, 3 ]), e.identical(n, 1), e.case = "argument is undefined", 
              r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnce(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependedArraysOnce(r, [ void 0, 2 ]);
              }), e.identical(r, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnce();
              }), 
              // test.case = 'dst is not a array';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayPrependedArraysOnce( 1, [ 2 ] );
              // });
              e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnce([], [ 1, 2, 3 ], []);
              }), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnce([ 1 ], 2);
              });
            }
            //
            ,
            arrayPrependedArraysOnceStrictly: function arrayPrependedArraysOnceStrictly(e) {
              e.case = "nothing";
              var r = [], n = a.arrayPrependedArraysOnceStrictly(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayPrependedArraysOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "simple", r = [], n = a.arrayPrependedArraysOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayPrependedArraysOnceStrictly(r, [ 4, 5, 6 ]), e.identical(r, [ 4, 5, 6, 1, 2, 3 ]), 
              e.identical(n, 3), r = [ 0, 0, 0 ], n = a.arrayPrependedArraysOnceStrictly(r, [ 1 ]), 
              e.identical(r, [ 1, 0, 0, 0 ]), e.identical(n, 1), e.case = "mixed arguments types", 
              r = [ 1 ], n = a.arrayPrependedArraysOnceStrictly(r, [ "a", 0, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ "a", 0, {
                a: 1
              }, {
                b: 2
              }, 1 ]), e.identical(n, 4), r = [];
              var t = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ] ] ];
              n = a.arrayPrependedArraysOnceStrictly(r, t), e.identical(r, [ 1, 2, 3, [ 4, [ 5 ] ] ]), 
              e.identical(n, 4), r = [ "1", "3" ], n = a.arrayPrependedArraysOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3, "1", "3" ]), e.identical(n, 3), e.case = "onEqualize", 
              r = [ 1, 3 ], t = [ 0, 2, 4 ], n = a.arrayPrependedArraysOnceStrictly(r, t, function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 0, 2, 4, 1, 3 ]), e.identical(n, 3), e.case = "argument is undefined", 
              r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayPrependedArraysOnceStrictly(r, [ void 0, 2 ]);
              }), e.identical(r, [ void 0, 2, 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly();
              }), 
              // test.case = 'dst is not a array';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayPrependedArraysOnceStrictly( 1, [ 2 ] );
              // }); sfkldb fiubds lkfbds gbkdsfb gkldsfg fdsbfkldsfbdsl gbjs,fn kgn d
              e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly([], [ 1, 2, 3 ], []);
              }), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly([ 1 ], 2);
              }), e.case = "Elements must be unique", e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly([ 1, 1, 1 ], [ [ 1 ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly([ 1, 2, 3 ], [ [ 4, 5 ], 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayPrependedArraysOnceStrictly([ 6 ], [ [ 1, 2 ], 3, [ 6, 4, 5, 1, 2, 3 ] ]);
              });
            }
            //
            ,
            // array append
            arrayAppend: function arrayAppend(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppend(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple", r = a.arrayAppend([], 1), e.identical(r, [ 1 ]), 
              r = a.arrayAppend([ 1 ], 1), e.identical(r, [ 1, 1 ]), r = a.arrayAppend([ 1 ], 2), 
              e.identical(r, [ 1, 2 ]), r = a.arrayAppend([ 1, 2, 3 ], 3), e.identical(r, [ 1, 2, 3, 3 ]), 
              r = a.arrayAppend([ 1 ], "1"), e.identical(r, [ 1, "1" ]), r = a.arrayAppend([ 1 ], -1), 
              e.identical(r, [ 1, -1 ]), r = a.arrayAppend([ 1 ], [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppend();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppend([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppend(1, 1);
              });
            }
            //
            ,
            arrayAppendOnce: function arrayAppendOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendOnce(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple", r = a.arrayAppendOnce([], 1), e.identical(r, [ 1 ]), 
              r = a.arrayAppendOnce([ 1 ], 1), e.identical(r, [ 1 ]), r = a.arrayAppendOnce([ 1 ], 2), 
              e.identical(r, [ 1, 2 ]), r = a.arrayAppendOnce([ 1, 2, 3 ], 3), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayAppendOnce([ 1 ], "1"), e.identical(r, [ 1, "1" ]), r = a.arrayAppendOnce([ 1 ], -1), 
              e.identical(r, [ 1, -1 ]), r = a.arrayAppendOnce([ 1 ], [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "equalizer 2 args";
              var n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayAppendOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayAppendOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayAppendOnce(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayAppendOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayAppendOnceStrictly: function arrayAppendOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendOnceStrictly(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayAppendOnceStrictly(n, 1), e.identical(r, [ 1 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayAppendOnceStrictly(n, 2), e.identical(r, [ 1, 2 ]), e.is(r === n), n = [ 1 ], 
              r = a.arrayAppendOnceStrictly(n, "1"), e.identical(r, [ 1, "1" ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayAppendOnceStrictly(n, -1), e.identical(r, [ 1, -1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayAppendOnceStrictly(n, [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayAppendOnceStrictly(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayAppendOnceStrictly(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayAppendOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendOnceStrictly([ 1, 2, 3 ], 3);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayAppendOnceStrictly( [ 1,2,3 ], 3, 3 );
              // });
              e.shouldThrowErrorSync(function() {
                a.arrayAppendOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayAppended: function arrayAppended(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppended(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayAppended(r, 1), 
              e.identical(r, [ 1, 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppended(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayAppended(r, 3), 
              e.identical(r, [ 1, 2, 3, 3 ]), e.identical(n, 3), r = [ 1 ], n = a.arrayAppended(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppended(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppended(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, 1), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppended();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppended([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppended(1, 1);
              });
            }
            //
            ,
            arrayAppendedOnce: function arrayAppendedOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppendedOnce(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayAppendedOnce(r, 1), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayAppendedOnce(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayAppendedOnce(r, 3), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayAppendedOnce(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedOnce(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedOnce(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, 1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayAppendedOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.identical(n, 3), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayAppendedOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayAppendedOnce(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.identical(n, 3), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayAppendedOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnce();
              }), e.case = "third is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayAppendedOnceStrictly: function arrayAppendedOnceStrictly(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppendedOnceStrictly(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayAppendedOnceStrictly(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedOnceStrictly(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedOnceStrictly(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedOnceStrictly(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, 1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayAppendedOnceStrictly(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.identical(n, 3), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayAppendedOnceStrictly(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.identical(n, 3), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly();
              }), e.case = "third is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly(1, 1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly([ 1, 2, 3 ], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayAppendElement: function arrayAppendElement(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendElement(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple", r = a.arrayAppendElement([], 1), e.identical(r, [ 1 ]), 
              r = a.arrayAppendElement([ 1 ], 1), e.identical(r, [ 1, 1 ]), r = a.arrayAppendElement([ 1 ], 2), 
              e.identical(r, [ 1, 2 ]), r = a.arrayAppendElement([ 1, 2, 3 ], 3), e.identical(r, [ 1, 2, 3, 3 ]), 
              r = a.arrayAppendElement([ 1 ], "1"), e.identical(r, [ 1, "1" ]), r = a.arrayAppendElement([ 1 ], -1), 
              e.identical(r, [ 1, -1 ]), r = a.arrayAppendElement([ 1 ], [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendElement();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendElement([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendElement(1, 1);
              });
            }
            //
            ,
            arrayAppendElementOnce: function arrayAppendElementOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendElementOnce(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple", r = a.arrayAppendElementOnce([], 1), e.identical(r, [ 1 ]), 
              r = a.arrayAppendElementOnce([ 1 ], 1), e.identical(r, [ 1 ]), r = a.arrayAppendElementOnce([ 1 ], 2), 
              e.identical(r, [ 1, 2 ]), r = a.arrayAppendElementOnce([ 1, 2, 3 ], 3), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayAppendElementOnce([ 1 ], "1"), e.identical(r, [ 1, "1" ]), r = a.arrayAppendElementOnce([ 1 ], -1), 
              e.identical(r, [ 1, -1 ]), r = a.arrayAppendElementOnce([ 1 ], [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "equalizer 2 args";
              var n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayAppendElementOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayAppendElementOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayAppendElementOnce(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayAppendElementOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayAppendElementOnceStrictly: function arrayAppendElementOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendElementOnceStrictly(null, 1);
              e.identical(r, [ 1 ]), e.case = "simple";
              var n = [];
              r = a.arrayAppendElementOnceStrictly(n, 1), e.identical(r, [ 1 ]), e.is(r === n), 
              n = [ 1 ], r = a.arrayAppendElementOnceStrictly(n, 2), e.identical(r, [ 1, 2 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayAppendElementOnceStrictly(n, "1"), e.identical(r, [ 1, "1" ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayAppendElementOnceStrictly(n, -1), e.identical(r, [ 1, -1 ]), 
              e.is(r === n), n = [ 1 ], r = a.arrayAppendElementOnceStrictly(n, [ 1 ]), e.identical(r, [ 1, [ 1 ] ]), 
              e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayAppendElementOnceStrictly(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayAppendElementOnceStrictly(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.is(r === n), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnceStrictly(1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnceStrictly([ 1, 2, 3 ], 3);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayAppendOnceStrictly( [ 1,2,3 ], 3, 3 );
              // });
              e.shouldThrowErrorSync(function() {
                a.arrayAppendElementOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            //
            ,
            arrayAppendedElement: function arrayAppendedElement(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppendedElement(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayAppendedElement(r, 1), 
              e.identical(r, [ 1, 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedElement(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayAppendedElement(r, 3), 
              e.identical(r, [ 1, 2, 3, 3 ]), e.identical(n, 3), r = [ 1 ], n = a.arrayAppendedElement(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedElement(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedElement(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, 1), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElement();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElement([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElement(1, 1);
              });
            }
            //
            ,
            arrayAppendedElementOnce: function arrayAppendedElementOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppendedElementOnce(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedElementOnce(r, 1), 
              e.identical(r, [ 1 ]), e.identical(n, !1), r = [ 1 ], n = a.arrayAppendedElementOnce(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayAppendedElementOnce(r, 3), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, !1), r = [ 1 ], n = a.arrayAppendedElementOnce(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, "1"), r = [ 1 ], n = a.arrayAppendedElementOnce(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayAppendedElementOnce(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, [ 1 ]), r = [ 0, 1, 2 ], n = a.arrayAppendedElementOnce(r, NaN), 
              e.identical(r, [ 0, 1, 2, NaN ]), e.identical(n, NaN), e.case = "equalizer 2 args", 
              r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayAppendedElementOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.identical(n, {
                num: 4
              }), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayAppendedElementOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, !1), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayAppendedElementOnce(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.identical(n, 4), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayAppendedElementOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, !1), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnce();
              }), e.case = "third is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayAppendedElementOnceStrictly: function arrayAppendedElementOnceStrictly(e) {
              e.case = "simple";
              var r = [], n = a.arrayAppendedElementOnceStrictly(r, 1);
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayAppendedElementOnceStrictly(r, 2), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 2), r = [ 1 ], n = a.arrayAppendedElementOnceStrictly(r, "1"), 
              e.identical(r, [ 1, "1" ]), e.identical(n, "1"), r = [ 1 ], n = a.arrayAppendedElementOnceStrictly(r, -1), 
              e.identical(r, [ 1, -1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayAppendedElementOnceStrictly(r, [ 1 ]), 
              e.identical(r, [ 1, [ 1 ] ]), e.identical(n, [ 1 ]), e.case = "equalizer 2 args", 
              r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayAppendedElementOnceStrictly(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, {
                num: 4
              } ]), e.identical(n, {
                num: 4
              }), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayAppendedElementOnceStrictly(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              }, 4 ]), e.identical(n, 4), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedOnceStrictly([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly(1, 1, 1);
              }), e.case = "ins already exists in dst", e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly([ 1 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly([ 1, 2, 3 ], 3);
              }), e.shouldThrowErrorSync(function() {
                a.arrayAppendedElementOnceStrictly([ {
                  num: 1
                }, {
                  num: 2
                }, {
                  num: 3
                } ], {
                  num: 1
                }, function(e, a) {
                  return e.num === a.num;
                });
              });
            }
            // //
            //
            // function arrayAppendArray( test )
            // {
            //
            //   test.case = 'nothing';
            //   var got = _.arrayAppendArray( [  ] );
            //   var expected = [  ];
            //   test.identical( got, expected );
            //
            //   test.case = 'an argument';
            //   var got = _.arrayAppendArray( [ 1, 2, undefined ] );
            //   var expected = [ 1, 2, undefined ];
            //   test.identical( got, expected );
            //
            //   test.case = 'an array';
            //   var got = _.arrayAppendArray( [ 1, 2 ], 'str', false, { a : 1 }, 42, [ 3, 7, 13 ] );
            //   var expected = [ 1, 2, 'str', false, { a : 1 }, 42, 3, 7, 13 ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayAppendArray();
            //   });
            //
            //   test.case = 'arguments[0] is wrong, has to be an array';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayAppendArray( 'wrong argument', 'str', false, { a : 1 }, 42, [ 3, 7, 13 ] );
            //   });
            //
            //   test.case = 'arguments[1] is undefined';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayAppendArray( [ 1, 2 ], undefined, false, { a : 1 }, 42, [ 3, 7, 13 ] );
            //   });
            //
            // };
            //
            ,
            arrayAppendArray: function arrayAppendArray(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendArray(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayAppendArray([], []), e.identical(r, []), 
              e.case = "simple";
              var n = [];
              r = a.arrayAppendArray(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayAppendArray(n, [ 4, 5 ]), e.identical(n, [ 1, 2, 3, 4, 5 ]), 
              e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayAppendArray(n, [ 1, 1 ]), e.identical(n, [ 1, 1, 1, 1, 1 ]), 
              e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], r = a.arrayAppendArray(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, [ 1, "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.is(r === n), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArray(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], r = a.arrayAppendArray(n, [ void 0, 2 ]), 
              e.identical(n, [ 1, void 0, 2 ]), e.is(r === n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendArray([ 1, 2 ], 2);
              });
            },
            arrayAppendArrayOnce: 
            //
            function arrayAppendArrayOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendArrayOnce(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayAppendArrayOnce([], []), e.identical(r, []), 
              e.case = "simple";
              var n = [];
              r = a.arrayAppendArrayOnce(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              e.case = "appends only unique elements", n = [ 1, 2, 3 ], r = a.arrayAppendArrayOnce(n, [ 2, 4, 5 ]), 
              e.identical(n, [ 1, 2, 3, 4, 5 ]), e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayAppendArrayOnce(n, [ 1 ]), 
              e.identical(n, [ 1, 1, 1 ]), e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], 
              r = a.arrayAppendArrayOnce(n, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, [ 1, "a", [ {
                a: 1
              } ], {
                b: 2
              } ]), e.is(r === n), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnce(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendArrayOnce(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayAppendArrayOnceStrictly: function arrayAppendArrayOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendArrayOnceStrictly(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayAppendArrayOnceStrictly([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayAppendArrayOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.is(r === n), n = [ 1, 2, 3 ], r = a.arrayAppendArrayOnceStrictly(n, [ 4, 5 ]), 
              e.identical(n, [ 1, 2, 3, 4, 5 ]), e.is(r === n), e.case = "argument is undefined", 
              n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendArrayOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly([ 1, 2 ], 2);
              }), e.case = "one of elements is not unique", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly(n, [ 4, 5, 2 ]);
              }), e.identical(n, [ 1, 2, 3, 4, 5 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArrayOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]);
            }
            //
            ,
            arrayAppendedArray: function arrayAppendedArray(e) {
              e.case = "nothing";
              var r = [], n = a.arrayAppendedArray(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayAppendedArray(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayAppendedArray(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 2, 3, 2, 4, 5 ]), 
              e.identical(n, 3), r = [ 1, 1, 1 ], n = a.arrayAppendedArray(r, [ 1 ]), e.identical(r, [ 1, 1, 1, 1 ]), 
              e.identical(n, 1), e.case = "mixed arguments types", r = [ 1 ], n = a.arrayAppendedArray(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ 1, "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, 4), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArray(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendedArray(r, [ void 0, 2 ]);
              }), e.identical(r, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArray([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayAppendedArrayOnce: function arrayAppendedArrayOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayAppendedArrayOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayAppendedArrayOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayAppendedArrayOnce(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 2, 3, 4, 5 ]), 
              e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayAppendedArrayOnce(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), 
              e.identical(n, 0), e.case = "mixed arguments types", r = [ 1 ], n = a.arrayAppendedArrayOnce(r, [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(r, [ 1, "a", [ {
                a: 1
              } ], {
                b: 2
              } ]), e.identical(n, 3), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendedArrayOnce(r, [ void 0, 2 ]);
              }), e.identical(r, [ 1, void 0, 2 ]), e.case = "argument is undefined", r = [ 1 ], 
              e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayAppendedArrayOnceWithSelector: function arrayAppendedArrayOnceWithSelector(e) {
              e.case = "nothing, single equalizer";
              var r = [], n = a.arrayAppendedArrayOnce(r, [], e => e.a);
              e.identical(r, []), e.identical(n, 0), e.case = "simple, single equalizer", r = [], 
              n = a.arrayAppendedArrayOnce(r, [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              } ]), e.identical(n, 3), e.case = "prepends only unique elements, single equalizer", 
              r = [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                a: 2
              }, {
                a: 3
              }, {
                a: 4
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              }, {
                a: 4
              } ]), e.identical(n, 1), r = [ {
                a: 1
              }, {
                a: 1
              }, {
                a: 1
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                a: 1
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: 1
              }, {
                a: 1
              } ]), e.identical(n, 0), e.case = "mixed arguments types, single equalizer", r = [ {
                a: 1
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                a: "a"
              }, {
                a: 1
              }, {
                a: [ {
                  y: 2
                } ]
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: "a"
              }, {
                a: [ {
                  y: 2
                } ]
              } ]), e.identical(n, 2), e.case = "array has undefined, single equalizer", r = [ {
                a: 1
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                a: void 0
              }, {
                a: 2
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: void 0
              }, {
                a: 2
              } ]), e.identical(n, 2), r = [ {
                a: 1
              }, {
                a: void 0
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                a: void 0
              }, {
                a: 2
              } ], e => e.a), e.identical(r, [ {
                a: 1
              }, {
                a: void 0
              }, {
                a: 2
              } ]), e.identical(n, 1), 
              /* */
              e.case = "nothing, two equalizers", r = [], n = a.arrayAppendedArrayOnce(r, [], e => e.a, e => e.b), 
              e.identical(r, []), e.identical(n, 0), e.case = "simple, two equalizers", r = [], 
              n = a.arrayAppendedArrayOnce(r, [ {
                b: 1
              }, {
                b: 2
              }, {
                b: 3
              } ], e => e.a, e => e.b), e.identical(r, [ {
                b: 1
              }, {
                b: 2
              }, {
                b: 3
              } ]), e.identical(n, 3), e.case = "prepends only unique elements, two equalizers", 
              r = [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                b: 2
              }, {
                b: 3
              }, {
                b: 4
              } ], e => e.a, e => e.b), e.identical(r, [ {
                a: 1
              }, {
                a: 2
              }, {
                a: 3
              }, {
                b: 4
              } ]), e.identical(n, 1), r = [ {
                a: 1
              }, {
                a: 1
              }, {
                a: 1
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                b: 1
              } ], e => e.a, e => e.b), e.identical(r, [ {
                a: 1
              }, {
                a: 1
              }, {
                a: 1
              } ]), e.identical(n, 0), e.case = "mixed arguments types, two equalizers", r = [ {
                a: 1
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                b: "a"
              }, {
                b: 1
              }, {
                b: [ {
                  y: 2
                } ]
              } ], e => e.a, e => e.b), e.identical(r, [ {
                a: 1
              }, {
                b: "a"
              }, {
                b: [ {
                  y: 2
                } ]
              } ]), e.identical(n, 2), e.case = "array has undefined, two equalizers", r = [ {
                a: 1
              } ], e.mustNotThrowError(function() {
                a.arrayAppendedArrayOnce(r, [ {
                  b: void 0
                }, {
                  b: 2
                } ], e => e.a, e => e.b);
              }), e.identical(r, [ {
                a: 1
              }, {
                b: void 0
              }, {
                b: 2
              } ]), e.identical(n, 2), r = [ {
                a: 1
              }, {
                a: void 0
              } ], n = a.arrayAppendedArrayOnce(r, [ {
                b: void 0
              }, {
                b: 2
              } ], e => e.a, e => e.b), e.identical(r, [ {
                a: 1
              }, {
                b: void 0
              }, {
                b: 2
              } ]), e.identical(n, 1), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce(r, void 0, e => e.a);
              }), e.identical(r, [ 1 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnce([ 1, 2 ], 2, e => e.a);
              });
            }
            //
            ,
            arrayAppendedArrayOnceStrictly: function arrayAppendedArrayOnceStrictly(e) {
              e.case = "nothing";
              var r = a.arrayAppendedArrayOnceStrictly([], []);
              e.identical(r, 0), e.case = "simple";
              var n = [];
              r = a.arrayAppendedArrayOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.identical(r, 3), n = [ 1, 2, 3 ], r = a.arrayAppendedArrayOnceStrictly(n, [ 4, 5 ]), 
              e.identical(n, [ 1, 2, 3, 4, 5 ]), e.identical(r, 2), e.case = "argument is undefined", 
              n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendedArrayOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly([ 1, 2 ], 2);
              }), e.case = "one of elements is not unique", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly(n, [ 4, 5, 2 ]);
              }), e.identical(n, [ 1, 2, 3, 4, 5 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrayOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]);
            }
            //
            ,
            arrayAppendArrays: function arrayAppendArrays(e) {
              e.case = "dstArray is null, src is scalar";
              var r = a.arrayAppendArrays(null, 1);
              e.identical(r, [ 1 ]), e.case = "dstArray is null, src is array", r = a.arrayAppendArrays(null, [ 1 ]), 
              e.identical(r, [ 1 ]), 
              // test.case = 'dstArray is undefined, src is scalar';
              // var got = _.arrayAppendArrays( undefined, 1 );
              // test.identical( got, 1 );
              //
              // test.case = 'dstArray is undefined, src is array';
              // let src = [ 1 ];
              // var got = _.arrayAppendArrays( undefined, src );
              // test.identical( got, [ 1 ] );
              // test.is( src === got );
              e.case = "nothing", r = a.arrayAppendArrays([], []), e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayAppendArrays(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayAppendArrays(n, [ 4, 5 ]), e.identical(n, [ 1, 2, 3, 4, 5 ]), 
              e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayAppendArrays(n, [ 1, 1 ]), e.identical(n, [ 1, 1, 1, 1, 1 ]), 
              e.is(r === n), n = [ 1, 2, 3 ];
              var t = [ [ 1 ], [ 2 ], [ 3, [ 5 ] ] ];
              r = a.arrayAppendArrays(n, t), e.identical(n, [ 1, 2, 3, 1, 2, 3, [ 5 ] ]), e.is(r === n), 
              e.case = "arguments are not arrays", n = [], r = a.arrayAppendArrays(n, [ 1, 2, 3 ]), 
              e.identical(n, [ 1, 2, 3 ]), e.is(r === n), e.case = "mixed arguments types", n = [ 1 ], 
              t = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ], r = a.arrayAppendArrays(n, t), e.identical(n, [ 1, "a", 1, {
                a: 1
              }, {
                b: 2
              } ]), e.is(r === n), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArrays(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "array has undefined", n = [ 1 ], r = a.arrayAppendArrays(n, [ void 0, 2 ]), 
              e.identical(n, [ 1, void 0, 2 ]), e.is(r === n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrays();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrays(1, [ 2 ]);
              }), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrays([], void 0);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendArrays([], [ 1 ], [ 2 ]);
              });
            },
            arrayAppendArraysOnce: 
            //
            function arrayAppendArraysOnce(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendArraysOnce(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayAppendArraysOnce([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayAppendArraysOnce(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              e.case = "prepends only unique elements", n = [ 1, 2, 3 ], r = a.arrayAppendArraysOnce(n, [ 2, 4, 5 ]), 
              e.identical(n, [ 1, 2, 3, 4, 5 ]), e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayAppendArraysOnce(n, [ 1 ]), 
              e.identical(n, [ 1, 1, 1 ]), e.is(r === n), e.case = "mixed arguments types", n = [ 1 ];
              var t = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ];
              r = a.arrayAppendArraysOnce(n, t), e.identical(n, [ 1, "a", {
                a: 1
              }, {
                b: 2
              } ]), e.is(r === n), n = [ 1, 2, 3, 5 ], t = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ], 
              r = a.arrayAppendArraysOnce(n, t), e.identical(n, [ 1, 2, 3, 5, [ 4, [ 5 ] ], 6 ]), 
              e.is(r === n), n = [ 1, 3 ], r = a.arrayAppendArraysOnce(n, [ 1, 2, 3 ]), e.identical(r, [ 1, 3, 2 ]), 
              e.identical(n, r), e.case = "onEqualize", n = [ 1, 3 ], r = a.arrayAppendArraysOnce(n, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 3, 2 ]), e.identical(n, r), e.case = "array has undefined", 
              n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendArraysOnce(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnce();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnce(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnce([], [ 1, 2, 3 ], []);
              }), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnce(n, void 0);
              }), e.identical(n, [ 1 ]);
            }
            //
            ,
            arrayAppendArraysOnceStrictly: function arrayAppendArraysOnceStrictly(e) {
              e.case = "dstArray is null";
              var r = a.arrayAppendArraysOnceStrictly(null, [ 1 ]);
              e.identical(r, [ 1 ]), e.case = "nothing", r = a.arrayAppendArraysOnceStrictly([], []), 
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayAppendArraysOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.is(r === n), e.case = "mixed arguments types", n = [ 1 ];
              var t = [ [ "a" ], [ {
                a: 1
              } ], {
                b: 2
              } ];
              r = a.arrayAppendArraysOnceStrictly(n, t), e.identical(n, [ 1, "a", {
                a: 1
              }, {
                b: 2
              } ]), e.is(r === n), n = [ 0 ], t = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ], r = a.arrayAppendArraysOnceStrictly(n, t), 
              e.identical(n, [ 0, 1, 2, 3, [ 4, [ 5 ] ], 6 ]), e.is(r === n), e.case = "onEqualize", 
              n = [ 4, 5 ], r = a.arrayAppendArraysOnceStrictly(n, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 4, 5, 1, 2, 3 ]), e.identical(n, r), e.case = "ins has existing element", 
              e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendArraysOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly([], [ 1, 2, 3 ], []);
              }), e.case = "One of ins elements is not unique", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly(n, [ 4, 2, 5 ]);
              }), e.identical(n, [ 1, 2, 3, 4, 5 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayAppendArraysOnceStrictly([], 1);
              });
            }
            //
            ,
            arrayAppendedArrays: function arrayAppendedArrays(e) {
              e.case = "nothing";
              var r = [], n = a.arrayAppendedArrays(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayAppendedArrays(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [ 1, 2, 3 ], n = a.arrayAppendedArrays(r, [ 4, 5 ]), 
              e.identical(r, [ 1, 2, 3, 4, 5 ]), e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayAppendedArrays(r, [ 1, 1 ]), 
              e.identical(r, [ 1, 1, 1, 1, 1 ]), e.identical(n, 2), r = [ 1, 2, 3 ];
              var t = [ [ 1 ], [ 2 ], [ 3, [ 4, 5 ], 6 ] ];
              n = a.arrayAppendedArrays(r, t), e.identical(r, [ 1, 2, 3, 1, 2, 3, [ 4, 5 ], 6 ]), 
              e.identical(n, 5), e.case = "arguments are not arrays", r = [], n = a.arrayAppendedArrays(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "mixed arguments types", 
              r = [ 1 ], t = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ], n = a.arrayAppendedArrays(r, t), e.identical(r, [ 1, "a", 1, {
                a: 1
              }, {
                b: 2
              } ]), e.identical(n, 4), e.case = "array has undefined", r = [ 1 ], n = a.arrayAppendedArrays(r, [ void 0, 2 ]), 
              e.identical(r, [ 1, void 0, 2 ]), e.identical(n, 2), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrays();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrays(1, [ 2 ]);
              }), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrays(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrays([], void 0);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArrays([], [ 1 ], [ 2 ]);
              });
            }
            //
            ,
            arrayAppendedArraysOnce: function arrayAppendedArraysOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayAppendedArraysOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayAppendedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayAppendedArraysOnce(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 2, 3, 4, 5 ]), 
              e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayAppendedArraysOnce(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), 
              e.identical(n, 0), e.case = "mixed arguments types", r = [ 1 ];
              var t = [ "a", 1, [ {
                a: 1
              } ], {
                b: 2
              } ];
              n = a.arrayAppendedArraysOnce(r, t), e.identical(r, [ 1, "a", {
                a: 1
              }, {
                b: 2
              } ]), e.identical(n, 3), r = [ 1, 2, 3, 5 ], t = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ], 
              n = a.arrayAppendedArraysOnce(r, t), e.identical(r, [ 1, 2, 3, 5, [ 4, [ 5 ] ], 6 ]), 
              e.identical(n, 2), r = [ 1, 3 ], n = a.arrayAppendedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 3, 2 ]), e.identical(n, 1), e.case = "onEqualize", r = [ 1, 3 ], 
              n = a.arrayAppendedArraysOnce(r, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 3, 2 ]), e.identical(n, 1), e.case = "array has undefined", 
              r = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendedArraysOnce(r, [ void 0, 2 ]);
              }), e.identical(r, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnce();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnce(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnce([], [ 1, 2, 3 ], []);
              }), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnce(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnce([], void 0);
              });
            }
            //
            ,
            arrayAppendedArraysOnceStrictly: function arrayAppendedArraysOnceStrictly(e) {
              e.case = "nothing";
              var r = a.arrayAppendedArraysOnceStrictly([], []);
              e.identical(r, 0), e.case = "simple";
              var n = [];
              r = a.arrayAppendedArraysOnceStrictly(n, [ 1, 2, 3 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.identical(r, 3), e.case = "mixed arguments types", n = [ 1 ];
              var t = [ [ "a" ], [ {
                a: 1
              } ], {
                b: 2
              } ];
              r = a.arrayAppendedArraysOnceStrictly(n, t), e.identical(n, [ 1, "a", {
                a: 1
              }, {
                b: 2
              } ]), e.identical(r, 3), n = [ 0 ], t = [ [ 1 ], [ 2 ], [ 3, [ 4, [ 5 ] ], 6 ] ], 
              r = a.arrayAppendedArraysOnceStrictly(n, t), e.identical(n, [ 0, 1, 2, 3, [ 4, [ 5 ] ], 6 ]), 
              e.identical(r, 5), e.case = "onEqualize", n = [ 4, 5 ], r = a.arrayAppendedArraysOnceStrictly(n, [ 1, 2, 3 ], function onEqualize(e, a) {
                return e === a;
              }), e.identical(n, [ 4, 5, 1, 2, 3 ]), e.identical(r, 3), e.case = "ins has existing element", 
              e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                a.arrayAppendedArraysOnceStrictly(n, [ void 0, 2 ]);
              }), e.identical(n, [ 1, void 0, 2 ]), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly([], [ 1, 2, 3 ], []);
              }), e.case = "One of ins elements is not unique", n = [ 1, 2, 3 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly(n, [ 4, 2, 5 ]);
              }), e.identical(n, [ 1, 2, 3, 4, 5 ]), n = [ 1, 1, 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly(n, [ 1 ]);
              }), e.identical(n, [ 1, 1, 1 ]), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "second arg is not a ArrayLike entity", e.shouldThrowErrorSync(function() {
                a.arrayAppendedArraysOnceStrictly([], 1);
              });
            }
            // --
            // arrayRemove
            // --
            ,
            // array remove
            arrayRemove: function arrayRemove(e) {
              e.case = "simple";
              var r = [];
              a.arrayRemove(r, 1), e.identical(r, []), r = [ 1 ], a.arrayRemove(r, 1), e.identical(r, []), 
              r = [ 2, 2, 1 ], a.arrayRemove(r, 2), e.identical(r, [ 1 ]), r = [ 2, 2, 1 ], a.arrayRemove(r, 1), 
              e.identical(r, [ 2, 2 ]), r = [ 1, 1, 1 ], a.arrayRemove(r, 1), e.identical(r, []), 
              r = [ 1, 1, 1 ], a.arrayRemove(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), r = [ 1 ], 
              a.arrayRemove(r, "1"), e.identical(r, [ 1 ]), r = [ 1 ], a.arrayRemove(r, -1), e.identical(r, [ 1 ]), 
              r = [ 1 ], a.arrayRemove(r, [ 1 ]), e.identical(r, [ 1 ]), r = [ {
                x: 1
              } ], a.arrayRemove(r, {
                x: 1
              }), e.identical(r, [ {
                x: 1
              } ]), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var n = function(e, a) {
                return e.num === a.num;
              };
              a.arrayRemove(r, {
                num: 4
              }, n), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = function(e, a) {
                return e.num === a.num;
              }, a.arrayRemove(r, {
                num: 1
              }, n), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = function(e) {
                return e.num;
              }, a.arrayRemove(r, 4, n), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], a.arrayRemove(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", r = [ [ 1 ], [ 1 ], [ 1 ] ], n = function(e) {
                return e[0];
              }, a.arrayRemove(r, [ 1 ], n), e.identical(r, []), e.case = "equalizer 2 args", 
              r = [ [ 1 ], [ 1 ], [ 1 ] ], n = function(e) {
                return e[0];
              }, a.arrayRemove(r, 1, n, function(e) {
                return e;
              }), e.identical(r, []), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemove();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemove([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemove(1, 1);
              });
            }
            //
            ,
            arrayRemoveOnce: function arrayRemoveOnce(e) {
              e.case = "simple";
              var r = a.arrayRemoveOnce([], 1);
              e.identical(r, []), r = a.arrayRemoveOnce([ 1 ], 1), e.identical(r, []), r = a.arrayRemoveOnce([ 1, 2, 2 ], 2), 
              e.identical(r, [ 1, 2 ]), r = a.arrayRemoveOnce([ 1, 3, 2, 3 ], 3), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayRemoveOnce([ 1 ], "1"), e.identical(r, [ 1 ]), r = a.arrayRemoveOnce([ 1 ], -1), 
              e.identical(r, [ 1 ]), r = a.arrayRemoveOnce([ 1 ], [ 1 ]), e.identical(r, [ 1 ]), 
              e.case = "equalizer 1 arg";
              var n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayRemoveOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayRemoveOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayRemoveOnce(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayRemoveOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ], r = a.arrayRemoveOnce(n, 1, t, function(e) {
                return e;
              }), e.identical(r, [ {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnce(1, 1, 1);
              });
            }
            //
            ,
            arrayRemoveOnceStrictly: function arrayRemoveOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemoveOnceStrictly(r, 2);
              e.identical(n, [ 1, 3 ]), e.is(n === r), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveOnceStrictly(r, {
                num: 3
              }, function(e, a) {
                return e.num === a.num;
              }), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveOnceStrictly(r, 3, e => e.num, e => e), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly(1, 1);
              }), e.case = "ins doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly([ 1 ], 2);
              }), e.case = "ins is not unique in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly([ 1, 2, 2 ], 2);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly([ 1, 2, 3 ], 3, 3);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly(r, {
                  num: 4
                }, function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemoveOnceStrictly(r, 4, function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemoved: function arrayRemoved(e) {
              e.case = "simple";
              var r = [], n = a.arrayRemoved(r, 1);
              e.identical(r, []), e.identical(n, 0), r = [ 1 ], n = a.arrayRemoved(r, 1), e.identical(r, []), 
              e.identical(n, 1), r = [ 2, 2, 1 ], n = a.arrayRemoved(r, 2), e.identical(r, [ 1 ]), 
              e.identical(n, 2), r = [ 2, 2, 1 ], n = a.arrayRemoved(r, 1), e.identical(r, [ 2, 2 ]), 
              e.identical(n, 1), r = [ 1 ], n = a.arrayRemoved(r, "1"), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ 1 ], n = a.arrayRemoved(r, -1), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ 1 ], n = a.arrayRemoved(r, [ 1 ]), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ 1, 1, 1 ], n = a.arrayRemoved(r, 1), e.identical(r, []), 
              e.identical(n, 3), r = [ 1, 1, 1 ], n = a.arrayRemoved(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), 
              e.identical(n, 0), r = [ {
                x: 1
              } ], n = a.arrayRemoved(r, {
                x: 1
              }), e.identical(r, [ {
                x: 1
              } ]), e.identical(n, 0), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemoved(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemoved(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 1), e.case = "evaluator 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var i = function(e) {
                return e.num;
              };
              n = a.arrayRemoved(r, 4, i), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoved(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ], n = a.arrayRemoved(r, 1, i, function(e) {
                return e;
              }), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoved();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoved([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoved(1, 1);
              });
            }
            //
            ,
            arrayRemovedOnce: function arrayRemovedOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayRemovedOnce(r, 1);
              e.identical(r, []), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedOnce(r, 1), 
              e.identical(r, []), e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayRemovedOnce(r, 3), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 2), r = [ 2, 2, 1 ], n = a.arrayRemovedOnce(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedOnce(r, "1"), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedOnce(r, -1), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedOnce(r, [ 1 ]), 
              e.identical(r, [ 1 ]), e.identical(n, -1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemovedOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemovedOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayRemovedOnce(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnce();
              }), e.case = "third is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnce(1, 1);
              });
            }
            //
            ,
            arrayRemovedOnceStrictly: function arrayRemovedOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1 ], n = a.arrayRemovedOnceStrictly(r, 1);
              e.identical(r, []), e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayRemovedOnceStrictly(r, 2), 
              e.identical(r, [ 1, 3 ]), e.identical(n, 1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemovedOnceStrictly(r, {
                num: 3
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              } ]), e.identical(n, 2), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedOnceStrictly(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly();
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly(1, 1);
              }), e.case = "Simple no match element", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 1 ], "1");
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 1 ], -1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 1 ], [ 1 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 1 ], 2);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 1 ], -1);
              }), e.case = "Ins several times in srcArray", e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly([ 2, 2, 1 ], 2);
              }), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, e.shouldThrowErrorSync(function() {
                a.arrayRemovedOnceStrictly(r, {
                  num: 4
                }, t);
              });
            }
            //
            ,
            arrayRemoveElement: function arrayRemoveElement(e) {
              function onEqualize(e, a) {
                return e.value === a;
              }
              e.case = "simple";
              var r = [], n = a.arrayRemoveElement(r, 1);
              e.identical(r, []), r = [ 1 ], n = a.arrayRemoveElement(r, 1), e.identical(r, []), 
              r = [ 2, 2, 1 ], n = a.arrayRemoveElement(r, 2), e.identical(r, [ 1 ]), r = [ 2, 2, 1 ], 
              n = a.arrayRemoveElement(r, 1), e.identical(r, [ 2, 2 ]), r = [ 1, 1, 1 ], n = a.arrayRemoveElement(r, 1), 
              e.identical(r, []), r = [ 1, 1, 1 ], n = a.arrayRemoveElement(r, [ 1 ]), e.identical(r, [ 1, 1, 1 ]), 
              r = [ 1 ], n = a.arrayRemoveElement(r, "1"), e.identical(r, [ 1 ]), r = [ 1 ], n = a.arrayRemoveElement(r, -1), 
              e.identical(r, [ 1 ]), r = [ 1 ], n = a.arrayRemoveElement(r, [ 1 ]), e.identical(r, [ 1 ]), 
              r = [ {
                x: 1
              } ], n = a.arrayRemoveElement(r, {
                x: 1
              }), e.identical(r, [ {
                x: 1
              } ]), n = a.arrayRemoveElement([ 1 ], "1"), e.identical(n, [ 1 ]), n = a.arrayRemoveElement([ 1 ], -1), 
              e.identical(n, [ 1 ]), n = a.arrayRemoveElement([ 1 ], [ 1 ]), e.identical(n, [ 1 ]), 
              n = a.arrayRemoveElement([ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], 1, onEqualize), e.identical(n, [ {
                value: 2
              } ]);
              var t = [ 1, 2, 3, 1, 2, 3 ];
              n = a.arrayRemoveElement(t, 1, 1), e.identical(n, [ 1, 2, 3, 2, 3 ]), e.is(t == n), 
              e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], onEqualize = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemoveElement(r, {
                num: 4
              }, onEqualize), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], onEqualize = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemoveElement(r, {
                num: 1
              }, onEqualize), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], onEqualize = function(e) {
                return e.num;
              }, n = a.arrayRemoveElement(r, 4, onEqualize), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveElement(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 1 arg", r = [ [ 1 ], [ 1 ], [ 1 ] ], onEqualize = function(e) {
                return e[0];
              }, n = a.arrayRemoveElement(r, [ 1 ], onEqualize), e.identical(r, []), e.case = "equalizer 2 args", 
              r = [ [ 1 ], [ 1 ], [ 1 ] ];
              var onEqualize = function(e) {
                return e[0];
              };
              n = a.arrayRemoveElement(r, 1, onEqualize, function(e) {
                return e;
              }), e.identical(r, []), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElement();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElement(1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElement([ 1 ], 1, 1, 1);
              });
            }
            //
            ,
            arrayRemoveElementOnce: function arrayRemoveElementOnce(e) {
              e.case = "simple";
              var r = a.arrayRemoveElementOnce([], 1);
              e.identical(r, []), r = a.arrayRemoveElementOnce([ 1 ], 1), e.identical(r, []), 
              r = a.arrayRemoveElementOnce([ 1, 2, 2 ], 2), e.identical(r, [ 1, 2 ]), r = a.arrayRemoveElementOnce([ 1, 3, 2, 3 ], 3), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayRemoveElementOnce([ 1 ], "1"), e.identical(r, [ 1 ]), 
              r = a.arrayRemoveElementOnce([ 1 ], -1), e.identical(r, [ 1 ]), r = a.arrayRemoveElementOnce([ 1 ], [ 1 ]), 
              e.identical(r, [ 1 ]), e.case = "equalizer 1 arg";
              var n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              };
              r = a.arrayRemoveElementOnce(n, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, r = a.arrayRemoveElementOnce(n, {
                num: 1
              }, t), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, r = a.arrayRemoveElementOnce(n, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], r = a.arrayRemoveElementOnce(n, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ], r = a.arrayRemoveElementOnce(n, 1, t, function(e) {
                return e;
              }), e.identical(r, [ {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnce();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnce(1, 1);
              }), e.case = "onEqualize is not a function", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnce(1, 1, 1);
              });
            }
            //
            // function arrayRemoveElementOnce( test ) {
            //
            //   test.case = 'nothing';
            //   var got = _.arrayRemoveElementOnce( [  ], 2 );
            //   var expected = [  ];
            //   test.identical( got, expected );
            //
            //   test.case = 'one element left';
            //   var got = _.arrayRemoveElementOnce( [ 2, 4 ], 4 );
            //   var expected = [ 2 ];
            //   test.identical( got, expected );
            //
            //   test.case = 'two elements left';
            //   var got = _.arrayRemoveElementOnce( [ true, false, 6 ], true );
            //   var expected = [ false, 6 ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayRemoveElementOnce();
            //   });
            //
            //   test.case = 'not enough arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayRemoveElementOnce( [ 2, 4, 6 ] );
            //   });
            //
            //   test.case = 'extra argument';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayRemoveElementOnce( [ 2, 4, 6 ], 2, function( el, ins ) { return el > ins }, 'redundant argument' );
            //   });
            //
            //   test.case = 'arguments[0] is wrong';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayRemoveElementOnce( 'wrong argument', 2 );
            //   });
            //
            //   test.case = 'arguments[2] is wrong';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayRemoveElementOnce( [ 2, 4, 6 ], 2, 'wrong argument' );
            //   });
            //
            // };
            //
            ,
            arrayRemoveElementOnceStrictly: function arrayRemoveElementOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemoveElementOnceStrictly(r, 2);
              e.identical(n, [ 1, 3 ]), e.is(n === r), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveElementOnceStrictly(r, {
                num: 3
              }, function(e, a) {
                return e.num === a.num;
              }), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveElementOnceStrictly(r, 3, e => e.num, e => e), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly(1, 1);
              }), e.case = "ins doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly([ 1 ], 2);
              }), e.case = "ins is not unique in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly([ 1, 2, 2 ], 2);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly([ 1, 2, 3 ], 3, 3);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly(r, {
                  num: 4
                }, function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemoveElementOnceStrictly(r, 4, function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemovedElement: function arrayRemovedElement(e) {
              function onEqualize(e, a) {
                return e.value === a;
              }
              e.case = "simple";
              var r = [], n = a.arrayRemovedElement(r, 1);
              e.identical(r, []), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, 1), 
              e.identical(r, []), e.identical(n, 1), r = [ 2, 2, 1 ], n = a.arrayRemovedElement(r, 2), 
              e.identical(r, [ 1 ]), e.identical(n, 2), r = [ 2, 2, 1 ], n = a.arrayRemovedElement(r, 1), 
              e.identical(r, [ 2, 2 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayRemovedElement(r, "1"), 
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, -1), 
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, [ 1 ]), 
              e.identical(r, [ 1 ]), e.identical(n, 0), r = [ 1, 1, 1 ], n = a.arrayRemovedElement(r, 1), 
              e.identical(r, []), e.identical(n, 3), r = [ 1, 1, 1 ], n = a.arrayRemovedElement(r, [ 1 ]), 
              e.identical(r, [ 1, 1, 1 ]), e.identical(n, 0), r = [ {
                x: 1
              } ], n = a.arrayRemovedElement(r, {
                x: 1
              }), e.identical(r, [ {
                x: 1
              } ]), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, "1"), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, -1), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElement(r, [ 1 ]), e.identical(r, [ 1 ]), 
              e.identical(n, 0), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayRemovedElement(r, 1, onEqualize), e.identical(r, [ {
                value: 2
              } ]), e.identical(n, 2);
              var t = [ 1, 2, 3, 1, 2, 3 ];
              n = a.arrayRemovedElement(t, 1, 1), e.identical(n, 1), e.identical(t, [ 1, 2, 3, 2, 3 ]), 
              e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], onEqualize = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemovedElement(r, {
                num: 4
              }, onEqualize), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var onEqualize = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemovedElement(r, {
                num: 1
              }, onEqualize), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 1), e.case = "evaluator 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var i = function(e) {
                return e.num;
              };
              n = a.arrayRemovedElement(r, 4, i), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedElement(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 1
              }, {
                num: 3
              } ], n = a.arrayRemovedElement(r, 1, i, function(e) {
                return e;
              }), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElement();
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElement([ 1 ], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElement(1, 1);
              });
            }
            //
            ,
            arrayRemovedElementOnce: function arrayRemovedElementOnce(e) {
              e.case = "simple";
              var r = [], n = a.arrayRemovedElementOnce(r, 1);
              e.identical(r, []), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedElementOnce(r, 1), 
              e.identical(r, []), e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayRemovedElementOnce(r, 3), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 2), r = [ 2, 2, 1 ], n = a.arrayRemovedElementOnce(r, 2), 
              e.identical(r, [ 2, 1 ]), e.identical(n, 0), r = [ 1 ], n = a.arrayRemovedElementOnce(r, "1"), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedElementOnce(r, -1), 
              e.identical(r, [ 1 ]), e.identical(n, -1), r = [ 1 ], n = a.arrayRemovedElementOnce(r, [ 1 ]), 
              e.identical(r, [ 1 ]), e.identical(n, -1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemovedElementOnce(r, {
                num: 4
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, n = a.arrayRemovedElementOnce(r, {
                num: 1
              }, t), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e) {
                return e.num;
              }, n = a.arrayRemovedElementOnce(r, 4, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, -1), r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedElementOnce(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, 0), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnce();
              }), e.case = "fourth is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnce([], 1, 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnce(1, 1);
              });
            }
            //
            ,
            arrayRemovedElementOnceStrictly: function arrayRemovedElementOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1 ], n = a.arrayRemovedElementOnceStrictly(r, 1);
              e.identical(r, []), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayRemovedElementOnceStrictly(r, 2), 
              e.identical(r, [ 1, 3 ]), e.identical(n, 2), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var t = function(e, a) {
                return e.num === a.num;
              };
              n = a.arrayRemovedElementOnceStrictly(r, {
                num: 3
              }, t), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              } ]), e.identical(n, {
                num: 3
              }), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedElementOnceStrictly(r, 1, e => e.num, e => e), e.identical(r, [ {
                num: 2
              }, {
                num: 3
              } ]), e.identical(n, {
                num: 1
              }), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly();
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([], 1, 1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly(1, 1);
              }), e.case = "Simple no match element", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 1 ], "1");
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 1 ], -1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 1 ], [ 1 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 1 ], 2);
              }), e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 1 ], -1);
              }), e.case = "Ins several times in srcArray", e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly([ 2, 2, 1 ], 2);
              }), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = function(e, a) {
                return e.num === a.num;
              }, e.shouldThrowErrorSync(function() {
                a.arrayRemovedElementOnceStrictly(r, {
                  num: 4
                }, t);
              });
            }
            //
            ,
            // arrayRemovedOnceStrictly,
            // arrayRemovedElementOnce2,
            // arrayRemovedOnceElementStrictly,
            arrayRemoveArray: function arrayRemoveArray(e) {
              e.case = "nothing";
              var r = a.arrayRemoveArray([], []);
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayRemoveArray(n, [ 1, 2, 3 ]), e.identical(n, []), e.is(r === n), n = [ 1, 2, 3 ], 
              r = a.arrayRemoveArray(n, [ 4, 5 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayRemoveArray(n, [ 1, 3 ]), e.identical(n, [ 2 ]), e.is(r === n), 
              n = [ 1, 1, 1 ], r = a.arrayRemoveArray(n, [ 1, 1 ]), e.identical(n, []), e.is(r === n), 
              n = [ 1, 1, 1 ], r = a.arrayRemoveArray(n, [ 1 ]), e.identical(n, []), e.is(r === n), 
              e.case = "array has undefined", n = [ 1 ], r = a.arrayRemoveArray(n, [ void 0, 2 ]), 
              e.identical(n, [ 1 ]), e.is(r === n), e.case = "argument is undefined", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArray([ 1 ], void 0);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArray([ 1, 2 ], 2);
              });
            },
            arrayRemoveArrayOnce: 
            //
            function arrayRemoveArrayOnce(e) {
              e.case = "nothing";
              var r = a.arrayRemoveArrayOnce([], []);
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayRemoveArrayOnce(n, [ 1, 2, 3 ]), e.identical(n, []), e.is(r === n), e.case = "prepends only unique elements", 
              n = [ 1, 2, 3 ], r = a.arrayRemoveArrayOnce(n, [ 2, 4, 5 ]), e.identical(n, [ 1, 3 ]), 
              e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayRemoveArrayOnce(n, [ 1 ]), e.identical(n, [ 1, 1 ]), 
              e.is(r === n), e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                var r = a.arrayRemoveArrayOnce(n, [ void 0, 2 ]);
                e.identical(n, [ 1 ]), e.is(r === n);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayRemoveArrayOnceStrictly: function arrayRemoveArrayOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemoveArrayOnceStrictly(r, [ 2 ]);
              e.identical(n, [ 1, 3 ]), e.is(n === r), e.case = "ins has several values", r = [ 1, 2, 3, 4, 5, 6, 6 ], 
              n = a.arrayRemoveArrayOnceStrictly(r, [ 1, 3, 5 ]), e.identical(n, [ 2, 4, 6, 6 ]), 
              e.is(n === r), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveArrayOnceStrictly(r, [ {
                num: 3
              } ], function(e, a) {
                return e.num === a.num;
              }), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveArrayOnceStrictly(r, [ 3 ], e => e.num, e => e), e.identical(n, [ {
                num: 1
              }, {
                num: 2
              } ]), e.is(n === r), e.case = "equalizer 2 args - ins several values", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemoveArrayOnceStrictly(r, [ 3, 1 ], e => e.num, e => e), e.identical(n, [ {
                num: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly(1, 1);
              }), e.case = "ins not exists", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly([ 1 ], [ 2 ]);
              }), e.case = "ins repeated in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly([ 1, 2, 2 ], [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly([ 1, 2, 3 ], 3, 3);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly(r, [ {
                  num: 4
                } ], function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrayOnceStrictly(r, [ 4 ], function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemovedArray: function arrayRemovedArray(e) {
              e.case = "nothing";
              var r = [], n = a.arrayRemovedArray(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayRemovedArray(r, [ 1, 2, 3 ]), 
              e.identical(r, []), e.identical(n, 0), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayRemovedArray(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 3 ]), 
              e.identical(n, 1), r = [ 1, 1, 1 ], n = a.arrayRemovedArray(r, [ 1 ]), e.identical(r, []), 
              e.identical(n, 3), e.case = "array has undefined", r = [ 1 ], n = a.arrayRemovedArray(r, [ void 0, 2 ]), 
              e.identical(r, [ 1 ]), e.identical(n, 0), e.case = "argument is undefined", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArray([ 1 ], void 0);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArray();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArray([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArray([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayRemovedArrayOnce: function arrayRemovedArrayOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayRemovedArrayOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayRemovedArrayOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, []), e.identical(n, 0), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayRemovedArrayOnce(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 3 ]), 
              e.identical(n, 1), r = [ 1, 1, 1 ], n = a.arrayRemovedArrayOnce(r, [ 1 ]), e.identical(r, [ 1, 1 ]), 
              e.identical(n, 1), e.case = "array has undefined", r = [ 1 ], e.mustNotThrowError(function() {
                var n = a.arrayRemovedArrayOnce(r, [ void 0, 2 ]);
                e.identical(r, [ 1 ]), e.identical(n, 0);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnce();
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnce([ 1, 2 ], [ 1 ], [ 2 ]);
              }), e.case = "second args is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnce([ 1, 2 ], 2);
              });
            }
            //
            ,
            arrayRemovedArrayOnceStrictly: function arrayRemovedArrayOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemovedArrayOnceStrictly(r, [ 2 ]);
              e.identical(r, [ 1, 3 ]), e.identical(n, 1), e.case = "ins has several values", 
              r = [ 1, 2, 3, 4, 5, 6, 6 ], n = a.arrayRemovedArrayOnceStrictly(r, [ 1, 3, 5 ]), 
              e.identical(r, [ 2, 4, 6, 6 ]), e.identical(n, 3), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedArrayOnceStrictly(r, [ {
                num: 3
              } ], function(e, a) {
                return e.num === a.num;
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              } ]), e.identical(n, 1), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedArrayOnceStrictly(r, [ 3 ], e => e.num, e => e), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              } ]), e.identical(n, 1), e.case = "equalizer 2 args - ins several values", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], n = a.arrayRemovedArrayOnceStrictly(r, [ 3, 1 ], e => e.num, e => e), e.identical(r, [ {
                num: 2
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly(1, 1);
              }), e.case = "ins not exists", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly([ 1 ], [ 2 ]);
              }), e.case = "ins repeated in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly([ 1, 2, 2 ], [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly([ 1, 2, 3 ], 3, 3);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly(r, [ {
                  num: 4
                } ], function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrayOnceStrictly(r, [ 4 ], function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemoveArrays: function arrayRemoveArrays(e) {
              e.case = "nothing";
              var r = a.arrayRemoveArrays([], []);
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayRemoveArrays(n, [ 1, 2, 3 ]), e.identical(n, []), e.is(r === n), n = [ 1, 2, 3 ], 
              r = a.arrayRemoveArrays(n, [ 4, 5 ]), e.identical(n, [ 1, 2, 3 ]), e.is(r === n), 
              n = [ 1, 2, 3 ], r = a.arrayRemoveArrays(n, [ 1, 3 ]), e.identical(n, [ 2 ]), e.is(r === n), 
              n = [ 1, 1, 1, 2, 2, 2 ], r = a.arrayRemoveArrays(n, [ [ 1 ], [ 2 ] ]), e.identical(n, []), 
              e.is(r === n), n = [ 1, 2, 3, 4, 5 ];
              var t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
              r = a.arrayRemoveArrays(n, t), e.identical(n, [ 3, 4 ]), e.is(r === n), n = [ 5 ], 
              t = [ [ 5 ] ], r = a.arrayRemoveArrays(n, t), e.identical(n, []), e.is(r === n), 
              n = [ [ 5 ] ], t = [ [ 5 ] ], r = a.arrayRemoveArrays(n, t), e.identical(n, [ [ 5 ] ]), 
              e.is(r === n), n = [ [ 5 ] ], t = [ [ [ 5 ] ] ], r = a.arrayRemoveArrays(n, t), 
              e.identical(n, [ [ 5 ] ]), e.is(r === n), e.case = "array has undefined", n = [ 1 ], 
              r = a.arrayRemoveArrays(n, [ void 0, 2 ]), e.identical(n, [ 1 ]), e.is(r === n), 
              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrays();
              }), e.case = "argument is undefined", n = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrays(n, void 0);
              }), e.identical(n, [ 1 ]), e.case = "second arg is not longIs entity", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrays([], 1);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArrays([], [ 1 ], [ 1 ]);
              });
            },
            arrayRemoveArraysOnce: 
            //
            function arrayRemoveArraysOnce(e) {
              function onEqualize(e, a) {
                return e === a;
              }
              e.case = "nothing";
              var r = a.arrayRemoveArraysOnce([], []);
              e.identical(r, []), e.case = "simple";
              var n = [];
              r = a.arrayRemoveArraysOnce(n, [ 1, 2, 3 ]), e.identical(r, []), e.is(r === n), 
              e.case = "prepends only unique elements", n = [ 1, 2, 3 ], r = a.arrayRemoveArraysOnce(n, [ 2, 4, 5 ]), 
              e.identical(n, [ 1, 3 ]), e.is(r === n), n = [ 1, 1, 1 ], r = a.arrayRemoveArraysOnce(n, [ 1 ]), 
              e.identical(n, [ 1, 1 ]), e.is(r === n), n = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
              var t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
              r = a.arrayRemoveArraysOnce(n, t), e.identical(r, [ 1, 3, 3, 4, 5 ]), e.is(r === n), 
              n = [ 1, 1, 2, 2, 3, 4, 4, 5 ], t = [ [ 1, 1 ], 2, [ 3 ], 4, 4, [ 5 ] ], r = a.arrayRemoveArraysOnce(n, t), 
              e.identical(n, [ 2 ]), e.is(r === n), n = [ 1, 2, 3, 4, 5 ], t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ], 
              r = a.arrayRemoveArraysOnce(n, t), e.identical(r, [ 3, 4 ]), e.is(r === n), n = [ 5, 5 ], 
              t = [ [ 5 ] ], r = a.arrayRemoveArraysOnce(n, t), e.identical(r, [ 5 ]), e.is(r === n), 
              n = [ [ 5 ], [ 5 ] ], t = [ [ 5 ] ], r = a.arrayRemoveArraysOnce(n, t), e.identical(n, [ [ 5 ], [ 5 ] ]), 
              e.is(r === n), n = [ [ 5 ], [ 5 ] ], t = [ [ [ 5 ] ] ], r = a.arrayRemoveArraysOnce(n, t), 
              e.identical(n, [ [ 5 ], [ 5 ] ]), e.is(r === n), n = [ 1, 2, [ 3 ] ], t = [ 1, 2, [ 3 ] ], 
              r = a.arrayRemoveArraysOnce(n, t, onEqualize), e.identical(r, [ [ 3 ] ]), e.is(r === n), 
              e.case = "array has undefined", n = [ 1 ], e.mustNotThrowError(function() {
                var r = a.arrayRemoveArraysOnce(n, [ void 0, 2 ]);
                e.identical(n, [ 1 ]), e.is(r === n);
              }), e.case = "equalizer 2 args", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ];
              var onEqualize = function(e, a) {
                return e.num === a.num;
              };
              t = [ [ {
                num: 3
              } ], {
                num: 1
              } ], r = a.arrayRemoveArraysOnce(n, t, onEqualize), e.identical(r, [ {
                num: 2
              } ]), e.is(r === n), e.case = "equalizer 1 arg", n = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = [ [ 3 ], 1 ], r = a.arrayRemoveArraysOnce(n, t, e => e.num, e => e), e.identical(r, [ {
                num: 2
              } ]), e.is(r === n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnce();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnce(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnce([], [ 1, 2, 3 ], []);
              }), e.case = "second arg is not longIs entity", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnce([], 1);
              });
            }
            //
            ,
            arrayRemoveArraysOnceStrictly: function arrayRemoveArraysOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemoveArraysOnceStrictly(r, [ 2 ]);
              e.identical(n, [ 1, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayRemoveArraysOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(n, []), e.is(n === r), r = [ 1, 2, 3, 4 ];
              var t = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ];
              n = a.arrayRemoveArraysOnceStrictly(r, t), e.identical(n, []), e.is(n === r), r = [ 1, 2, 3, 4, 5 ], 
              t = [ [ 1 ], [ 2, 3 ], [ 4 ], 5 ], n = a.arrayRemoveArraysOnceStrictly(r, t), e.identical(n, []), 
              e.is(n === r), r = [ 5, 6, 7, 8 ], t = [ [ 5, 6 ], 7 ], n = a.arrayRemoveArraysOnceStrictly(r, t), 
              e.identical(n, [ 8 ]), e.is(n === r), e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = [ [ {
                num: 3
              } ], {
                num: 1
              } ], n = a.arrayRemoveArraysOnceStrictly(r, t, function(e, a) {
                return e.num === a.num;
              }), e.identical(n, [ {
                num: 2
              } ]), e.is(n === r), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = [ [ 3 ], 1 ], n = a.arrayRemoveArraysOnceStrictly(r, t, e => e.num, e => e), 
              e.identical(n, [ {
                num: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly(1, 1);
              }), e.case = "ins not exists", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly([ 1 ], [ 2 ]);
              }), e.case = "ins repeated in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly([ 1, 2, 2 ], [ [ 2 ] ]);
              }), e.case = "ins element repeated", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly([ 1, 2, 3, 4, 5 ], [ [ 2, 3 ], 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly([], [ 1, 2, 3 ], []);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly(r, [ [ {
                  num: 4
                } ] ], function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemoveArraysOnceStrictly(r, [ [ 4 ] ], function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemovedArrays: function arrayRemovedArrays(e) {
              e.case = "nothing";
              var r = [], n = a.arrayRemovedArrays(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayRemovedArrays(r, [ 1, 2, 3 ]), 
              e.identical(r, []), e.identical(n, 0), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayRemovedArrays(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 3 ]), 
              e.identical(n, 1), r = [ 1, 1, 1 ], n = a.arrayRemovedArrays(r, [ 1 ]), e.identical(r, []), 
              e.identical(n, 3), r = [ 1, 2, 3, 4, 5 ];
              var t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
              n = a.arrayRemovedArrays(r, t), e.identical(r, [ 3, 4 ]), e.identical(n, 3), r = [ 1, 2, 3, 4, 5 ], 
              t = [ [ 1 ], 2, [ 3 ], 4, [ 5 ] ], n = a.arrayRemovedArrays(r, t), e.identical(r, []), 
              e.identical(n, 5), r = [ 1, 2, 3, 4, 5 ], t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ], 
              n = a.arrayRemovedArrays(r, t), e.identical(r, [ 3, 4 ]), e.identical(n, 3), r = [ 5 ], 
              t = [ [ 5 ] ], n = a.arrayRemovedArrays(r, t), e.identical(r, []), e.identical(n, 1), 
              r = [ [ 5 ] ], t = [ [ 5 ] ], n = a.arrayRemovedArrays(r, t), e.identical(r, [ [ 5 ] ]), 
              e.identical(n, 0), r = [ [ 5 ] ], t = [ [ [ 5 ] ] ], n = a.arrayRemovedArrays(r, t), 
              e.identical(r, [ [ 5 ] ]), e.identical(n, 0), e.case = "array has undefined", r = [ 1 ], 
              n = a.arrayRemovedArrays(r, [ void 0, 2 ]), e.identical(r, [ 1 ]), e.identical(n, 0), 
              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrays();
              }), e.case = "argument is undefined", r = [ 1 ], e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrays(r, void 0);
              }), e.identical(r, [ 1 ]), e.case = "second arg is not longIs entity", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrays([], 1);
              }), e.case = "too many args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArrays([], [ 1 ], [ 1 ]);
              });
            }
            //
            ,
            arrayRemovedArraysOnce: function arrayRemovedArraysOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayRemovedArraysOnce(r, []);
              e.identical(r, []), e.identical(n, 0), e.case = "simple", r = [], n = a.arrayRemovedArraysOnce(r, [ 1, 2, 3 ]), 
              e.identical(r, []), e.identical(n, 0), e.case = "prepends only unique elements", 
              r = [ 1, 2, 3 ], n = a.arrayRemovedArraysOnce(r, [ 2, 4, 5 ]), e.identical(r, [ 1, 3 ]), 
              e.identical(n, 1), r = [ 1, 1, 1 ], n = a.arrayRemovedArraysOnce(r, [ 1 ]), e.identical(r, [ 1, 1 ]), 
              e.identical(n, 1), r = [ 1, 1, 2, 3, 3, 4, 5, 5 ];
              var t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ];
              n = a.arrayRemovedArraysOnce(r, t), e.identical(r, [ 1, 3, 3, 4, 5 ]), e.identical(n, 3), 
              r = [ 1, 1, 2, 2, 3, 4, 4, 5 ], t = [ [ 1, 1 ], 2, [ 3 ], 4, 4, [ 5 ] ], n = a.arrayRemovedArraysOnce(r, t), 
              e.identical(r, [ 2 ]), e.identical(n, 7), r = [ 1, 2, 3, 4, 5 ], t = [ [ 1 ], [ 2, [ 3 ] ], [ [ [ 4 ] ], 5 ] ], 
              n = a.arrayRemovedArraysOnce(r, t), e.identical(r, [ 3, 4 ]), e.identical(n, 3), 
              r = [ 5, 5 ], t = [ [ 5 ] ], n = a.arrayRemovedArraysOnce(r, t), e.identical(r, [ 5 ]), 
              e.identical(n, 1), r = [ [ 5 ], [ 5 ] ], t = [ [ 5 ] ], n = a.arrayRemovedArraysOnce(r, t), 
              e.identical(r, [ [ 5 ], [ 5 ] ]), e.identical(n, 0), r = [ [ 5 ], [ 5 ] ], t = [ [ [ 5 ] ] ], 
              n = a.arrayRemovedArraysOnce(r, t), e.identical(r, [ [ 5 ], [ 5 ] ]), e.identical(n, 0), 
              r = [ 1, 2, [ 3 ] ], t = [ 1, 2, [ 3 ] ], n = a.arrayRemovedArraysOnce(r, t, function onEqualize(e, a) {
                return e === a;
              }), e.identical(r, [ [ 3 ] ]), e.identical(n, 2), e.case = "array has undefined", 
              r = [ 1 ], e.mustNotThrowError(function() {
                var n = a.arrayRemovedArraysOnce(r, [ void 0, 2 ]);
                e.identical(r, [ 1 ]), e.identical(n, 0);
              }), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnce();
              }), e.case = "dst is not a array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnce(1, [ 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnce([], [ 1, 2, 3 ], []);
              }), e.case = "second arg is not longIs entity", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnce([], 1);
              });
            }
            //
            ,
            arrayRemovedArraysOnceStrictly: function arrayRemovedArraysOnceStrictly(e) {
              e.case = "simple";
              var r = [ 1, 2, 3 ], n = a.arrayRemovedArraysOnceStrictly(r, [ 2 ]);
              e.identical(r, [ 1, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayRemovedArraysOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, []), e.identical(n, 3), r = [ 1, 2, 3, 4 ];
              var t = [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ];
              n = a.arrayRemovedArraysOnceStrictly(r, t), e.identical(r, []), e.identical(n, 4), 
              r = [ 1, 2, 3, 4, 5 ], t = [ [ 1 ], [ 2, 3 ], [ 4 ], 5 ], n = a.arrayRemovedArraysOnceStrictly(r, t), 
              e.identical(r, []), e.identical(n, 5), r = [ 5, 6, 7, 8 ], t = [ [ 5, 6 ], 7 ], 
              n = a.arrayRemovedArraysOnceStrictly(r, t), e.identical(r, [ 8 ]), e.identical(n, 3), 
              e.case = "equalizer 2 args", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = [ [ {
                num: 3
              } ], {
                num: 1
              } ], n = a.arrayRemovedArraysOnceStrictly(r, t, function(e, a) {
                return e.num === a.num;
              }), e.identical(r, [ {
                num: 2
              } ]), e.identical(n, 2), e.case = "equalizer 1 arg", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], t = [ [ 3 ], 1 ], n = a.arrayRemovedArraysOnceStrictly(r, t, e => e.num, e => e), 
              e.identical(r, [ {
                num: 2
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly();
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly(1, 1);
              }), e.case = "ins not exists", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly([ 1 ], [ 2 ]);
              }), e.case = "ins repeated in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly([ 1, 2, 2 ], [ [ 2 ] ]);
              }), e.case = "ins element repeated", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly([ 1, 2, 3, 4, 5 ], [ [ 2, 3 ], 2 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly([], [ 1, 2, 3 ], []);
              }), e.case = "onEqualize", r = [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ], e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly(r, [ [ {
                  num: 4
                } ] ], function(e, a) {
                  return e.num === a.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]), e.shouldThrowErrorSync(function() {
                a.arrayRemovedArraysOnceStrictly(r, [ [ 4 ] ], function(e) {
                  return e.num;
                });
              }), e.identical(r, [ {
                num: 1
              }, {
                num: 2
              }, {
                num: 3
              } ]);
            }
            //
            ,
            arrayRemoveDuplicates: function arrayRemoveDuplicates(e) {
              e.case = "empty";
              var r = [], n = a.arrayRemoveDuplicates(r), t = [];
              e.identical(r, t), e.identical(n, t), e.case = "No duplicates - One element", r = [ 1 ], 
              n = a.arrayRemoveDuplicates(r), t = [ 1 ], e.identical(r, t), e.identical(n, t), 
              e.case = "No duplicates - Several elements", r = [ 1, 2, 3, "4", "5" ], n = a.arrayRemoveDuplicates(r), 
              t = [ 1, 2, 3, "4", "5" ], e.identical(r, t), e.identical(n, t), e.case = "One duplicated element", 
              r = [ 1, 2, 2 ], n = a.arrayRemoveDuplicates(r), t = [ 1, 2 ], e.identical(r, t), 
              e.identical(n, t), e.case = "One duplicated element - Several elements", r = [ 1, 2, 1, 1, 1 ], 
              n = a.arrayRemoveDuplicates(r), t = [ 1, 2 ], e.identical(r, t), e.identical(n, t), 
              e.case = "Several duplicates several times", r = [ 1, 2, 3, "4", "4", 1, 2, 1, 5 ], 
              n = a.arrayRemoveDuplicates(r), t = [ 1, 2, 3, "4", 5 ], e.identical(r, t), e.identical(n, t), 
              e.case = "onEqualize", r = [ 1, 2, 3, "4", "4", 1, 2, 1, 5 ], n = a.arrayRemoveDuplicates(r, function(e, a) {
                return e === a;
              }), t = [ 1, 2, 3, "4", 5 ], e.identical(r, t), e.identical(n, t), e.case = "Evaluator", 
              r = [ {
                "num": 0
              }, {
                "num": 1
              }, {
                "num": 2
              }, {
                "num": 0
              } ], n = a.arrayRemoveDuplicates(r, function(e) {
                return e.num;
              }), t = [ {
                "num": 0
              }, {
                "num": 1
              }, {
                "num": 2
              } ], e.identical(r, t), e.identical(n, t), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayRemoveDuplicates();
              }), 
              // test.case = 'more than two args';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayRemoveDuplicates( [ 1 ], 1, 1 );
              // })
              e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveDuplicates(1);
              }), e.case = "dst is not an array", e.shouldThrowErrorSync(function() {
                a.arrayRemoveDuplicates(new Uint8Array([ 1, 2, 3, 4, 5 ]));
              }), e.case = "second arg is not a function", e.shouldThrowErrorSync(function() {
                a.arrayRemoveDuplicates(1, 1);
              });
            }
            //
            ,
            longRemoveDuplicates: function longRemoveDuplicates(e) {
              // dst is arguments
              function returnArgs() {
                return a.longRemoveDuplicates(arguments);
              }
              // dst is an array
              e.case = "empty";
              var r = [], n = a.longRemoveDuplicates(r), t = [];
              e.identical(r, t), e.identical(n, t), e.case = "No duplicates - One element", r = [ 1 ], 
              n = a.longRemoveDuplicates(r), t = [ 1 ], e.identical(r, t), e.identical(n, t), 
              e.case = "No duplicates - Several elements", r = [ 1, 2, 3, "4", "5" ], n = a.longRemoveDuplicates(r), 
              t = [ 1, 2, 3, "4", "5" ], e.identical(r, t), e.identical(n, t), e.case = "One duplicated element", 
              r = [ 1, 2, 2 ], n = a.longRemoveDuplicates(r), t = [ 1, 2 ], e.identical(r, t), 
              e.identical(n, t), e.case = "One duplicated element - Several elements", r = [ 1, 2, 1, 1, 1 ], 
              n = a.longRemoveDuplicates(r), t = [ 1, 2 ], e.identical(r, t), e.identical(n, t), 
              e.case = "Several duplicates several times", r = [ 1, 2, 3, "4", "4", 1, 2, 1, 5 ], 
              n = a.longRemoveDuplicates(r), t = [ 1, 2, 3, "4", 5 ], e.identical(r, t), e.identical(n, t), 
              // dst is a typed array
              e.case = "empty", r = new Uint8Array(0), n = a.longRemoveDuplicates(r), t = new Uint8Array([]), 
              e.identical(r, t), e.identical(n, t), e.case = "No duplicates - One element", r = new Uint8ClampedArray([ 300 ]), 
              n = a.longRemoveDuplicates(r), t = new Uint8ClampedArray([ 255 ]), e.identical(r, t), 
              e.identical(n, t), e.case = "No duplicates - Several elements", r = new Int8Array([ 1, 2, 3, "4", "5" ]), 
              n = a.longRemoveDuplicates(r), t = new Int8Array([ 1, 2, 3, "4", "5" ]), e.identical(r, t), 
              e.identical(n, t), e.case = "One duplicated element - new returned instance", r = new Int8Array([ 1, 2, 2 ]), 
              n = a.longRemoveDuplicates(r), t = new Int8Array([ 1, 2 ]), e.identical(n, t), e.is(r !== n), 
              e.case = "One duplicated element - Several elements", r = new Uint8ClampedArray([ -12, 2, -1, 0, -11 ]), 
              n = a.longRemoveDuplicates(r), t = new Uint8ClampedArray([ 0, 2 ]), e.identical(n, t), 
              e.is(r !== n), e.case = "Several duplicates several times", r = new Int8Array([ 1, 2, 3, "4", "4", 1, 2, 1, 5 ]), 
              n = a.longRemoveDuplicates(r), t = new Int8Array([ 1, 2, 3, "4", 5 ]), e.identical(n, t), 
              e.is(r !== n), e.case = "No duplicates", n = returnArgs(1, "2", 3), t = [ 1, "2", 3 ], 
              e.identical(n.length, t.length), e.identical(n[0], t[0]), e.identical(n[1], t[1]), 
              e.identical(n[2], t[2]), e.case = "Duplicates", n = returnArgs(1, "2", 3, 1, "2", 3), 
              t = [ 1, "2", 3 ], e.identical(n, t), 
              // Evaluators
              e.case = "onEqualize", r = new Int8Array([ 1, 2, 3, "4", "4", 1, 2, 1, 5 ]), n = a.longRemoveDuplicates(r, function(e, a) {
                return e === a;
              }), t = new Int8Array([ 1, 2, 3, "4", 5 ]), e.identical(n, t), e.is(r !== n), e.case = "Evaluator", 
              r = new Float32Array([ 1, 1.1, 1.48483, 1.578292, 1.9 ]), n = a.longRemoveDuplicates(r, function(e) {
                return Math.floor(e);
              }), t = new Float32Array([ 1 ]), e.identical(n, t), e.is(r !== n), e.case = "no args", 
              e.shouldThrowErrorSync(function() {
                a.longRemoveDuplicates();
              }), 
              // test.case = 'more than two args';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.longRemoveDuplicates( [ 1 ], 1, 1 );
              // })
              e.case = "dst is not an long", e.shouldThrowErrorSync(function() {
                a.longRemoveDuplicates(1);
              }), e.case = "second arg is not a function", e.shouldThrowErrorSync(function() {
                a.longRemoveDuplicates(1, 1);
              });
            }
            //
            ,
            // array flatten
            arrayFlatten: function arrayFlatten(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlatten(null, []);
              e.identical(r, []), r = a.arrayFlatten([], []), e.identical(r, []), r = a.arrayFlatten(null, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlatten([], [ 1, 2, 3 ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlatten([], [ [ 1 ], [ 2 ], [ 3 ] ]), e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlatten([], [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlatten([], [ [ [ [ [ 1 ] ] ] ] ]), e.identical(r, [ 1 ]), 
              r = a.arrayFlatten([], 1, 2, "3"), e.identical(r, [ 1, 2, "3" ]), e.case = "make array flat, dst is not empty", 
              r = a.arrayFlatten([ 1, 2, 3 ], [ 4 ]), e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlatten([ 1, 2, 3 ], [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlatten([ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlatten([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlatten([ 1 ], [ [ [ [ [ 1 ] ] ] ] ]), 
              e.identical(r, [ 1, 1 ]), r = a.arrayFlatten([], 1), e.identical(r, [ 1 ]), 
              /*
  var got  = _.arrayFlatten( [ 1 ], 2, 3 );
  test.identical( got, [ 1, 2, 3 ] );
  */
              e.case = "make array flat from multiple arrays as one arg", r = a.arrayFlatten([], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.case = "make array flat from different inputs -  null dstArray", 
              r = a.arrayFlatten(null, "str", {}, [ 1, 2 ], 5, !0), e.identical(r, [ "str", {}, 1, 2, 5, !0 ]), 
              r = a.arrayFlatten([ 1, 1, 3, 3, [ 5, 5 ] ], 5);
              var n = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
              e.identical(r, n), r = a.arrayFlatten(null, [ 1, 1, 3, 3, [ 5, 5 ] ]), n = [ 1, 1, 3, 3, 5, 5 ], 
              e.identical(r, n), r = a.arrayFlatten([ [ 0 ], [ [ -1, -2 ] ] ], [ 1, 1, 3, 3, [ 5, 5 ] ]), 
              n = [ [ 0 ], [ [ -1, -2 ] ], 1, 1, 3, 3, 5, 5 ], e.identical(r, n), 
              //
              e.open("another criteria"), e.open("single argument"), r = a.arrayFlatten([ 0, 1, 2, 3 ]), 
              n = [ 0, 1, 2, 3 ], e.identical(r, n), r = a.arrayFlatten([ 0, 1, 0, 1 ]), n = [ 0, 1, 0, 1 ], 
              e.identical(r, n), r = a.arrayFlatten([ [ 0, 0 ], [ 1, 1 ] ]), n = [ 0, 0, 1, 1 ], 
              e.identical(r, n), r = a.arrayFlatten([ [ 0 ], 0, 1, [ 0, 1 ] ]), n = [ 0, 0, 1, 0, 1 ], 
              e.identical(r, n), r = a.arrayFlatten([ [ [ 0 ] ] ]), n = [ 0 ], e.identical(r, n), 
              r = a.arrayFlatten([ 1, 1, 3, 3, [ 5, 5 ] ]), n = [ 1, 1, 3, 3, 5, 5 ], e.identical(r, n), 
              e.close("single argument"), //
              e.open("two arguments"), r = a.arrayFlatten([ 0, 1, 2, 3 ]), n = [ 0, 1, 2, 3 ], 
              e.identical(r, n), r = a.arrayFlatten([ 0, 1, 0, 1 ]), n = [ 0, 1, 0, 1 ], e.identical(r, n), 
              r = a.arrayFlatten([ [ 0, 0 ], [ 1, 1 ] ]), n = [ 0, 0, 1, 1 ], e.identical(r, n), 
              r = a.arrayFlatten([ [ 0 ], 0, 1, [ 0, 1 ] ]), n = [ 0, 0, 1, 0, 1 ], e.identical(r, n), 
              r = a.arrayFlatten([ [ [ 0 ] ] ]), n = [ 0 ], e.identical(r, n), r = a.arrayFlatten([ 1, 1, 3, 3, [ 5, 5 ] ]), 
              n = [ 1, 1, 3, 3, 5, 5 ], e.identical(r, n), e.close("two arguments"), //
              e.close("another criteria"), e.case = "Empty", e.shouldThrowErrorSync(function() {
                a.arrayFlatten();
              });
            }
            //
            ,
            arrayFlattenOnce: function arrayFlattenOnce(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenOnce([], []);
              e.identical(r, []), r = a.arrayFlattenOnce([], [ 1, 1, 2, 2, 3, 3 ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenOnce([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenOnce([], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenOnce([], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), e.identical(r, [ 1 ]), 
              e.case = "make array flat, dst is not empty", r = a.arrayFlattenOnce([ 1, 2, 3, 4 ], [ 4 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenOnce([ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenOnce([ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenOnce([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ], 4 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenOnce([ 1 ], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.case = "make array flat from multiple arrays as one arg", 
              r = a.arrayFlattenOnce([ 1, 4 ], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), e.identical(r, [ 1, 4, 2, 3 ]), 
              e.case = "onEqualize", r = a.arrayFlattenOnce([ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], function(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5 ]);
              debugger;
              r = a.arrayFlattenOnce([], 1), e.identical(r, [ 1 ]), r = a.arrayFlattenOnce([ 1, 1, 3, 3, [ 5, 5 ] ], 5);
              var n = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
              e.identical(r, n), r = a.arrayFlattenOnce(null, [ 1, 1, 3, 3, [ 5, 5 ] ]), n = [ 1, 3, 5 ], 
              e.identical(r, n), 
              //
              e.open("single argument"), r = a.arrayFlattenOnce([ 0, 1, 2, 3 ]), n = [ 0, 1, 2, 3 ], 
              e.identical(r, n), r = a.arrayFlattenOnce([ 0, 1, 0, 1 ]), n = [ 0, 1 ], e.identical(r, n), 
              r = a.arrayFlattenOnce([ [ 0, 0 ], [ 1, 1 ] ]), n = [ 0, 1 ], e.identical(r, n), 
              r = a.arrayFlattenOnce([ [ 0 ], 0, 1, [ 0, 1 ] ]), n = [ 0, 1 ], e.identical(r, n), 
              r = a.arrayFlattenOnce([ 1, [ [ 0 ], 1 ], 1, 0 ]), n = [ 1, 0 ], e.identical(r, n), 
              r = a.arrayFlattenOnce([ 1, 1, 3, 3, [ 5, 5 ] ]), n = [ 1, 3, 5 ], e.identical(r, n), 
              e.close("single argument"), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnce();
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnce(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnce([], [ 1 ], []);
              });
            }
            //
            ,
            arrayFlattenOnceStrictly: function arrayFlattenOnceStrictly(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenOnceStrictly([], []);
              e.identical(r, []);
              var n = [];
              r = a.arrayFlattenOnceStrictly(n, [ 1, 2, 3, 4 ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.identical(n, r), n = [], r = a.arrayFlattenOnceStrictly(n, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, r), n = [], r = a.arrayFlattenOnceStrictly(n, [ [ 1, [ 2, [ 3 ], 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, r), n = [], r = a.arrayFlattenOnceStrictly(n, [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, r), e.case = "make array flat, dst is not empty", 
              r = a.arrayFlattenOnceStrictly([ 1, 2, 3, 4 ], [ 5 ]), e.identical(r, [ 1, 2, 3, 4, 5 ]), 
              r = a.arrayFlattenOnceStrictly([ 1, 2, 3 ], [ [ [ 4 ] ] ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              r = a.arrayFlattenOnceStrictly([ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ]), e.identical(r, [ 1, 0, 2, 3 ]), 
              e.case = "make array flat from multiple arrays as one arg", r = a.arrayFlattenOnceStrictly([ 1, 4 ], [ [ [ 2 ] ], [ 3, [ [ [ 5 ] ] ] ] ]), 
              e.identical(r, [ 1, 4, 2, 3, 5 ]), e.case = "onEqualize", r = a.arrayFlattenOnceStrictly([ 1, 2, 3, 4 ], [ 5 ], function(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5 ]);
              debugger;
              e.case = "dstArray has sub arrays", r = a.arrayFlattenOnceStrictly([ 1, 3, [ 5 ] ], 6);
              var t = [ 1, 3, [ 5 ], 6 ];
              e.identical(r, t), r = a.arrayFlattenOnceStrictly([ [ 1, [ 3, [ 5 ] ] ], 2 ], 6), 
              t = [ [ 1, [ 3, [ 5 ] ] ], 2, 6 ], e.identical(r, t), r = a.arrayFlattenOnceStrictly([ 1, 3, [ 5 ] ], 5), 
              t = [ 1, 3, [ 5 ], 5 ], e.identical(r, t), r = a.arrayFlattenOnceStrictly([], [ 1, 3, [ 5, 6 ] ]), 
              t = [ 1, 3, 5, 6 ], e.identical(r, t), 
              //
              e.open("single argument"), r = a.arrayFlattenOnceStrictly([ 0, 1, 2, 3 ]), t = [ 0, 1, 2, 3 ], 
              e.identical(r, t), r = a.arrayFlattenOnceStrictly([ 0, [ 1 ] ]), t = [ 0, 1 ], e.identical(r, t), 
              r = a.arrayFlattenOnceStrictly([ [ 0 ], [ 1 ] ]), t = [ 0, 1 ], e.identical(r, t), 
              r = a.arrayFlattenOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]), t = [ 0, 1, 2, 3, 4 ], 
              e.identical(r, t), r = a.arrayFlattenOnceStrictly([ 0, [ [ 2 ], 1 ], 3, 4 ]), t = [ 0, 1, 2, 3, 4 ], 
              e.identical(r, t), r = a.arrayFlattenOnceStrictly([ 1, 3, [ 5, 7 ] ]), t = [ 1, 3, 5, 7 ], 
              e.identical(r, t), e.close("single argument"), e.case = "not enough arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly();
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly(1, [ 1 ]);
              }), 
              // test.case = 'second is not longIs';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayFlattenOnceStrictly( [], 1 );
              // });
              e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([], [ 1 ], []);
              }), e.case = "Elements must not be repeated", e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([], [ 1, 1, 2, 2, 3, 3 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0 ], 0);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0, 1, 1 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0, 1, 1 ], 2);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0 ], [ 1, 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenOnceStrictly([ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ]);
              });
            }
            //
            ,
            arrayFlattened: function arrayFlattened(e) {
              e.case = "make array flat, dst is empty";
              var r = [], n = a.arrayFlattened(r, []);
              e.identical(r, []), e.identical(n, 0), r = [], n = a.arrayFlattened(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattened(r, [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattened(r, [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattened(r, [ [ [ [ [ 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.identical(n, 1), e.case = "make array flat, dst is not empty", 
              r = [ 1, 2, 3 ], n = a.arrayFlattened(r, [ 4 ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayFlattened(r, [ 1, 2, 3 ]), e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), 
              e.identical(n, 3), r = [ 1, 2, 3 ], n = a.arrayFlattened(r, [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), e.identical(n, 3), r = [ 1, 2, 3 ], n = a.arrayFlattened(r, [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), e.identical(n, 3), r = [ 1 ], n = a.arrayFlattened(r, [ [ [ [ [ 1 ] ] ] ] ]), 
              e.identical(r, [ 1, 1 ]), e.identical(n, 1), r = [ 1, [ 2, 3 ] ], n = a.arrayFlattened(r, [ 4 ]), 
              e.identical(r, [ 1, [ 2, 3 ], 4 ]), e.identical(n, 1), e.case = "make array flat from multiple arrays as one arg", 
              r = [], n = a.arrayFlattened(r, [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.identical(n, 4), e.case = "Second is not long", r = [], n = a.arrayFlattened(r, 1), 
              e.identical(r, [ 1 ]), e.identical(n, 1), r = [], n = a.arrayFlattened(r, 1, 2, "3"), 
              e.identical(r, [ 1, 2, "3" ]), e.identical(n, 3), r = [ 1, 1, 3, 3, [ 5, 5 ] ], 
              n = a.arrayFlattened(r, 5);
              var t = [ 1, 1, 3, 3, [ 5, 5 ], 5 ];
              e.identical(r, t), e.identical(n, 1), 
              //
              e.open("single argument"), n = a.arrayFlattened([ 0, 1, 2, 3 ]), t = [ 0, 1, 2, 3 ], 
              e.identical(n, t), n = a.arrayFlattened([ 0, 1, 0, 1 ]), t = [ 0, 1, 0, 1 ], e.identical(n, t), 
              n = a.arrayFlattened([ [ 0, 0 ], [ 1, 1 ] ]), t = [ 0, 0, 1, 1 ], e.identical(n, t), 
              n = a.arrayFlattened([ [ 0 ], 0, 1, [ 0, 1 ] ]), t = [ 0, 0, 1, 0, 1 ], e.identical(n, t), 
              n = a.arrayFlattened([ [ [ 0 ] ] ]), t = [ 0 ], e.identical(n, t), n = a.arrayFlattened([ 1, 1, 3, 3, [ 5, 5 ] ]), 
              t = [ 1, 1, 3, 3, 5, 5 ], e.identical(n, t), n = a.arrayFlattened([ 1, 1, 3, 3, [ 5, 5 ] ]), 
              t = [ 1, 1, 3, 3, 5, 5 ], e.identical(n, t), e.close("single argument"), e.case = "not enough arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayFlattened();
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattened(1, [ 1 ]);
              });
            }
            //
            ,
            arrayFlattenedOnce: function arrayFlattenedOnce(e) {
              e.case = "make array flat, dst is empty";
              var r = [], n = a.arrayFlattenedOnce(r, []);
              e.identical(r, []), e.identical(n, 0), r = [], n = a.arrayFlattenedOnce(r, [ 1, 1, 2, 2, 3, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattenedOnce(r, [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattenedOnce(r, [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattenedOnce(r, [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.identical(n, 1), e.case = "make array flat, dst is not empty", 
              r = [ 1, 2, 3, 4 ], n = a.arrayFlattenedOnce(r, [ 4 ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnce(r, [ 1, 2, 3, [ [ 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnce(r, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnce(r, [ [ 1, [ 2, [ 3 ] ] ], 4 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, 1), r = [ 1 ], n = a.arrayFlattenedOnce(r, [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.identical(n, 0), e.case = "dst contains some inner arrays", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayFlattenedOnce(r, [ 1, 2, 3 ]), e.identical(r, [ [ 1 ], [ 2 ], [ 3 ], 1, 2, 3 ]), 
              e.identical(n, 3), r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayFlattenedOnce(r, [ 4, 5, 6 ]), 
              e.identical(r, [ [ 1 ], [ 2 ], [ 3 ], 4, 5, 6 ]), e.identical(n, 3), e.case = "make array flat from multiple arrays as one arg", 
              r = [ 1, 4 ], n = a.arrayFlattenedOnce(r, [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, [ 1, 4, 2, 3 ]), e.identical(n, 2), e.case = "onEqualize", r = [ 1, 2, 3, 4 ], 
              n = a.arrayFlattenedOnce(r, [ 1, 4, 2, 5 ], function(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5 ]), e.identical(n, 1), 
              //
              e.open("single argument"), n = a.arrayFlattenedOnce([ 0, 1, 2, 3 ]);
              var t = [ 0, 1, 2, 3 ];
              e.identical(n, t), n = a.arrayFlattenedOnce([ 0, 1, 0, 1 ]), t = [ 0, 1 ], e.identical(n, t), 
              n = a.arrayFlattenedOnce([ [ 0, 0 ], [ 1, 1 ] ]), t = [ 0, 1 ], e.identical(n, t), 
              n = a.arrayFlattenedOnce([ [ 0 ], 0, 1, [ 0, 1 ] ]), t = [ 0, 1 ], e.identical(n, t), 
              n = a.arrayFlattenedOnce([ 1, [ [ 0 ], 1 ], 1, 0 ]), t = [ 1, 0 ], e.identical(n, t), 
              n = a.arrayFlattenedOnce([ 1, 1, 3, 3, [ 5, 5 ] ]), t = [ 1, 3, 5 ], e.identical(n, t), 
              e.close("single argument"), r = [], n = a.arrayFlattenedOnce(r, 1), e.identical(r, [ 1 ]), 
              e.identical(n, 1), r = [ 1, 1, 3, 3, [ 5, 5 ] ], n = a.arrayFlattenedOnce(r, 6), 
              t = 1, e.identical(r, [ 1, 1, 3, 3, [ 5, 5 ], 6 ]), e.identical(n, t), e.case = "not enough arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnce();
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnce(1, [ 1 ]);
              }), 
              /*
test.case = 'Too many args';
test.shouldThrowErrorSync( function()
{
  _.arrayFlattenedOnce( [ 1 ], 2, 3  );
});
*/
              e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnce([], [ 1 ], []);
              });
            }
            //
            ,
            arrayFlattenedOnceStrictly: function arrayFlattenedOnceStrictly(e) {
              e.case = "make array flat, dst is empty";
              var r = [], n = a.arrayFlattenedOnceStrictly(r, []);
              e.identical(r, []), e.identical(n, 0), r = [], n = a.arrayFlattenedOnceStrictly(r, [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattenedOnceStrictly(r, [ [ 1 ], [ 2 ], 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 3), r = [], n = a.arrayFlattenedOnceStrictly(r, [ [ 1, [ 2, [ 3, 4 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, 4), r = [], n = a.arrayFlattenedOnceStrictly(r, [ [ [ [ [ 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.identical(n, 1), e.case = "make array flat, dst is not empty", 
              r = [ 1, 2, 3, 4 ], n = a.arrayFlattenedOnceStrictly(r, []), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.identical(n, 0), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnceStrictly(r, [ [ [ 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnceStrictly(r, [ [ 4 ], [ 5 ], [ 6 ], [ 7 ] ]), 
              e.identical(r, [ 1, 2, 3, 4, 5, 6, 7 ]), e.identical(n, 4), r = [ 1, 2, 3 ], n = a.arrayFlattenedOnceStrictly(r, [ [ 0, [ -1, [ -2 ] ] ], -3 ]), 
              e.identical(r, [ 1, 2, 3, 0, -1, -2, -3 ]), e.identical(n, 4), r = [ 1 ], n = a.arrayFlattenedOnceStrictly(r, [ [ [ [ [ 2 ] ] ] ] ]), 
              e.identical(r, [ 1, 2 ]), e.identical(n, 1), e.case = "dst contains some inner arrays", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayFlattenedOnceStrictly(r, [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, [ [ 1 ], [ 2 ], [ 3 ], 1, 2, 3 ]), e.identical(n, 3), r = [ [ 1 ], [ 2 ], [ 3 ] ], 
              n = a.arrayFlattenedOnceStrictly(r, [ 4, 5, 6 ]), e.identical(r, [ [ 1 ], [ 2 ], [ 3 ], 4, 5, 6 ]), 
              e.identical(n, 3), e.case = "make array flat from multiple arrays as one arg", r = [ -1, 0 ], 
              n = a.arrayFlattenedOnceStrictly(r, [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, [ -1, 0, 1, 2, 3, 4 ]), e.identical(n, 4), e.case = "onEqualize", 
              r = [ 1, 2, 3, 4 ], n = a.arrayFlattenedOnceStrictly(r, [ 5, 6, 7, 8 ], function(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5, 6, 7, 8 ]), e.identical(n, 4), e.case = "Second arg is not long", 
              r = [ 1, 3, [ 5 ] ], n = a.arrayFlattenedOnceStrictly(r, 5);
              var t = [ 1, 3, [ 5 ], 5 ];
              e.identical(r, t), e.identical(n, 1), r = [ 1, 3, [ 5 ] ], n = a.arrayFlattenedOnceStrictly(r, 6), 
              t = [ 1, 3, [ 5 ], 6 ], e.identical(r, t), e.identical(n, 1), 
              //
              e.open("single argument"), n = a.arrayFlattenedOnceStrictly([ 0, 1, 2, 3 ]), t = [ 0, 1, 2, 3 ], 
              e.identical(n, t), n = a.arrayFlattenedOnceStrictly([ 0, [ 1 ] ]), t = [ 0, 1 ], 
              e.identical(n, t), n = a.arrayFlattenedOnceStrictly([ [ 0 ], [ 1 ] ]), t = [ 0, 1 ], 
              e.identical(n, t), n = a.arrayFlattenedOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]), 
              t = [ 0, 1, 2, 3, 4 ], e.identical(n, t), n = a.arrayFlattenedOnceStrictly([ 0, [ [ 1 ], 2 ], 3, 4 ]), 
              t = [ 0, 2, 1, 3, 4 ], e.identical(n, t), n = a.arrayFlattenedOnceStrictly([ 1, 3, [ 5, 7 ] ]), 
              t = [ 1, 3, 5, 7 ], e.identical(n, t), e.close("single argument"), e.case = "Second arg is not long", 
              r = [], n = a.arrayFlattenedOnceStrictly(r, 2), e.identical(r, [ 2 ]), e.identical(n, 1), 
              e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly();
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([], [ 1 ], []);
              }), e.case = "Elements must not be repeated", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([], [ 1, 1, 2, 2, 3, 3 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0 ], 0);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0, 1, 1 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0 ], 1);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0, 1, 1 ], 2);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0 ], [ 1, 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedOnceStrictly([ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ]);
              });
            }
            //
            ,
            arrayFlatten2: function arrayFlatten2(e) {
              e.case = "array of the passed arguments";
              var r = a.arrayFlatten([], [ "str", {}, [ 1, 2 ], 5, !0 ]), n = [ "str", {}, 1, 2, 5, !0 ];
              e.identical(r, n), e.case = "without undefined", r = a.arrayFlatten([ 1, 2, 3 ], [ 13, "abc", null ]), 
              n = [ 1, 2, 3, 13, "abc", null ], e.identical(r, n), e.case = "Args are not long", 
              r = a.arrayFlatten([ 1, 2 ], 13, "abc", {}), n = [ 1, 2, 13, "abc", {} ], e.identical(r, n), 
              e.case = "bad arguments", e.shouldThrowErrorSync(() => a.arrayFlatten([ 1, 2, 3 ], [ 13, "abc", void 0, null ]));
            },
            arrayFlattenDefined: function arrayFlattenDefined(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenDefined([], []);
              e.identical(r, []), r = a.arrayFlattenDefined([], [ 1, 2, 3 ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenDefined([], [ [ 1 ], [ 2 ], [ 3 ] ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenDefined([], [ [ 1, [ 2, [ 3 ] ] ] ]), e.identical(r, [ 1, 2, 3 ]), 
              r = a.arrayFlattenDefined([], [ [ [ [ [ 1 ] ] ] ] ]), e.identical(r, [ 1 ]), r = a.arrayFlattenDefined([], 1, 2, "3"), 
              e.identical(r, [ 1, 2, "3" ]), e.case = "make array flat, dst is not empty", r = a.arrayFlattenDefined([ 1, 2, 3 ], [ 4 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenDefined([ 1, 2, 3 ], [ 1, 2, 3 ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlattenDefined([ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlattenDefined([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 1, 2, 3 ]), r = a.arrayFlattenDefined([ 1 ], [ [ [ [ [ 1 ] ] ] ] ]), 
              e.identical(r, [ 1, 1 ]), r = a.arrayFlattenDefined([], 1), e.identical(r, [ 1 ]), 
              e.case = "make array flat from multiple arrays as one arg", r = a.arrayFlattenDefined([], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), e.case = "make array flat from different inputs -  null dstArray", 
              r = a.arrayFlattenDefined(null, "str", {}, [ 1, 2 ], 5, !0), e.identical(r, [ "str", {}, 1, 2, 5, !0 ]), 
              r = a.arrayFlattenDefined([ 1, 1, 3, 3, [ 5, 5 ] ], 5), e.identical(r, [ 1, 1, 3, 3, [ 5, 5 ], 5 ]), 
              r = a.arrayFlattenDefined(null, [ 1, 1, 3, 3, [ 5, 5 ] ]), e.identical(r, [ 1, 1, 3, 3, 5, 5 ]), 
              r = a.arrayFlattenDefined([ [ 0 ], [ [ -1, -2 ] ] ], [ 1, 1, 3, 3, [ 5, 5 ] ]), 
              e.identical(r, [ [ 0 ], [ [ -1, -2 ] ], 1, 1, 3, 3, 5, 5 ]), 
              //
              e.case = "single argument", r = a.arrayFlattenDefined([ 0, 1, 2, 3 ]), e.identical(r, [ 0, 1, 2, 3 ]), 
              r = a.arrayFlattenDefined([ [ 0, 0 ], [ 1, 1 ] ]), e.identical(r, [ 0, 0, 1, 1 ]), 
              r = a.arrayFlattenDefined([ [ 0 ], 0, 1, [ 0, 1 ] ]), e.identical(r, [ 0, 0, 1, 0, 1 ]), 
              r = a.arrayFlattenDefined([ [ [ 0 ] ] ]), e.identical(r, [ 0 ]), r = a.arrayFlattenDefined([ 1, 1, 3, 3, [ 5, 5 ] ]), 
              e.identical(r, [ 1, 1, 3, 3, 5, 5 ]), e.case = "Empty", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefined();
              }), e.case = "dstArray is not array", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefined(1, [ 1 ]);
              }), e.case = "insArray is undefined", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefined([ 1 ], void 0);
              });
            }
            //
            ,
            arrayFlattenDefinedOnce: function arrayFlattenDefinedOnce(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenDefinedOnce([], []);
              e.identical(r, []), r = a.arrayFlattenDefinedOnce([], [ 1, 1, 2, 2, 3, 3, 3 ]), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlattenDefinedOnce([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlattenDefinedOnce([], [ [ 1, 1, [ 2, 2, 2, [ 3, 3 ] ] ] ]), 
              e.identical(r, [ 1, 2, 3 ]), r = a.arrayFlattenDefinedOnce([], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.case = "make array flat, dst is not empty", r = a.arrayFlattenDefinedOnce([ 1, 2, 3, 4 ], [ 4, 2 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnce([ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnce([ "a", 2, 3 ], [ [ 1 ], [ 4 ], [ "a" ], [ 4 ] ]), 
              e.identical(r, [ "a", 2, 3, 1, 4 ]), r = a.arrayFlattenDefinedOnce([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ], 4 ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnce([ 1 ], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, [ 1 ]), e.case = "make array flat from multiple arrays as one arg", 
              r = a.arrayFlattenDefinedOnce([ 1, 4 ], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, [ 1, 4, 2, 3 ]), 
              //
              e.case = "onEqualize", r = a.arrayFlattenDefinedOnce([ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], (e, a) => e === a), 
              e.identical(r, [ 1, 2, 3, 4, 5 ]), e.case = "onEvaluate - one evaluator", r = a.arrayFlattenDefinedOnce([ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], e => e), 
              e.identical(r, [ 1, 2, 3, 4, 5 ]), e.case = "onEvaluate - two evaluator", r = a.arrayFlattenDefinedOnce([ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5 ], e => e[0], e => e), 
              e.identical(r, [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], 5 ]), r = a.arrayFlattenDefinedOnce([ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5, [ 6 ] ], e => e[0], e => e), 
              e.identical(r, [ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ], 5, 6 ]), 
              //
              e.case = "single argument", r = a.arrayFlattenDefinedOnce([ 0, 1, 2, 3 ]), e.identical(r, [ 0, 1, 2, 3 ]), 
              r = a.arrayFlattenDefinedOnce([ 0, 1, 0, 1 ]), e.identical(r, [ 0, 1 ]), r = a.arrayFlattenDefinedOnce([ [ 0, 0 ], [ 1, 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenDefinedOnce([ [ 0 ], 0, 1, [ 0, 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenDefinedOnce([ 1, [ [ 0 ], 1 ], 1, 0 ]), 
              e.identical(r, [ 1, 0 ]), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnce();
              }), e.case = "too many arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnce([], [ 1 ], e => e, e => e, e => e);
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnce(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnce([], [ 1 ], []);
              });
            }
            //
            ,
            arrayFlattenDefinedOnceStrictly: function arrayFlattenDefinedOnceStrictly(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenDefinedOnceStrictly([], []);
              e.identical(r, []), r = a.arrayFlattenDefinedOnceStrictly([], [ 1, 2, 3, 4 ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              r = a.arrayFlattenDefinedOnceStrictly([], [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              r = a.arrayFlattenDefinedOnceStrictly([], [ [ 1, [ 2, [ 3 ], 4 ] ] ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              r = a.arrayFlattenDefinedOnceStrictly([], [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ]), e.identical(r, [ 1, 2, 3, 4 ]), 
              e.case = "make array flat, dst is not empty", r = a.arrayFlattenDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ]), 
              e.identical(r, [ 1, 2, 3, 4, 5 ]), r = a.arrayFlattenDefinedOnceStrictly([ 1, 2, 3 ], [ [ [ 4 ] ] ]), 
              e.identical(r, [ 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnceStrictly([ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ]), 
              e.identical(r, [ 1, 0, 2, 3 ]), e.case = "make array flat from multiple arrays as one arg", 
              r = a.arrayFlattenDefinedOnceStrictly([ 1, 4 ], [ [ [ 2 ] ], [ 3, [ [ [ 5 ] ] ] ] ]), 
              e.identical(r, [ 1, 4, 2, 3, 5 ]), 
              //
              e.case = "onEqualize", r = a.arrayFlattenDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ], function(e, a) {
                return e === a;
              }), e.identical(r, [ 1, 2, 3, 4, 5 ]), e.case = "onEvaluate - one evaluator", r = a.arrayFlattenDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ], e => e), 
              e.identical(r, [ 1, 2, 3, 4, 5 ]), e.case = "onEvaluate - two evaluators", r = a.arrayFlattenDefinedOnceStrictly([ 1, 2, 3, 4, 5 ], [ [ 5 ] ], e => e, e => e[0]), 
              e.identical(r, [ 1, 2, 3, 4, 5, 5 ]), 
              //
              e.case = "dstArray has sub arrays", r = a.arrayFlattenDefinedOnceStrictly([ 1, 3, [ 5 ] ], 6), 
              e.identical(r, [ 1, 3, [ 5 ], 6 ]), r = a.arrayFlattenDefinedOnceStrictly([ [ 1, [ 3, [ 5 ] ] ], 2 ], 6), 
              e.identical(r, [ [ 1, [ 3, [ 5 ] ] ], 2, 6 ]), e.case = "single argument", r = a.arrayFlattenDefinedOnceStrictly([ 0, [ 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenDefinedOnceStrictly([ [ 0 ], [ 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenDefinedOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]), 
              e.identical(r, [ 0, 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnceStrictly([ 0, [ [ 2 ], 1 ], 3, 4 ]), 
              e.identical(r, [ 0, 1, 2, 3, 4 ]), r = a.arrayFlattenDefinedOnceStrictly([ 1, 3, [ 7, 5 ] ]), 
              e.identical(r, [ 1, 3, 7, 5 ]), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly();
              }), e.case = "too many arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ 1 ], e => e, e => e, e => e);
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ 1 ], []);
              }), e.case = "second evaluator is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ 1 ], e => e, []);
              }), e.case = "Elements must not be repeated", e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ 1, 1, 2, 2, 3, 3 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([], [ [ [ [ [ 1, 1 ] ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([ 0, 1, 7, 6 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([ 0 ], 0);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenDefinedOnceStrictly([ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ]);
              });
            }
            //
            ,
            arrayFlattenedDefined: function arrayFlattenedDefined(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenedDefined([], []);
              e.identical(r, 0), r = a.arrayFlattenedDefined([], [ 1, 2, 3 ]), e.identical(r, 3), 
              r = a.arrayFlattenedDefined([], [ [ 1 ], [ 2 ], [ 3 ] ]), e.identical(r, 3), r = a.arrayFlattenedDefined([], [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefined([], [ [ [ [ [ 1 ] ] ] ] ]), e.identical(r, 1), 
              r = a.arrayFlattenedDefined([], 1, 2, "3"), e.identical(r, 3), e.case = "make array flat, dst is not empty", 
              r = a.arrayFlattenedDefined([ 1, 2, 3 ], [ 4 ]), e.identical(r, 1), r = a.arrayFlattenedDefined([ 1, 2, 3 ], [ 1, 2, 3 ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefined([ 1, 2, 3 ], [ [ 1 ], [ 2 ], [ 3 ] ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefined([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ] ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefined([ 1 ], [ [ [ [ [ 1 ] ] ] ] ]), e.identical(r, 1), 
              r = a.arrayFlattenedDefined([], 1), e.identical(r, 1), e.case = "make array flat from multiple arrays as one arg", 
              r = a.arrayFlattenedDefined([], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), e.identical(r, 4), 
              e.case = "make array flat from different inputs", r = a.arrayFlattenedDefined([ 1, 1, 3, 3, [ 5, 5 ] ], 5), 
              e.identical(r, 1), r = a.arrayFlattenedDefined([ [ 0 ], [ [ -1, -2 ] ] ], [ 1, 1, 3, 3, [ 5, 5 ] ]), 
              e.identical(r, 6), 
              //
              e.case = "single argument", r = a.arrayFlattenedDefined([ 0, 1, 2, 3 ]), e.identical(r, [ 0, 1, 2, 3 ]), 
              r = a.arrayFlattenedDefined([ [ 0, 0 ], [ 1, 1 ] ]), e.identical(r, [ 0, 0, 1, 1 ]), 
              r = a.arrayFlattenedDefined([ [ 0 ], 0, 1, [ 0, 1 ] ]), e.identical(r, [ 0, 0, 1, 0, 1 ]), 
              r = a.arrayFlattenedDefined([ [ [ 0 ] ] ]), e.identical(r, [ 0 ]), r = a.arrayFlattenedDefined([ 1, 1, 3, 3, [ 5, 5 ] ]), 
              e.identical(r, [ 1, 1, 3, 3, 5, 5 ]), e.case = "Empty", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefined();
              }), e.case = "dstArray is not array", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefined(1, [ 1 ]);
              }), e.case = "insArray is undefined", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefined([ 1 ], void 0);
              });
            }
            //
            ,
            arrayFlattenedDefinedOnce: function arrayFlattenedDefinedOnce(e) {
              e.case = "make array flat, dst is empty or null";
              var r = a.arrayFlattenedDefinedOnce([], []);
              e.identical(r, 0), r = a.arrayFlattenedDefinedOnce([], [ 1, 1, 2, 2, 3, 3, 3 ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefinedOnce([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefinedOnce([], [ [ 1, 1, [ 2, 2, 2, [ 3, 3 ] ] ] ]), 
              e.identical(r, 3), r = a.arrayFlattenedDefinedOnce([], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, 1), e.case = "make array flat, dst is not empty", r = a.arrayFlattenedDefinedOnce([ 1, 2, 3, 4 ], [ 4, 2 ]), 
              e.identical(r, 0), r = a.arrayFlattenedDefinedOnce([ 1, 2, 3 ], [ 1, 2, 3, [ [ 4 ] ] ]), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnce([ "a", 2, 3 ], [ [ 1 ], [ 4 ], [ "a" ], [ 4 ] ]), 
              e.identical(r, 2), r = a.arrayFlattenedDefinedOnce([ 1, 2, 3 ], [ [ 1, [ 2, [ 3 ] ] ], 4 ]), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnce([ 1 ], [ [ [ [ [ 1, 1, 1 ] ] ] ] ]), 
              e.identical(r, 0), e.case = "make array flat from multiple arrays as one arg", r = a.arrayFlattenedDefinedOnce([ 1, 4 ], [ [ 1 ], [ [ 2 ] ], [ 3, [ [ [ 4 ] ] ] ] ]), 
              e.identical(r, 2), 
              //
              e.case = "onEqualize", r = a.arrayFlattenedDefinedOnce([ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], (e, a) => e === a), 
              e.identical(r, 1), e.case = "onEvaluate - one evaluator", r = a.arrayFlattenedDefinedOnce([ 1, 2, 3, 4 ], [ 1, 4, 2, 5 ], e => e), 
              e.identical(r, 1), e.case = "onEvaluate - two evaluator", r = a.arrayFlattenedDefinedOnce([ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5 ], e => e[0], e => e), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnce([ [ 1 ], 5, [ 2 ], [ 3 ], [ 4 ] ], [ 1, 4, 2, 5, [ 6 ] ], e => e[0], e => e), 
              e.identical(r, 2), 
              //
              e.case = "single argument", r = a.arrayFlattenedDefinedOnce([ 0, 1, 2, 3 ]), e.identical(r, [ 0, 1, 2, 3 ]), 
              r = a.arrayFlattenedDefinedOnce([ 0, 1, 0, 1 ]), e.identical(r, [ 0, 1 ]), r = a.arrayFlattenedDefinedOnce([ [ 0, 0 ], [ 1, 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenedDefinedOnce([ [ 0 ], 0, 1, [ 0, 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenedDefinedOnce([ 1, [ [ 0 ], 1 ], 1, 0 ]), 
              e.identical(r, [ 1, 0 ]), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnce();
              }), e.case = "too many arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnce([], [ 1 ], e => e, e => e, e => e);
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnce(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnce([], [ 1 ], []);
              });
            }
            //
            ,
            arrayFlattenedDefinedOnceStrictly: function arrayFlattenedDefinedOnceStrictly(e) {
              e.case = "make array flat, dst is empty";
              var r = a.arrayFlattenedDefinedOnceStrictly([], []);
              e.identical(r, 0), r = a.arrayFlattenedDefinedOnceStrictly([], [ 1, 2, 3, 4 ]), 
              e.identical(r, 4), r = a.arrayFlattenedDefinedOnceStrictly([], [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]), 
              e.identical(r, 4), r = a.arrayFlattenedDefinedOnceStrictly([], [ [ 1, [ 2, [ 3 ], 4 ] ] ]), 
              e.identical(r, 4), r = a.arrayFlattenedDefinedOnceStrictly([], [ 1, [ 2, [ [ 3, [ 4 ] ] ] ] ]), 
              e.identical(r, 4), e.case = "make array flat, dst is not empty", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ]), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnceStrictly([ 1, 2, 3 ], [ [ [ 4 ] ] ]), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnceStrictly([ 1 ], [ [ [ [ [ 0, 2, 3 ] ] ] ] ]), 
              e.identical(r, 3), e.case = "make array flat from multiple arrays as one arg", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 4 ], [ [ [ 2 ] ], [ 3, [ [ [ 5 ] ] ] ] ]), 
              e.identical(r, 3), 
              //
              e.case = "onEqualize", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ], function(e, a) {
                return e === a;
              }), e.identical(r, 1), e.case = "onEvaluate - one evaluator", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 2, 3, 4 ], [ 5 ], e => e), 
              e.identical(r, 1), e.case = "onEvaluate - two evaluators", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 2, 3, 4, 5 ], [ [ 5 ] ], e => e, e => e[0]), 
              e.identical(r, 1), 
              //
              e.case = "dstArray has sub arrays", r = a.arrayFlattenedDefinedOnceStrictly([ 1, 3, [ 5 ] ], 6), 
              e.identical(r, 1), r = a.arrayFlattenedDefinedOnceStrictly([ [ 1, [ 3, [ 5 ] ] ], 2 ], 6), 
              e.identical(r, 1), e.case = "single argument", r = a.arrayFlattenedDefinedOnceStrictly([ 0, [ 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenedDefinedOnceStrictly([ [ 0 ], [ 1 ] ]), 
              e.identical(r, [ 0, 1 ]), r = a.arrayFlattenedDefinedOnceStrictly([ [ 0 ], 1, 2, [ 3, 4 ] ]), 
              e.identical(r, [ 0, 1, 2, 3, 4 ]), r = a.arrayFlattenedDefinedOnceStrictly([ 0, [ [ 2 ], 1 ], 3, 4 ]), 
              e.identical(r, [ 0, 1, 2, 3, 4 ]), r = a.arrayFlattenedDefinedOnceStrictly([ 1, 3, [ 7, 5 ] ]), 
              e.identical(r, [ 1, 3, 7, 5 ]), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly();
              }), e.case = "too many arguments", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ 1 ], e => e, e => e, e => e);
              }), e.case = "first is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly(1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ 1 ], []);
              }), e.case = "second evaluator is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ 1 ], e => e, []);
              }), e.case = "Elements must not be repeated", e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ 1, 1, 2, 2, 3, 3 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ [ 1 ], [ 1 ], [ 2 ], [ 2 ], [ 3 ], [ 3 ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ [ 1, 1, [ 2, 2, [ 3, 3 ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([], [ [ [ [ [ 1, 1 ] ] ] ] ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([ 0, 1, 7, 6 ], [ [ 4, [ 5, [ 6 ] ] ], 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([ 0 ], 0);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([ 0, 1, 2, 3 ], [ [ 4, [ 5, [ 0 ] ] ], 7 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayFlattenedDefinedOnceStrictly([ 0, 0, 1, 1 ], [ 3, 4, [ 5, [ 6 ] ] ]);
              });
            }
            //
            // array replace
            //
            ,
            // array replace
            arrayReplace: function arrayReplace(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplace(r, void 0, 0);
              e.identical(n, []), e.is(n === r), e.case = "nothing", r = [], n = a.arrayReplace(r, 0, 0);
              var t = [];
              e.identical(n, t), e.is(n === r), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplace(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(n, t), e.is(n === r), 
              e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], n = a.arrayReplace(r, "Dmitry", "Bob"), 
              t = [ "Petre", "Mikle", "Oleg", "Bob" ], e.identical(n, t), e.is(n === r), e.case = "Several elements", 
              r = [ !0, !0, !0, !0, !1, !1 ], n = a.arrayReplace(r, !1, !0), t = [ !0, !0, !0, !0, !0, !0 ], 
              e.identical(n, t), e.is(n === r), r = [ 1, 1, 1 ], n = a.arrayReplace(r, 1, 0), 
              e.identical(n, [ 0, 0, 0 ]), e.is(n === r), r = [ 1, 2, 1 ], n = a.arrayReplace(r, 1, 0), 
              e.identical(n, [ 0, 2, 0 ]), e.is(n === r), e.case = "No match", r = [ 1, 2, 3 ], 
              n = a.arrayReplace(r, 4, 0), e.identical(n, [ 1, 2, 3 ]), e.is(n === r), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplace(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(n, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplace();
              }), e.case = "first arg is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplace(1, 1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplace(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplaceOnce: function arrayReplaceOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplaceOnce(r, 0, 0), t = [];
              e.identical(n, t), e.is(n === r), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplaceOnce(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(n, t), 
              e.is(n === r), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaceOnce(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(n, t), e.is(n === r), e.case = "fourth element", r = [ !0, !0, !0, !0, !1, !1 ], 
              n = a.arrayReplaceOnce(r, !1, !0), t = [ !0, !0, !0, !0, !0, !1 ], e.is(n === r), 
              e.case = "element not exists", r = [ 1, 2, 3 ], n = a.arrayReplaceOnce(r, [ 1 ], [ 4 ]), 
              t = [ 1, 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "replace just first match", 
              r = [ 0, 0, 0, 0, 0, 0 ], n = a.arrayReplaceOnce(r, 0, 1), t = [ 1, 0, 0, 0, 0, 0 ], 
              e.identical(n, t), e.is(n === r), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplaceOnce(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnce();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnce([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnce([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnce("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplaceOnceStrictly: function arrayReplaceOnceStrictly(e) {
              e.case = "repeated element";
              var r = [ 1, void 0, 3, 4, 5 ], n = a.arrayReplaceOnceStrictly(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ];
              e.identical(n, t), e.is(n === r), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplaceOnceStrictly(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(n, t), 
              e.is(n === r), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaceOnceStrictly(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(n, t), e.is(n === r), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplaceOnceStrictly(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(n, t), 
              e.is(n === r), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplaceOnceStrictly(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly();
              }), e.case = "nothing", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([], 0, 0);
              }), e.case = "element doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([ 1, 2, 3 ], [ 1 ], [ 4 ]);
              }), e.case = "element two times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([ 1, 2, 3, 1 ], [ 1 ], [ 4 ]);
              }), e.case = "element several times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([ 0, 0, 0, 0, 0, 0 ], 0, 1);
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplaceOnceStrictly("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplaced: function arrayReplaced(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplaced(r, void 0, 0);
              e.identical(r, []), e.identical(n, 0), e.case = "nothing", r = [], n = a.arrayReplaced(r, 0, 0), 
              e.identical(r, []), e.identical(n, 0), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplaced(r, void 0, 2);
              var t = [ 1, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, 1), e.case = "fourth element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaced(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, 1), e.case = "Several elements", r = [ !0, !0, !0, !0, !1, !1 ], 
              n = a.arrayReplaced(r, !1, !0), t = [ !0, !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayReplaced(r, 1, 0), e.identical(r, [ 0, 0, 0 ]), 
              e.identical(n, 3), r = [ 1, 2, 1 ], n = a.arrayReplaced(r, 1, 0), e.identical(r, [ 0, 2, 0 ]), 
              e.identical(n, 2), e.case = "No match", r = [ 1, 2, 3 ], n = a.arrayReplaced(r, 4, 0), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplaced(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(r, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplaced();
              }), e.case = "first arg is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaced(1, 1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaced(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplacedOnce: function arrayReplacedOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplacedOnce(r, 0, 0);
              e.identical(r, []), e.identical(n, -1), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplacedOnce(r, void 0, 2);
              var t = [ 1, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, 1), e.case = "fourth element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplacedOnce(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, 3), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedOnce(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, 4), e.case = "first of several elements", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedOnce(r, !0, !1), t = [ !1, !0, !0, !0, !1 ], e.identical(r, t), 
              e.identical(n, 0), e.case = "element not exists", r = [ 1, 2, 3 ], n = a.arrayReplacedOnce(r, [ 1 ], [ 4 ]), 
              t = [ 1, 2, 3 ], e.identical(r, t), e.identical(n, -1), e.case = "equalize", r = [ 1, 2, 3 ], 
              n = a.arrayReplacedOnce(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(r, t), e.identical(n, 0), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnce();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnce([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnce([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnce("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplacedOnceStrictly: function arrayReplacedOnceStrictly(e) {
              e.case = "first element";
              var r = [ 1, 2, 3, 4, 5 ], n = a.arrayReplacedOnceStrictly(r, 1, 2), t = [ 2, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, 0), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplacedOnceStrictly(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(r, t), 
              e.identical(n, 1), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplacedOnceStrictly(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, 3), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedOnceStrictly(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, 4), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplacedOnceStrictly(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(r, t), e.identical(n, 0), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly();
              }), e.case = "nothing", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly([], 0, 0);
              }), e.case = "element several times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly([ 1, 2, 3, 1, 2, 3 ], 1, 4);
              }), e.case = "element doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly([ 1, 2, 3 ], [ 1 ], [ 4 ]);
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplacedOnceStrictly("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplaceElement: function arrayReplaceElement(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplaceElement(r, void 0, 0);
              e.identical(n, []), e.is(n === r), e.case = "nothing", r = [], n = a.arrayReplaceElement(r, 0, 0);
              var t = [];
              e.identical(n, t), e.is(n === r), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplaceElement(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(n, t), 
              e.is(n === r), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaceElement(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(n, t), e.is(n === r), e.case = "Several elements", r = [ !0, !0, !0, !0, !1, !1 ], 
              n = a.arrayReplaceElement(r, !1, !0), t = [ !0, !0, !0, !0, !0, !0 ], e.identical(n, t), 
              e.is(n === r), r = [ 1, 1, 1 ], n = a.arrayReplaceElement(r, 1, 0), e.identical(n, [ 0, 0, 0 ]), 
              e.is(n === r), r = [ 1, 2, 1 ], n = a.arrayReplaceElement(r, 1, 0), e.identical(n, [ 0, 2, 0 ]), 
              e.is(n === r), e.case = "No match", r = [ 1, 2, 3 ], n = a.arrayReplaceElement(r, 4, 0), 
              e.identical(n, [ 1, 2, 3 ]), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplaceElement(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(n, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.is(n === r), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement();
              }), e.case = "first arg is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement(1, 1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplaceElement2: function arrayReplaceElement2(e) {
              e.case = "replace all ins with sub";
              var r = [], n = a.arrayReplaceElement(r, void 0, 0);
              e.identical(n, []), r = [ 1, 1, 1 ], n = a.arrayReplaceElement(r, 1, 0), e.identical(n, [ 0, 0, 0 ]), 
              r = [ 1, 2, 1 ], n = a.arrayReplaceElement(r, 1, 0), e.identical(n, [ 0, 2, 0 ]), 
              r = [ 1, 2, 3 ], n = a.arrayReplaceElement(r, 4, 0), e.identical(n, [ 1, 2, 3 ]), 
              r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplaceElement(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(n, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement();
              }), e.case = "first arg is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement(1, 1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElement(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplaceElementOnce: function arrayReplaceElementOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplaceElementOnce(r, 0, 0), t = [];
              e.identical(n, t), e.is(n === r), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplaceElementOnce(r, void 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(n, t), 
              e.is(n === r), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaceElementOnce(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(n, t), e.is(n === r), e.case = "fourth element", r = [ !0, !0, !0, !0, !1, !1 ], 
              n = a.arrayReplaceElementOnce(r, !1, !0), t = [ !0, !0, !0, !0, !0, !1 ], e.identical(n, t), 
              e.is(n === r), e.case = "element not exists", r = [ 1, 2, 3 ], n = a.arrayReplaceElementOnce(r, [ 1 ], [ 4 ]), 
              t = [ 1, 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "replace just first match", 
              r = [ 0, 0, 0, 0, 0, 0 ], n = a.arrayReplaceElementOnce(r, 0, 1), t = [ 1, 0, 0, 0, 0, 0 ], 
              e.identical(n, t), e.is(n === r), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplaceElementOnce(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnce();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnce([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnce([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnce("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplaceElementOnceStrictly: function arrayReplaceElementOnceStrictly(e) {
              e.case = "second element";
              var r = [ 1, 0, 3, 4, 5 ], n = a.arrayReplaceElementOnceStrictly(r, 0, 2), t = [ 1, 2, 3, 4, 5 ];
              e.identical(n, t), e.is(n === r), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplaceElementOnceStrictly(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(n, t), e.is(n === r), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplaceElementOnceStrictly(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(n, t), 
              e.is(n === r), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplaceElementOnceStrictly(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(n, t), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly();
              }), e.case = "nothing", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([], 0, 0);
              }), e.case = "element doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([ 1, 2, 3 ], [ 1 ], [ 4 ]);
              }), e.case = "element two times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([ 1, 2, 3, 1 ], [ 1 ], [ 4 ]);
              }), e.case = "element several times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([ 0, 0, 0, 0, 0, 0 ], 0, 1);
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplaceElementOnceStrictly("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplacedElement: function arrayReplacedElement(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplacedElement(r, void 0, 0);
              e.identical(r, []), e.identical(n, 0), e.case = "nothing", r = [], n = a.arrayReplacedElement(r, 0, 0), 
              e.identical(r, []), e.identical(n, 0), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplacedElement(r, void 0, 2);
              var t = [ 1, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, 1), e.case = "fourth element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplacedElement(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, 1), e.case = "Several elements", r = [ !0, !0, !0, !0, !1, !1 ], 
              n = a.arrayReplacedElement(r, !1, !0), t = [ !0, !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, 2), r = [ 1, 1, 1 ], n = a.arrayReplacedElement(r, 1, 0), e.identical(r, [ 0, 0, 0 ]), 
              e.identical(n, 3), r = [ 1, 2, 1 ], n = a.arrayReplacedElement(r, 1, 0), e.identical(r, [ 0, 2, 0 ]), 
              e.identical(n, 2), e.case = "No match", r = [ 1, 2, 3 ], n = a.arrayReplacedElement(r, 4, 0), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplacedElement(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(r, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.identical(n, 2), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElement();
              }), e.case = "first arg is not longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElement(1, 1, 1);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElement(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplacedElement2: function arrayReplacedElement2(e) {
              e.case = "replace all ins with sub";
              var r = [], n = a.arrayReplacedElement(r, void 0, 0);
              e.identical(n, 0), e.identical(r, []), r = [ 1, 1, 1 ], n = a.arrayReplacedElement(r, 1, 0), 
              e.identical(n, 3), e.identical(r, [ 0, 0, 0 ]), r = [ 1, 2, 1 ], n = a.arrayReplacedElement(r, 1, 0), 
              e.identical(n, 2), e.identical(r, [ 0, 2, 0 ]), r = [ 1, 2, 3 ], n = a.arrayReplacedElement(r, 4, 0), 
              e.identical(n, 0), e.identical(r, [ 1, 2, 3 ]), r = [ {
                value: 1
              }, {
                value: 1
              }, {
                value: 2
              } ], n = a.arrayReplacedElement(r, 1, {
                value: 0
              }, function onEqualize(e, a) {
                return e.value === a;
              }), e.identical(n, 2), e.identical(r, [ {
                value: 0
              }, {
                value: 0
              }, {
                value: 2
              } ]), e.case = "no args", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElement();
              }), e.case = "first arg is not longIs";
              debugger;
              e.shouldThrowErrorSync(function() {
                debugger;
                a.arrayReplacedElement(1, 1, 1);
              });
              debugger;
              e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElement(1, 1, 1, 1);
              });
            }
            //
            ,
            arrayReplacedElementOnce: function arrayReplacedElementOnce(e) {
              e.case = "nothing";
              var r = [], n = a.arrayReplacedElementOnce(r, 0, 0);
              e.identical(r, []), e.identical(n, void 0), e.case = "second element", r = [ 1, void 0, 3, 4, 5 ], 
              n = a.arrayReplacedElementOnce(r, void 0, 2);
              var t = [ 1, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, void 0), e.case = "fourth element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplacedElementOnce(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, "Dmitry"), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedElementOnce(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, !1), e.case = "first of several elements", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedElementOnce(r, !0, !1), t = [ !1, !0, !0, !0, !1 ], e.identical(r, t), 
              e.identical(n, !0), e.case = "element not exists", r = [ 1, 2, 3 ], n = a.arrayReplacedElementOnce(r, [ 1 ], [ 4 ]), 
              t = [ 1, 2, 3 ], e.identical(r, t), e.identical(n, void 0), e.case = "equalize", 
              r = [ 1, 2, 3 ], n = a.arrayReplacedElementOnce(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(r, t), e.identical(n, [ 1 ]), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnce();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnce([ 1, 2, void 0, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnce([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnce("wrong argument", void 0, 3);
              });
            }
            //
            ,
            arrayReplacedElementOnceStrictly: function arrayReplacedElementOnceStrictly(e) {
              e.case = "first element";
              var r = [ 1, 2, 3, 4, 5 ], n = a.arrayReplacedElementOnceStrictly(r, 1, 2), t = [ 2, 2, 3, 4, 5 ];
              e.identical(r, t), e.identical(n, 1), e.case = "second element", r = [ 1, 0, 3, 4, 5 ], 
              n = a.arrayReplacedElementOnceStrictly(r, 0, 2), t = [ 1, 2, 3, 4, 5 ], e.identical(r, t), 
              e.identical(n, 0), e.case = "third element", r = [ "Petre", "Mikle", "Oleg", "Dmitry" ], 
              n = a.arrayReplacedElementOnceStrictly(r, "Dmitry", "Bob"), t = [ "Petre", "Mikle", "Oleg", "Bob" ], 
              e.identical(r, t), e.identical(n, "Dmitry"), e.case = "fourth element", r = [ !0, !0, !0, !0, !1 ], 
              n = a.arrayReplacedElementOnceStrictly(r, !1, !0), t = [ !0, !0, !0, !0, !0 ], e.identical(r, t), 
              e.identical(n, !1), e.case = "equalize", r = [ 1, 2, 3 ], n = a.arrayReplacedElementOnceStrictly(r, [ 1 ], [ 4 ], function onEqualize(e, a) {
                return e === a[0];
              }), t = [ [ 4 ], 2, 3 ], e.identical(r, t), e.identical(n, [ 1 ]), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly();
              }), e.case = "nothing", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([], 0, 0);
              }), e.case = "element several times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([ 1, 2, 3, 1, 2, 3 ], 1, 4);
              }), e.case = "element doesn´t exist", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([ 1, 2, 3 ], [ 1 ], [ 4 ]);
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([ 1, 2, 3, 4, 5 ]);
              }), e.case = "fourth argument is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([ 1, 2, 0, 4, 5 ], 0, 3, "argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly("wrong argument", 0, 3);
              }), e.case = "second argument is undefined", e.shouldThrowErrorSync(function() {
                a.arrayReplacedElementOnceStrictly([ 1, 2, void 0, 4, 5 ], void 0, 3, "argument");
              });
            }
            //
            ,
            arrayReplaceArray: function arrayReplaceArray(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplaceArray(r, [], []);
              e.identical(n, []), e.is(n === r), e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], 
              n = a.arrayReplaceArray(r, [], []), e.identical(n, [ "a", "b", "c", "d" ]), e.is(n === r), 
              e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArray(r, [ 1 ], [ 2 ]), e.identical(n, [ 2, 2, 3 ]), 
              e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArray(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3, 1 ], n = a.arrayReplaceArray(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3, 3 ]), e.is(n === r), r = [ 1, 2, 3, 4, 5, 4, 3, 2, 1 ], 
              n = a.arrayReplaceArray(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(n, [ 3, 2, 3, 6, 5, 6, 3, 2, 3 ]), 
              e.is(n === r), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArray(r, [ void 0 ], [ 0 ]), 
              e.identical(n, [ 1, 2, 3 ]), e.is(n === r), e.case = "ins and dst have undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplaceArray(r, [ void 0 ], [ 0 ]), e.identical(n, [ 1, 0, 3 ]), 
              e.is(n === r), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArray(r, [ 1 ], [ void 0 ]), 
              e.identical(n, [ 2, 3 ]), e.is(n === r), e.case = "ins and sub have mirror elements", 
              r = [ 0, 0, 0, 1, 1, 1, 0, 1 ], n = a.arrayReplaceArray(r, [ 1, 0 ], [ 0, 1 ]), 
              e.identical(n, [ 1, 1, 1, 0, 0, 0, 1, 0 ]), e.is(n === r), r = [ "a", "b", "c", !1, "c", "b", "a", !0, 2 ], 
              n = a.arrayReplaceArray(r, [ "a", "b", "c", !1, !0 ], [ "c", "a", "b", !0, !1 ]), 
              e.identical(n, [ "c", "a", "b", !0, "b", "a", "c", !1, 2 ]), e.is(n === r), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArray(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(n, [ [ 0 ], [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceArray();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArray([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArray(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArray([ 1, 2 ], 1, [ 1 ]);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayReplaceArray( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
              // });
              e.case = "not equal length of ins and sub", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArray([ 1, 2, 3 ], [ 1, 2 ], [ 3 ]);
              });
            }
            //
            ,
            arrayReplaceArrayOnce: function arrayReplaceArrayOnce(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplaceArrayOnce(r, [], []);
              e.identical(n, []), e.is(n === r), e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], 
              n = a.arrayReplaceArrayOnce(r, [], []), e.identical(n, [ "a", "b", "c", "d" ]), 
              e.is(n === r), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArrayOnce(r, [ 1 ], [ 2 ]), 
              e.identical(n, [ 2, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArrayOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3, 1 ], n = a.arrayReplaceArrayOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3, 1 ]), e.is(n === r), e.case = "ins has undefined", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArrayOnce(r, [ void 0 ], [ 0 ]), e.identical(n, [ 1, 2, 3 ]), 
              e.is(n === r), e.case = "ins and dst has undefined", r = [ 1, void 0, 3 ], n = a.arrayReplaceArrayOnce(r, [ void 0 ], [ 0 ]), 
              e.identical(n, [ 1, 0, 3 ]), e.is(n === r), e.case = "sub has undefined", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArrayOnce(r, [ 1 ], [ void 0 ]), e.identical(n, [ 2, 3 ]), e.is(n === r), 
              e.case = "onEqualize", r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArrayOnce(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(n, [ [ 0 ], [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "ins and sub have mirror elements", 
              r = [ 0, 0, 0, 1, 1, 1, 0, 1 ], n = a.arrayReplaceArrayOnce(r, [ 1, 0 ], [ 0, 1 ]), 
              e.identical(n, [ 1, 0, 0, 0, 1, 1, 0, 1 ]), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnce();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnce([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnce(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnce([ 1, 2 ], 1, [ 1 ]);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayReplaceArrayOnce( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
              // });
              e.case = "not equal length of ins and sub", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnce([ 1, 2, 3 ], [ 1, 2 ], [ 3 ]);
              });
            }
            //
            ,
            arrayReplaceArrayOnceStrictly: function arrayReplaceArrayOnceStrictly(e) {
              e.case = "trivial";
              var r = [ "a", "b", "c", "d" ], n = a.arrayReplaceArrayOnceStrictly(r, [ "a", "b", "c" ], [ "x", "y", void 0 ]);
              e.identical(n, [ "x", "y", "d" ]), e.is(n === r), e.case = "dst, ins, sub are empty", 
              r = [], n = a.arrayReplaceArrayOnceStrictly(r, [], []), e.identical(n, []), e.is(n === r), 
              e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], n = a.arrayReplaceArrayOnceStrictly(r, [], []), 
              e.identical(n, [ "a", "b", "c", "d" ]), e.is(n === r), e.case = "only sub is empty", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplaceArrayOnceStrictly(r, [ "a", "b", "c" ], [ void 0, void 0, void 0 ]), 
              e.identical(n, [ "d" ]), e.is(n === r), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArrayOnceStrictly(r, [ 1 ], [ 2 ]), 
              e.identical(n, [ 2, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArrayOnceStrictly(r, [ 1, 2 ], [ 3, void 0 ]), 
              e.identical(n, [ 3, 3 ]), e.is(n === r), e.case = "ins and dst has undefined", r = [ 1, void 0, 3 ], 
              n = a.arrayReplaceArrayOnceStrictly(r, [ void 0 ], [ 0 ]), e.identical(n, [ 1, 0, 3 ]), 
              e.is(n === r), e.case = "onEqualize", r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArrayOnceStrictly(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(n, [ [ 0 ], [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly();
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2, 3 ], [ void 0 ], 0);
              }), e.case = "only one replaced", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2, 3 ], [ 1, 0, 4 ], 3);
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1 ], [ 1 ], 1);
              }), e.case = "ins element several times in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 1 ], 1, 2);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2, 3, 4, 1, 2, 3 ], [ 1, 2, 3 ], [ 6, 7, 8 ]);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 1 ], 1);
              }), e.case = "dst, ins are empty, sub is not, dst does not has ins", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([], [ void 0 ], [ "x" ]);
              }), e.case = "dst does not has ins", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ "b", "c" ], [ "a" ], [ "x" ]);
              }), e.case = "dst, sub are empty, ins is not", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([], [ "a", "b" ], []);
              }), e.case = "only ins is empty", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ "a", "b", "c", "d" ], [], [ "x", "y" ]);
              }), e.case = "not equal length of ins and sub", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrayOnceStrictly([ 1, 2, 3 ], [ 1, 2 ], [ 3 ]);
              });
            }
            //
            ,
            arrayReplacedArray: function arrayReplacedArray(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArray(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArray(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(r, [ 3, 2, 3 ]), e.identical(n, 1), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 1 ], [ 2 ]), e.identical(r, [ 2, 2, 3, 2, 2, 3 ]), 
              e.identical(n, 2), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplacedArray(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3, 4, 3, 4, 3 ]), e.identical(n, 4), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplacedArray(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(r, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ]), 
              e.identical(n, 6), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArray(r, [ void 0 ], [ 0 ]), e.identical(r, [ 1, 0, 3 ]), 
              e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 2 ], [ void 0 ]), 
              e.identical(r, [ 1, 3 ]), e.identical(n, 1), e.case = "Element repeated in ins", 
              r = [ 1, 2, 3 ], n = a.arrayReplacedArray(r, [ 2, 2, 2 ], [ "a", "b", "c" ]), e.identical(r, [ 1, "c", 3 ]), 
              e.identical(n, 3), e.case = "ins and sub have mirror elements", r = [ 0, 0, 0, 1, 1, 1 ], 
              n = a.arrayReplacedArray(r, [ 0, 1 ], [ 1, 0 ]), e.identical(r, [ 1, 1, 1, 0, 0, 0 ]), 
              e.identical(n, 6), r = [ 0, 0, 0, 1, 1, 1, 0, 1 ], n = a.arrayReplacedArray(r, [ 1, 0 ], [ 0, 1 ]), 
              e.identical(r, [ 1, 1, 1, 0, 0, 0, 1, 0 ]), e.identical(n, 8), r = [ "a", "b", "c", !1, "c", "b", "a", !0, 2 ], 
              n = a.arrayReplacedArray(r, [ "a", "b", "c", !1, !0 ], [ "c", "a", "b", !0, !1 ]), 
              e.identical(r, [ "c", "a", "b", !0, "b", "a", "c", !1, 2 ]), e.identical(n, 8), 
              e.case = "onEqualize", r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplacedArray(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(r, [ [ 0 ], [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArray();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArray([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArray(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArray([ 1, 2 ], 1, [ 1 ]);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayReplacedArray( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
              // });
              e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArray([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplacedArrayOnce: function arrayReplacedArrayOnce(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArrayOnce(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArrayOnce(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(r, [ 3, 2, 3 ]), e.identical(n, 1), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ 1 ], [ 2 ]), e.identical(r, [ 2, 2, 3, 1, 2, 3 ]), 
              e.identical(n, 1), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplacedArrayOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3, 4, 3, 2, 1 ]), e.identical(n, 2), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplacedArrayOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(r, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ]), 
              e.identical(n, 3), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArrayOnce(r, [ void 0 ], [ 0 ]), e.identical(r, [ 1, 0, 3 ]), 
              e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnce(r, [ 2 ], [ void 0 ]), 
              e.identical(r, [ 1, 3 ]), e.identical(n, 1), e.case = "onEqualize", r = [ [ 1 ], [ 2 ], [ 3 ] ], 
              n = a.arrayReplacedArrayOnce(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(r, [ [ 0 ], [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnce();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnce([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnce(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnce([ 1, 2 ], 1, [ 1 ]);
              }), 
              // test.case = 'onEqualize is not a routine';
              // test.shouldThrowErrorSync( function()
              // {
              //   _.arrayReplacedArrayOnce( [ 1, 2 ], [ 1 ], [ 1 ], 1 );
              // });
              e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnce([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplacedArrayOnceStrictly: function arrayReplacedArrayOnceStrictly(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArrayOnceStrictly(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArrayOnceStrictly(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnceStrictly(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArrayOnceStrictly(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), e.case = "ins and dst have undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArrayOnceStrictly(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 0, 3 ]), e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], 
              n = a.arrayReplacedArrayOnceStrictly(r, [ 2 ], [ void 0 ]), e.identical(r, [ 1, 3 ]), 
              e.identical(n, 1), e.case = "onEqualize", r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplacedArrayOnceStrictly(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize(e, a) {
                return e[0] === a[0];
              }), e.identical(r, [ [ 0 ], [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "onEqualize is not a routine", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2 ], [ 1 ], [ 1 ], 1);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              }), e.case = "Repeated elements in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.case = "Element not found in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrayOnceStrictly([ 1, 2, 3, 4, 3, 2, 1 ], [ void 0 ], [ 10 ]);
              });
            }
            //
            ,
            arrayReplaceArrays: function arrayReplaceArrays(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplaceArrays(r, [], []);
              e.identical(n, []), e.is(n === r), e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], 
              n = a.arrayReplaceArrays(r, [], []), e.identical(n, [ "a", "b", "c", "d" ]), e.is(n === r), 
              e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ 1 ], [ 2 ]), e.identical(n, [ 2, 2, 3 ]), 
              e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(n, [ 3, 4, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3 ]), e.is(n === r), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ 1 ], [ 2 ]), e.identical(n, [ 2, 2, 3, 2, 2, 3 ]), 
              e.is(n === r), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplaceArrays(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(n, [ 3, 4, 3, 4, 3, 4, 3 ]), e.is(n === r), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplaceArrays(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(n, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ]), 
              e.is(n === r), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ void 0 ], [ 0 ]), 
              e.identical(n, [ 1, 2, 3 ]), e.is(n === r), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplaceArrays(r, [ void 0 ], [ 0 ]), e.identical(n, [ 1, 0, 3 ]), 
              e.is(n === r), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArrays(r, [ 2 ], [ void 0 ]), 
              e.identical(n, [ 1, void 0, 3 ]), e.is(n === r), e.case = "ins and sub Array of arrays", 
              r = [ 0, 1, 2, 3, 4, 5, 0 ], n = a.arrayReplaceArrays(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(n, [ "0", "1", "2", 3, 4, "5", "0" ]), e.is(n === r), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplaceArrays(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(n, [ 1, "a", "b", !0, !0, "c", 1 ]), 
              e.is(n === r), r = [ 0, 0, 0, 2, 1, 0, 0 ], n = a.arrayReplaceArrays(r, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]), 
              e.identical(n, [ 1, 1, 1, 2, 0, 1, 1 ]), e.is(n === r), e.case = "ins and sub Array of arrays with mirror elements", 
              r = [ 1, 1, 0, 0 ], n = a.arrayReplaceArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ 0, 0, 1, 1 ]), e.is(n === r), r = [ "a", "b", "c" ], n = a.arrayReplaceArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ "b", "a", "c" ]), e.is(n === r), r = [ !0, !1, !0, !1 ], n = a.arrayReplaceArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ !1, !0, !1, !0 ]), e.is(n === r), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplaceArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.is(n === r), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArrays(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(n, [ 0, [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "onEqualize", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArrays(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(n, [ [ 0 ], 2, 3 ]), e.is(n === r), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrays();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrays([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrays(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrays([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArrays([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplaceArraysOnce: function arrayReplaceArraysOnce(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplaceArraysOnce(r, [], []);
              e.identical(n, []), e.is(n === r), e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], 
              n = a.arrayReplaceArraysOnce(r, [], []), e.identical(n, [ "a", "b", "c", "d" ]), 
              e.is(n === r), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ 1 ], [ 2 ]), 
              e.identical(n, [ 2, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(n, [ 3, 4, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(n, [ 3, 2, 3 ]), e.is(n === r), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ 1 ], [ 2 ]), e.identical(n, [ 2, 2, 3, 1, 2, 3 ]), 
              e.is(n === r), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplaceArraysOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(n, [ 3, 4, 3, 4, 3, 2, 1 ]), e.is(n === r), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplaceArraysOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(n, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ]), 
              e.is(n === r), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ void 0 ], [ 0 ]), 
              e.identical(n, [ 1, 2, 3 ]), e.is(n === r), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplaceArraysOnce(r, [ void 0 ], [ 0 ]), e.identical(n, [ 1, 0, 3 ]), 
              e.is(n === r), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnce(r, [ 2 ], [ void 0 ]), 
              e.identical(n, [ 1, void 0, 3 ]), e.is(n === r), e.case = "ins and sub Array of arrays", 
              r = [ 0, 1, 2, 3, 4, 5, 0 ], n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(n, [ "0", "1", "2", 3, 4, "5", 0 ]), e.is(n === r), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplaceArraysOnce(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(n, [ 1, "a", "b", !0, !0, "c", 0 ]), 
              e.is(n === r), r = [ 0, 0, 0, 2, 1, 0, 0 ], n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]), 
              e.identical(n, [ 1, 0, 0, 2, 0, 0, 0 ]), e.is(n === r), e.case = "ins and sub Array of arrays with mirror elements", 
              r = [ 1, 1, 0, 0 ], n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ 0, 1, 1, 0 ]), e.is(n === r), r = [ "a", "b", "c" ], n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ "b", "a", "c" ]), e.is(n === r), r = [ !0, !1, !0, !1 ], n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ !1, !0, !0, !1 ]), e.is(n === r), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplaceArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.is(n === r), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArraysOnce(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(n, [ 0, [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "onEqualize", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArraysOnce(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(n, [ [ 0 ], 2, 3 ]), e.is(n === r), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnce();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnce([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnce(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnce([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnce([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplaceArraysOnceStrictly: function arrayReplaceArraysOnceStrictly(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplaceArraysOnceStrictly(r, [], []);
              e.identical(n, []), e.is(n === r), e.case = "ins, sub are empty, dst is not", r = [ "a", "b", "c", "d" ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [], []), e.identical(n, [ "a", "b", "c", "d" ]), 
              e.is(n === r), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnceStrictly(r, [ 1 ], [ 2 ]), 
              e.identical(n, [ 2, 2, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnceStrictly(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(n, [ 3, 4, 3 ]), e.is(n === r), r = [ 1, 2, 3 ], n = a.arrayReplaceArraysOnceStrictly(r, [ 1, 2, 3 ], [ 4, 5, 6 ]), 
              e.identical(n, [ 4, 5, 6 ]), e.is(n === r), e.case = "ins has undefined", e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplaceArraysOnceStrictly(r, [ void 0 ], [ 0 ]), 
              e.identical(n, [ 1, 0, 3 ]), e.is(n === r), e.case = "sub has undefined", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ 2 ], [ void 0 ]), e.identical(n, [ 1, void 0, 3 ]), 
              e.is(n === r), e.case = "ins and sub Array of arrays", r = [ 0, 1, 2, 3, 4, 5, 0 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(n, [ "0", "1", "2", 3, 4, "5", 0 ]), e.is(n === r), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(n, [ 1, "a", "b", !0, !0, "c", 0 ]), 
              e.is(n === r), e.case = "ins and sub Array of arrays with mirror elements", r = [ 1, 0 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ [ 0, 1 ] ], [ [ 1, 0 ] ]), e.identical(n, [ 0, 1 ]), 
              e.is(n === r), r = [ "a", "b", "c" ], n = a.arrayReplaceArraysOnceStrictly(r, [ [ "a", "b" ] ], [ [ "b", "a" ] ]), 
              e.identical(n, [ "b", "a", "c" ]), e.is(n === r), r = [ !0, !1, !0, !1 ], n = a.arrayReplaceArraysOnceStrictly(r, [ [ !0, !1 ] ], [ [ !1, !0 ] ]), 
              e.identical(n, [ !1, !0, !0, !1 ]), e.is(n === r), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(n, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.is(n === r), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplaceArraysOnceStrictly(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(n, [ 0, [ 2 ], [ 3 ] ]), e.is(n === r), e.case = "onEqualize", r = [ 1, 2, 3 ], 
              n = a.arrayReplaceArraysOnceStrictly(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(n, [ [ 0 ], 2, 3 ]), e.is(n === r), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              }), e.case = "ins element is not in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1, 2, 3 ], [ void 0 ], [ 0 ]);
              }), e.case = "Repeated elements in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplaceArraysOnceStrictly([ 0, 0, 0, 2, 1, 0, 0 ], [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]);
              });
            }
            //
            ,
            arrayReplacedArrays: function arrayReplacedArrays(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArrays(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArrays(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(r, [ 3, 2, 3 ]), e.identical(n, 1), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ 1 ], [ 2 ]), e.identical(r, [ 2, 2, 3, 2, 2, 3 ]), 
              e.identical(n, 2), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplacedArrays(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3, 4, 3, 4, 3 ]), e.identical(n, 4), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplacedArrays(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(r, [ 5, 5, 3, 3, 2, 2, 3, 3, 6, 6 ]), 
              e.identical(n, 6), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArrays(r, [ void 0 ], [ 0 ]), e.identical(r, [ 1, 0, 3 ]), 
              e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ 2 ], [ void 0 ]), 
              e.identical(r, [ 1, void 0, 3 ]), e.identical(n, 1), e.case = "ins and sub Array of arrays", 
              r = [ 0, 1, 2, 3, 4, 5, 0 ], n = a.arrayReplacedArrays(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(r, [ "0", "1", "2", 3, 4, "5", "0" ]), e.identical(n, 5), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplacedArrays(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(r, [ 1, "a", "b", !0, !0, "c", 1 ]), 
              e.identical(n, 3), r = [ 0, 0, 0, 2, 1, 0, 0 ], n = a.arrayReplacedArrays(r, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]), 
              e.identical(r, [ 1, 1, 1, 2, 0, 1, 1 ]), e.identical(n, 11), e.case = "ins and sub Array of arrays with mirror elements", 
              r = [ 1, 1, 0, 0 ], n = a.arrayReplacedArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ 0, 0, 1, 1 ]), e.identical(n, 4), r = [ "a", "b", "c" ], n = a.arrayReplacedArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ "b", "a", "c" ]), e.identical(n, 2), r = [ !0, !1, !0, !1 ], n = a.arrayReplacedArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ !1, !0, !1, !0 ]), e.identical(n, 4), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplacedArrays(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.identical(n, 6), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplacedArrays(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(r, [ 0, [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "onEqualize", 
              r = [ 1, 2, 3 ], n = a.arrayReplacedArrays(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(r, [ [ 0 ], 2, 3 ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrays();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrays([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrays(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrays([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArrays([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplacedArraysOnce: function arrayReplacedArraysOnce(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArraysOnce(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArraysOnce(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), 
              e.identical(r, [ 3, 2, 3 ]), e.identical(n, 1), e.case = "Repeated elements in dstArray", 
              r = [ 1, 2, 3, 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ 1 ], [ 2 ]), e.identical(r, [ 2, 2, 3, 1, 2, 3 ]), 
              e.identical(n, 1), r = [ 1, 2, 3, 4, 3, 2, 1 ], n = a.arrayReplacedArraysOnce(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3, 4, 3, 2, 1 ]), e.identical(n, 2), r = [ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], 
              n = a.arrayReplacedArraysOnce(r, [ 1, 0, 4 ], [ 3, 5, 6 ]), e.identical(r, [ 5, 0, 3, 1, 2, 2, 3, 3, 6, 4 ]), 
              e.identical(n, 3), e.case = "ins has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 2, 3 ]), e.identical(n, 0), e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArraysOnce(r, [ void 0 ], [ 0 ]), e.identical(r, [ 1, 0, 3 ]), 
              e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ 2 ], [ void 0 ]), 
              e.identical(r, [ 1, void 0, 3 ]), e.identical(n, 1), e.case = "ins and sub Array of arrays", 
              r = [ 0, 1, 2, 3, 4, 5, 0 ], n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(r, [ "0", "1", "2", 3, 4, "5", 0 ]), e.identical(n, 4), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplacedArraysOnce(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(r, [ 1, "a", "b", !0, !0, "c", 0 ]), 
              e.identical(n, 2), r = [ 0, 0, 0, 2, 1, 0, 0 ], n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]), 
              e.identical(r, [ 1, 0, 0, 2, 0, 0, 0 ]), e.identical(n, 3), e.case = "ins and sub Array of arrays with mirror elements", 
              r = [ 1, 1, 0, 0 ], n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ 0, 1, 1, 0 ]), e.identical(n, 2), r = [ "a", "b", "c" ], n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ "b", "a", "c" ]), e.identical(n, 2), r = [ !0, !1, !0, !1 ], n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ !1, !0, !0, !1 ]), e.identical(n, 2), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplacedArraysOnce(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.identical(n, 6), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplacedArraysOnce(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(r, [ 0, [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "onEqualize", 
              r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnce(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(r, [ [ 0 ], 2, 3 ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnce();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnce([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnce(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnce([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnce([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              });
            }
            //
            ,
            arrayReplacedArraysOnceStrictly: function arrayReplacedArraysOnceStrictly(e) {
              e.case = "dst, ins, sub are empty";
              var r = [], n = a.arrayReplacedArraysOnceStrictly(r, [], []);
              e.identical(r, []), e.identical(n, 0), e.case = "ins, sub are empty, dst is not", 
              r = [ "a", "b", "c", "d" ], n = a.arrayReplacedArraysOnceStrictly(r, [], []), e.identical(r, [ "a", "b", "c", "d" ]), 
              e.identical(n, 0), e.case = "other", r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnceStrictly(r, [ 1 ], [ 2 ]), 
              e.identical(r, [ 2, 2, 3 ]), e.identical(n, 1), r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnceStrictly(r, [ 1, 2 ], [ 3, 4 ]), 
              e.identical(r, [ 3, 4, 3 ]), e.identical(n, 2), r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnceStrictly(r, [ 1, 2, 3 ], [ 4, 5, 6 ]), 
              e.identical(r, [ 4, 5, 6 ]), e.identical(n, 3), e.case = "ins has undefined", e.case = "ins and dst has undefined", 
              r = [ 1, void 0, 3 ], n = a.arrayReplacedArraysOnceStrictly(r, [ void 0 ], [ 0 ]), 
              e.identical(r, [ 1, 0, 3 ]), e.identical(n, 1), e.case = "sub has undefined", r = [ 1, 2, 3 ], 
              n = a.arrayReplacedArraysOnceStrictly(r, [ 2 ], [ void 0 ]), e.identical(r, [ 1, void 0, 3 ]), 
              e.identical(n, 1), e.case = "ins and sub Array of arrays", r = [ 0, 1, 2, 3, 4, 5, 0 ], 
              n = a.arrayReplacedArraysOnceStrictly(r, [ [ 0, 1 ], 2, [ 5 ] ], [ [ "0", "1" ], "2", [ "5" ] ]), 
              e.identical(r, [ "0", "1", "2", 3, 4, "5", 0 ]), e.identical(n, 4), r = [ 0, "a", "b", !1, !0, "c", 0 ], 
              n = a.arrayReplacedArraysOnceStrictly(r, [ [ 0, !1 ] ], [ [ 1, !0 ] ]), e.identical(r, [ 1, "a", "b", !0, !0, "c", 0 ]), 
              e.identical(n, 2), e.case = "ins and sub Array of arrays with mirror elements", 
              r = [ 1, 0 ], n = a.arrayReplacedArraysOnceStrictly(r, [ [ 0, 1 ] ], [ [ 1, 0 ] ]), 
              e.identical(r, [ 0, 1 ]), e.identical(n, 2), r = [ "a", "b", "c" ], n = a.arrayReplacedArraysOnceStrictly(r, [ [ "a", "b" ] ], [ [ "b", "a" ] ]), 
              e.identical(r, [ "b", "a", "c" ]), e.identical(n, 2), r = [ !0, !1, !0, !1 ], n = a.arrayReplacedArraysOnceStrictly(r, [ [ !0, !1 ] ], [ [ !1, !0 ] ]), 
              e.identical(r, [ !1, !0, !0, !1 ]), e.identical(n, 2), r = [ 0, "a", !0, 2, "c", !1, "b", 1 ], 
              n = a.arrayReplacedArraysOnceStrictly(r, [ [ 0, 1 ], [ "a", "b" ], [ !0, !1 ] ], [ [ 1, 0 ], [ "b", "a" ], [ !1, !0 ] ]), 
              e.identical(r, [ 1, "b", !1, 2, "c", !0, "a", 0 ]), e.identical(n, 6), e.case = "onEqualize", 
              r = [ [ 1 ], [ 2 ], [ 3 ] ], n = a.arrayReplacedArraysOnceStrictly(r, [ [ 1 ] ], [ [ 0 ] ], function onEqualize1(e, a) {
                return e[0] === a;
              }), e.identical(r, [ 0, [ 2 ], [ 3 ] ]), e.identical(n, 1), e.case = "onEqualize", 
              r = [ 1, 2, 3 ], n = a.arrayReplacedArraysOnceStrictly(r, [ [ [ 1 ] ] ], [ [ [ 0 ] ] ], function onEqualize(e, a) {
                return e === a[0];
              }), e.identical(r, [ [ 0 ], 2, 3 ]), e.identical(n, 1), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly();
              }), e.case = "sub is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1 ], [ 1 ], 1);
              }), e.case = "dstArray is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly(1, [ 1 ], [ 1 ]);
              }), e.case = "ins is not a longIs", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1, 2 ], 1, [ 1 ]);
              }), e.case = "ins and sub don´t have the same length ", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ "a", "b", "c", "d" ], [ "a", "b", "c" ], [ "x", "y" ]);
              }), e.case = "ins element is not in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1, 2, 3 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1, 2, 3 ], [ void 0 ], [ 0 ]);
              }), e.case = "Repeated elements in dstArray", e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1, 2, 3, 1, 2, 3 ], [ 1 ], [ 2 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 1, 2, 3, 4, 3, 2, 1 ], [ 1, 2 ], [ 3, 4 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4 ], [ 1, 0, 4 ], [ 3, 5, 6 ]);
              }), e.shouldThrowErrorSync(function() {
                a.arrayReplacedArraysOnceStrictly([ 0, 0, 0, 2, 1, 0, 0 ], [ [ 0, 1 ], 0 ], [ [ 1, 0 ], "0" ]);
              });
            }
            // //
            //
            // function arrayReplaceArraysOnce( test )
            // {
            //   test.case = 'replace elements from arrays from ins with relevant values from sub';
            //
            //   var dst = [];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [] ], [ [] ] );
            //   test.identical( got, [] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ] ], [ [ 3 ] ] );
            //   test.identical( got, [ 3, 2, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
            //   test.identical( got, [ 3, 4, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ [ 1 ] ] ], [ 0 ] );
            //   test.identical( got, [ 1, 2, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
            //   test.identical( got, [ 0, 2, 0 ] );
            //
            //   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
            //   function onEqualize( a, b )
            //   {
            //     return a[ 0 ] === b[ 0 ];
            //   }
            //   var got = _.arrayReplaceArraysOnce( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
            //   test.identical( got, [ [ 0 ], [ 0 ], [ 0 ] ] );
            //
            //   //
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce();
            //   })
            //
            //   test.case = 'dstArray is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( 1, [ [ 1 ] ], [ 1 ] );
            //   })
            //
            //   test.case = 'ins is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1, 2 ], 1, [ 1 ] );
            //   })
            //
            //   test.case = 'ins must be array of arrays';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1, 2 ],[ 1 ], [ 1 ] );
            //   })
            //
            //   test.case = 'onEqualize is not a routine';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
            //   })
            //
            //   test.case = 'ins and sub length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
            //   })
            //
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
            //   })
            //
            //   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnce( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
            //   })
            // }
            //
            // //
            //
            // function arrayReplaceArraysOnceStrictly( test )
            // {
            //   test.case = 'replace elements from arrays from ins with relevant values from sub';
            //
            //   var dst = [];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [] ], [ [] ] );
            //   test.identical( got, [] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ] ], [ [ 3 ] ] );
            //   test.identical( got, [ 3, 2, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
            //   test.identical( got, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
            //   test.identical( got, [ 3, 4, 3 ] );
            //
            //   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
            //   function onEqualize( a, b )
            //   {
            //     return a[ 0 ] === b[ 0 ];
            //   }
            //   var got = _.arrayReplaceArraysOnceStrictly( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
            //   test.identical( got, [ [ 0 ], [ 0 ], [ 0 ] ] );
            //
            //   //
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly();
            //   })
            //
            //   test.shouldThrowErrorSync( function()
            //   {
            //     var dst = [ 1, 2, 3 ];
            //     _.arrayReplaceArraysOnceStrictly( dst, [ [ [ 1 ] ] ], [ 0 ] );
            //   })
            //
            //   test.case = 'one element is not replaced';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     var dst = [ 1, 2, 3 ];
            //     _.arrayReplaceArraysOnceStrictly( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
            //   })
            //
            //   test.case = 'dstArray is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( 1, [ [ 1 ] ], [ 1 ] );
            //   })
            //
            //   test.case = 'ins is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ], 1, [ 1 ] );
            //   })
            //
            //   test.case = 'ins must be array of arrays';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ],[ 1 ], [ 1 ] );
            //   })
            //
            //   test.case = 'onEqualize is not a routine';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
            //   })
            //
            //   test.case = 'ins and sub length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
            //   })
            //
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
            //   })
            //
            //   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceArraysOnceStrictly( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
            //   })
            // }
            //
            // //
            //
            // function arrayReplacedArraysOnce( test )
            // {
            //   test.case = 'replace elements from arrays from ins with relevant values from sub';
            //
            //   var dst = [];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [] ], [ [] ] );
            //   test.identical( got, 0 );
            //   test.identical( dst, [] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ] ], [ [ 3 ] ] );
            //   test.identical( got, 1 );
            //   test.identical( dst, [ 3, 2, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ],[ 3 ] ] );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], 3 ] );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ 3, 3 ] );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ 3 ] );
            //   test.identical( got, 3 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3,3,3, ] ] );
            //   test.identical( got, 3 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, 2, 3 ] ], [ [ 3 ] ] );
            //   test.identical( got, 3 );
            //   test.identical( dst, [ 3, 3, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1 ], [ 2 ] ], [ [ 3 ], [ 4 ] ] );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ 3, 4, 3 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ [ 1 ] ] ], [ 0 ] );
            //   test.identical( dst, [ 1, 2, 3 ] );
            //   test.identical( got, 0 );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ 1, [ 2 ], 3 ] ], [ 0 ] );
            //   test.identical( dst, [ 0, 2, 0 ] );
            //   test.identical( got, 2 );
            //
            //   var dst = [ [ 1 ], [ 2 ], [ 3 ] ];
            //   function onEqualize( a, b )
            //   {
            //     return a[ 0 ] === b[ 0 ];
            //   }
            //   var got = _.arrayReplacedArraysOnce( dst, [ [ [ 1 ], [ 2 ], [ 3 ] ] ], [ [ [ 0 ] ] ], onEqualize );
            //   test.identical( dst, [ [ 0 ], [ 0 ], [ 0 ] ] );
            //   test.identical( got, 3 );
            //
            //   //
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce();
            //   })
            //
            //   test.case = 'dstArray is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( 1, [ [ 1 ] ], [ 1 ] );
            //   })
            //
            //   test.case = 'ins is not a longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1, 2 ], 1, [ 1 ] );
            //   })
            //
            //   test.case = 'ins must be array of arrays';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1, 2 ],[ 1 ], [ 1 ] );
            //   })
            //
            //   test.case = 'onEqualize is not a routine';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1, 2 ], [ [ 1 ] ], [ 1 ], 1 );
            //   })
            //
            //   test.case = 'ins and sub length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1 ] ], [ 10, 20 ] );
            //   })
            //
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1, 2 ] ], [ 10,20 ] );
            //   })
            //
            //   test.case = 'ins[ 0 ] and sub[ 0 ] length are different';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedArraysOnce( [ 1 ], [ [ 1 ] ], [ [ 10,20 ] ] );
            //   })
            // }
            //
            //
            //
            // function arrayReplaceAll( test )
            // {
            //   test.case = 'replace all ins with sub';
            //
            //   var dst = [];
            //   var got = _.arrayReplaceAll( dst, undefined, 0 );
            //   test.identical( got, [] );
            //
            //   var dst = [ 1, 1, 1 ];
            //   var got = _.arrayReplaceAll( dst, 1, 0 );
            //   test.identical( got, [ 0, 0, 0 ] );
            //
            //   var dst = [ 1, 2, 1 ];
            //   var got = _.arrayReplaceAll( dst, 1, 0 );
            //   test.identical( got, [ 0, 2, 0 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplaceAll( dst, 4, 0 );
            //   test.identical( got, [ 1, 2, 3 ] );
            //
            //   function onEqualize( a, b )
            //   {
            //     return a.value === b;
            //   }
            //
            //   var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
            //   var got = _.arrayReplaceAll( dst, 1, { value : 0 }, onEqualize );
            //   test.identical( got, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no args';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceAll( );
            //   });
            //
            //   test.case = 'first arg is not longIs';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceAll( 1, 1, 1 );
            //   });
            //
            //   test.case = 'fourth argument is not a routine';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplaceAll( 1, 1, 1, 1);
            //   });
            // }
            //
            // //
            //
            // function arrayReplacedAll( test )
            // {
            //   test.case = 'replace all ins with sub';
            //
            //   var dst = [];
            //   var got = _.arrayReplacedAll( dst, undefined, 0 );
            //   test.identical( got, 0 );
            //   test.identical( dst, [] );
            //
            //   var dst = [ 1, 1, 1 ];
            //   var got = _.arrayReplacedAll( dst, 1, 0 );
            //   test.identical( got, 3 );
            //   test.identical( dst, [ 0, 0, 0 ] );
            //
            //   var dst = [ 1, 2, 1 ];
            //   var got = _.arrayReplacedAll( dst, 1, 0 );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ 0, 2, 0 ] );
            //
            //   var dst = [ 1, 2, 3 ];
            //   var got = _.arrayReplacedAll( dst, 4, 0 );
            //   test.identical( got, 0 );
            //   test.identical( dst, [ 1, 2, 3 ] );
            //
            //   function onEqualize( a, b )
            //   {
            //     return a.value === b;
            //   }
            //
            //   var dst = [ { value : 1 }, { value : 1 }, { value : 2 } ];
            //   var got = _.arrayReplacedAll( dst, 1, { value : 0 }, onEqualize );
            //   test.identical( got, 2 );
            //   test.identical( dst, [ { value : 0 }, { value : 0 }, { value : 2 } ] );
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no args';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedAll( );
            //   });
            //
            //   test.case = 'first arg is not longIs';
            //   debugger;
            //   test.shouldThrowErrorSync( function()
            //   {
            //     debugger;
            //     _.arrayReplacedAll( 1, 1, 1 );
            //   });
            //   debugger;
            //
            //   test.case = 'fourth argument is not a routine';
            //   test.shouldThrowErrorSync( function()
            //   {
            //     _.arrayReplacedAll( 1, 1, 1, 1 );
            //   });
            //
            // }
            //
            ,
            // arrayReplaceAll,
            // arrayReplacedAll,
            arrayUpdate: function arrayUpdate(e) {
              e.case = "add a new element";
              var r = a.arrayUpdate([], 1, 1), n = 0;
              e.identical(r, n), e.case = "add a new element", r = a.arrayUpdate([ 1, 2, 3, 4, 5 ], 6, 6), 
              n = 5, e.identical(r, n), e.case = "add a new element", r = a.arrayUpdate([ "Petre", "Mikle", "Oleg" ], "Dmitry", "Dmitry"), 
              n = 3, e.identical(r, n), e.case = "change the fourth element", r = a.arrayUpdate([ !0, !0, !0, !0, !1 ], !1, !0), 
              n = 4, e.identical(r, n), e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arrayUpdate();
              }), e.case = "not enough arguments", e.shouldThrowErrorSync(function() {
                a.arrayUpdate([ 1, 2, 3, 4, 5 ]);
              }), e.case = "extra argument", e.shouldThrowErrorSync(function() {
                a.arrayUpdate([ 1, 2, 3, 4, 5 ], 6, 6, "redundant argument");
              }), e.case = "arguments[0] is wrong", e.shouldThrowErrorSync(function() {
                a.arrayUpdate("wrong argument", 6, 6);
              });
            }
            // --
            // array set
            // --
            ,
            // array set
            arraySetDiff: function arraySetDiff(e) {
              e.case = "first argument has single extra element, second argument has single extra element either";
              var r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetDiff(r, n), i = [ 15, 5 ];
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "first argument is an empty array", 
              r = [], n = [ 1, 2, 3, 4 ], t = a.arraySetDiff(r, n), i = [ 1, 2, 3, 4 ], e.identical(t, i), 
              e.is(t !== r), e.is(t !== n), e.case = "second argument is an empty array", r = [ 1, 2, 3, 4 ], 
              n = [], t = a.arraySetDiff(r, n), i = [ 1, 2, 3, 4 ], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.case = "both arguments are empty arrays", r = [], n = [], t = a.arraySetDiff(r, n), 
              i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "all of the elements is present in both arrays", 
              r = [ 3, 3, 3 ], n = [ 3, 3, 3, 3 ], t = a.arraySetDiff(r, n), i = [], e.identical(t, i), 
              e.is(t !== r), e.is(t !== n), 
              /* */
              e.case = "extra";
              for (var c = [ {
                src1: [],
                src2: [],
                expected: []
              }, {
                src1: [ 1, 2, 3 ],
                src2: [],
                expected: [ 1, 2, 3 ]
              }, {
                src1: [],
                src2: [ 1, 2, 3 ],
                expected: [ 1, 2, 3 ]
              }, {
                src1: [ 1, 2, 3 ],
                src2: [ 4, 5, 6 ],
                expected: [ 1, 2, 3, 4, 5, 6 ]
              }, {
                src1: [ 1, 2, 3 ],
                src2: [ 3, 4, 5 ],
                expected: [ 1, 2, 4, 5 ]
              }, {
                src1: [ 1, 1, 2, 2, 3, 3 ],
                src2: [ 1, 2, 3 ],
                expected: []
              }, {
                src1: [ 1, 1, 2, 3, 3 ],
                src2: [ 3, 3, 4, 5, 5 ],
                expected: [ 1, 1, 2, 4, 5, 5 ]
              }, {
                src1: 1,
                src2: 1,
                error: !0
              } ], s = 0; s < c.length; s++) {
                var l = c[s];
                l.error ? e.shouldThrowErrorSync(() => a.arraySetDiff(l.src1, l.src2)) : e.identical(a.arraySetDiff(l.src1, l.src2), l.expected);
              }
              /* */              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySetDiff();
              }), e.case = "too few arguments", e.shouldThrowErrorSync(function() {
                a.arraySetDiff([ 1, 2, 3, 4 ]);
              }), e.case = "too many arguments", e.shouldThrowErrorSync(function() {
                a.arraySetDiff([ 1, 2, 3, 4 ], [ 5, 7, 8, 9 ], [ 13, 15, 17 ]);
              }), e.case = "one or both arguments are not longIs entities, numeric arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetDiff(10, 15);
              }), e.case = "one or both arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetDiff("a", "c");
              }), e.case = "one or both arguments are not longIs entities, map arguments", e.shouldThrowErrorSync(function() {
                a.arraySetDiff({
                  a: 1
                }, {
                  b: 3,
                  c: 8
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetDiff([ 1, 2, 3 ], "wrong argument");
              }), e.case = "both arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetDiff(null, null);
              }), e.case = "both arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetDiff(void 0, void 0);
              });
            }
            //
            ,
            arraySetBut: function arraySetBut(e) {
              e.case = "first argument has single extra element, second argument has single extra element either";
              var r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetBut(r, n), i = [ 15 ];
              e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "first argument has single extra element, second argument has single extra element either", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetBut(null, r, n), i = [ 15 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "first argument has several elements that are not present in second argument", 
              r = [ 1, 4, 9 ], n = [ 2, 5 ], t = a.arraySetBut(r, n), i = [ 1, 4, 9 ], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.case = "first argument has several elements that are not present in second argument", 
              r = [ 1, 4, 9 ], n = [ 2, 5 ], t = a.arraySetBut(null, r, n), i = [ 1, 4, 9 ], e.identical(t, i), 
              e.is(t !== r), e.is(t !== n), e.case = "first argument is the same as second", r = [ 1, 2, 3, 4 ], 
              n = [ 1, 2, 3, 4 ], t = a.arraySetBut(r, n), i = [], e.identical(t, i), e.is(t === r), 
              e.is(t !== n), e.case = "first argument is the same as second", r = [ 1, 2, 3, 4 ], 
              n = [ 1, 2, 3, 4 ], t = a.arraySetBut(null, r, n), i = [], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.case = "first argument is an empty array", r = [], n = [ 1, 2, 3, 4 ], 
              t = a.arraySetBut(r, n), i = [], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              e.case = "first argument is an empty array", r = [], n = [ 1, 2, 3, 4 ], t = a.arraySetBut(null, r, n), 
              i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "second argument is an empty array", 
              r = [ 1, 2, 3, 4 ], n = [], t = a.arraySetBut(r, n), i = [ 1, 2, 3, 4 ], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.case = "second argument is an empty array", r = [ 1, 2, 3, 4 ], 
              n = [], t = a.arraySetBut(null, r, n), i = [ 1, 2, 3, 4 ], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.case = "first array has the same element as the second ", r = [ 1, 1, 1 ], 
              n = [ 1 ], t = a.arraySetBut(r, n), i = [], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              e.case = "first array has the same element as the second ", r = [ 1, 1, 1 ], n = [ 1 ], 
              t = a.arraySetBut(null, r, n), i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), 
              e.case = "both arguments are empty arrays", r = [], n = [], t = a.arraySetBut(r, n), 
              i = [], e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "both arguments are empty arrays", 
              r = [], n = [], t = a.arraySetBut(null, r, n), i = [], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.case = "single empty argument", r = [], t = a.arraySetBut(r), i = [], 
              e.identical(t, i), e.is(t === r), e.case = "single empty argument", r = [], t = a.arraySetBut(null, r), 
              i = [], e.identical(t, i), e.is(t !== r), e.case = "single not empty argument", 
              r = [ 3, 4, 5 ], t = a.arraySetBut(r), i = [ 3, 4, 5 ], e.identical(t, i), e.is(t === r), 
              e.case = "single not empty argument", r = [ 3, 4, 5 ], t = a.arraySetBut(null, r), 
              i = [ 3, 4, 5 ], e.identical(t, i), e.is(t !== r), e.case = "three arguments, same elements", 
              r = [ 3, 4, 5 ], n = [ 3, 4, 5 ];
              var c = [ 3, 4, 5 ];
              t = a.arraySetBut(r, n, c), i = [], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              e.is(t !== c), e.case = "three arguments, same elements", r = [ 3, 4, 5 ], n = [ 3, 4, 5 ], 
              c = [ 3, 4, 5 ], t = a.arraySetBut(null, r, n, c), i = [], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.is(t !== c), e.case = "three arguments, differet elements", r = [ 3, 4, 5 ], 
              n = [ 5 ], c = [ 3 ], t = a.arraySetBut(r, n, c), i = [ 4 ], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.is(t !== c), e.case = "three arguments, differet elements", 
              r = [ 3, 4, 5 ], n = [ 5 ], c = [ 3 ], t = a.arraySetBut(null, r, n, c), i = [ 4 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "three arguments, no elements in the second and third", 
              r = [ 3, 4, 5 ], n = [], c = [], t = a.arraySetBut(r, n, c), i = [ 3, 4, 5 ], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.is(t !== c), e.case = "three arguments, no elements in the second and third", 
              r = [ 3, 4, 5 ], n = [], c = [], t = a.arraySetBut(null, r, n, c), i = [ 3, 4, 5 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "three arguments, no elements in the first", 
              r = [], n = [ 3, 4, 5 ], c = [ 3, 4, 5 ], t = a.arraySetBut(r, n, c), i = [], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.is(t !== c), e.case = "three arguments, no elements in the first", 
              r = [], n = [ 3, 4, 5 ], c = [ 3, 4, 5 ], t = a.arraySetBut(null, r, n, c), i = [], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "complex case", 
              t = a.arraySetBut([ 1, 10, 0, 5 ], [ 5, 8, 2 ], [ 3, 1, 6, 4 ], [ 0 ]), i = [ 10 ], 
              e.identical(t, i), e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetBut(null, r), 
              i = [ 1, 1, 1, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetBut(r), 
              i = [ 1, 1, 1, 3, 4, 15 ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 null", t = a.arraySetBut(null), i = [], e.identical(t, i);
              for (
              /* */
              var s = [ {
                src: [],
                but: [],
                expected: []
              }, {
                src: [ 1, 2, 3 ],
                but: [],
                expected: [ 1, 2, 3 ]
              }, {
                src: [],
                but: [ 1, 2, 3 ],
                expected: []
              }, {
                src: [ 1, 1, 1 ],
                but: [ 1 ],
                expected: []
              }, {
                src: [ 1, 2, 3 ],
                but: [ 3, 2, 1 ],
                expected: []
              }, {
                src: [ 1, 2, 3 ],
                but: [ 3 ],
                expected: [ 1, 2 ]
              }, {
                src: [ 1, 2, 3 ],
                but: [ 4, 5, 6 ],
                expected: [ 1, 2, 3 ]
              }, {
                src: 1,
                but: 1,
                error: !0
              } ], l = 0; l < s.length; l++) (c = s[l]).error ? e.shouldThrowErrorSync(() => a.arraySetBut(c.src, c.but)) : e.identical(a.arraySetBut(c.src, c.but), c.expected);
              /* */              
              /* bad arguments */
              e.case = "not array", e.shouldThrowErrorSync(function() {
                a.arraySetBut("3");
              }), e.case = "no arguments, the count of arguments doesn't match 2", e.shouldThrowErrorSync(function() {
                a.arraySetBut();
              }), e.case = "one or both arguments are not longIs entities, numerical arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetBut(5, 8);
              }), e.case = "one or both arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetBut("a", "c");
              }), e.case = "one or both arguments are not longIs entities, map like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetBut({
                  a: 1
                }, {
                  b: 3,
                  c: 8
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetBut([ 1, 2, 3 ], "wrong argument");
              }), e.case = "both arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetBut(null, null);
              }), e.case = "both arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetBut(void 0, void 0);
              });
            }
            //
            ,
            arraySetIntersection: function arraySetIntersection(e) {
              e.case = "second argument has extra element, third argument has two extra elements";
              var r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetIntersection(r, n), i = [ 1, 2, 3, 4 ];
              e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "second argument has extra element, third argument has two extra elements", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetIntersection(null, r, n), 
              i = [ 1, 2, 3, 4 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "single array argument", 
              r = [ 1, 2, 3, 4, 15 ], t = a.arraySetIntersection(r), i = [ 1, 2, 3, 4, 15 ], e.identical(t, i), 
              e.is(t === r), e.case = "single array argument", r = [ 1, 2, 3, 4, 15 ], t = a.arraySetIntersection(null, r), 
              i = [ 1, 2, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.case = "first argument is an empty array", 
              r = [], n = [ 1, 2, 3, 4, 15 ], t = a.arraySetIntersection(r, n), i = [], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.case = "first argument is an empty array", r = [], 
              n = [ 1, 2, 3, 4, 15 ], t = a.arraySetIntersection(null, r, n), i = [], e.identical(t, i), 
              e.is(t !== r), e.is(t !== n), e.case = "first and second argument are empty arrays", 
              r = [], n = [], t = a.arraySetIntersection(r, n), i = [], e.identical(t, i), e.is(t === r), 
              e.is(t !== n), e.case = "first and second argument are empty arrays", r = [], n = [], 
              t = a.arraySetIntersection(null, r, n), i = [], e.identical(t, i), e.is(t !== r), 
              e.is(t !== n), e.case = "3 arguments, nothing in common", r = [ 1, 2, 3, 4, 15 ], 
              n = [ 1, 2, 3, 4, 5 ];
              var c = [ 15, 16, 17 ];
              t = a.arraySetIntersection(r, n, c), i = [], e.identical(t, i), e.is(t === r), e.is(t !== n), 
              e.is(t !== c), e.case = "3 arguments, nothing in common", r = [ 1, 2, 3, 4, 15 ], 
              n = [ 1, 2, 3, 4, 5 ], c = [ 15, 16, 17 ], t = a.arraySetIntersection(null, r, n, c), 
              i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "3 arguments, something in common", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], c = [ 3, 15, 16, 17, 1 ], t = a.arraySetIntersection(null, r, n, c), 
              i = [ 1, 3 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "3 arguments, something in common", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 3 ], c = [ 1, 3 ], t = a.arraySetIntersection(null, r, n, c), 
              i = [ 3 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "3 arguments, repeats", 
              r = [ 1, 1, 1, 3, 4, 15 ], n = [ 3, 1 ], c = [ 1, 3 ], t = a.arraySetIntersection(null, r, n, c), 
              i = [ 1, 1, 1, 3 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetIntersection(null, r), 
              i = [ 1, 1, 1, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetIntersection(r), 
              i = [ 1, 1, 1, 3, 4, 15 ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 null", t = a.arraySetIntersection(null), i = [], e.identical(t, i);
              for (
              /* extra */
              var s = [ {
                args: [ [] ],
                expected: []
              }, {
                args: [ [ 1 ], [] ],
                expected: []
              }, {
                args: [ [], [ 1 ] ],
                expected: []
              }, {
                args: [ [ 1 ], [ 2 ] ],
                expected: []
              }, {
                args: [ [ 1, 2, 3 ], [ 2 ] ],
                expected: [ 2 ]
              }, {
                args: [ [ 1, 2, 3 ], [ 2 ], [ 1 ], [ 3 ] ],
                expected: []
              }, {
                args: [ [ 1, 1, 1 ], [ 1 ] ],
                expected: [ 1, 1, 1 ]
              }, {
                args: [ [ 1, 2, 3 ], [ 0 ], [ 4 ], [ 0, 0, 3 ] ],
                expected: []
              }, {
                args: [ [ 1, 2, 3 ], [ 0 ], 1, [ 3 ] ],
                error: !0
              }, {
                args: [ 1 ],
                error: !0
              } ], l = 0; l < s.length; l++) (c = s[l]).error ? e.shouldThrowErrorSync(() => a.arraySetIntersection.apply(a, c.args)) : e.identical(a.arraySetIntersection.apply(a, c.args), c.expected);
              /* */              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySetIntersection();
              }), e.case = "one or several arguments are not longIs entities, numerical arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetIntersection(10, 15, 25);
              }), e.case = "one or both arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetIntersection("a", "c");
              }), e.case = "one or both arguments are not longIs entities, map arguments", e.shouldThrowErrorSync(function() {
                a.arraySetIntersection({
                  a: 1
                }, {
                  b: 3,
                  c: 8
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetIntersection([ 1, 2, 3 ], "wrong argument");
              }), e.case = "one or more arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetIntersection(null, null);
              }), e.case = "one or more arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetIntersection(void 0, void 0);
              });
            }
            //
            ,
            arraySetUnion: function arraySetUnion(e) {
              e.case = "second argument has extra element, third argument has two extra elements";
              var r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetUnion(r, n), i = [ 1, 2, 3, 4, 15, 5 ];
              e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "second argument has extra element, third argument has two extra elements", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], t = a.arraySetUnion(null, r, n), 
              i = [ 1, 2, 3, 4, 15, 5 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "single array argument", 
              r = [ 1, 2, 3, 4, 15 ], t = a.arraySetUnion(r), i = [ 1, 2, 3, 4, 15 ], e.identical(t, i), 
              e.is(t === r), e.case = "single array argument", r = [ 1, 2, 3, 4, 15 ], t = a.arraySetUnion(null, r), 
              i = [ 1, 2, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.case = "first argument is an empty array", 
              r = [], n = [ 1, 2, 3, 4, 15 ], t = a.arraySetUnion(r, n), i = [ 1, 2, 3, 4, 15 ], 
              e.identical(t, i), e.is(t === r), e.is(t !== n), e.case = "first argument is an empty array", 
              r = [], n = [ 1, 2, 3, 4, 15 ], t = a.arraySetUnion(null, r, n), i = [ 1, 2, 3, 4, 15 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "first and second argument are empty arrays", 
              r = [], n = [], t = a.arraySetUnion(r, n), i = [], e.identical(t, i), e.is(t === r), 
              e.is(t !== n), e.case = "first and second argument are empty arrays", r = [], n = [], 
              t = a.arraySetUnion(null, r, n), i = [], e.identical(t, i), e.is(t !== r), e.is(t !== n), 
              e.case = "3 arguments, nothing in common", r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ];
              var c = [ 15, 16, 17 ];
              t = a.arraySetUnion(r, n, c), i = [ 1, 2, 3, 4, 15, 5, 16, 17 ], e.identical(t, i), 
              e.is(t === r), e.is(t !== n), e.is(t !== c), e.case = "3 arguments, nothing in common", 
              r = [ 1, 2, 3, 4, 15 ], n = [ 1, 2, 3, 4, 5 ], c = [ 15, 16, 17 ], t = a.arraySetUnion(null, r, n, c), 
              i = [ 1, 2, 3, 4, 15, 5, 16, 17 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), 
              e.is(t !== c), e.case = "3 arguments, something in common", r = [ 1, 2, 3, 4, 15 ], 
              n = [ 1, 2, 3, 4, 5 ], c = [ 3, 15, 16, 17, 1 ], t = a.arraySetUnion(null, r, n, c), 
              i = [ 1, 2, 3, 4, 15, 5, 16, 17 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), 
              e.is(t !== c), e.case = "3 arguments, something in common", r = [ 1, 2, 3, 4, 15 ], 
              n = [ 3 ], c = [ 1, 3 ], t = a.arraySetUnion(null, r, n, c), i = [ 1, 2, 3, 4, 15 ], 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), e.case = "3 arguments, repeats", 
              r = [ 1, 1, 1, 3, 4, 15 ], n = [ 3, 1 ], c = [ 1, 3 ], t = a.arraySetUnion(null, r, n, c), 
              i = [ 1, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetUnion(null, r), 
              i = [ 1, 3, 4, 15 ], e.identical(t, i), e.is(t !== r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], t = a.arraySetUnion(r), 
              i = [ 1, 1, 1, 3, 4, 15 ], e.identical(t, i), e.is(t === r), e.is(t !== n), e.is(t !== c), 
              e.case = "1 null", t = a.arraySetUnion(null), i = [], e.identical(t, i), e.case = "no arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetUnion();
              }), e.case = "one or several arguments are not longIs entities, numerical arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetUnion(10, 15, 25);
              }), e.case = "one or both arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetUnion("a", "c");
              }), e.case = "one or both arguments are not longIs entities, map arguments", e.shouldThrowErrorSync(function() {
                a.arraySetUnion({
                  a: 1
                }, {
                  b: 3,
                  c: 8
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetUnion([ 1, 2, 3 ], "wrong argument");
              }), e.case = "one or more arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetUnion(null, null);
              }), e.case = "one or more arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetUnion(void 0, void 0);
              });
            }
            //
            ,
            arraySetContainAll: function arraySetContainAll(e) {
              e.case = "1 argument, empty";
              var r = [], n = a.arraySetContainAll(r), t = !0;
              e.identical(n, t), e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], n = a.arraySetContainAll(r), 
              t = !0, e.identical(n, t), e.case = "2 arguments, empty", r = [];
              var i = [];
              n = a.arraySetContainAll(r, i), t = !0, e.identical(n, t), e.case = "2 arguments, src empty", 
              r = [], i = [ 1 ], n = a.arraySetContainAll(r, i), t = !1, e.identical(n, t), e.case = "2 arguments, ins empty", 
              r = [ 1 ], i = [], n = a.arraySetContainAll(r, i), t = !0, e.identical(n, t), e.case = "bigger second argument", 
              r = [ 1, 3 ], i = [ 1, 1, 1, 1 ], n = a.arraySetContainAll(r, i), t = !0, e.identical(n, t), 
              e.case = "bigger third argument", r = [ 1, 3 ], i = [ 1, 1 ];
              var c = [ 1, 1, 1, 1 ];
              n = a.arraySetContainAll(r, i, c), t = !0, e.identical(n, t), e.case = "4 arguments", 
              r = [ 1, 2, 3, 4 ], i = [ 1 ], c = [ 3, 1 ];
              var s = [ 4, 1, 3, 2 ];
              n = a.arraySetContainAll(r, i, c, s), t = !0, e.identical(n, t), e.case = "one argument have redundant element", 
              r = [ 1, 2, 3, 4 ], i = [ 0 ], c = [ 3, 1 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAll(r, i, c, s), 
              t = !1, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 0, 1 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAll(r, i, c, s), 
              t = !1, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 3, 0 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAll(r, i, c, s), 
              t = !1, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 3, 1 ], s = [ 4, 1, 0, 2 ], n = a.arraySetContainAll(r, i, c, s), 
              t = !1, e.identical(n, t), e.case = "Second argument contains all the same values as in the (src), and new ones", 
              r = [ 1, "b", "c", 4 ], i = [ 1, 2, 3, 4, 5, "b", "c" ], n = a.arraySetContainAll(r, i), 
              t = !1, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.case = "length of the first argument is more than second argument", 
              r = [ 1, 2, 3, 4, 5 ], i = [ 1, 2, 3, 4 ], n = a.arraySetContainAll(r, i), t = !0, 
              e.identical(n, t), e.is(n !== r), e.is(n !== i), e.case = "length of the first argument is more than second argument", 
              r = [ "abc", "def", !0, 26 ], i = [ 1, 2, 3, 4 ], c = [ 26, "abc", "def", !0 ], 
              n = a.arraySetContainAll(r, i, c), t = !1, e.identical(n, t), e.is(n !== r), e.is(n !== i), 
              e.is(n !== c), e.case = "second argument is an empty array", r = [ 1, 2, 3 ], i = [], 
              n = a.arraySetContainAll(r, i), t = !0, e.identical(n, t), e.is(n !== r), e.is(n !== i), 
              e.case = "first argument is an empty array", r = [], i = [ 1, 2, 3 ], n = a.arraySetContainAll(r, i), 
              t = !1, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.case = "both arguments are empty", 
              r = [], i = [], n = a.arraySetContainAll(r, i), t = !0, e.identical(n, t), e.is(n !== r), 
              e.is(n !== i);
              for (
              /* */
              var l = [ {
                args: [ [], [] ],
                expected: !0
              }, {
                args: [ [ 1 ], [] ],
                expected: !0
              }, {
                args: [ [ 1 ], [ 1 ] ],
                expected: !0
              }, {
                args: [ [ 1, 1 ], [ 1, 1, 1 ] ],
                expected: !0
              }, {
                args: [ [ 1, 1, 1 ], [ 1, 1 ] ],
                expected: !0
              }, {
                args: [ [ 1 ], [ 1 ], [ 1 ], [] ],
                expected: !0
              }, {
                args: [ [ 1 ], [ 1 ], [ 1 ], [ 1, 1, 1 ] ],
                expected: !0
              }, {
                args: [ [ 1 ], [ 0, 1 ], [ 3, 2, 1 ], [ 1 ] ],
                expected: !1
              }, {
                args: [ [ 1, 2, 3 ], [ 1, 2, 3 ], [ 3, 2, 1 ], [ 1, 2 ] ],
                expected: !0
              }, {
                args: [ [], [ 1, 2, 3 ], [ 3, 2, 1 ], [ 1, 2 ] ],
                expected: !1
              }, {
                args: [ [], 1, [ 3, 2, 1 ], [ 1, 2 ] ],
                error: !0
              }, {
                args: [ 1 ],
                error: !0
              } ], o = 0; o < l.length; o++) {
                var d = l[o];
                console.log(a.toStr(d, {
                  levels: 3
                })), d.error ? e.shouldThrowErrorSync(() => a.arraySetContainAll.apply(a, d.args)) : e.identical(a.arraySetContainAll.apply(a, d.args), d.expected);
              }
              /* special cases */              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySetContainAll();
              }), e.case = "one or both arguments are not longIs entities, numerical arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAll(5, 8);
              }), e.case = "one or both arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAll("a", "c");
              }), e.case = "one or both arguments are not longIs entities, map like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAll({
                  a: 1,
                  b: 2
                }, {
                  c: 3
                });
              }), e.case = "wrong arguments", e.shouldThrowErrorSync(function() {
                a.arraySetContainAll([ 1, 2, 3, 4 ], "wrong arguments");
              }), e.case = "both arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetContainAll(null, null);
              }), e.case = "both arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetContainAll(void 0, void 0);
              });
            }
            //
            ,
            arraySetContainAny: function arraySetContainAny(e) {
              e.case = "1 argument, empty";
              var r = [], n = a.arraySetContainAny(r), t = !0;
              e.identical(n, t), e.case = "1 argument, repeats", r = [ 1, 1, 1, 3, 4, 15 ], n = a.arraySetContainAny(r), 
              t = !0, e.identical(n, t), e.case = "2 arguments, empty", r = [];
              var i = [];
              n = a.arraySetContainAny(r, i), t = !0, e.identical(n, t), e.case = "2 arguments, src empty", 
              r = [], i = [ 1 ], n = a.arraySetContainAny(r, i), t = !0, e.identical(n, t), e.case = "2 arguments, ins empty", 
              r = [ 1 ], i = [], n = a.arraySetContainAny(r, i), t = !1, e.identical(n, t), e.case = "bigger second argument", 
              r = [ 1, 3 ], i = [ 1, 1, 1, 1 ];
              debugger;
              n = a.arraySetContainAny(r, i), t = !0, e.identical(n, t), e.case = "bigger third argument", 
              r = [ 1, 3 ], i = [ 1, 1 ];
              var c = [ 1, 1, 1, 1 ];
              n = a.arraySetContainAny(r, i, c), t = !0, e.identical(n, t), e.case = "3 arguments, the first is empty", 
              r = [], i = [ 1 ], c = [ 2, 3 ], n = a.arraySetContainAny(r, i, c), t = !0, e.identical(n, t), 
              e.case = "4 arguments", r = [ 1, 2, 3, 4 ], i = [ 1 ], c = [ 3, 1 ];
              var s = [ 4, 1, 3, 2 ];
              n = a.arraySetContainAny(r, i, c, s), t = !0, e.identical(n, t), e.case = "one argument have redundant element", 
              r = [ 1, 2, 3, 4 ], i = [ 0 ], c = [ 3, 1 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAny(r, i, c, s), 
              t = !1, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 0, 1 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAny(r, i, c, s), 
              t = !0, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 3, 0 ], s = [ 4, 1, 3, 2 ], n = a.arraySetContainAny(r, i, c, s), 
              t = !0, e.identical(n, t), e.case = "one argument have redundant element", r = [ 1, 2, 3, 4 ], 
              i = [ 1 ], c = [ 3, 1 ], s = [ 4, 1, 0, 2 ], n = a.arraySetContainAny(r, i, c, s), 
              t = !0, e.identical(n, t), e.case = "second and third arrays contains several values from (src) array", 
              r = [ 33, 4, 5, "b", "c" ], i = [ 1, "b", "c", 4 ], c = [ 33, 13, 3 ], n = a.arraySetContainAny(r, i, c), 
              t = !0, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "second array is empty, third array contains elements from (src) array", 
              r = [ 33, 4, 5, "b", "c" ], i = [], c = [ 33 ], n = a.arraySetContainAny(r, i, c), 
              t = !1, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "second and third arrays doesn't contains matching elemets from (src) array", 
              r = [ 33, 4, 5, "b", "c" ], i = [ 1, "bcda", "ce", 8 ], c = [ 45, 13, 3 ], n = a.arraySetContainAny(r, i, c), 
              t = !1, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "first argument is an empty array", 
              r = [], i = [ 1, "bcda", "ce", 8 ], c = [ 45, 13, 3 ], n = a.arraySetContainAny(r, i, c), 
              t = !0, e.identical(n, t), e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "following array are empty, (src) array is not empty", 
              r = [ 33, 4, 5, "b", "c" ], i = [], c = [], n = a.arraySetContainAny(r, i, c), t = !1, 
              e.identical(n, t), e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "all the array are empty", 
              r = [], i = [], c = [], n = a.arraySetContainAny(r, i, c), t = !0, e.identical(n, t), 
              e.is(n !== r), e.is(n !== i), e.is(n !== c), e.case = "single argument", n = a.arraySetContainAny([ 33, 4, 5, "b", "c" ]), 
              t = !0, e.identical(n, t);
              for (
              /**/
              var l = [ {
                args: [ [], [] ],
                expected: !0
              }, {
                args: [ [ 1, 2, 3 ], [ 1 ] ],
                expected: !0
              }, {
                args: [ [ 1, 2, 3 ], [], [ 3 ] ],
                expected: !1
              }, {
                args: [ [ 1, 2, 3 ], [ 0, 1 ], [ 9, 3 ] ],
                expected: !0
              }, {
                args: [ [ 1, 2, 3 ], [ 4 ], [ 3 ] ],
                expected: !1
              }, {
                args: [ [], [ 0 ], [ 4 ], [ 3 ] ],
                expected: !0
              }, {
                args: [ [ 1, 2, 3 ], [ 4 ], [ 5 ] ],
                expected: !1
              }, {
                args: [ [ 0, 0, 0, 1 ], [ 5 ], [ 6 ], [ 2, 1 ] ],
                expected: !1
              }, {
                args: [ [ 1, 2, 3 ], [ 4 ], 1 ],
                error: !0
              }, {
                args: [ 1, [ 4 ], 1 ],
                error: !0
              } ], o = 0; o < l.length; o++) (c = l[o]).error ? e.shouldThrowErrorSync(() => a.arraySetContainAny.apply(a, c.args)) : e.identical(a.arraySetContainAny.apply(a, c.args), c.expected);
              /* */              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySetContainAny();
              }), e.case = "one or several arguments are not longIs entities,numeric arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAny([ 33, 4, 5, "b", "c" ], 15, 25);
              }), e.case = "one or several arguments are not longIs entities,string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAny([ 33, 4, 5, "b", "c" ], "dfdf", "ab");
              }), e.case = "one or several arguments are not longIs entities,map like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetContainAny([ 33, 4, 5, "b", "c" ], {
                  a: 33
                }, {
                  b: 44
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetContainAny([ 1, 2, 3 ], "wrong argument");
              });
            }
            //
            ,
            arraySetIdentical: function arraySetIdentical(e) {
              console.log("xxx"), e.case = "2 arguments, empty";
              var r = [], n = [], t = a.arraySetIdentical(r, n), i = !0;
              e.identical(t, i), e.case = "2 arguments, src empty", r = [], n = [ 1 ], t = a.arraySetIdentical(r, n), 
              i = !1, e.identical(t, i), e.case = "2 arguments, ins empty", r = [ 1 ], n = [], 
              t = a.arraySetIdentical(r, n), i = !1, e.identical(t, i), e.case = "repeats, bigger second argument", 
              r = [ 1 ], n = [ 1, 1, 1, 1 ], t = a.arraySetIdentical(r, n), i = !1, e.identical(t, i), 
              e.case = "repeats, bigger first argument", r = [ 1, 1, 1, 1 ], n = [ 1 ], t = a.arraySetIdentical(r, n), 
              i = !1, e.identical(t, i), e.case = "repeats", r = [ 1, 3 ], n = [ 1, 1, 1, 1 ], 
              t = a.arraySetIdentical(r, n), i = !1, e.identical(t, i), e.case = "arguments have the same elements but the order is differ", 
              r = [ 1, 2, 4, 7, 5 ], n = [ 4, 2, 1, 5, 7 ], t = a.arraySetIdentical(r, n), i = !0, 
              e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "argument length mismatch", 
              r = [ 1, 2, 4, 7, 5 ], n = [ 1, 5, 7 ], t = a.arraySetIdentical(r, n), i = !1, e.identical(t, i), 
              e.is(t !== r), e.is(t !== n), e.case = "arguments have the same elements have inner arrays", 
              r = [ 1, 2, [ 1, 3 ], 7, 5 ], n = [ [ 1, 3 ], 2, 1, 5, 7 ], t = a.arraySetIdentical(r, n), 
              i = !1, e.identical(t, i), e.is(t !== r), e.is(t !== n), e.case = "both arrays are empty", 
              r = [], n = [], t = a.arraySetIdentical(r, n), i = !0, e.identical(t, i), e.is(t !== r), 
              e.is(t !== n);
              for (
              /* */
              var c = [ {
                args: [ [], [] ],
                expected: !0
              }, {
                args: [ [ 1 ], [] ],
                expected: !1
              }, {
                args: [ [ 1 ], [ 1 ] ],
                expected: !0
              }, {
                args: [ [ 1, 1 ], [ 1 ] ],
                expected: !1
              }, {
                args: [ [ 1 ], [ 1, 1 ] ],
                expected: !1
              }, {
                args: [ [ 1, 2, 3 ], [ 1, 2, 4 ] ],
                expected: !1
              }, {
                args: [ [ 1, 2, 3 ], [ 3, 2, 1 ] ],
                expected: !0
              }, {
                args: [ [ 1, 2, 3 ], [ 3, 2, 1 ] ],
                expected: !0
              }, {
                args: [ [ [ 1 ], 2, 3 ], [ 3, 2, [ 1 ] ] ],
                expected: !1
              }, {
                args: [ 1, [ 1 ] ],
                error: !0
              }, {
                args: [ [ 1 ], 1 ],
                error: !0
              } ], s = 0; s < c.length; s++) {
                var l = c[s];
                l.error ? e.shouldThrowErrorSync(() => a.arraySetIdentical.apply(a, l.args)) : e.identical(a.arraySetIdentical.apply(a, l.args), l.expected);
              }
              /* */              e.case = "no arguments", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical();
              }), e.case = "one or 2 arguments are not longIs entities, numeric argument", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical([ 1, 2, 4, 7, 5 ], 15);
              }), e.case = "one or 2 arguments are not longIs entities, string like arguments", 
              e.shouldThrowErrorSync(function() {
                a.arraySetIdentical("a", "a");
              }), e.case = "one or 2 arguments are not longIs entities, map like arguments", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical({
                  a: 1
                }, {
                  b: 3,
                  c: 8
                });
              }), e.case = "wrong argument", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical([ 1, 2, 4, 7, 5 ], "wrong argument");
              }), e.case = "both arguments are null", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical(null, null);
              }), e.case = "both arguments are undefined", e.shouldThrowErrorSync(function() {
                a.arraySetIdentical(void 0, void 0);
              });
            }
          }
        };
        r = wTestSuite(r), void 0 === t || t.parent || wTester.test(r.name);
      }();
    }), i = t.include;
    t.include;
  }(), // == end of file Long_test_s
  function Map_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Map.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Map_test_s
    function Map_test_s_naked() {
      !function _Map_test_s() {
        "use strict";
        //
        // map manipulator
        //
        function mapSetWithKeys(a) {
          a.case = "dstMap is null or empty";
          var r = e.mapSetWithKeys(null, [], 2);
          a.identical(r, {}), r = e.mapSetWithKeys({}, [], 2), a.identical(r, {}), r = e.mapSetWithKeys(null, "a", 2), 
          a.identical(r, {
            "a": 2
          }), r = e.mapSetWithKeys({}, "a", 2), a.identical(r, {
            "a": 2
          }), r = e.mapSetWithKeys(null, [ "a", "b" ], 2), a.identical(r, {
            "a": 2,
            "b": 2
          }), r = e.mapSetWithKeys({}, [ "a", "b" ], 2), a.identical(r, {
            "a": 2,
            "b": 2
          }), r = e.mapSetWithKeys({}, [ 1, 2 ], 2), a.identical(r, {
            1: 2,
            2: 2
          }), a.case = "dstMap is not null", r = e.mapSetWithKeys({
            "a": 2
          }, "a", "abc"), a.identical(r, {
            "a": "abc"
          }), r = e.mapSetWithKeys({
            "a": 2
          }, "b", 3), a.identical(r, {
            "a": 2,
            "b": 3
          }), r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ "b", "c" ], 3), a.identical(r, {
            "a": 2,
            "b": 3,
            "c": 3
          }), r = e.mapSetWithKeys({
            0: 0
          }, [ 1, 2 ], 2), a.identical(r, {
            0: 0,
            1: 2,
            2: 2
          }), a.case = "val is array", r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ "b", "c" ], [ 3 ]), a.identical(r, {
            "a": 2,
            "b": [ 3 ],
            "c": [ 3 ]
          }), r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ "b", "c" ], [ 3, "aa" ]), a.identical(r, {
            "a": 2,
            "b": [ 3, "aa" ],
            "c": [ 3, "aa" ]
          }), r = e.mapSetWithKeys({
            0: 0
          }, [ 0, 2 ], [ 3, "aa" ]), a.identical(r, {
            0: [ 3, "aa" ],
            2: [ 3, "aa" ]
          }), a.case = "val is object", r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ "b", "c" ], {
            "cc": 1
          }), a.identical(r, {
            "a": 2,
            "b": {
              "cc": 1
            },
            "c": {
              "cc": 1
            }
          }), r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ "b", "c" ], {
            "d": void 0
          }), a.identical(r, {
            "a": 2,
            "b": {
              "d": void 0
            },
            "c": {
              "d": void 0
            }
          }), r = e.mapSetWithKeys({
            0: 0
          }, [ 0, 2 ], {
            3: "aa"
          }), a.identical(r, {
            0: {
              3: "aa"
            },
            2: {
              3: "aa"
            }
          }), a.case = "src has null or undefined values", r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ null, "c" ], "aa"), a.identical(r, {
            "a": 2,
            "b": 1,
            "c": "aa",
            null: "aa"
          }), r = e.mapSetWithKeys({
            "a": 2,
            "b": 1,
            "c": "a"
          }, [ void 0, "c" ], "aa"), a.identical(r, {
            "a": 2,
            "b": 1,
            "c": "aa",
            undefined: "aa"
          }), a.case = "no arguments", a.shouldThrowErrorSync(() => e.mapSetWithKeys()), a.case = "too many arguments", 
          a.shouldThrowErrorSync(() => e.mapSetWithKeys({}, "a", "a", 1)), a.case = "dstMap is not object or null", 
          a.shouldThrowErrorSync(() => e.mapSetWithKeys([], "a", "a")), a.case = "src is not array of strings or string", 
          a.shouldThrowErrorSync(() => e.mapSetWithKeys({
            "a": 1
          }, 1, "a")), a.shouldThrowErrorSync(() => e.mapSetWithKeys({
            "a": 1
          }, {
            "k": 2
          }, "a"));
        }
        //
                void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l1/Map",
          silencing: 1,
          tests: {
            // map tester
            mapIs: 
            //
            function mapIs(a) {
              a.case = "an empty object";
              var r = e.mapIs({}), n = !0;
              a.identical(r, n), a.case = "an object", r = e.mapIs({
                a: 7,
                b: 13
              }), n = !0, a.identical(r, n), a.case = "no argument", r = e.mapIs(), n = !1, a.identical(r, n), 
              a.case = "an array", r = e.mapIs([]), n = !1, a.identical(r, n), a.case = "a string", 
              r = e.mapIs("str"), n = !1, a.identical(r, n), a.case = "a number", r = e.mapIs(13), 
              n = !1, a.identical(r, n), a.case = "a boolean", r = e.mapIs(!0), n = !1, a.identical(r, n), 
              a.case = "a function", r = e.mapIs(function() {}), n = !1, a.identical(r, n), a.case = "a string", 
              r = e.mapIs(Object.create({
                a: 7
              })), n = !1, a.identical(r, n);
            }
            //
            ,
            // map move
            mapCloneAssigning: function mapCloneAssigning(a) {
              a.case = "an Example";
              var r = new function Example() {
                this.name = "Peter", this.age = 27;
              }(), n = {
                sex: "Male"
              }, t = e.mapCloneAssigning({
                srcMap: r,
                dstMap: n
              });
              a.is(n === t), a.identical(t, {
                sex: "Male",
                name: "Peter",
                age: 27
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapCloneAssigning();
              }), a.case = "redundant argument", a.shouldThrowError(function() {
                e.mapCloneAssigning({}, {}, "wrong arguments");
              }), a.case = "wrong type of array", a.shouldThrowError(function() {
                e.mapCloneAssigning([]);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapCloneAssigning("wrong arguments");
              });
            }
            //
            ,
            mapExtendConditional: function mapExtendConditional(a) {
              a.case = "an unique object";
              debugger;
              var r = e.mapExtendConditional(e.field.mapper.dstNotHas, {
                a: 1,
                b: 2
              }, {
                a: 1,
                c: 3
              });
              a.identical(r, {
                a: 1,
                b: 2,
                c: 3
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapExtendConditional();
              }), a.case = "few argument", a.shouldThrowError(function() {
                e.mapExtendConditional(e.field.mapper.dstNotHas);
              }), a.case = "wrong type of array", a.shouldThrowError(function() {
                e.mapExtendConditional([]);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapExtendConditional("wrong arguments");
              });
            }
            //
            ,
            mapExtend: function mapExtend(a) {
              /* */
              a.open("first argument is null"), a.case = "trivial";
              /* */
              var r = {
                a: 1,
                b: 2
              }, n = {
                a: 1,
                b: 2
              }, t = {
                c: 3,
                d: 4
              }, i = {
                c: 3,
                d: 4
              }, c = e.mapExtend(null, r, t), s = {
                a: 1,
                b: 2,
                c: 3,
                d: 4
              };
              a.will = "return", a.identical(c, s), a.will = "preserve src1", a.identical(r, n), 
              a.will = "preserve src2", a.identical(t, i), a.will = "return not src1", a.is(c !== r), 
              a.will = "return not src2", a.is(c !== t), a.case = "rewriting", r = {
                a: 1,
                b: 2
              }, n = {
                a: 1,
                b: 2
              }, t = {
                b: 22,
                c: 3,
                d: 4
              }, i = {
                b: 22,
                c: 3,
                d: 4
              }, c = e.mapExtend(null, r, t), s = {
                a: 1,
                b: 22,
                c: 3,
                d: 4
              }, a.will = "return", a.identical(c, s), a.will = "preserve src1", a.identical(r, n), 
              a.will = "preserve src2", a.identical(t, i), a.will = "return not src1", a.is(c !== r), 
              a.will = "return not src2", a.is(c !== t), a.close("first argument is null"), 
              /* */
              a.open("first argument is dst"), a.case = "trivial";
              /* */
              var l = {
                a: 1,
                b: 2
              };
              t = {
                c: 3,
                d: 4
              }, i = {
                c: 3,
                d: 4
              }, c = e.mapExtend(l, t), s = {
                a: 1,
                b: 2,
                c: 3,
                d: 4
              }, a.will = "return", a.identical(c, s), a.will = "preserve src2", a.identical(t, i), 
              a.will = "return dst", a.is(c === l), a.will = "return not src2", a.is(c !== t), 
              a.case = "rewriting", l = {
                a: 1,
                b: 2
              }, t = {
                b: 22,
                c: 3,
                d: 4
              }, i = {
                b: 22,
                c: 3,
                d: 4
              }, c = e.mapExtend(l, t), s = {
                a: 1,
                b: 22,
                c: 3,
                d: 4
              }, a.will = "return", a.identical(c, s), a.will = "preserve src2", a.identical(t, i), 
              a.will = "return not dst", a.is(c === l), a.will = "return not src2", a.is(c !== t), 
              a.close("first argument is dst"), 
              /* */
              a.case = "trivial, first argument", r = {
                a: 7,
                b: 13
              }, n = {
                a: 7,
                b: 13
              }, t = {
                c: 3,
                d: 33
              }, i = {
                c: 3,
                d: 33
              }, c = e.mapExtend(r, t), s = {
                a: 7,
                b: 13,
                c: 3,
                d: 33
              }, a.identical(c, s), a.identical(t, i), a.is(c === r), a.is(c !== t), a.case = "complex, first argument is null", 
              r = {
                a: 1,
                b: 1,
                c: 1,
                z: 1
              }, n = {
                a: 1,
                b: 1,
                c: 1,
                z: 1
              }, t = {
                a: 2,
                c: 2,
                d: 2
              }, i = {
                a: 2,
                c: 2,
                d: 2
              };
              var o = {
                a: 3,
                b: 3,
                e: 3
              }, d = {
                a: 3,
                b: 3,
                e: 3
              };
              c = e.mapExtend(null, r, t, o), s = {
                a: 3,
                b: 3,
                c: 2,
                d: 2,
                e: 3,
                z: 1
              }, a.identical(c, s), a.identical(r, n), a.identical(t, i), a.identical(o, d), a.is(c !== r), 
              a.is(c !== t), a.is(c !== o), a.case = "complex, first argument is not null", r = {
                a: 1,
                b: 1,
                c: 1,
                z: 1
              }, n = {
                a: 1,
                b: 1,
                c: 1,
                z: 1
              }, t = {
                a: 2,
                c: 2,
                d: 2
              }, i = {
                a: 2,
                c: 2,
                d: 2
              }, o = {
                a: 3,
                b: 3,
                e: 3
              }, d = {
                a: 3,
                b: 3,
                e: 3
              }, c = e.mapExtend(r, t, o), s = {
                a: 3,
                b: 3,
                c: 2,
                d: 2,
                e: 3,
                z: 1
              }, a.identical(c, s), a.identical(t, i), a.identical(o, d), a.is(c === r), a.is(c !== t), 
              a.is(c !== o), a.case = "extend pure map by empty strings, first argument is null", 
              (r = Object.create(null)).a = "1", r.b = "1", r.c = "1", r.z = "1", (n = Object.create(null)).a = "1", 
              n.b = "1", n.c = "1", n.z = "1", (t = Object.create(null)).a = "", t.c = "", t.d = "", 
              t.e = "2", (i = Object.create(null)).a = "", i.c = "", i.d = "", i.e = "2", c = e.mapExtend(null, r, t), 
              s = {
                a: "",
                b: "1",
                c: "",
                d: "",
                e: "2",
                z: "1"
              }, a.identical(c, s), a.identical(r, n), a.identical(t, i), a.is(c !== r), a.is(c !== t), 
              a.case = "extend pure map by empty strings, first argument is not null", (r = Object.create(null)).a = "1", 
              r.b = "1", r.c = "1", r.z = "1", (n = Object.create(null)).a = "1", n.b = "1", n.c = "1", 
              n.z = "1", (t = Object.create(null)).a = "", t.c = "", t.d = "", t.e = "2", (i = Object.create(null)).a = "", 
              i.c = "", i.d = "", i.e = "2", c = e.mapExtend(r, t), s = {
                a: "",
                b: "1",
                c: "",
                d: "",
                e: "2",
                z: "1"
              }, a.identical(c, s), a.identical(t, i), a.is(c === r), a.is(c !== t), a.case = "object like array", 
              c = e.mapExtend(null, [ 3, 7, 13, 73 ]), s = {
                0: 3,
                1: 7,
                2: 13,
                3: 73
              }, a.identical(c, s), 
              /**/
              a.case = "extend complex map by complex map", (l = Object.create(null)).x1 = "1", 
              l.x2 = 2, (l = Object.create(l)).x3 = 3, l.x4 = 4;
              var u = Object.create(null);
              u.x1 = "11", u.y2 = 12, (u = Object.create(u)).x3 = 13, u.y4 = 14, (s = Object.create(null)).x1 = "1", 
              s.x2 = 2, (s = Object.create(s)).x4 = 4, s.x1 = "11", s.y2 = 12, s.x3 = 13, s.y4 = 14, 
              c = e.mapExtend(l, u), a.identical(c, s), a.is(c === l);
            }
            //
            ,
            mapSupplement: function mapSupplement(a) {
              a.case = "an object";
              var r = e.mapSupplement({
                a: 1,
                b: 2
              }, {
                a: 1,
                c: 3
              });
              a.identical(r, {
                a: 1,
                b: 2,
                c: 3
              }), a.case = "no argument", a.shouldThrowError(function() {
                e.mapSupplement();
              }), 
              // test.case = 'wrong type of array';
              // test.shouldThrowError( function()
              // {
              //   _.mapSupplement( [] );
              // });
              a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapSupplement("wrong arguments");
              });
            }
            //
            ,
            mapComplement: function mapComplement(a) {
              a.case = "an object";
              var r = e.mapComplement({
                a: 1,
                b: "ab"
              }, {
                a: 12,
                c: 3
              });
              a.identical(r, {
                a: 1,
                b: "ab",
                c: 3
              }), a.case = "no argument", a.shouldThrowError(function() {
                e.mapComplement();
              }), a.case = "wrong type of array", a.shouldThrowError(function() {
                e.mapComplement([]);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapComplement("wrong arguments");
              });
            }
            //
            ,
            mapMake: function mapMake(a) {
              a.case = "empty";
              /**/
              var r = e.mapMake(), n = {};
              a.identical(r, n), a.is(e.mapIsPure(r)), r = e.mapMake(null), n = {}, a.identical(r, n), 
              a.is(e.mapIsPure(r)), r = e.mapMake(void 0), n = {}, a.identical(r, n), a.is(e.mapIsPure(r)), 
              a.case = "empty map";
              /**/
              var t = {}, i = e.mapExtend(null, t);
              r = e.mapMake(t), n = {}, a.identical(r, n), a.is(e.mapIsPure(r)), a.identical(t, i), 
              a.is(r !== t), a.case = "single map", t = {
                a: 7,
                b: 13
              }, i = e.mapExtend(null, t), r = e.mapMake(t), n = {
                a: 7,
                b: 13
              }, a.identical(r, n), a.is(e.mapIsPure(r)), a.identical(t, i), a.is(r !== t), a.case = "trivial", 
              t = {
                a: 7,
                b: 13
              };
              /**/
              var c = {
                a: 77,
                c: 3,
                d: 33
              }, s = {
                a: "x",
                e: 77
              }, l = (i = e.mapExtend(null, t), e.mapExtend(null, c)), o = e.mapExtend(null, s);
              r = e.mapMake(t, c, s), n = {
                a: "x",
                b: 13,
                c: 3,
                d: 33,
                e: 77
              }, a.identical(r, n), a.is(e.mapIsPure(r)), a.identical(t, i), a.identical(c, l), 
              a.identical(s, o), a.is(r !== t), a.is(r !== c), a.is(r !== s), 
              /* */
              a.case = "bad arguments", /**/
              a.shouldThrowError(function() {
                e.mapMake("");
              }), a.case = "bad arguments", /**/
              a.shouldThrowError(function() {
                e.mapMake("x");
              }), a.case = "bad arguments", /**/
              a.shouldThrowError(function() {
                e.mapMake(null, "x");
              }), a.case = "bad arguments";
            },
            // map manipulator
            mapSetWithKeys: mapSetWithKeys,
            mapSet: mapSetWithKeys,
            // map convert
            mapFirstPair: function mapFirstPair(a) {
              a.case = "first pair [ key, value ]";
              var r = e.mapFirstPair({
                a: 3,
                b: 13
              }), n = [ "a", 3 ];
              a.identical(r, n), a.case = "undefined", r = e.mapFirstPair({}), n = [], a.identical(r, n), 
              a.case = "pure map";
              var t = Object.create(null);
              t.a = 7, r = e.mapFirstPair(t), n = [ "a", 7 ], a.identical(r, n), a.case = "no argument", 
              a.shouldThrowError(function() {
                e.mapFirstPair();
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapFirstPair("wrong argument");
              });
            }
            //
            ,
            mapValWithIndex: function mapValWithIndex(a) {
              a.case = "second index";
              var r = e.mapValWithIndex({
                0: 3,
                1: 13,
                2: "c",
                3: 7
              }, 2), n = "c";
              a.identical(r, n), a.case = "an element", r = e.mapValWithIndex({
                0: [ "a", 3 ]
              }, 0), n = [ "a", 3 ], a.identical(r, n), a.case = "a list of arrays", r = e.mapValWithIndex({
                0: [ "a", 3 ],
                1: [ "b", 13 ],
                2: [ "c", 7 ]
              }, 2), n = [ "c", 7 ], a.identical(r, n), a.case = "a list of objects", r = e.mapValWithIndex({
                0: {
                  a: 3
                },
                1: {
                  b: 13
                },
                2: {
                  c: 7
                }
              }, 2), n = {
                c: 7
              }, a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapValWithIndex();
              }), a.case = "few argument", a.shouldThrowError(function() {
                e.mapValWithIndex([ [] ]);
              }), a.case = "first the four argument not wrapped into array", a.shouldThrowError(function() {
                e.mapValWithIndex(3, 13, "c", 7, 2);
              }), a.case = "redundant argument", a.shouldThrowError(function() {
                e.mapValWithIndex([ [] ], 2, "wrong arguments");
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapValWithIndex("wrong argumetns");
              });
            }
            //
            ,
            mapKeyWithIndex: function mapKeyWithIndex(a) {
              a.case = "last key";
              var r = e.mapKeyWithIndex({
                "a": 3,
                "b": 13,
                "c": 7
              }, 2), n = "c";
              a.identical(r, n), a.case = "first key", r = e.mapKeyWithIndex({
                0: {
                  a: 3
                },
                1: 13,
                2: "c",
                3: 7
              }, 3), n = "3", a.identical(r, n), a.case = "no argument", a.shouldThrowError(function() {
                e.mapKeyWithIndex();
              }), a.case = "few arguments", a.shouldThrowError(function() {
                e.mapKeyWithIndex([]);
              }), a.case = "redundant argument", a.shouldThrowError(function() {
                e.mapKeyWithIndex([], 2, "wrong arguments");
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapKeyWithIndex("wrong argumetns");
              });
            }
            //
            ,
            mapToStr: function mapToStr(a) {
              a.case = "returns an empty string";
              var r = e.mapToStr({
                src: [],
                keyValDelimeter: " : ",
                entryDelimeter: "; "
              }), n = "";
              a.identical(r, n), a.case = "returns a string representing an object", r = e.mapToStr({
                src: {
                  a: 1,
                  b: 2,
                  c: 3,
                  d: 4
                },
                keyValDelimeter: " : ",
                entryDelimeter: "; "
              }), n = "a : 1; b : 2; c : 3; d : 4", a.identical(r, n), a.case = "returns a string representing an array", 
              r = e.mapToStr({
                src: [ 1, 2, 3 ],
                keyValDelimeter: " : ",
                entryDelimeter: "; "
              }), n = "0 : 1; 1 : 2; 2 : 3", a.identical(r, n), a.case = "returns a string representing an array-like object", 
              r = e.mapToStr({
                src: function args() {
                  return arguments;
                }(1, 2, 3, 4, 5),
                keyValDelimeter: " : ",
                entryDelimeter: "; "
              }), n = "0 : 1; 1 : 2; 2 : 3; 3 : 4; 4 : 5", a.identical(r, n), a.case = "returns a string representing a string", 
              r = e.mapToStr({
                src: "abc",
                keyValDelimeter: " : ",
                entryDelimeter: "; "
              }), n = "0 : a; 1 : b; 2 : c", a.identical(r, n), a.case = "no argument", a.shouldThrowError(function() {
                e.mapToStr();
              }), a.case = "wrong type of number", a.shouldThrowError(function() {
                e.mapToStr(13);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapToStr(!0);
              });
            }
            //
            ,
            mapsFlatten: function mapsFlatten(a) {
              a.case = "empty map";
              var r = {}, n = {}, t = e.mapsFlatten({
                src: r
              });
              a.identical(t, n), a.case = "empty array", r = [], n = {}, t = e.mapsFlatten(r), 
              a.identical(t, n), a.case = "array of empty maps", r = [ {}, {} ], n = {}, t = e.mapsFlatten(r), 
              a.identical(t, n), a.case = "trivial", r = [ {
                a: 1,
                b: {
                  c: 1,
                  d: 1
                }
              }, {
                e: 2,
                f: {
                  g: {
                    h: 2
                  }
                }
              } ], n = {
                a: 1,
                "b/c": 1,
                "b/d": 1,
                e: 2,
                "f/g/h": 2
              }, t = e.mapsFlatten(r), a.identical(t, n), a.case = "delimeter : .", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                c: 3
              } ], n = {
                "a": 1,
                "dir.b": 2,
                "c": 3
              }, t = e.mapsFlatten({
                src: r,
                delimeter: "."
              }), a.identical(t, n), a.case = "delimeter : ", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                c: 3
              } ], n = {
                "a": 1,
                "dirb": 2,
                "c": 3
              }, t = e.mapsFlatten({
                src: r,
                delimeter: ""
              }), a.identical(t, n), a.case = "delimeter : 0", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                c: 3
              } ], n = {
                "a": 1,
                "b": 2,
                "c": 3
              }, t = e.mapsFlatten({
                src: r,
                delimeter: 0
              }), a.identical(t, n), a.case = "delimeter : false", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                c: 3
              } ], n = {
                "a": 1,
                "b": 2,
                "c": 3
              }, t = e.mapsFlatten({
                src: r,
                delimeter: !1
              }), a.identical(t, n), a.case = "allowingCollision : 1", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                a: 3,
                dir: {
                  b: 4,
                  c: 5
                }
              } ], n = {
                "a": 3,
                "dir/b": 4,
                "dir/c": 5
              }, t = e.mapsFlatten({
                src: r,
                allowingCollision: 1
              }), a.identical(t, n), a.case = "delimeter : 0, allowingCollision : 1", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                a: 3,
                dir: {
                  b: 4,
                  c: 5
                }
              } ], n = {
                "a": 3,
                "b": 4,
                "c": 5
              }, t = e.mapsFlatten({
                src: r,
                delimeter: 0,
                allowingCollision: 1
              }), a.identical(t, n), a.case = "delimeter : 0, allowingCollision : 1", r = [ {
                a: 1,
                dir: {
                  b: 2
                }
              }, {
                a: 3,
                dir: {
                  b: 4,
                  c: 5
                }
              } ], n = {
                "a": 3,
                "b": 4,
                "c": 5,
                "d": 6
              }, t = e.mapsFlatten({
                src: r,
                dst: {
                  a: 0,
                  d: 6
                },
                delimeter: 0,
                allowingCollision: 1
              }), a.identical(t, n), a.case = "collision", a.shouldThrowErrorSync(() => {
                e.mapsFlatten({
                  src: {
                    dir: {
                      a: 2
                    }
                  },
                  dst: {
                    "dir/a": 1
                  }
                });
              }), a.shouldThrowErrorSync(() => {
                e.mapsFlatten({
                  src: [ {
                    dir: {
                      a: 2
                    }
                  }, {
                    dir: {
                      a: 2
                    }
                  } ]
                });
              }), a.shouldThrowErrorSync(() => {
                e.mapsFlatten({
                  src: [ {
                    dir: {
                      a: 2
                    }
                  }, {
                    dir: {
                      a: 2
                    }
                  } ],
                  allowingCollision: 0
                });
              }), a.shouldThrowErrorSync(() => {
                e.mapsFlatten({
                  src: [ {
                    dir: {
                      a: 2
                    }
                  }, {
                    dir: {
                      a: 2
                    }
                  } ],
                  delimeter: 0
                });
              }), a.shouldThrowErrorSync(() => {
                e.mapsFlatten({
                  src: [ {
                    dir: {
                      a: 2
                    }
                  }, {
                    dir: {
                      a: 2
                    }
                  } ],
                  delimeter: 0,
                  allowingCollision: 0
                });
              }), a.case = "bad arguments", a.shouldThrowErrorSync(() => e.mapsFlatten()), a.shouldThrowErrorSync(() => e.mapsFlatten({})), 
              a.shouldThrowErrorSync(() => e.mapsFlatten({}, {})), a.shouldThrowErrorSync(() => e.mapsFlatten("a")), 
              a.shouldThrowErrorSync(() => e.mapsFlatten(1)), a.shouldThrowErrorSync(() => e.mapsFlatten(null)), 
              a.shouldThrowErrorSync(() => e.mapsFlatten([ "a" ])), a.shouldThrowErrorSync(() => e.mapsFlatten([ 1 ])), 
              a.shouldThrowErrorSync(() => e.mapsFlatten([ null ])), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: void 0
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: "a"
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: 1
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: null
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: [ "a" ]
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: [ 1 ]
              })), a.shouldThrowErrorSync(() => e.mapsFlatten({
                src: [ null ]
              }));
            }
            //
            ,
            // map properties
            mapKeys: function mapKeys(a) {
              a.case = "trivial";
              var r = e.mapKeys({}), n = [];
              a.identical(r, n), r = e.mapKeys({
                a: 1,
                b: void 0
              }), n = [ "a", "b" ], a.identical(r, n), r = e.mapKeys({
                a: 7,
                b: 13
              }), n = [ "a", "b" ], a.identical(r, n), r = e.mapKeys({
                7: "a",
                3: "b",
                13: "c"
              }), n = [ "3", "7", "13" ], a.identical(r, n);
              var t = function() {};
              Object.setPrototypeOf(t, String), t.a = 1, r = e.mapKeys(t), n = [ "a" ], a.identical(r, n), 
              r = e.mapKeys(new Date()), n = [], a.identical(r, n), 
              //
              a.case = "options";
              var i = {
                a: 1
              }, c = {
                b: 2
              };
              Object.setPrototypeOf(i, c), r = e.mapKeys(i), n = [ "a", "b" ], a.identical(r, n);
              /* own on */
              var s = {
                own: 1
              };
              r = e.mapKeys.call(s, i), n = [ "a" ], a.identical(r, n), s = {
                enumerable: 0,
                own: 0
              }, Object.defineProperty(c, "k", {
                enumerable: 0
              }), r = e.mapKeys.call(s, i), n = e.mapAllKeys(i), a.identical(r, n), s = {
                enumerable: 0,
                own: 1
              }, Object.defineProperty(i, "k", {
                enumerable: 0
              }), r = e.mapKeys.call(s, i), n = [ "a", "k" ], a.identical(r, n), a.case = "no argument", 
              a.shouldThrowError(function() {
                e.mapKeys();
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapKeys("wrong arguments");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                debugger;
                e.mapKeys.call({
                  x: 1
                }, {});
                debugger;
              });
            }
            //
            ,
            mapOwnKeys: function mapOwnKeys(a) {
              a.case = "empty";
              var r = e.mapOwnKeys({}), n = [];
              a.identical(r, n), 
              //
              a.case = "simplest", r = e.mapOwnKeys({
                a: "1",
                b: "2"
              }), n = [ "a", "b" ], a.identical(r, n), r = e.mapOwnKeys(new Date()), n = [], a.identical(r, n), 
              //
              a.case = "";
              var t = {
                a: 1
              }, i = {
                b: 2
              }, c = {
                c: 3
              };
              Object.setPrototypeOf(t, i), Object.setPrototypeOf(i, c), r = e.mapOwnKeys(t), n = [ "a" ], 
              a.identical(r, n), r = e.mapOwnKeys(i), n = [ "b" ], a.identical(r, n), r = e.mapOwnKeys(c), 
              n = [ "c" ], a.identical(r, n), 
              //
              a.case = "enumerable on/off", t = {
                a: "1"
              }, r = e.mapOwnKeys(t), n = [ "a" ], a.identical(r, n), Object.defineProperty(t, "k", {
                enumerable: !1
              }), r = e.mapOwnKeys.call({
                enumerable: 0
              }, t), n = [ "a", "k" ], a.identical(r, n), a.case = "no args", a.shouldThrowError(function() {
                e.mapOwnKeys();
              }), a.case = "invalid type", a.shouldThrowError(function() {
                e.mapOwnKeys(1);
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapOwnKeys.call({
                  own: 0
                }, {});
              });
            }
            //
            ,
            mapAllKeys: function mapAllKeys(a) {
              var r = [ "__defineGetter__", "__defineSetter__", "hasOwnProperty", "__lookupGetter__", "__lookupSetter__", "propertyIsEnumerable", "__proto__", "constructor", "toString", "toLocaleString", "valueOf", "isPrototypeOf" ];
              //
                            a.case = "empty";
              var n = e.mapAllKeys({});
              a.identical(n.sort(), r.sort()), 
              //
              a.case = "one own property", n = e.mapAllKeys({
                a: 1
              }), (i = r.slice()).push("a"), a.identical(n.sort(), i.sort()), 
              //
              a.case = "date", n = e.mapAllKeys(new Date()), a.identical(n.length, 55), 
              //
              a.case = "not enumerable";
              var t = {};
              Object.defineProperty(t, "k", {
                enumerable: 0
              }), n = e.mapAllKeys(t), (i = r.slice()).push("k"), a.identical(n.sort(), i.sort()), 
              //
              a.case = "from prototype", t = {
                a: 1
              };
              var i, c = {
                b: 1
              };
              Object.setPrototypeOf(t, c), Object.defineProperty(t, "k", {
                enumerable: 0
              }), Object.defineProperty(c, "y", {
                enumerable: 0
              }), n = e.mapAllKeys(t), i = (i = r.slice()).concat([ "a", "b", "k", "y" ]), a.identical(n.sort(), i.sort()), 
              a.case = "no args", a.shouldThrowError(function() {
                e.mapAllKeys();
              }), a.case = "invalid argument", a.shouldThrowError(function() {
                e.mapAllKeys();
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapAllKeys.call({
                  own: 0
                }, {});
              });
            }
            //
            ,
            mapVals: function mapVals(a) {
              a.case = "trivial";
              var r = e.mapVals({}), n = [];
              a.identical(r, n), r = e.mapVals({
                a: 1,
                b: void 0
              }), n = [ 1, void 0 ], a.identical(r, n), r = e.mapVals({
                a: 7,
                b: 13
              }), n = [ 7, 13 ], a.identical(r, n), r = e.mapVals({
                7: "a",
                3: "b",
                13: "c"
              }), n = [ "b", "a", "c" ], a.identical(r, n), r = e.mapVals(new Date()), n = [], 
              a.identical(r, n), 
              /* */
              a.case = "own";
              var t = {
                a: 1
              };
              Object.setPrototypeOf(t, {
                b: 2
              }), r = e.mapVals.call({
                own: 0,
                enumerable: 1
              }, t), n = [ 1, 2 ], a.identical(r, n), r = e.mapVals.call({
                own: 1,
                enumerable: 1
              }, t), n = [ 1 ], a.identical(r, n), 
              //
              a.case = "enumerable", t = {
                a: 1
              }, Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 2
              }), r = e.mapVals.call({
                enumerable: 1,
                own: 0
              }, t), n = [ 1 ], a.identical(r, n), r = e.mapVals.call({
                enumerable: 0,
                own: 0
              }, t);
              for (
              /**/
              var i = !1, c = 0; c < r.length && (i = e.mapContain(t, r[c])); c++) ;
              a.is(i), a.case = "no argument", a.shouldThrowError(function() {
                e.mapVals();
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapVals("wrong argument");
              }), a.case = "wrong option", a.shouldThrowError(function() {
                e.mapVals.call({
                  a: 1
                }, {});
              });
            }
            //
            ,
            mapOwnVals: function mapOwnVals(a) {
              a.case = "trivial";
              var r = e.mapOwnVals({}), n = [];
              a.identical(r, n), r = e.mapOwnVals({
                a: 7,
                b: 13
              }), n = [ 7, 13 ], a.identical(r, n), r = e.mapOwnVals({
                7: "a",
                3: "b",
                13: "c"
              }), n = [ "b", "a", "c" ], a.identical(r, n), r = e.mapOwnVals(new Date()), n = [], 
              a.identical(r, n), 
              //
              a.case = " only own values";
              var t = {
                a: 1
              }, i = {
                b: 2
              };
              Object.setPrototypeOf(t, i), r = e.mapOwnVals(t), n = [ 1 ], a.identical(r, n), 
              /* enumerable off */
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), Object.defineProperty(i, "y", {
                enumerable: 0,
                value: 4
              }), r = e.mapOwnVals.call({
                enumerable: 0
              }, t), n = [ 1, 3 ], a.identical(r, n), a.case = "no argument", a.shouldThrowError(function() {
                e.mapOwnVals();
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnVals("wrong argument");
              }), a.case = "wrong option", a.shouldThrowError(function() {
                e.mapOwnVals.call({
                  a: 1
                }, {});
              });
            }
            //
            ,
            mapAllVals: function mapAllVals(a) {
              a.case = "trivial";
              var r = e.mapAllVals({});
              a.is(r.length), r = e.mapAllVals({
                a: 7,
                b: 13
              }), a.is(r.length), a.is(-1 !== r.indexOf(7)), a.is(-1 !== r.indexOf(13)), r = e.mapAllVals(new Date()), 
              a.is(r.length > e.mapAllVals({}).length), 
              //
              a.case = "from prototype";
              var n = {
                a: 1
              };
              Object.setPrototypeOf(n, {
                b: 2
              }), r = e.mapAllVals(n), a.is(r.length > e.mapAllVals({}).length), a.is(-1 !== r.indexOf(1)), 
              a.is(-1 !== r.indexOf(2)), a.case = "no argument", a.shouldThrowError(function() {
                e.mapAllVals();
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapAllVals("wrong argument");
              }), a.case = "wrong option", a.shouldThrowError(function() {
                e.mapAllVals.call({
                  a: 1
                }, {});
              });
            }
            //
            ,
            mapPairs: function mapPairs(a) {
              a.case = "empty";
              var r = e.mapPairs({}), n = [];
              a.identical(r, n), r = e.mapPairs([]), n = [], a.identical(r, n), 
              /**/
              a.case = "a list of [ key, value ] pairs", r = e.mapPairs({
                a: 7,
                b: 13
              }), n = [ [ "a", 7 ], [ "b", 13 ] ], a.identical(r, n), a.case = "a list of [ key, value ] pairs", 
              r = e.mapPairs({
                a: 3,
                b: 13,
                c: 7
              }), n = [ [ "a", 3 ], [ "b", 13 ], [ "c", 7 ] ], a.identical(r, n);
              /**/
              var t = [];
              t.k = 1, r = e.mapPairs(t), n = [ [ "k", 1 ] ], a.identical(r, n), r = e.mapPairs(new Date()), 
              n = [], a.identical(r, n), 
              /* */
              a.case = "from prototype";
              var i = {
                a: 1
              };
              Object.setPrototypeOf(i, {
                b: 2
              }), r = e.mapPairs(i), n = [ [ "a", 1 ], [ "b", 2 ] ], a.identical(r, n), r = e.mapPairs.call({
                own: 1
              }, i), n = [ [ "a", 1 ] ], a.identical(r, n), 
              /* using enumerable off, own on */
              Object.defineProperty(i, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapPairs.call({
                enumerable: 0,
                own: 1
              }, i), n = [ [ "a", 1 ], [ "k", 3 ] ], a.identical(r, n), 
              /* using enumerable off, own off */
              Object.defineProperty(i, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapPairs.call({
                enumerable: 0,
                own: 0
              }, i), a.is(r.length > 2), a.identical(r[0], [ "a", 1 ]), a.identical(r[1], [ "k", 3 ]), 
              a.case = "no argument", a.shouldThrowError(function() {
                e.mapPairs();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapPairs(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapPairs("wrong argument");
              }), a.case = "redundant argument", a.shouldThrowError(function() {
                e.mapPairs({}, "wrong arguments");
              }), a.case = "wrong type of array", a.shouldThrowError(function() {
                e.mapPairs(null);
              });
            }
            //
            ,
            mapOwnPairs: function mapOwnPairs(a) {
              a.case = "empty";
              var r = e.mapOwnPairs({}), n = [];
              a.identical(r, n), 
              //
              a.case = "a list of [ key, value ] pairs", r = e.mapOwnPairs({
                a: 7,
                b: 13
              }), n = [ [ "a", 7 ], [ "b", 13 ] ], a.identical(r, n);
              /**/
              var t = [];
              t.k = 1, r = e.mapOwnPairs(t), n = [ [ "k", 1 ] ], a.identical(r, n), r = e.mapOwnPairs(new Date()), 
              n = [], a.identical(r, n), 
              //
              a.case = "from prototype";
              var i = {
                a: 1
              };
              Object.setPrototypeOf(i, {
                b: 2
              }), r = e.mapOwnPairs(i), n = [ [ "a", 1 ] ], a.identical(r, n), 
              /* using enumerable off */
              Object.defineProperty(i, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnPairs.call({
                enumerable: 0
              }, i), n = [ [ "a", 1 ], [ "k", 3 ] ], a.identical(r, n), a.case = "no argument", 
              a.shouldThrowError(function() {
                e.mapOwnPairs();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapOwnPairs(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnPairs("wrong argument");
              });
            }
            //
            ,
            mapAllPairs: function mapAllPairs(a) {
              a.case = "empty";
              var r = e.mapAllPairs({});
              a.is(r.length), 
              //
              a.case = "a list of [ key, value ] pairs", r = e.mapAllPairs({
                a: 7,
                b: 13
              }), a.is(r.length > 2), a.identical(r[0], [ "a", 7 ]), a.identical(r[1], [ "b", 13 ]);
              /**/
              var n = [];
              n.k = 1, r = e.mapAllPairs(n), a.is(r.length > 1), r = e.arrayFlatten([], r), a.is(-1 !== r.indexOf("k")), 
              a.identical(r[r.indexOf("k") + 1], 1), r = e.mapAllPairs(new Date()), a.is(r.length > 1), 
              r = e.arrayFlatten([], r), a.is(-1 !== r.indexOf("constructor")), a.identical(r[r.indexOf("constructor") + 1].name, "Date"), 
              //
              a.case = "from prototype";
              var t = {
                a: 1
              };
              Object.setPrototypeOf(t, {
                b: 2
              }), r = e.mapAllPairs(t), a.is(r.length > 2), a.identical(r[0], [ "a", 1 ]), a.identical(r[1], [ "b", 2 ]), 
              a.case = "no argument", a.shouldThrowError(function() {
                e.mapAllPairs();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapAllPairs(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapAllPairs("wrong argument");
              });
            }
            //
            ,
            mapProperties: function mapProperties(a) {
              a.case = "empty";
              var r = e.mapProperties({});
              a.identical(r, {}), r = e.mapProperties([]), a.identical(r, {}), 
              //
              a.case = "trivial", r = e.mapProperties({
                a: 1
              });
              var n = {
                a: 1
              };
              a.identical(r, n), (t = []).a = 1, r = e.mapProperties(t), n = {
                a: 1
              }, a.identical(r, n), r = e.mapProperties(new Date()), n = {}, a.identical(r, n), 
              //
              a.case = "prototype";
              var t = {
                a: 1
              };
              Object.setPrototypeOf(t, {
                b: 2
              }), r = e.mapProperties(t), n = {
                a: 1,
                b: 2
              }, a.identical(r, n), r = e.mapProperties.call({
                own: 1,
                enumerable: 1
              }, t), n = {
                a: 1
              }, a.identical(r, n), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapProperties.call({
                enumerable: 0,
                own: 1
              }, t), n = {
                a: 1,
                k: 3
              }, a.identical(r, n), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapProperties.call({
                enumerable: 0,
                own: 0
              }, t), a.is(Object.keys(r).length > 3), a.is(1 === r.a), a.is(2 === r.b), a.is(3 === r.k), 
              r = e.mapProperties.call({
                enumerable: 0,
                own: 0
              }, new Date()), a.is(Object.keys(r).length), a.is("Date" === r.constructor.name), 
              a.is(e.routineIs(r.getDate)), a.is(!!r.__proto__), a.case = "no argument", a.shouldThrowError(function() {
                e.mapProperties();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapProperties(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapProperties("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapProperties.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapOwnProperties: function mapOwnProperties(a) {
              a.case = "empty";
              var r = e.mapOwnProperties({});
              a.identical(r, {}), r = e.mapOwnProperties([]), a.identical(r, {}), 
              //
              a.case = "trivial", r = e.mapOwnProperties({
                a: 1
              });
              var n = {
                a: 1
              };
              a.identical(r, n), (t = []).a = 1, r = e.mapOwnProperties(t), n = {
                a: 1
              }, a.identical(r, n), r = e.mapOwnProperties(new Date()), n = {}, a.identical(r, n), 
              //
              a.case = "prototype";
              var t = {
                a: 1
              };
              Object.setPrototypeOf(t, {
                b: 2
              }), r = e.mapOwnProperties(t), n = {
                a: 1
              }, a.identical(r, n), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnProperties.call({
                enumerable: 0
              }, t), n = {
                a: 1,
                k: 3
              }, a.identical(r, n), r = e.mapOwnProperties.call({
                enumerable: 0
              }, new Date()), a.identical(r, {}), a.case = "no argument", a.shouldThrowError(function() {
                e.mapOwnProperties();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapOwnProperties(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnProperties("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapOwnProperties.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapAllProperties: function mapAllProperties(a) {
              a.case = "empty";
              var r = e.mapAllProperties({});
              a.is(Object.keys(r).length), a.identical(r.constructor.name, "Object"), r = e.mapAllProperties([]), 
              a.is(Object.keys(r).length), a.identical(r.constructor.name, "Array"), 
              //
              a.case = "trivial", r = e.mapAllProperties({
                a: 1
              }), a.is(Object.keys(r).length > 1), a.identical(r.a, 1), (n = []).a = 1, r = e.mapAllProperties(n), 
              a.is(Object.keys(r).length > 1), a.identical(r.a, 1), r = e.mapAllProperties(new Date()), 
              a.is(e.routineIs(r.getDate)), a.identical(r.constructor.name, "Date"), 
              //
              a.case = "prototype";
              var n = {
                a: 1
              }, t = {
                b: 2
              };
              Object.setPrototypeOf(n, t), r = e.mapAllProperties(n), a.is(Object.keys(r).length > 2), 
              a.identical(r.a, 1), a.identical(r.b, 2), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapAllProperties(n), a.is(Object.keys(r).length > 3), a.identical(r.a, 1), 
              a.identical(r.b, 2), a.identical(r.k, 3), n = {
                a: 1
              }, t = {
                b: 2
              }, Object.setPrototypeOf(n, t), Object.defineProperty(t, "k", {
                enumerable: 0,
                value: void 0
              }), r = e.mapAllProperties(n), a.is(Object.keys(r).length > 3), a.identical(r.a, 1), 
              a.identical(r.b, 2), a.identical(r.k, void 0), a.case = "no argument", a.shouldThrowError(function() {
                e.mapAllProperties();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapAllProperties(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapAllProperties("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapAllProperties.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapRoutines: function mapRoutines(a) {
              a.case = "empty";
              var r = e.mapRoutines({});
              a.identical(r, {}), r = e.mapRoutines([]), a.identical(r, {}), 
              //
              a.case = "trivial", r = e.mapRoutines({
                a: 1,
                b: function() {}
              }), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.b)), (n = []).a = function() {}, 
              r = e.mapRoutines(n), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.a)), 
              r = e.mapRoutines(new Date()), a.identical(r, {}), 
              //
              a.case = "prototype";
              var n = {
                a: 1
              }, t = {
                b: 2,
                c: function() {}
              };
              Object.setPrototypeOf(n, t), r = e.mapRoutines(n), a.is(1 === Object.keys(r).length), 
              a.is(e.routineIs(r.c)), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapRoutines(n), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.c)), 
              /* enumerable : 0 */
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapRoutines.call({
                enumerable: 0
              }, n), a.is(Object.keys(r).length > 1), a.is(e.routineIs(r.c)), a.is(e.routineIs(r.__defineGetter__)), 
              a.is(e.routineIs(r.__defineSetter__)), 
              /**/
              n.y = function() {}, r = e.mapRoutines.call({
                own: 1
              }, n), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.y)), n = {
                a: 1,
                y: function() {}
              }, t = {
                b: 2,
                c: function() {}
              }, Object.setPrototypeOf(n, t), r = e.mapRoutines.call({
                own: 0
              }, n), a.is(2 === Object.keys(r).length), a.is(e.routineIs(r.y)), a.is(e.routineIs(r.c)), 
              n = {
                a: 1,
                y: function() {}
              }, t = {
                b: 2,
                c: function() {}
              }, Object.setPrototypeOf(n, t), Object.defineProperty(t, "k", {
                enumerable: 0,
                value: function() {}
              }), r = e.mapRoutines.call({
                own: 0,
                enumerable: 0
              }, n), a.is(Object.keys(r).length > 3), a.is(e.routineIs(r.y)), a.is(e.routineIs(r.c)), 
              a.is(e.routineIs(r.k)), a.is(e.routineIs(r.__defineGetter__)), a.is(e.routineIs(r.__defineSetter__)), 
              a.case = "no argument", a.shouldThrowError(function() {
                e.mapRoutines();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapRoutines(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapRoutines("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapRoutines.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapOwnRoutines: function mapOwnRoutines(a) {
              a.case = "empty";
              var r = e.mapOwnRoutines({});
              a.identical(r, {}), r = e.mapOwnRoutines([]), a.identical(r, {}), 
              //
              a.case = "trivial", r = e.mapOwnRoutines({
                a: 1,
                b: function() {}
              }), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.b)), (n = []).a = function() {}, 
              r = e.mapOwnRoutines(n), a.is(1 === Object.keys(r).length), a.is(e.routineIs(r.a)), 
              r = e.mapRoutines(new Date()), a.identical(r, {}), 
              //
              a.case = "prototype";
              var n = {
                a: 1
              }, t = {
                b: 2,
                c: function() {}
              };
              Object.setPrototypeOf(n, t), r = e.mapOwnRoutines(n), a.identical(r, {}), 
              /* enumerable : 0 */
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnRoutines(n), a.identical(r, {}), n = {}, t = {}, Object.setPrototypeOf(n, t), 
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: function() {}
              }), r = e.mapOwnRoutines(n), a.identical(r, {}), 
              /* enumerable : 0 */
              Object.defineProperty(n, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnRoutines.call({
                enumerable: 0
              }, n), a.identical(r, {}), n = {}, t = {}, Object.defineProperty(n, "k", {
                enumerable: 0,
                value: function() {}
              }), r = e.mapOwnRoutines.call({
                enumerable: 0
              }, n), a.identical(r.k, n.k), a.is(e.routineIs(r.k)), a.case = "no argument", a.shouldThrowError(function() {
                e.mapOwnRoutines();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapOwnRoutines(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnRoutines("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapOwnRoutines.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapAllRoutines: function mapAllRoutines(a) {
              a.case = "empty";
              var r = e.mapAllRoutines({});
              a.is(Object.keys(r).length), a.is(e.routineIs(r.__defineGetter__)), a.is(e.routineIs(r.__defineSetter__)), 
              r = e.mapAllRoutines([]), a.is(Object.keys(r).length), a.is(e.routineIs(r.__defineGetter__)), 
              a.is(e.routineIs(r.__defineSetter__)), 
              //
              a.case = "trivial", r = e.mapAllRoutines({
                a: 1,
                b: function() {}
              }), a.is(Object.keys(r).length), a.is(e.routineIs(r.__defineGetter__)), a.is(e.routineIs(r.__defineSetter__)), 
              a.is(e.routineIs(r.b)), (n = []).a = function() {}, r = e.mapAllRoutines(n), a.is(Object.keys(r).length), 
              a.is(e.routineIs(r.__defineGetter__)), a.is(e.routineIs(r.__defineSetter__)), a.is(e.routineIs(r.a)), 
              r = e.mapAllRoutines(new Date()), a.is(Object.keys(r).length), a.identical(r.constructor.name, "Date"), 
              a.is(e.routineIs(r.getDate)), 
              //
              a.case = "prototype";
              var n = {
                a: 1
              }, t = {
                b: 2,
                c: function() {}
              };
              Object.setPrototypeOf(n, t), r = e.mapAllRoutines(n), a.is(Object.keys(r).length > 1), 
              a.is(e.routineIs(r.c)), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapAllRoutines(n), a.is(Object.keys(r).length > 1), a.is(e.routineIs(r.c)), 
              /**/
              Object.defineProperty(n, "z", {
                enumerable: 0,
                value: function() {}
              }), Object.defineProperty(t, "y", {
                enumerable: 0,
                value: function() {}
              }), r = e.mapAllRoutines(n), a.is(Object.keys(r).length > 2), a.is(e.routineIs(r.c)), 
              a.is(e.routineIs(r.y)), a.is(e.routineIs(r.z)), a.case = "no argument", a.shouldThrowError(function() {
                e.mapAllRoutines();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapAllRoutines(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapAllRoutines("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapAllRoutines.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapFields: function mapFields(a) {
              a.case = "empty";
              var r = e.mapFields({});
              a.identical(r, {}), r = e.mapFields([]), a.identical(r, {}), 
              //
              a.case = "trivial", r = e.mapFields({
                a: 1,
                b: function() {}
              }), a.is(1 === Object.keys(r).length), a.is(1 === r.a), (n = []).a = function() {}, 
              n.b = 1, r = e.mapFields(n), a.is(1 === Object.keys(r).length), a.is(1 === r.b), 
              r = e.mapFields(new Date()), a.identical(r, {}), 
              //
              a.case = "prototype";
              var n = {
                a: 1
              }, t = {
                b: 2,
                c: function() {}
              };
              Object.setPrototypeOf(n, t), r = e.mapFields(n), a.is(2 === Object.keys(r).length), 
              a.identical(r.a, 1), a.identical(r.b, 2), 
              /**/
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapFields(n), a.is(2 === Object.keys(r).length), a.identical(r.a, 1), 
              a.identical(r.b, 2), 
              /* enumerable : 0 */
              Object.defineProperty(t, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapFields.call({
                enumerable: 0
              }, n), a.is(4 === Object.keys(r).length), a.identical(r.a, 1), a.identical(r.b, 2), 
              a.identical(r.k, 3), 
              /**/
              n.y = function() {}, r = e.mapFields.call({
                own: 1
              }, n), a.is(1 === Object.keys(r).length), a.identical(r.a, 1), n = {
                a: 1,
                y: function() {}
              }, t = {
                b: 2,
                c: function() {}
              }, Object.setPrototypeOf(n, t), r = e.mapFields.call({
                own: 0,
                enumerable: 1
              }, n), a.is(2 === Object.keys(r).length), a.identical(r.a, 1), a.identical(r.b, 2), 
              n = {
                a: 1,
                y: function() {}
              }, t = {
                b: 2,
                c: function() {}
              }, Object.setPrototypeOf(n, t), Object.defineProperty(t, "k", {
                enumerable: 0,
                value: function() {}
              }), Object.defineProperty(t, "z", {
                enumerable: 0,
                value: 3
              }), r = e.mapFields.call({
                enumerable: 0
              }, n), a.identical(Object.keys(r).length, 4), a.identical(r.a, 1), a.identical(r.b, 2), 
              a.identical(r.z, 3), a.case = "no argument", a.shouldThrowError(function() {
                e.mapFields();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapFields(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapFields("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapFields.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapOwnFields: function mapOwnFields(a) {
              a.case = "empty";
              var r = e.mapOwnFields({});
              a.identical(r, {}), r = e.mapOwnFields([]), a.identical(r, {}), 
              /* */
              a.case = "trivial", r = e.mapOwnFields({
                a: 1,
                b: function() {}
              }), a.is(1 === Object.keys(r).length), a.is(1 === r.a), (n = []).a = function() {}, 
              n.b = 1, r = e.mapOwnFields(n), a.is(1 === Object.keys(r).length), a.is(1 === r.b), 
              r = e.mapOwnFields(new Date()), a.identical(r, {}), 
              /* */
              a.case = "prototype";
              var n = {
                a: 1
              };
              Object.setPrototypeOf(n, {
                b: 2,
                c: function() {}
              }), r = e.mapOwnFields(n), a.is(1 === Object.keys(r).length), a.identical(r.a, 1), 
              /* */
              Object.defineProperty(n, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnFields(n), a.is(1 === Object.keys(r).length), a.identical(r.a, 1), 
              /* enumerable : 0 */
              Object.defineProperty(n, "y", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnFields.call({
                enumerable: 0
              }, n), a.is(3 === Object.keys(r).length), a.identical(r.a, 1), a.identical(r.y, 3), 
              a.case = "no argument", a.shouldThrowError(function() {
                e.mapOwnFields();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapOwnFields("x");
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapOwnFields(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnFields("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapOwnFields.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapAllFields: function mapAllFields(a) {
              a.case = "empty";
              var r = e.mapAllFields({});
              a.is(1 === Object.keys(r).length), a.identical(r.__proto__, {}.__proto__), r = e.mapAllFields([]), 
              a.is(2 === Object.keys(r).length), a.identical(r.__proto__, [].__proto__), a.identical(r.length, 0), 
              //
              a.case = "trivial", r = e.mapAllFields({
                a: 1,
                b: function() {}
              }), a.is(2 === Object.keys(r).length), a.is(1 === r.a), a.is(r.__proto__ === {}.__proto__), 
              (t = []).a = function() {}, t.b = 1, r = e.mapAllFields(t), console.log(r), a.is(3 === Object.keys(r).length), 
              a.is(0 === r.length), a.is(1 === r.b), a.is(r.__proto__ === [].__proto__);
              var n = new Date();
              r = e.mapAllFields(n), a.identical(r.__proto__, n.__proto__), 
              //
              a.case = "prototype";
              var t = {
                a: 1
              }, i = {
                b: 2,
                c: function() {}
              };
              Object.setPrototypeOf(t, i), r = e.mapAllFields(t), a.is(3 === Object.keys(r).length), 
              a.identical(r.a, 1), a.identical(r.b, 2), a.identical(r.__proto__, i), 
              /**/
              Object.defineProperty(i, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapAllFields(t), a.is(4 === Object.keys(r).length), a.identical(r.a, 1), 
              a.identical(r.b, 2), a.identical(r.k, 3), a.identical(r.__proto__, i), a.case = "no argument", 
              a.shouldThrowError(function() {
                e.mapAllFields();
              }), a.case = "primitive", a.shouldThrowError(function() {
                e.mapAllFields(1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapAllFields("wrong argument");
              }), a.case = "unknown option", a.shouldThrowError(function() {
                e.mapAllFields.call({
                  x: 1
                }, {});
              });
            }
            //
            ,
            mapOnlyPrimitives: function mapOnlyPrimitives(a) {
              a.case = "emtpy";
              var r = e.mapOnlyPrimitives({});
              a.identical(r, {}), a.case = "primitives";
              var n = {
                a: null,
                b: void 0,
                c: 5,
                e: !1,
                f: "a",
                g: function() {},
                h: [ 1 ],
                i: new Date(),
                j: new ArrayBuffer(5)
              }, t = (r = e.mapOnlyPrimitives(n), {
                a: null,
                b: void 0,
                c: 5,
                e: !1,
                f: "a"
              });
              a.identical(r, t), 
              /* */
              a.case = "only enumerable";
              var i = {};
              Object.defineProperty(i, "k", {
                enumerable: 0,
                value: 3
              }), r = e.mapOnlyPrimitives(i), a.identical(r, {}), 
              /* */
              a.case = "from prototype", i = {};
              var c = {
                a: 1,
                c: function() {}
              };
              Object.defineProperty(c, "k", {
                enumerable: 0,
                value: 3
              }), Object.setPrototypeOf(i, c), r = e.mapOnlyPrimitives(i), a.identical(r, {
                a: 1
              }), a.case = "invalid arg type", a.shouldThrowError(function() {
                e.mapOnlyPrimitives(null);
              }), a.case = "no args", a.shouldThrowError(function() {
                e.mapOnlyPrimitives();
              });
            }
            //
            ,
            // map logic
            mapButConditional: function mapButConditional(a) {
              a.case = "an object";
              var r = e.mapButConditional(e.field.filter.dstNotHasSrcPrimitive, {
                a: 1,
                b: "ab",
                c: [ 1, 2, 3 ]
              }, {
                a: 1,
                b: "ab",
                d: [ 1, 2, 3 ]
              });
              a.identical(r, {}), a.case = "no argument", a.shouldThrowError(function() {
                e.mapButConditional();
              }), a.case = "few arguments", a.shouldThrowError(function() {
                e.mapButConditional(e.field.mapper.primitive);
              }), a.case = "second argument is wrong type of array", a.shouldThrowError(function() {
                e.mapButConditional(e.field.mapper.primitive, []);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapButConditional("wrong arguments");
              });
            }
            //
            ,
            mapBut: function mapBut(a) {
              a.case = "empty src map";
              /* */
              var r = {}, n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapBut(r, n), s = {};
              a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "empty src array", 
              n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = (r = []).slice(), i = e.mapExtend(null, n), c = e.mapBut(r, n), s = {}, a.identical(c, s), 
              a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "empty screen", r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = {}, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapBut(r, n), 
              s = {
                d: "name",
                c: 33,
                a: "abc"
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "trivial", 
              r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapBut(r, n), s = {}, 
              a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), r = {
                d: "name",
                c: 33,
                a: "abc",
                x: 13
              }, n = {
                b: 77,
                c: 3,
                d: "name"
              }, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapBut(r, n), s = {
                a: "abc",
                x: 13
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several screens", 
              r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = [ {
                a: 13
              }, {
                b: 77
              }, {
                c: 3
              }, {
                d: "name"
              } ], t = e.mapExtend(null, r), i = n.slice(), c = e.mapBut(r, n), s = {}, a.identical(c, s), 
              a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several srcs", n = {
                a: 2,
                b: 2,
                d: 2
              }, t = (r = [ {
                a: 1
              }, {
                b: 1
              }, {
                c: 1
              } ]).slice(), i = e.mapExtend(null, n), c = e.mapBut(r, n), s = {
                c: 1
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several srcs and screens", 
              n = [ {
                a: 2
              }, {
                b: 2
              }, {
                d: 2
              } ], t = (r = [ {
                a: 1
              }, {
                b: 1
              }, {
                c: 1
              } ]).slice(), i = n.slice(), c = e.mapBut(r, n), s = {
                c: 1
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "no arguments", 
              a.shouldThrowError(function() {
                e.mapBut();
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapBut("wrong arguments");
              }), a.case = "only src map", a.shouldThrowError(function() {
                e.mapBut(r);
              }), a.case = "first argument is not an object-like", a.shouldThrowError(function() {
                e.mapBut(3, []);
              }), a.case = "second argument is not an object-like", a.shouldThrowError(function() {
                e.mapBut([], "");
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e.mapBut([], [], {});
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapBut({}, "wrong arguments");
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapBut("wrong arguments", {});
              });
            }
            //
            ,
            mapOwnBut: function mapOwnBut(a) {
              a.case = "an empty object";
              var r = e.mapOwnBut({}, {}), n = {};
              a.identical(r, n), a.case = "an object", r = e.mapOwnBut({
                a: 7,
                b: 13,
                c: 3
              }, {
                a: 7,
                b: 13
              }), n = {
                c: 3
              }, a.identical(r, n), a.case = "an object", r = e.mapOwnBut({
                a: 7,
                "toString": 5
              }, {
                b: 33,
                c: 77
              }), n = {
                a: 7
              }, a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapOwnBut();
              }), a.case = "not enough arguments", a.shouldThrowError(function() {
                e.mapOwnBut({});
              }), a.case = "not enough arguments", a.shouldThrowError(function() {
                e.mapOwnBut([]);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapOwnBut("wrong arguments");
              });
            }
            //
            ,
            mapOnly: function mapOnly(a) {
              a.case = "empty src map";
              /* */
              var r = {}, n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapOnly(r, n), s = {};
              a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "empty src array", 
              n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = (r = []).slice(), i = e.mapExtend(null, n), c = e.mapOnly(r, n), s = {}, 
              a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "empty screen", 
              r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = {}, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapOnly(r, n), 
              s = {}, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), 
              a.case = "only srcMap", r = {
                d: "name",
                c: 33,
                a: "abc"
              }, t = e.mapExtend(null, r), c = e.mapOnly(r), s = {
                d: "name",
                c: 33,
                a: "abc"
              }, a.identical(c, s), a.is(c !== r), a.case = "trivial", r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = {
                a: 13,
                b: 77,
                c: 3,
                d: "name"
              }, t = e.mapExtend(null, r), i = e.mapExtend(null, n), c = e.mapOnly(r, n), s = {
                a: "abc",
                c: 33,
                d: "name"
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several screens", 
              r = {
                d: "name",
                c: 33,
                a: "abc"
              }, n = [ {
                a: 13
              }, {
                b: 77
              }, {
                c: 3
              }, {
                d: "name"
              } ], t = e.mapExtend(null, r), i = n.slice(), c = e.mapOnly(r, n), s = {
                a: "abc",
                c: 33,
                d: "name"
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several srcs", 
              n = {
                a: 2,
                b: 2,
                d: 2
              }, t = (r = [ {
                a: 1
              }, {
                b: 1
              }, {
                c: 1
              } ]).slice(), i = e.mapExtend(null, n), c = e.mapOnly(r, n), s = {
                a: 1,
                b: 1
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "several srcs and screens", 
              n = [ {
                a: 2
              }, {
                b: 2
              }, {
                d: 2
              } ], t = (r = [ {
                a: 1
              }, {
                b: 1
              }, {
                c: 1
              } ]).slice(), i = n.slice(), c = e.mapOnly(r, n), s = {
                a: 1,
                b: 1
              }, a.identical(c, s), a.is(c !== r), a.identical(r, t), a.identical(n, i), a.case = "no arguments", 
              a.shouldThrowError(function() {
                e.mapOnly();
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapOnly("wrong arguments");
              }), a.case = "first argument is not an object-like", a.shouldThrowError(function() {
                e.mapOnly(3, []);
              }), a.case = "second argument is not an object-like", a.shouldThrowError(function() {
                e.mapOnly([], "");
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e.mapOnly([], [], {});
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapOnly({}, "wrong arguments");
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapOnly("wrong arguments", {});
              });
            }
            //
            ,
            _mapOnly: function _mapOnly(a) {
              a.case = "an object";
              var r = {
                screenMaps: {
                  "a": 13,
                  "b": 77,
                  "c": 3,
                  "name": "Mikle"
                },
                srcMaps: {
                  "a": 33,
                  "d": "name",
                  "name": "Mikle",
                  "c": 33
                }
              }, n = e._mapOnly(r), t = {
                a: 33,
                c: 33,
                name: "Mikle"
              };
              a.identical(n, t), a.case = "an object2", r = {
                screenMaps: {
                  a: 13,
                  b: 77,
                  c: 3,
                  d: "name"
                },
                srcMaps: {
                  d: "name",
                  c: 33,
                  a: "abc"
                }
              }, n = e._mapOnly(r), t = {
                a: "abc",
                c: 33,
                d: "name"
              }, a.identical(n, t), a.case = "no arguments", a.shouldThrowError(function() {
                e._mapOnly();
              }), a.case = "redundant arguments", a.shouldThrowError(function() {
                e._mapOnly({}, "wrong arguments");
              }), a.case = "wrong type of array", a.shouldThrowError(function() {
                e._mapOnly([]);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e._mapOnly("wrong arguments");
              });
            }
            //
            ,
            mapsAreIdentical: function mapsAreIdentical(a) {
              a.case = "same values";
              var r = e.mapsAreIdentical({
                a: 7,
                b: 13
              }, {
                a: 7,
                b: 13
              }), n = !0;
              a.identical(r, n), a.case = "not the same values in", r = e.mapsAreIdentical({
                "a": 7,
                "b": 13
              }, {
                "a": 7,
                "b": 14
              }), n = !1, a.identical(r, n), a.case = "different number of keys, more in the first argument", 
              r = e.mapsAreIdentical({
                "a": 7,
                "b": 13,
                "с": 15
              }, {
                "a": 7,
                "b": 13
              }), n = !1, a.identical(r, n), a.case = "different number of keys, more in the second argument", 
              r = e.mapsAreIdentical({
                "a": 7,
                "b": 13
              }, {
                "a": 7,
                "b": 13,
                "с": 15
              }), n = !1, a.identical(r, n), 
              /* special cases */
              a.case = "empty maps, standrard", r = e.mapsAreIdentical({}, {}), n = !0, a.identical(r, n), 
              a.case = "empty maps, pure", r = e.mapsAreIdentical(Object.create(null), Object.create(null)), 
              n = !0, a.identical(r, n), a.case = "empty maps, one standard another pure", r = e.mapsAreIdentical({}, Object.create(null)), 
              n = !0, a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapsAreIdentical();
              }), a.case = "not object-like arguments", a.shouldThrowError(function() {
                e.mapsAreIdentical([ "a", 7, "b", 13 ], [ "a", 7, "b", 14 ]);
              }), a.shouldThrowError(function() {
                e.mapsAreIdentical("a", "b");
              }), a.shouldThrowError(function() {
                e.mapsAreIdentical(1, 3);
              }), a.shouldThrowError(function() {
                e.mapsAreIdentical(null, null);
              }), a.shouldThrowError(function() {
                e.mapsAreIdentical(void 0, void 0);
              }), a.case = "too few arguments", a.shouldThrowError(function() {
                e.mapsAreIdentical({});
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.mapsAreIdentical({}, {}, "redundant argument");
              });
            }
            //
            ,
            mapContain: function mapContain(a) {
              a.case = "first has same keys like second";
              var r = e.mapContain({
                a: 7,
                b: 13,
                c: 15
              }, {
                a: 7,
                b: 13
              }), n = !0;
              a.identical(r, n), a.case = "in the array", r = e.mapContain([ "a", 7, "b", 13, "c", 15 ], [ "a", 7, "b", 13 ]), 
              n = !0, a.identical(r, n), a.case = "number of keys in first not equal", r = e.mapContain({
                a: 1
              }, {
                a: 1,
                b: 2
              }), n = !1, a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.mapContain();
              }), a.case = "few arguments", a.shouldThrowError(function() {
                e.mapContain({});
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.mapContain({}, {}, "redundant argument");
              });
            }
            //
            ,
            mapOwnKey: function mapOwnKey(a) {
              a.case = "second argument is string";
              var r = e.mapOwnKey({
                a: 7,
                b: 13
              }, "a"), n = !0;
              a.identical(r, n), a.case = "second argument is object", r = e.mapOwnKey({
                a: 7,
                b: 13
              }, Object.create(null).a = "a"), n = !0, a.identical(r, n), a.case = "second argument is symbol";
              var t = Symbol("b"), i = {
                a: 7,
                [t]: 13
              };
              r = e.mapOwnKey(i, t), n = !0, a.identical(r, n), a.case = "false", r = e.mapOwnKey(Object.create({
                a: 7,
                b: 13
              }), "a"), n = !1, a.identical(r, n), a.case = "no argument", a.shouldThrowError(function() {
                e.mapOwnKey();
              }), a.case = "few arguments", a.shouldThrowError(function() {
                e.mapOwnKey({}, "a", "b");
              }), a.case = "wrong type of key", a.shouldThrowError(function() {
                e.mapOwnKey([], 1);
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.mapOwnKey(1);
              }), a.case = "wrong type of second argument", a.shouldThrowError(function() {
                e.mapOwnKey({}, 13);
              }), a.case = "wrong type of arguments", a.shouldThrowError(function() {
                e.mapOwnKey("", 7);
              });
            }
            //
            ,
            mapHasAll: function mapHasAll(a) {
              a.case = "empty";
              var r = e.mapHasAll({}, {});
              a.is(r), a.case = "screen empty", r = e.mapHasAll({
                a: 1
              }, {}), a.is(r), a.case = "same keys", r = e.mapHasAll({
                a: 1
              }, {
                a: 2
              }), a.is(r), a.case = "has only one", r = e.mapHasAll({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2
              }), a.is(r), a.case = "has all", r = e.mapHasAll({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(r), a.case = "one is mising", r = e.mapHasAll({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(!r), a.case = "src has enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapHasAll(n, {
                a: 1
              }), a.is(r), r = e.mapHasAll(n, n), a.is(r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapHasAll({
                a: 1
              }, t), a.is(r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapHasAll(n, {
                a: void 0
              }), a.is(r), r = e.mapHasAll({
                a: void 0
              }, {
                a: void 0
              }), a.is(r), a.case = "src has toString on proto", r = e.mapHasAll({}, {
                toString: 1
              }), a.is(r), a.case = "map has on proto", n = {}, Object.setPrototypeOf(n, {
                a: 1
              }), r = e.mapHasAll(n, {
                a: 1
              }), a.is(r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapHasAll(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapHasAll({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapHasAll({}, {}, {});
              }));
            }
            //
            ,
            mapHasAny: function mapHasAny(a) {
              a.case = "empty";
              var r = e.mapHasAny({}, {});
              a.is(!r), a.case = "screen empty", r = e.mapHasAny({
                a: 1
              }, {}), a.is(!r), a.case = "same keys", r = e.mapHasAny({
                a: 1
              }, {
                a: 2
              }), a.is(r), a.case = "has only one", r = e.mapHasAny({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                x: 1
              }), a.is(r), a.case = "has all", r = e.mapHasAny({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(r), a.case = "one is mising", r = e.mapHasAny({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(r), a.case = "has no one", r = e.mapHasAny({
                a: 1,
                b: 2
              }, {
                x: 1,
                y: 1
              }), a.is(!r), a.case = "src has enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapHasAny(n, {
                a: 1
              }), a.is(r), r = e.mapHasAny(n, n), a.is(!r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapHasAny({
                a: 1
              }, t), a.is(!r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapHasAny(n, {
                a: void 0
              }), a.is(r), r = e.mapHasAny({
                a: void 0
              }, {
                a: void 0
              }), a.is(r), a.case = "src has toString on proto", r = e.mapHasAny({}, {
                x: 1,
                toString: 1
              }), a.is(r), a.case = "map has on proto", n = {}, Object.setPrototypeOf(n, {
                a: 1
              }), r = e.mapHasAny(n, {
                a: 1,
                x: 1
              }), a.is(r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapHasAny(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapHasAny({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapHasAny({}, {}, {});
              }));
            }
            //
            ,
            mapHasNone: function mapHasNone(a) {
              a.case = "empty";
              var r = e.mapHasNone({}, {});
              a.is(r), a.case = "screen empty", r = e.mapHasNone({
                a: 1
              }, {}), a.is(r), a.case = "same keys", r = e.mapHasNone({
                a: 1
              }, {
                a: 2
              }), a.is(!r), a.case = "has only one", r = e.mapHasNone({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                x: 1
              }), a.is(!r), a.case = "has all", r = e.mapHasNone({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(!r), a.case = "one is mising", r = e.mapHasNone({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(!r), a.case = "has no one", r = e.mapHasNone({
                a: 1,
                b: 2
              }, {
                x: 1,
                y: 1
              }), a.is(r), a.case = "src has non enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              });
              debugger;
              r = e.mapHasNone(n, {
                a: 1
              });
              debugger;
              a.is(!r), r = e.mapHasNone(n, n), a.is(r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapHasNone({
                a: 1
              }, t), a.is(r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapHasNone(n, {
                a: void 0
              }), a.is(!r), r = e.mapHasNone({
                a: void 0
              }, {
                a: void 0
              }), a.is(!r), a.case = "src has toString on proto", r = e.mapHasNone({}, {
                x: 1,
                toString: 1
              }), a.is(!r), a.case = "map has on proto", n = {}, Object.setPrototypeOf(n, {
                a: 1
              }), r = e.mapHasNone(n, {
                x: 1
              }), a.is(r), r = e.mapHasNone(n, {
                a: 1
              }), a.is(!r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapHasNone(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapHasNone({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapHasNone({}, {}, {});
              }));
            }
            //
            ,
            mapOwnAll: function mapOwnAll(a) {
              a.case = "empty";
              var r = e.mapOwnAll({}, {});
              a.is(r), a.case = "screen empty", r = e.mapOwnAll({
                a: 1
              }, {}), a.is(r), a.case = "same keys", r = e.mapOwnAll({
                a: 1
              }, {
                a: 2
              }), a.is(r), a.case = "has only one", r = e.mapOwnAll({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                x: 1
              }), a.is(!r), a.case = "has all", r = e.mapOwnAll({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(r), a.case = "one is mising", r = e.mapOwnAll({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(!r), a.case = "has no one", r = e.mapOwnAll({
                a: 1,
                b: 2
              }, {
                x: 1,
                y: 1
              }), a.is(!r), a.case = "src has enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnAll(n, {
                a: 1
              }), a.is(r), r = e.mapOwnAll(n, n), a.is(r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnAll({
                a: 1
              }, t), a.is(r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnAll(n, {
                a: void 0
              }), a.is(r), r = e.mapOwnAll({
                a: void 0
              }, {
                a: void 0
              }), a.is(r), a.case = "src has toString on proto", r = e.mapOwnAll({}, {
                x: 1,
                toString: 1
              }), a.is(!r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapOwnAll(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapOwnAll({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapOwnAll({}, {}, {});
              }), a.case = "src is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnAll(a, {
                  a: 1
                });
              }), a.case = "screen is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnAll({
                  a: 1
                }, a);
              }));
            }
            //
            ,
            mapOwnAny: function mapOwnAny(a) {
              a.case = "empty";
              var r = e.mapOwnAny({}, {});
              a.is(!r), a.case = "screen empty", r = e.mapOwnAny({
                a: 1
              }, {}), a.is(!r), a.case = "same keys", r = e.mapOwnAny({
                a: 1
              }, {
                a: 2
              }), a.is(r), a.case = "has only one", r = e.mapOwnAny({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                x: 1
              }), a.is(r), a.case = "has all", r = e.mapOwnAny({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(r), a.case = "one is mising", r = e.mapOwnAny({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(r), a.case = "has no one", r = e.mapOwnAny({
                a: 1,
                b: 2
              }, {
                x: 1,
                y: 1
              }), a.is(!r), a.case = "src has enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnAny(n, {
                a: 1
              }), a.is(r), r = e.mapOwnAny(n, n), a.is(!r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnAny({
                a: 1
              }, t), a.is(!r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnAny(n, {
                a: void 0
              }), a.is(r), r = e.mapOwnAny({
                a: void 0
              }, {
                a: void 0
              }), a.is(r), a.case = "src has toString on proto", r = e.mapOwnAny({}, {
                x: 1,
                toString: 1
              }), a.is(!r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapOwnAny(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapOwnAny({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapOwnAny({}, {}, {});
              }), a.case = "src is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnAny(a, {
                  a: 1
                });
              }), a.case = "screen is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnAny({
                  a: 1
                }, a);
              }));
            }
            //
            ,
            mapOwnNone: function mapOwnNone(a) {
              a.case = "empty";
              var r = e.mapOwnNone({}, {});
              a.is(r), a.case = "screen empty", r = e.mapOwnNone({
                a: 1
              }, {}), a.is(r), a.case = "same keys", r = e.mapOwnNone({
                a: 1
              }, {
                a: 2
              }), a.is(!r), a.case = "has only one", r = e.mapOwnNone({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                x: 1
              }), a.is(!r), a.case = "has all", r = e.mapOwnNone({
                a: 1,
                b: 2,
                c: 3
              }, {
                b: 2,
                a: 3,
                c: 4
              }), a.is(!r), a.case = "one is mising", r = e.mapOwnNone({
                a: 1,
                b: 2
              }, {
                b: 2,
                a: 3,
                c: 1
              }), a.is(!r), a.case = "has no one", r = e.mapOwnNone({
                a: 1,
                b: 2
              }, {
                x: 1,
                y: 1
              }), a.is(r), a.case = "src has enumerable";
              var n = {};
              Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnNone(n, {
                a: 1
              }), a.is(!r), r = e.mapOwnNone(n, n), a.is(r), a.case = "screen has enumerable";
              /* for..in skips enumerable */
              var t = {};
              Object.defineProperty(t, "a", {
                enumerable: 0,
                value: 3
              }), r = e.mapOwnNone({
                a: 1
              }, t), a.is(r), a.case = "screen has undefined", n = {}, Object.defineProperty(n, "a", {
                enumerable: 0
              }), r = e.mapOwnNone(n, {
                a: void 0
              }), a.is(!r), r = e.mapOwnNone({
                a: void 0
              }, {
                a: void 0
              }), a.is(!r), a.case = "src has toString on proto", r = e.mapOwnNone({}, {
                x: 1,
                toString: 1
              }), a.is(r), 
              //
              Config.degub && (a.case = "src is no object like", a.shouldThrowError(function() {
                e.mapOwnNone(1, {});
              }), a.case = "screen is no object like", a.shouldThrowError(function() {
                e.mapOwnNone({}, 1);
              }), a.case = "too much args", a.shouldThrowError(function() {
                e.mapOwnNone({}, {}, {});
              }), a.case = "src is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnNone(a, {
                  a: 1
                });
              }), a.case = "screen is not a map", a.shouldThrowError(function() {
                var a = {};
                Object.setPrototypeOf(a, {
                  a: 1
                }), e.mapOwnNone({
                  a: 1
                }, a);
              }));
            }
            // --
            //
            // --
                    }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Map_test_s
  function Regexp_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Regexp.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Regexp_test_s
    function Regexp_test_s_naked() {
      !function _Regexp_test_s_() {
        "use strict";
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l1/Regexp",
          silencing: 1,
          tests: {
            regexpIdentical: 
            // --
            // routines
            // --
            function regexpIdentical(a) {
              /* */
              a.case = "null";
              var r = !1, n = e.regexpIdentical(null, null);
              a.identical(n, r), 
              /* */
              a.case = "null and regexp", r = !1, n = e.regexpIdentical(/x/, null), a.identical(n, r), 
              /* */
              a.case = "same string", r = !1, n = e.regexpIdentical("x", "x"), a.identical(n, r), 
              /* */
              a.case = "same regexp", r = !0, n = e.regexpIdentical(/abc/iy, /abc/iy), a.identical(n, r), 
              /* */
              a.case = "not identical regexp, different flags", r = !1, n = e.regexpIdentical(/abc/i, /abc/), 
              a.identical(n, r), 
              /* */
              a.case = "not identical regexp, different source", r = !1, n = e.regexpIdentical(/abcd/i, /abc/i), 
              a.identical(n, r), 
              /* */
              a.case = "not identical regexp", r = !1, n = e.regexpIdentical(/abcd/y, /abc/i), 
              a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpIdentical()), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpIdentical(/abc/i, /def/i, /a/i));
            }
            //
            ,
            regexpsSources: function regexpsSources(a) {
              /* */
              a.case = "empty";
              var r = {
                sources: [],
                flags: null,
                escaping: 0
              }, n = e.regexpsSources([]);
              a.identical(n, r), 
              /* */
              a.case = "single string";
              var t = "abc";
              r = {
                sources: [ "abc" ],
                flags: null,
                escaping: 0
              }, n = e.regexpsSources([ t ]), a.identical(n, r), 
              /* */
              a.case = "single regexp", t = /abc/i, r = {
                sources: [ "abc" ],
                flags: "i",
                escaping: 0
              }, n = e.regexpsSources([ t ]), a.identical(n, r), 
              /* */
              a.case = "all strings", t = "abc";
              var i = "def", c = ".+";
              r = {
                sources: [ "abc", "def", ".+" ],
                flags: null,
                escaping: 0
              }, n = e.regexpsSources([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps", t = "abc", i = /def/, c = /.+/, r = {
                sources: [ "abc", "def", ".+" ],
                flags: "",
                escaping: 0
              }, n = e.regexpsSources([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps and flags i", t = "abc", i = /def/i, c = /.+/i, r = {
                sources: [ "abc", "def", ".+" ],
                flags: "i",
                escaping: 0
              }, n = e.regexpsSources([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps and flags iy", t = /abc/iy, i = "def", c = /.+/iy, 
              r = {
                sources: [ "abc", "def", ".+" ],
                flags: "iy",
                escaping: 0
              }, n = e.regexpsSources([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "empty in map", r = {
                sources: [],
                flags: null,
                escaping: 0
              };
              var s = {
                sources: []
              };
              n = e.regexpsSources(s), a.identical(n, r), a.is(s === n), 
              /* */
              a.case = "strings with regexps and flags iy in map", r = {
                sources: [ "abc", "def", ".+" ],
                flags: "iy",
                escaping: 0
              }, s = {
                sources: [ t = /abc/iy, i = "def", c = /.+/iy ]
              }, n = e.regexpsSources(s), a.identical(n, r), a.is(s === n), 
              /* */
              a.case = "options map with flags", r = {
                sources: [ "abc", "def", ".+" ],
                flags: "i",
                escaping: 0
              }, s = {
                sources: [ t = /abc/i, i = "def", c = /.+/i ],
                flags: "i"
              }, n = e.regexpsSources(s), a.identical(n, r), a.is(s === n), a.case = "none argument", 
              a.shouldThrowErrorSync(() => e.regexpsSources()), a.case = "strings with different flags", 
              a.shouldThrowErrorSync(() => e.regexpsSources([ /abc/i, /def/iy ])), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpsSources("ab", "cd")), a.case = "different flags in map", 
              a.shouldThrowErrorSync(() => e.regexpsSources({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            regexpsJoin: function regexpsJoin(a) {
              /* */
              a.case = "empty";
              var r = new RegExp("", ""), n = e.regexpsJoin([]);
              a.identical(n, r), 
              /* */
              a.case = "single string";
              var t = "abc";
              r = /abc/, n = e.regexpsJoin([ t ]), a.identical(n, r), 
              /* */
              a.case = "single regexp", t = /abc/i, r = /abc/i, n = e.regexpsJoin([ t ]), a.identical(n, r), 
              a.is(n === t), 
              /* */
              a.case = "all strings", t = "abc";
              var i = "def", c = ".+";
              r = /abcdef.+/, n = e.regexpsJoin([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps", t = "abc", i = /def/, c = /.+/, r = /abcdef.+/, 
              n = e.regexpsJoin([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps and flags i", t = "abc", i = /def/i, c = /.+/i, r = /abcdef.+/i, 
              n = e.regexpsJoin([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "strings with regexps and flags iy", t = /abc/iy, i = "def", c = /.+/iy, 
              r = /abcdef.+/iy, n = e.regexpsJoin([ t, i, c ]), a.identical(n, r), 
              /* */
              a.case = "empty in map";
              var s = {
                sources: [],
                flags: null
              };
              r = new RegExp("", ""), n = e.regexpsJoin(s), a.identical(n, r), 
              /* */
              a.case = "strings with regexps and flags iy in map", r = /abcdef.+/iy, s = {
                sources: [ t = /abc/iy, i = "def", c = /.+/iy ]
              }, n = e.regexpsJoin(s), a.identical(n, r), 
              /* */
              a.case = "options map with flags", r = /abcdef.+/i, s = {
                sources: [ t = /abc/i, i = "def", c = /.+/i ],
                flags: "i"
              }, n = e.regexpsJoin(s), a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsJoin()), 
              a.case = "strings with different flags", a.shouldThrowErrorSync(() => e.regexpsJoin([ /abc/i, /def/iy ])), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsJoin("ab", "cd")), 
              a.case = "different flags in map", a.shouldThrowErrorSync(() => e.regexpsJoin({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            regexpsAtLeastFirst: function regexpsAtLeastFirst(a) {
              a.case = "empty";
              var r = new RegExp(""), n = e.regexpsAtLeastFirst([]);
              a.identical(n, r), a.case = "single regexp";
              var t = /.+/i;
              r = /.+/i, n = e.regexpsAtLeastFirst([ t ]), a.identical(n, r), a.is(n === t), a.case = "strings", 
              t = "abc";
              var i = "def";
              r = /abc(?:def)?/, n = e.regexpsAtLeastFirst([ t, i ]), a.identical(n, r), a.case = "strings and regexps", 
              t = "abc", i = "def";
              var c = /.+/i;
              r = /abc(?:def(?:.+)?)?/i, n = e.regexpsAtLeastFirst([ t, i, c ]), a.identical(n, r), 
              a.case = "strings and regexps and flags", t = "abc", i = "def", c = /.+/i, r = /abc(?:def(?:.+)?)?/i, 
              n = e.regexpsAtLeastFirst({
                sources: [ t, i, c ],
                flags: "i"
              }), a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsAtLeastFirst()), 
              a.case = "strings with different flags", a.shouldThrowErrorSync(() => e.regexpsAtLeastFirst([ /abc/i, /def/iy ])), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsAtLeastFirst("ab", "cd")), 
              a.case = "different flags in map", a.shouldThrowErrorSync(() => e.regexpsAtLeastFirst({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            regexpsNone: function regexpsNone(a) {
              a.case = "empty";
              var r = /^(?:(?!(?:)).)+$/, n = e.regexpsNone([]);
              a.identical(n, r), a.case = "single regexp";
              var t = /.+/i;
              r = /^(?:(?!(?:.+)).)+$/i, n = e.regexpsNone([ t ]), a.identical(n, r), a.is(n !== t), 
              a.case = "strings", t = "abc";
              var i = "def";
              r = /^(?:(?!(?:abc)|(?:def)).)+$/, n = e.regexpsNone([ t, i ]), a.identical(n, r), 
              a.case = "strings and regexps", t = "abc", i = "def";
              var c = /.+/i;
              r = /^(?:(?!(?:abc)|(?:def)|(?:.+)).)+$/i, n = e.regexpsNone([ t, i, c ]), a.identical(n, r), 
              a.case = "strings and regexps and flags", t = "abc", i = "def", c = /.+/i, r = /^(?:(?!(?:abc)|(?:def)|(?:.+)).)+$/i, 
              n = e.regexpsNone({
                sources: [ t, i, c ],
                flags: "i"
              }), a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsNone()), 
              a.case = "strings with different flags", a.shouldThrowErrorSync(() => e.regexpsNone([ /abc/i, /def/iy ])), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsNone("ab", "cd")), 
              a.case = "different flags in map", a.shouldThrowErrorSync(() => e.regexpsNone({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            regexpsAny: function regexpsAny(a) {
              a.case = "empty";
              var r = /(?:)/, n = e.regexpsAny([]);
              a.identical(n, r), a.case = "single regexp";
              var t = /.+/i;
              r = /.+/i, n = e.regexpsAny([ t ]), a.identical(n, r), a.is(n === t), a.case = "strings", 
              t = "abc";
              var i = "def";
              r = /(?:abc)|(?:def)/, n = e.regexpsAny([ t, i ]), a.identical(n, r), a.case = "strings and regexps", 
              t = "abc", i = "def";
              var c = /.+/i;
              r = /(?:abc)|(?:def)|(?:.+)/i, n = e.regexpsAny([ t, i, c ]), a.identical(n, r), 
              a.case = "strings and regexps and flags", t = "abc", i = "def", c = /.+/i, r = /(?:abc)|(?:def)|(?:.+)/i, 
              n = e.regexpsAny({
                sources: [ t, i, c ],
                flags: "i"
              }), a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsAny()), 
              a.case = "strings with different flags", a.shouldThrowErrorSync(() => e.regexpsAny([ /abc/i, /def/iy ])), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsAny("ab", "cd")), 
              a.case = "different flags in map", a.shouldThrowErrorSync(() => e.regexpsAny({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            regexpsAll: function regexpsAll(a) {
              a.case = "empty";
              var r = new RegExp(""), n = e.regexpsAll([]);
              a.identical(n, r), a.case = "single regexp";
              var t = /.+/i;
              r = /.+/i, n = e.regexpsAll([ t ]), a.identical(n, r), a.is(n === t), a.case = "strings", 
              t = "abc";
              var i = "def";
              r = /(?=abc)(?:def)/, n = e.regexpsAll([ t, i ]), a.identical(n, r), a.case = "strings and regexps", 
              t = "abc", i = "def";
              var c = /.+/i;
              r = /(?=abc)(?=def)(?:.+)/i, n = e.regexpsAll([ t, i, c ]), a.identical(n, r), a.case = "strings and regexps and flags", 
              t = "abc", i = "def", c = /.+/i, r = /(?=abc)(?=def)(?:.+)/i, n = e.regexpsAll({
                sources: [ t, i, c ],
                flags: "i"
              }), a.identical(n, r), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsAll()), 
              a.case = "strings with different flags", a.shouldThrowErrorSync(() => e.regexpsAll([ /abc/i, /def/iy ])), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsAll("ab", "cd")), 
              a.case = "different flags in map", a.shouldThrowErrorSync(() => e.regexpsAll({
                sources: [ /abc/i ],
                flags: "y"
              }));
            }
            //
            ,
            _regexpTest: function _regexpTest(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !0, i = e._regexpTest(r, n);
              a.identical(i, t), a.case = "different strings", r = "abc", n = "abcd", t = !1, 
              i = e._regexpTest(r, n), a.identical(i, t), a.case = "Regexp in string", r = /abc/, 
              n = "abcd", t = !0, i = e._regexpTest(r, n), a.identical(i, t), a.case = "Regexp not in string", 
              r = /.abc/, n = "abcd", t = !1, i = e._regexpTest(r, n), a.identical(i, t), a.case = "Conditional regexp in string", 
              r = /\d+(?!\.)/, n = "abcd3", t = !0, i = e._regexpTest(r, n), a.identical(i, t), 
              a.case = "Conditional regexp not in string", r = /\d+(?=\.)/, n = "abcd4", t = !1, 
              i = e._regexpTest(r, n), a.identical(i, t), a.case = "none argument", a.shouldThrowErrorSync(() => e._regexpTest()), 
              a.case = "not enough arguments", a.shouldThrowErrorSync(() => e._regexpTest("ab")), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e._regexpTest("ab", "cd", "ef")), 
              a.case = "wrong order of arguments", a.shouldThrowErrorSync(() => e._regexpTest([ "Hello", /o/ ])), 
              a.case = "null", a.shouldThrowErrorSync(() => e._regexpTest([ null, "Hello" ])), 
              a.shouldThrowErrorSync(() => e._regexpTest([ "Hello", null ])), a.case = "NaN", 
              a.shouldThrowErrorSync(() => e._regexpTest([ "Hello", NaN ])), a.shouldThrowErrorSync(() => e._regexpTest([ NaN, "Hello" ])), 
              a.case = "array", a.shouldThrowErrorSync(() => e._regexpTest([ [], "s" ])), a.shouldThrowErrorSync(() => e._regexpTest([ /o/, [] ]));
            }
            //
            ,
            regexpTest: function regexpTest(a) {
              a.case = "identical strings";
              var r = "hi", n = "hi", t = !0, i = e.regexpTest(r, n);
              a.identical(i, t), a.case = "Regexp not in string", r = /^bc/, n = "abcd", t = !1, 
              i = e.regexpTest(r, n), a.identical(i, t), a.case = "Conditional regexp in string array", 
              r = /\d+(?!\.)/, n = [ "abcd3", "2", "dwq1!c" ], t = [ !0, !0, !0 ], i = e.regexpTest(r, n), 
              a.identical(i, t), a.case = "Conditional regexp in part of string array", r = /\d+(?=\.)/, 
              n = [ "abcd4", "1.5768", "Hi" ], t = [ !1, !0, !1 ], i = e.regexpTest(r, n), a.identical(i, t), 
              a.case = "Regexp not in string array", r = /^abc{2}$/, n = [ "abcc4", "1.5768", "bcc", "0abcc" ], 
              t = [ !1, !1, !1, !1 ], i = e.regexpTest(r, n), a.identical(i, t), a.case = "Regexp in string array once", 
              r = /^abc{2}$/, n = [ "abcc4", "1.5768", "bcc", "0abcc", "abcc" ], t = [ !1, !1, !1, !1, !0 ], 
              i = e.regexpTest(r, n), a.identical(i, t), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpTest()), 
              a.case = "not enough arguments", a.shouldThrowErrorSync(() => e.regexpTest("ab")), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpTest("ab", "cd", "ef")), 
              a.case = "wrong order of arguments", a.shouldThrowErrorSync(() => e.regexpTest([ "Hello", /o/ ])), 
              a.case = "null", a.shouldThrowErrorSync(() => e.regexpTest([ null, "Hello" ])), 
              a.shouldThrowErrorSync(() => e.regexpTest([ "Hello", null ])), a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpTest([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpTest([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpTest([ [], "s" ])), a.shouldThrowErrorSync(() => e.regexpTest([ /o/, [] ]));
            }
            //
            ,
            regexpTestAll: function regexpTestAll(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !0, i = e.regexpTestAll(r, n);
              a.identical(i, t), a.case = "different strings", r = "abc", n = "abcd", t = !1, 
              i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "identical strings array", 
              r = "abc", n = [ "abc", "abc" ], t = !0, i = e.regexpTestAll(r, n), a.identical(i, t), 
              a.case = "different strings array", r = "abc", n = [ "abc", "a", "b", "c" ], t = !1, 
              i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Regexp in string", r = /b/, 
              n = "abcd", t = !0, i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Regexp not in string", 
              r = /.a/, n = "abcd", t = !1, i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Regexp in string array", 
              r = /abc/, n = [ "dabcd", "efabcgh", "ijklabc" ], t = !0, i = e.regexpTestAll(r, n), 
              a.identical(i, t), a.case = "Regexp not in string array", r = /.abc/, n = [ "abcd", "efgh", "ijkl" ], 
              t = !1, i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Conditional regexp in string", 
              r = /\d|a/, n = "abcd3", t = !0, i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Conditional regexp not in string", 
              r = /\d(?=\.)/, n = "abcd4", t = !1, i = e.regexpTestAll(r, n), a.identical(i, t), 
              a.case = "Conditional regexp in string array", r = /\d+(?!\.)|\d+(?=\.)/, n = [ "abcd3", "abcd4", "2" ], 
              t = !0, i = e.regexpTestAll(r, n), a.identical(i, t), a.case = "Conditional regexp not in string array", 
              r = /[^fdh]/, n = [ "abcd4", "fd" ], t = !1, i = e.regexpTestAll(r, n), a.identical(i, t), 
              a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpTestAll()), a.case = "not enough arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAll("ab")), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAll("ab", "cd", "ef")), a.case = "wrong order of arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAll([ "Hello", /o/ ])), a.case = "null", 
              a.shouldThrowErrorSync(() => e.regexpTestAll([ null, "Hello" ])), a.shouldThrowErrorSync(() => e.regexpTestAll([ "Hello", null ])), 
              a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpTestAll([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpTestAll([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpTestAll([ [], "h" ]));
            }
            //
            ,
            regexpTestAny: function regexpTestAny(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !0, i = e.regexpTestAny(r, n);
              a.identical(i, t), a.case = "different strings", r = "abc", n = "abcd", t = !1, 
              i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "One identical string, array", 
              r = "abc", n = [ "abc", "abc" ], t = !0, i = e.regexpTestAny(r, n), a.identical(i, t), 
              a.case = "different strings array", r = "abc", n = [ "abd", "a", "b", "c" ], t = !1, 
              i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "Regexp in string", r = /b/, 
              n = "abcd", t = !0, i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "Regexp not in string", 
              r = /.a/, n = "abcd", t = !1, i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "Regexp in string array", 
              r = /abc/, n = [ "dabcd", "efabcgh", "ijklabc" ], t = !0, i = e.regexpTestAny(r, n), 
              a.identical(i, t), a.case = "Regexp in only one string array", r = /.abc/, n = [ "dabcd", "efgh", "ijkl" ], 
              t = !0, i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "Regexp not in string array", 
              r = /.abc/, n = [ "abcd", "efgh", "ijkl" ], t = !1, i = e.regexpTestAny(r, n), a.identical(i, t), 
              a.case = "Conditional regexp in string", r = /\d|a/, n = "abcd3", t = !0, i = e.regexpTestAny(r, n), 
              a.identical(i, t), a.case = "Conditional regexp not in string", r = /\d(?=\.)/, 
              n = "abcd4", t = !1, i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "Conditional regexp in one string array", 
              r = /\d+(?!\.)|\d+(?=\.)/, n = [ "abcd3", "abcd", "fgh" ], t = !0, i = e.regexpTestAny(r, n), 
              a.identical(i, t), a.case = "Conditional regexp not in string array", r = /[^f-h]/, 
              n = [ "fg", "fh", "h" ], t = !1, i = e.regexpTestAny(r, n), a.identical(i, t), a.case = "none argument", 
              a.shouldThrowErrorSync(() => e.regexpTestAny()), a.case = "not enough arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAny("ab")), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAny("ab", "cd", "ef")), a.case = "wrong order of arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestAny([ "Hello", /o/ ])), a.case = "null", 
              a.shouldThrowErrorSync(() => e.regexpTestAny([ null, "Hello" ])), a.shouldThrowErrorSync(() => e.regexpTestAny([ "Hello", null ])), 
              a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpTestAny([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpTestAny([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpTestAny([ [], "h" ]));
            }
            //
            ,
            regexpTestNone: function regexpTestNone(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !1, i = e.regexpTestNone(r, n);
              a.identical(i, t), a.case = "different strings", r = "c", n = "abcd", t = !0, i = e.regexpTestNone(r, n), 
              a.identical(i, t), a.case = "One identical string, array", r = "abc", n = [ "abc", "abcd" ], 
              t = !1, i = e.regexpTestNone(r, n), a.identical(i, t), a.case = "different strings array", 
              r = "abc", n = [ "abd", "a", "b", "c" ], t = !0, i = e.regexpTestNone(r, n), a.identical(i, t), 
              a.case = "Regexp in string", r = /b/, n = "abcd", t = !1, i = e.regexpTestNone(r, n), 
              a.identical(i, t), a.case = "Regexp not in string", r = /a+/, n = "bcd", t = !0, 
              i = e.regexpTestNone(r, n), a.identical(i, t), a.case = "Regexp in string array", 
              r = /abc/, n = [ "dabcd", "efabcgh", "ijklabc" ], t = !1, i = e.regexpTestNone(r, n), 
              a.identical(i, t), a.case = "Regexp in only one string array", r = /.abc/, n = [ "dabcd", "efgh", "ijkl" ], 
              t = !1, i = e.regexpTestNone(r, n), a.identical(i, t), a.case = "Regexp not in string array", 
              r = /.abc/, n = [ "abcd", "efgh", "ijkl" ], t = !0, i = e.regexpTestNone(r, n), 
              a.identical(i, t), a.case = "Conditional regexp in string", r = /\d|a/, n = "abcd3", 
              t = !1, i = e.regexpTestNone(r, n), a.identical(i, t), a.case = "Conditional regexp not in string", 
              r = /\d(?=\.)/, n = "abcd4", t = !0, i = e.regexpTestNone(r, n), a.identical(i, t), 
              a.case = "Conditional regexp in one string array", r = /\d+(?!\.)|\d+(?!\!)/, n = [ "abcd3", "abcd", "fgh" ], 
              t = !1, i = e.regexpTestNone(r, n), a.identical(i, t), a.case = "Conditional regexp not in string array", 
              r = /[^f-h]/, n = [ "fg", "fh", "h" ], t = !0, i = e.regexpTestNone(r, n), a.identical(i, t), 
              a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpTestNone()), a.case = "not enough arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestNone("ab")), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestNone("ab", "cd", "ef")), a.case = "wrong order of arguments", 
              a.shouldThrowErrorSync(() => e.regexpTestNone([ "Hello", /o/ ])), a.case = "null", 
              a.shouldThrowErrorSync(() => e.regexpTestNone([ null, "Hello" ])), a.shouldThrowErrorSync(() => e.regexpTestNone([ "Hello", null ])), 
              a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpTestNone([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpTestNone([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpTestNone([ [], "h" ]));
            }
            //
            ,
            regexpsTestAll: function regexpsTestAll(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !0, i = e.regexpsTestAll(r, n);
              a.identical(i, t), a.case = "different strings", r = "abc", n = "abcd", t = !1, 
              i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "identical strings array", 
              r = [ "abc", "abc" ], n = "abc", t = !0, i = e.regexpsTestAll(r, n), a.identical(i, t), 
              a.case = "different strings array", r = [ "abc", "a", "b", "c" ], n = "abc", t = !1, 
              i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "regexps in string", r = /b/, 
              n = "abcd", t = !0, i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "regexps not in string", 
              r = /.a/, n = "abcd", t = !1, i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "regexps array in string", 
              r = [ /a/, /b/, /c/ ], n = "abc", t = !0, i = e.regexpsTestAll(r, n), a.identical(i, t), 
              a.case = "regexps array not in string", r = [ /a/, /b/, /c/, /d/, /e/ ], n = "abcd", 
              t = !1, i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "Conditional regexps in string", 
              r = /\d|a/, n = "abcd3", t = !0, i = e.regexpsTestAll(r, n), a.identical(i, t), 
              a.case = "Conditional regexps not in string", r = /\d(?=\.)/, n = "abcd4", t = !1, 
              i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "Conditional regexps array not in string", 
              r = [ /\d+(?!\.)/, /\d+(?=\.)/ ], n = "abcd3", t = !1, i = e.regexpsTestAll(r, n), 
              a.identical(i, t), a.case = "Conditional regexps array in string", r = [ /[^fdh]/, /\d+(?!\.)/ ], 
              n = "abcd4", t = !0, i = e.regexpsTestAll(r, n), a.identical(i, t), a.case = "Regexps array in string array", 
              r = [ /[^fdh]/, /\d+(?!\.)/ ], n = [ "abcd4", "d3,", "7" ], t = !0, i = e.regexpsTestAll(r, n), 
              a.identical(i, t), a.case = "Regexps array not in part of string array", r = [ /[^fdh]/, /\d+(?!\.)/ ], 
              n = [ "abcd4", "d3,", "7", "d" ], t = !1, i = e.regexpsTestAll(r, n), a.identical(i, t), 
              a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsTestAll()), a.case = "not enough arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAll("ab")), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAll("ab", "cd", "ef")), a.case = "wrong order of arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAll([ "Hello", /o/ ])), a.case = "null", 
              a.shouldThrowErrorSync(() => e.regexpsTestAll([ null, "Hello" ])), a.shouldThrowErrorSync(() => e.regexpsTestAll([ "Hello", null ])), 
              a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpsTestAll([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpsTestAll([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpsTestAll([ "h", [] ]));
            }
            //
            ,
            regexpsTestAny: function regexpsTestAny(a) {
              a.case = "One different regexp";
              var r = [ "abc", "def" ], n = "abc", t = !0, i = e.regexpsTestAny(r, n);
              a.identical(i, t), a.case = "Identical regexp and string arrays", r = [ "abc", "def" ], 
              n = [ "abc", "def" ], t = !0, i = e.regexpsTestAny(r, n), a.identical(i, t), a.case = "String array with one no- match", 
              r = [ "abc", "def" ], n = [ "abc", "def", "ghi" ], t = !0, i = e.regexpsTestAny(r, n), 
              a.identical(i, t), a.case = "different regexp array", r = [ "abd", "a", "b", "c" ], 
              n = "abc", t = !1, i = e.regexpsTestAny(r, n), a.identical(i, t), a.case = "regexps in string", 
              r = /b/, n = "abcd", t = !0, i = e.regexpsTestAny(r, n), a.identical(i, t), a.case = "regexps not in string", 
              r = /.a/, n = "abcd", t = !1, i = e.regexpsTestAny(r, n), a.identical(i, t), a.case = "regexps array with one no-match in string ", 
              r = [ /[abc]/, /.a/, /\d/ ], n = "dabcd", t = !0, i = e.regexpsTestAny(r, n), a.identical(i, t), 
              a.case = "No regexps in string -  array", r = [ /[abc]/, /.a/, /\d/ ], n = "ijkl", 
              t = !1, i = e.regexpsTestAny(r, n), a.identical(i, t), a.case = "Conditional regexps in one string array", 
              r = [ /\d+(?!\.)/, /\d+(?=\!)/ ], n = [ "abcd3", "abcd", "fg2!h" ], t = !0, i = e.regexpsTestAny(r, n), 
              a.identical(i, t), a.case = "Conditional regexps not in string array", r = [ /[^f-h]/, /[ab]/ ], 
              n = [ "fg", "fh", "h" ], t = !1, i = e.regexpsTestAny(r, n), a.identical(i, t), 
              a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsTestAny()), a.case = "not enough arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAny("ab")), a.case = "too many arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAny("ab", "cd", "ef")), a.case = "wrong order of arguments", 
              a.shouldThrowErrorSync(() => e.regexpsTestAny([ "Hello", /o/ ])), a.case = "null", 
              a.shouldThrowErrorSync(() => e.regexpsTestAny([ null, "Hello" ])), a.shouldThrowErrorSync(() => e.regexpsTestAny([ "Hello", null ])), 
              a.case = "NaN", a.shouldThrowErrorSync(() => e.regexpsTestAny([ "Hello", NaN ])), 
              a.shouldThrowErrorSync(() => e.regexpsTestAny([ NaN, "Hello" ])), a.case = "array", 
              a.shouldThrowErrorSync(() => e.regexpsTestAny([ "h", [] ]));
            }
            //
            ,
            regexpsTestNone: function regexpsTestNone(a) {
              a.case = "identical strings";
              var r = "abc", n = "abc", t = !1, i = e.regexpsTestNone(r, n);
              a.identical(i, t), a.case = "different strings", r = "c", n = "abcd", t = !0, i = e.regexpsTestNone(r, n), 
              a.identical(i, t), a.case = "One identical string, array", r = "abc", n = [ "abc", "abcd" ], 
              t = !1, i = e.regexpsTestNone(r, n), a.identical(i, t), a.case = "One identical string, array", 
              r = [ "abc", "abcd" ], n = "abc", t = !1, i = e.regexpsTestNone(r, n), a.identical(i, t), 
              a.case = "different strings array", r = [ "abc", /\d/ ], n = [ "abd", "a", "b", "c" ], 
              t = !0, i = e.regexpsTestNone(r, n), a.identical(i, t), a.case = "regexps in string", 
              r = [ /b/, /c$/ ], n = [ "abc", "hij", "6" ], t = !1, i = e.regexpsTestNone(r, n), 
              a.identical(i, t), a.case = "regexps not in string", r = [ /ba+/, /^\s/ ], n = [ "bcd", "a a", "7633.32" ], 
              t = !0, i = e.regexpsTestNone(r, n), a.identical(i, t), a.case = "one regexps in only one string array", 
              r = [ /.abc/, /\d$/ ], n = [ "dabcd", "efgh", "ijkl" ], t = !1, i = e.regexpsTestNone(r, n), 
              a.identical(i, t), a.case = "none argument", a.shouldThrowErrorSync(() => e.regexpsTestNone()), 
              a.case = "not enough arguments", a.shouldThrowErrorSync(() => e.regexpsTestNone("ab")), 
              a.case = "too many arguments", a.shouldThrowErrorSync(() => e.regexpsTestNone("ab", "cd", "ef")), 
              a.case = "wrong order of arguments", a.shouldThrowErrorSync(() => e.regexpsTestNone([ "Hello", /o/ ])), 
              a.case = "null", a.shouldThrowErrorSync(() => e.regexpsTestNone([ null, "Hello" ])), 
              a.shouldThrowErrorSync(() => e.regexpsTestNone([ "Hello", null ])), a.case = "NaN", 
              a.shouldThrowErrorSync(() => e.regexpsTestNone([ "Hello", NaN ])), a.shouldThrowErrorSync(() => e.regexpsTestNone([ NaN, "Hello" ])), 
              a.case = "array", a.shouldThrowErrorSync(() => e.regexpsTestNone([ "h", [] ]));
            }
            // --
            // suite definition
            // --
                    }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Regexp_test_s
  function Routine_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Routine.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Routine_test_s
    function Routine_test_s_naked() {
      !function _Routine_test_s_() {
        "use strict";
        //
        function testFunction1(e, a) {
          return e + a;
        }
        function testFunction2(e, a) {
          return this;
        }
        function testFunction3(e, a) {
          return e + a + this.k;
        }
        function testFunction4(e, a) {
          return this;
        }
        function contextConstructor3() {
          this.k = 15;
        }
        //
        function routineExtendExperiment(a) {
          a.case = "map saves";
          var r = function() {};
          Object.defineProperties(r, {
            "b": {
              value: {
                a: 2
              },
              enumerable: !0,
              writable: !0
            }
          });
          var n = e.routineExtend(r);
          a.identical(n.b, {
            a: 2
          }), a.case = "resulted map is empty, but should not", (r = function(e) {}).b = {
            map: 2
          }, n = e.routineExtend(r, {
            b: {
              map: 3
            }
          }), a.identical(n.b, {
            map: 2
          });
        }
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = new contextConstructor3();
        routineExtendExperiment.experimental = 1;
        //
        var r = {
          name: "Tools/base/l1/Routine",
          silencing: 1,
          tests: {
            /* qqq : tests for constructorJoin, extend tests for routineJoin */
            _routineJoin: 
            //
            function _routineJoin(r) {
              function srcRoutine() {}
              var n = {
                sealing: !1,
                routine: testFunction1,
                args: [ 4 ],
                // x
                extending: !0
              }, t = {
                sealing: !0,
                routine: testFunction2,
                args: [ 4 ],
                // x
                extending: !0
              }, i = {
                sealing: !1,
                routine: testFunction3,
                args: [ 4 ],
                // x
                context: a,
                extending: !0
              }, c = {
                sealing: !1,
                routine: testFunction4,
                args: [ 4 ],
                // x
                context: a,
                extending: !0
              }, s = {
                sealing: !0,
                routine: testFunction3,
                args: [ 2, 4 ],
                // x
                context: a,
                extending: !0
              }, l = {
                sealing: !0,
                routine: {},
                args: [ 2, 4 ],
                // x
                context: a,
                extending: !0
              }, o = {
                sealing: !0,
                routine: testFunction3,
                args: "wrong",
                // x
                context: a,
                extending: !0
              };
              r.case = "simple function without context with arguments bind without seal : result check";
              var d = e._routineJoin(n)(2);
              r.identical(d, 6), r.case = "simple function without context and seal : context test", 
              d = e._routineJoin(t)(2), r.identical(d, void 0), r.case = "simple function with context and arguments : result check", 
              d = e._routineJoin(i)(2), r.identical(d, 21), r.case = "simple function with context and arguments : context check", 
              d = e._routineJoin(c)(2), r.identical(d instanceof contextConstructor3, !0), r.case = "simple function with context and arguments : result check, seal == true ", 
              d = e._routineJoin(s)(2), r.identical(d, 21), r.case = "simple function with context and arguments : result check, seal == true ", 
              d = e._routineJoin(s)(0, 0), r.identical(d, 21), r.case = "extending", srcRoutine.defaults = {
                a: 10
              };
              var u = e.routineJoin(void 0, srcRoutine, []);
              r.identical(u.defaults, srcRoutine.defaults), r.case = "missed argument", r.shouldThrowError(function() {
                e._routineJoin();
              }), r.case = "extra argument", r.shouldThrowError(function() {
                e._routineJoin(n, t);
              }), r.case = "passed non callable object", r.shouldThrowError(function() {
                e._routineJoin(l);
              }), r.case = "passed arguments as primitive value", r.shouldThrowError(function() {
                e._routineJoin(o);
              });
            },
            constructorJoin: 
            //
            //
            // function routineBind( test )
            // {
            //
            //   var testParam1 = 2,
            //     testParam2 = 4,
            //     expected1 = 6,
            //     expected2 = undefined,
            //     expected3 = 21;
            //
            //   test.case = 'simple function without context with arguments bind : result check';
            //   var gotfn = _.routineBind( testFunction1, undefined, [ testParam2 ]);
            //   var got = gotfn( testParam1 );
            //   test.identical( got,expected1 );
            //
            //   test.case = 'simple function without /*ttt*/context test';
            //   var gotfn = _.routineBind(testFunction2, undefined, [ testParam2 ]);
            //   var got = gotfn( testParam1 );
            //   test.identical( got, expected2 );
            //
            //   test.case = 'simple function with context and arguments : result check';
            //   var gotfn = _.routineBind(testFunction3, context3, [ testParam2 ]);
            //   var got = gotfn( testParam1 );
            //   test.identical( got, expected3 );
            //
            //   test.case = 'simple function with context and arguments : context check';
            //   var gotfn = _.routineBind(testFunction4, context3, [ testParam2 ]);
            //   var got = gotfn( testParam1 );
            //   test.identical( got instanceof contextConstructor3, true );
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'missed argument';
            //   test.shouldThrowError( function()
            //   {
            //     _.routineBind();
            //   });
            //
            //   test.case = 'extra argument';
            //   test.shouldThrowError( function()
            //   {
            //     _.routineBind( testFunction4, context3, [ testParam2 ], [ testParam1 ] );
            //   });
            //
            //   test.case = 'passed non callable object';
            //   test.shouldThrowError( function()
            //   {
            //     _.routineBind( {}, context3, [ testParam2 ] );
            //   });
            //
            //   test.case = 'passed arguments as primitive value';
            //   test.shouldThrowError( function()
            //   {
            //     _.routineBind( testFunction4, context3, testParam2 );
            //   });
            //
            // };
            //
            function constructorJoin(a) {
              function srcRoutine() {
                return {
                  context: this,
                  args: e.longSlice(arguments)
                };
              }
              srcRoutine.prop = !0;
              var r = [], n = e.constructorJoin(srcRoutine, r);
              a.is(e.routineIs(n));
              var t = n();
              a.identical(e.mapKeys(srcRoutine), [ "prop" ]), a.identical(e.mapKeys(n), []), a.identical(t.args, r), 
              a.identical(t.context, srcRoutine), a.isNot(t.context instanceof srcRoutine), r = [], 
              n = e.constructorJoin(srcRoutine, r), a.is(e.routineIs(n)), t = new n(), a.identical(e.mapKeys(srcRoutine), [ "prop" ]), 
              a.identical(e.mapKeys(n), []), a.identical(t.args, r), a.notIdentical(t.context, srcRoutine), 
              a.is(t.context instanceof srcRoutine), r = [ {
                a: 1
              } ], n = e.constructorJoin(srcRoutine, r), a.is(e.routineIs(n)), t = n(), a.identical(e.mapKeys(srcRoutine), [ "prop" ]), 
              a.identical(e.mapKeys(n), []), a.identical(t.args, r), a.identical(t.context, srcRoutine), 
              a.isNot(t.context instanceof srcRoutine), r = [ {
                a: 1
              } ], n = e.constructorJoin(srcRoutine, r), a.is(e.routineIs(n)), t = n({
                b: 1
              }), a.identical(e.mapKeys(srcRoutine), [ "prop" ]), a.identical(e.mapKeys(n), []), 
              a.identical(t.args, [ {
                a: 1
              }, {
                b: 1
              } ]), a.identical(t.context, srcRoutine), a.isNot(t.context instanceof srcRoutine), 
              r = [ {
                a: 1
              } ], n = e.constructorJoin(srcRoutine, r), a.is(e.routineIs(n)), t = new n(), a.identical(e.mapKeys(srcRoutine), [ "prop" ]), 
              a.identical(e.mapKeys(n), []), a.identical(t.args, r), a.notIdentical(t.context, srcRoutine), 
              a.is(t.context instanceof srcRoutine), r = [ {
                a: 1
              } ], n = e.constructorJoin(srcRoutine, r), a.is(e.routineIs(n)), t = new n({
                b: 1
              }), a.identical(e.mapKeys(srcRoutine), [ "prop" ]), a.identical(e.mapKeys(n), []), 
              a.identical(t.args, [ {
                a: 1
              }, {
                b: 1
              } ]), a.notIdentical(t.context, srcRoutine), a.is(t.context instanceof srcRoutine), 
              a.shouldThrowError(() => e.constructorJoin()), a.shouldThrowError(() => e.constructorJoin([], [])), 
              a.shouldThrowError(() => e.constructorJoin(srcRoutine, srcRoutine));
            }
            //
            ,
            routineJoin: function routineJoin(r) {
              function srcRoutine() {}
              r.case = "simple function without context with arguments bind : result check";
              var n = e.routineJoin(void 0, testFunction1, [ 4 ])(2);
              r.identical(n, 6), r.case = "simple function without /*ttt*/context test", n = e.routineJoin(void 0, testFunction2, [ 4 ])(2), 
              r.identical(n, void 0), r.case = "simple function with context and arguments : result check", 
              n = e.routineJoin(a, testFunction3, [ 4 ])(2), r.identical(n, 21), r.case = "simple function with context and arguments : context check", 
              n = e.routineJoin(a, testFunction4, [ 4 ])(2), r.identical(n instanceof contextConstructor3, !0), 
              r.case = "extending", srcRoutine.defaults = {
                a: 10
              };
              var t = e.routineJoin(void 0, srcRoutine, []);
              r.identical(t.defaults, srcRoutine.defaults), r.case = "missed argument", r.shouldThrowError(function() {
                e.routineJoin();
              }), r.case = "extra argument", r.shouldThrowError(function() {
                e.routineJoin(a, testFunction4, [ 4 ], [ 2 ]);
              }), r.case = "passed non callable object", r.shouldThrowError(function() {
                e.routineJoin(a, {}, [ 4 ]);
              }), r.case = "passed arguments as primitive value", r.shouldThrowError(function() {
                e.routineJoin(a, testFunction4, 4);
              });
            }
            //
            ,
            routineSeal: function routineSeal(r) {
              function srcRoutine() {}
              r.case = "simple function with seal arguments : result check";
              var n = e.routineSeal(void 0, testFunction1, [ 2, 4 ])(2);
              r.identical(n, 6), r.case = "simple function with seal arguments : context check", 
              n = e.routineSeal(void 0, testFunction2, [ 2, 4 ])(2), r.identical(n, void 0), r.case = "simple function with seal context and arguments : result check", 
              n = e.routineSeal(a, testFunction3, [ 2, 4 ])(2), r.identical(n, 21), r.case = "simple function with seal context and arguments : context check", 
              n = e.routineSeal(a, testFunction4, [ 2, 4 ])(2), r.identical(n instanceof contextConstructor3, !0), 
              r.case = "simple function with seal context and arguments : result check", n = e.routineSeal(a, testFunction3, [ 2, 4 ])(0, 0), 
              r.identical(n, 21), r.case = "extending", srcRoutine.defaults = {
                a: 10
              };
              var t = e.routineJoin(void 0, srcRoutine, []);
              r.identical(t.defaults, srcRoutine.defaults), r.case = "missed argument", r.shouldThrowError(function() {
                e.routineSeal();
              }), r.case = "extra argument", r.shouldThrowError(function() {
                e.routineSeal(a, testFunction4, [ 4 ], [ 2 ]);
              }), r.case = "passed non callable object", r.shouldThrowError(function() {
                e.routineSeal(a, {}, [ 2, 4 ]);
              }), r.case = "passed arguments as primitive value", r.shouldThrowError(function() {
                e.routineSeal(a, testFunction4, 4);
              });
            }
            //
            ,
            routinesCompose: function routinesCompose(a) {
              function routineUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                return e.unrollAppend(e.unrollMake(null), e.unrollMake(arguments), r);
              }
              function routineNotUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                return e.arrayAppend_(null, arguments, r);
              }
              function r2() {
                r += 100;
                for (var e = 0; e < arguments.length; e++) r += 2 * arguments[e];
                return r;
              }
              function _break() {
                return e.dont;
              }
              function chainer1(e, a, r, n) {
                return a;
              }
              /* - */              a.case = "empty";
              var r = 0, n = [], t = e.routinesCompose(n)(1, 2, 3), i = [];
              a.identical(t, i), a.identical(r, 0), 
              /* - */
              a.open("unrolling:1")
              /* */ , a.case = "without chainer", r = 0, n = [ null, routineUnrolling, null, r2, null ], 
              t = e.routinesCompose(n)(1, 2, 3), i = [ 1, 2, 3, 16, 128 ], a.identical(t, i), 
              a.identical(r, 128), 
              /* */
              a.case = "with chainer", r = 0, n = [ null, routineUnrolling, null, r2, null ], 
              t = e.routinesCompose(n, chainer1)(1, 2, 3), i = [ 1, 2, 3, 16, 160 ], a.identical(t, i), 
              a.identical(r, 160), 
              /* */
              a.case = "with chainer and break", r = 0, n = [ null, routineUnrolling, null, _break, null, r2, null ], 
              t = e.routinesCompose(n, chainer1)(1, 2, 3), i = [ 1, 2, 3, 16, e.dont ], a.identical(t, i), 
              a.identical(r, 16), 
              /* */
              a.close("unrolling:1")
              /* - */ , a.open("unrolling:0")
              /* */ , a.case = "without chainer", r = 0, n = [ null, routineNotUnrolling, null, r2, null ], 
              t = e.routinesCompose(n)(1, 2, 3), i = [ [ 1, 2, 3, 16 ], 128 ], a.identical(t, i), 
              a.identical(r, 128), 
              /* */
              a.case = "with chainer", r = 0, n = [ null, routineNotUnrolling, null, r2, null ], 
              t = e.routinesCompose(n, chainer1)(1, 2, 3), i = [ [ 1, 2, 3, 16 ], 160 ], a.identical(t, i), 
              a.identical(r, 160), 
              /* */
              a.case = "with chainer and break", r = 0, n = [ null, routineNotUnrolling, null, _break, null, r2, null ], 
              t = e.routinesCompose(n, chainer1)(1, 2, 3), i = [ [ 1, 2, 3, 16 ], e.dont ], a.identical(t, i), 
              a.identical(r, 16), 
              /* */
              a.close("unrolling:0")
              /* - */ , a.case = "bad arguments", a.shouldThrowErrorSync(() => e.routinesComposeAll()), 
              a.shouldThrowErrorSync(() => e.routinesComposeAll(n, function() {}, function() {}));
            }
            //
            ,
            routinesComposeAll: function routinesComposeAll(a) {
              function routineUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                return e.unrollAppend(e.unrollMake(null), e.unrollMake(arguments), r);
              }
              function r2() {
                r += 100;
                for (var e = 0; e < arguments.length; e++) r += 2 * arguments[e];
                return r;
              }
              function _nothing() {}
              a.case = "with nothing";
              var r = 0, n = [ null, routineUnrolling, null, _nothing, null, r2, null ], t = e.routinesComposeAll(n)(1, 2, 3), i = [ 1, 2, 3, 16, 128 ];
              a.identical(t, i), a.identical(r, 128), a.case = "last nothing", r = 0, n = [ null, routineUnrolling, null, _nothing ], 
              t = e.routinesComposeAll(n)(1, 2, 3), i = [ 1, 2, 3, 16 ], a.identical(t, i), a.identical(r, 16), 
              a.case = "not unrolling and last nothing", r = 0, n = [ null, function routineNotUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                return e.arrayAppend_(null, arguments, r);
              }, null, _nothing ], t = e.routinesComposeAll(n)(1, 2, 3), i = [ [ 1, 2, 3, 16 ] ], 
              a.identical(t, i), a.identical(r, 16), a.case = "with nothing and dont", r = 0, 
              n = [ null, routineUnrolling, null, _nothing, null, function _dont() {
                return e.dont;
              }, null, r2, null ], t = e.routinesComposeAll(n)(1, 2, 3), i = !1, a.identical(t, i), 
              a.identical(r, 16), a.case = "bad arguments", a.shouldThrowErrorSync(() => e.routinesComposeAll()), 
              a.shouldThrowErrorSync(() => e.routinesComposeAll(n, function() {})), a.shouldThrowErrorSync(() => e.routinesComposeAll(n, function() {}, function() {}));
            }
            //
            ,
            routinesComposeAllReturningLast: function routinesComposeAllReturningLast(a) {
              function routineUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                debugger;
                return e.unrollAppend(e.unrollMake(null), e.unrollMake(arguments), r);
              }
              function r2() {
                r += 100;
                for (var e = 0; e < arguments.length; e++) r += 2 * arguments[e];
                return r;
              }
              function _nothing() {}
              a.case = "with nothing";
              var r = 0, n = [ null, routineUnrolling, null, _nothing, null, r2, null ], t = e.routinesComposeAllReturningLast(n)(1, 2, 3), i = 128;
              a.identical(t, i), a.identical(r, 128), a.case = "last nothing", r = 0, n = [ null, routineUnrolling, null, _nothing ], 
              t = e.routinesComposeAllReturningLast(n)(1, 2, 3), i = 16, a.identical(t, i), a.identical(r, 16), 
              a.case = "not unrolling and last nothing", r = 0, n = [ null, function routineNotUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                debugger;
                return e.arrayAppend_(null, arguments, r);
              }, null, _nothing ], t = e.routinesComposeAllReturningLast(n)(1, 2, 3), i = [ 1, 2, 3, 16 ], 
              a.identical(t, i), a.identical(r, 16), a.case = "with nothing and dont", r = 0, 
              n = [ null, routineUnrolling, null, _nothing, null, function _dont() {
                return e.dont;
              }, null, r2, null ], t = e.routinesComposeAllReturningLast(n)(1, 2, 3), i = e.dont, 
              a.identical(t, i), a.identical(r, 16), a.case = "bad arguments", a.shouldThrowErrorSync(() => e.routinesComposeAllReturningLast()), 
              a.shouldThrowErrorSync(() => e.routinesComposeAllReturningLast(n, function() {})), 
              a.shouldThrowErrorSync(() => e.routinesComposeAllReturningLast(n, function() {}, function() {}));
            }
            //
            ,
            routinesChain: function routinesChain(a) {
              function routineUnrolling() {
                r += 10;
                for (var a = 0; a < arguments.length; a++) r += arguments[a];
                return e.unrollAppend(e.unrollMake(null), e.unrollMake(arguments), r);
              }
              function r2() {
                r += 100;
                for (var e = 0; e < arguments.length; e++) r += 2 * arguments[e];
                return r;
              }
              /* */
              a.case = "without break";
              var r = 0, n = [ null, routineUnrolling, null, r2, null ], t = e.routinesChain(n)(1, 2, 3), i = [ 1, 2, 3, 16, 160 ];
              a.identical(t, i), a.identical(r, 160), 
              /* */
              a.case = "with break", r = 0, n = [ null, routineUnrolling, null, function _break() {
                return e.dont;
              }, null, r2, null ], t = e.routinesChain(n)(1, 2, 3), i = [ 1, 2, 3, 16 ], a.identical(t, i), 
              a.identical(r, 16), 
              /* */
              a.case = "with dont include", r = 0, n = [ null, routineUnrolling, null, function dontInclude() {}, null, r2, null ], 
              t = e.routinesChain(n)(1, 2, 3), i = [ 1, 2, 3, 16, 160 ], a.identical(t, i), a.identical(r, 160), 
              a.case = "bad arguments", a.shouldThrowErrorSync(() => e.routinesComposeAll()), 
              a.shouldThrowErrorSync(() => e.routinesComposeAll(n, function() {})), a.shouldThrowErrorSync(() => e.routinesComposeAll(n, function() {}, function() {}));
            }
            //
            ,
            routineExtend: function routineExtend(a) {
              // debugger;
              // var got = _.routineExtend( dst, { c : { s : 1 } } );
              // test.identical( got.c, {} ); // true
              // debugger;
              a.open("dst is null, src has pre and body properties"), a.case = "dst is null, src is routine maked by routineFromPreAndBody";
              var r = e.routineExtend(null, e.routineFromPreAndBody);
              a.identical(r.pre, e.routineFromPreAndBody.pre), a.identical(r.body, e.routineFromPreAndBody.body), 
              a.identical(typeof r, "function"), r = e.routineExtend(null, e.routinesCompose), 
              a.identical(r.pre, e.routinesCompose.pre), a.identical(r.body, e.routinesCompose.body), 
              a.identical(typeof r, "function"), a.case = "dst is null, src is map with pre and body properties";
              var n = {
                pre: e.routineFromPreAndBody.pre,
                body: e.routineFromPreAndBody.body,
                map: {
                  a: 2
                }
              };
              r = e.routineExtend(null, n), a.identical(r.pre, e.routineFromPreAndBody.pre), a.identical(r.body, e.routineFromPreAndBody.body), 
              a.equivalent(r.map, {}), a.identical(typeof r, "function"), a.case = "dst is null, src is map with pre and body properties", 
              n = {
                pre: e.routineFromPreAndBody.pre,
                body: e.routineFromPreAndBody.body,
                map: {
                  a: 2
                }
              }, r = e.routineExtend(null, n), a.identical(r.pre, e.routineFromPreAndBody.pre), 
              a.identical(r.body, e.routineFromPreAndBody.body), a.identical(r.map, {}), a.identical(typeof r, "function"), 
              a.case = "dst is null, src is map with pre and body properties", n = {
                pre: e.routineFromPreAndBody.pre,
                body: e.routineFromPreAndBody.body,
                a: [ 1 ],
                b: "str",
                c: {
                  str: "str"
                }
              }, r = e.routineExtend(null, n), a.identical(r.pre, e.routineFromPreAndBody.pre), 
              a.identical(r.body, e.routineFromPreAndBody.body), a.identical(r.a, [ 1 ]), a.identical(r.b, "str"), 
              a.identical(r.c, {}), a.identical(typeof r, "function"), a.close("dst is null, src has pre and body properties"), 
              /* - */
              a.open("single dst"), a.case = "single dst";
              var t = function(e) {};
              r = e.routineExtend(t), a.identical(r, t), a.identical(typeof r, "function"), a.case = "single dst is routine, has properties", 
              (t = function(e) {}).a = 0, t.b = 0, r = e.routineExtend(t), a.identical(r, t), 
              a.identical(typeof r, "function"), a.identical(r.a, 0), a.identical(r.b, 0), a.case = "single dst is routine, has hiden properties", 
              t = function(e) {}, Object.defineProperties(t, {
                "a": {
                  value: 0,
                  enumerable: !0,
                  writable: !1
                },
                "b": {
                  value: {
                    a: 2
                  },
                  enumerable: !1,
                  writable: !1
                }
              }), r = e.routineExtend(t), a.identical(r, t), a.identical(typeof r, "function"), 
              a.identical(r.a, 0), a.identical(r.b, {
                a: 2
              }), r = Object.getOwnPropertyDescriptor(r, "b"), a.isNot(r.enumerable), a.close("single dst"), 
              a.case = "dst has properties, src map has different properties", (t = function(e) {}).a = 0, 
              t.b = 0, r = e.routineExtend(t, {
                c: 1,
                d: 1,
                e: {
                  s: 1
                }
              }), a.identical(typeof r, "function"), a.identical(r.a, 0), a.identical(r.b, 0), 
              a.identical(r.c, 1), a.identical(r.e, {}), a.case = "dst has properties, src map has the same properties", 
              (t = function(e) {}).a = 0, t.b = 0, r = e.routineExtend(t, {
                a: 1,
                b: 1
              }), a.identical(typeof r, "function"), a.identical(r.a, 1), a.identical(r.b, 1), 
              /* */
              a.case = "dst has non-writable properties", t = function(e) {}, Object.defineProperties(t, {
                "a": {
                  enumerable: !0,
                  writable: !1,
                  value: 0
                },
                "b": {
                  enumerable: !0,
                  writable: !1,
                  value: 0
                }
              }), r = e.routineExtend(t, {
                a: 3,
                b: 2
              }), a.identical(typeof r, "function"), a.identical(r.a, 0), a.identical(r.b, 0), 
              a.case = "src has non-writable properties", (t = function(e) {}).a = 0, t.b = 0, 
              n = {}, Object.defineProperties(n, {
                "a": {
                  enumerable: !0,
                  writable: !1,
                  value: 3
                },
                "b": {
                  enumerable: !0,
                  writable: !1,
                  value: 2
                }
              }), r = e.routineExtend(t, n), a.identical(typeof r, "function"), a.identical(r.a, 3), 
              a.identical(r.b, 2), a.case = "src is an array", t = function(e) {}, r = e.routineExtend(t, [ "a", 1 ]), 
              a.identical(typeof r, "function"), a.identical(r[0], "a"), a.identical(r[1], 1), 
              a.open("a few extends"), a.case = "null extends other routine, null extends result", 
              n = e.routineExtend(null, e.routinesCompose), r = e.routineExtend(null, n), a.identical(r.pre, e.routinesCompose.pre), 
              a.identical(r.body, e.routinesCompose.body), a.identical(typeof r, "function"), 
              a.case = "src extends routine, result extends map ";
              var i = {
                pre: e.routineFromPreAndBody.pre,
                body: e.routineFromPreAndBody.body,
                a: "str",
                b: {
                  b: 3
                }
              };
              n = e.routineExtend(null, e.routinesCompose), r = e.routineExtend(n, i), a.identical(r.pre, e.routineFromPreAndBody.pre), 
              a.identical(r.body, e.routineFromPreAndBody.body), a.identical(r.b, {}), a.is("str" === r.a), 
              a.identical(typeof r, "function"), a.case = "dst extends map, dst extends other map", 
              t = function() {}, i = {
                pre: e.routinesCompose.pre,
                body: e.routinesCompose.body,
                a: [ "str" ],
                c: {
                  d: 2
                }
              }, n = e.routineExtend(t, {
                c: {},
                b: "str"
              }), r = e.routineExtend(t, i), a.identical(r.pre, e.routinesCompose.pre), a.identical(r.body, e.routinesCompose.body), 
              a.identical(r.a, [ "str" ]), a.identical(r.b, "str"), a.identical(r.c, {}), a.identical(typeof r, "function"), 
              a.case = "dst has map property, dst extends other map", (t = function() {}).map = {
                a: "str"
              }, i = {
                pre: e.routinesCompose.pre,
                body: e.routinesCompose.body,
                a: [ "str" ],
                map: {
                  d: 2
                }
              }, n = e.routineExtend(t, {
                c: {}
              }), r = e.routineExtend(t, i), a.identical(r.pre, e.routinesCompose.pre), a.identical(r.body, e.routinesCompose.body), 
              a.identical(r.a, [ "str" ]), a.identical(r.map, {
                a: "str"
              }), a.identical(r.c, {}), a.identical(typeof r, "function"), a.case = "dst extends routine1, src extends routine, dst extends src", 
              t = function() {}, n = function() {};
              var c = function() {};
              c.a = 0, c.b = [ "str" ];
              var s = function() {};
              s.a = 2, s.c = "str", i = e.routineExtend(n, c);
              var l = e.routineExtend(t, s);
              r = e.routineExtend(l, i), a.identical(r.a, 0), a.identical(r.b, [ "str" ]), a.identical(r.c, "str"), 
              a.identical(t.a, r.a), a.identical(t.b, r.b), a.identical(t.c, r.c), a.identical(typeof r, "function"), 
              a.case = "dst extends map, src extends map, dst extends src", t = function() {}, 
              n = function() {}, i = e.routineExtend(n, {
                o1: 1,
                o2: "str"
              }), l = e.routineExtend(t, {
                o3: "o3",
                o1: "map"
              }), r = e.routineExtend(l, i), a.identical(r.o1, 1), a.identical(r.o2, "str"), a.identical(r.o3, "o3"), 
              a.identical(t.a, r.a), a.identical(t.b, r.b), a.identical(t.c, r.c), a.identical(typeof r, "function"), 
              a.close("a few extends"), a.case = "no arguments", a.shouldThrowErrorSync(function() {
                e.routineExtend();
              }), a.case = "three arguments", a.shouldThrowErrorSync(function() {
                e.routineExtend(null, {
                  a: 1
                }, {
                  b: 2
                });
              }), a.case = "single dst is null", a.shouldThrowErrorSync(function() {
                e.routineExtend(null);
              }), a.case = "second arg has not pre and body properties", a.shouldThrowErrorSync(function() {
                e.routineExtend(null, e.unrollIs);
              }), a.case = "second arg is primitive", a.shouldThrowErrorSync(function() {
                e.routineExtend(e.unrollIs, "str");
              }), a.shouldThrowErrorSync(function() {
                e.routineExtend(e.unrollIs, 1);
              }), a.case = "dst is not routine or null", a.shouldThrowErrorSync(function() {
                e.routineExtend(1, {
                  a: 1
                });
              }), a.shouldThrowErrorSync(function() {
                e.routineExtend("str", {
                  a: 1
                });
              });
            },
            routineExtendExperiment: routineExtendExperiment,
            vectorize: 
            //
            function vectorize(a) {
              function srcRoutine(a, r) {
                return e.longSlice(arguments);
              }
              a.open("defaults"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                select: 1
              }).routine = srcRoutine;
              var r = e.vectorize(c);
              a.case = "single argument", a.identical(r(1), [ 1 ]), a.identical(r([ 1 ]), [ [ 1 ] ]), 
              a.identical(r([ 1, 2, 3 ]), [ [ 1 ], [ 2 ], [ 3 ] ]), a.case = "multiple argument", 
              a.identical(r(1, 0), [ 1, 0 ]), a.identical(r([ 1, 2, 3 ], 2), [ [ 1, 2 ], [ 2, 2 ], [ 3, 2 ] ]), 
              a.identical(r(2, [ 1, 2, 3 ]), [ 2, [ 1, 2, 3 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, [ 1, 2 ] ], [ 2, [ 1, 2 ] ] ]), 
              a.close("defaults"), 
              //
              a.open("vectorizingArray 0"), (c = {
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                select: 1
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r, srcRoutine), a.close("vectorizingArray 0"), 
              //
              a.open("vectorizingMapVals : 1"), (c = {
                vectorizingArray: 0,
                vectorizingMapVals: 1,
                select: 1
              }).routine = srcRoutine;
              debugger;
              r = e.vectorize(c), a.case = "single argument", a.identical(r(1), [ 1 ]), a.identical(r([ 1 ]), [ [ 1 ] ]), 
              a.identical(r([ 1, 2, 3 ]), [ [ 1, 2, 3 ] ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: [ 1 ],
                2: [ 2 ],
                3: [ 3 ]
              }), a.case = "multiple argument", a.identical(r(1, 0), [ 1, 0 ]), a.identical(r([ 1, 2, 3 ], 2), [ [ 1, 2, 3 ], 2 ]), 
              a.identical(r(2, [ 1, 2, 3 ]), [ 2, [ 1, 2, 3 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, 2 ], [ 1, 2 ] ]), 
              a.identical(r({
                a: 1
              }, 0), {
                a: [ 1, 0 ]
              }), a.identical(r(0, {
                a: 1
              }), [ 0, {
                a: 1
              } ]), a.identical(r({
                a: 1
              }, {
                b: 2
              }), {
                a: [ 1, {
                  b: 2
                } ]
              }), a.identical(r({
                a: 1
              }, 2, 3), {
                a: [ 1, 2, 3 ]
              }), a.identical(r({
                a: 1
              }, {
                b: 2
              }, {
                c: 3
              }), {
                a: [ 1, {
                  b: 2
                }, {
                  c: 3
                } ]
              }), a.close("vectorizingMapVals : 1"), 
              //
              a.open("vectorizingArray : 1, vectorizingMapVals : 1"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                select: 1
              }).routine = srcRoutine, r = e.vectorize(c), a.case = "single argument", a.identical(r(1), [ 1 ]), 
              a.identical(r([ 1 ]), [ [ 1 ] ]), a.identical(r([ 1, 2, 3 ]), [ [ 1 ], [ 2 ], [ 3 ] ]), 
              a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: [ 1 ],
                2: [ 2 ],
                3: [ 3 ]
              }), a.case = "multiple argument", a.identical(r(1, 0), [ 1, 0 ]), a.identical(r([ 1, 2, 3 ], 2), [ [ 1, 2 ], [ 2, 2 ], [ 3, 2 ] ]), 
              a.identical(r(2, [ 1, 2, 3 ]), [ 2, [ 1, 2, 3 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, [ 1, 2 ] ], [ 2, [ 1, 2 ] ] ]), 
              a.identical(r({
                a: 1
              }, 0), {
                a: [ 1, 0 ]
              }), a.identical(r(0, {
                a: 1
              }), [ 0, {
                a: 1
              } ]), a.identical(r({
                a: 1
              }, {
                b: 2
              }), {
                a: [ 1, {
                  b: 2
                } ]
              }), a.identical(r({
                a: 1
              }, 2, 3), {
                a: [ 1, 2, 3 ]
              }), a.identical(r({
                a: 1
              }, {
                b: 2
              }, {
                c: 3
              }), {
                a: [ 1, {
                  b: 2
                }, {
                  c: 3
                } ]
              }), a.identical(r([ 1 ], {
                a: 2
              }), [ [ 1, {
                a: 2
              } ] ]), a.identical(r({
                a: 1
              }, [ 2 ]), {
                a: [ 1, [ 2 ] ]
              }), a.identical(r([ 1 ], {
                a: 2
              }, 3), [ [ 1, {
                a: 2
              }, 3 ] ]), a.identical(r({
                a: 1
              }, [ 2 ], 3), {
                a: [ 1, [ 2 ], 3 ]
              }), a.close("vectorizingArray : 1, vectorizingMapVals : 1"), 
              //
              a.open("vectorizingArray : 1, select : key "), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                select: "b"
              }).routine = srcRoutine, r = e.vectorize(c), a.case = "single argument", a.identical(r("1"), [ "1" ]), 
              a.identical(r([ 1 ]), [ [ 1 ] ]), a.identical(r({
                a: 0
              }), [ {
                a: 0
              } ]), a.identical(r({
                a: 0,
                b: "1"
              }), [ {
                a: 0,
                b: "1"
              } ]), a.identical(r({
                a: 0,
                b: [ 1 ]
              }), [ [ {
                a: 0,
                b: 1
              } ] ]), a.identical(r({
                a: 0,
                b: [ 1, 2 ]
              }), [ [ {
                a: 0,
                b: 1
              } ], [ {
                a: 0,
                b: 2
              } ] ]), a.case = "multiple argument", a.shouldThrowError(() => r({
                a: 0,
                b: [ 1 ]
              }, 2)), a.close("vectorizingArray : 1, select : key "), 
              //
              a.open("vectorizingArray : 1, select : multiple keys "), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                select: [ "a", "b" ]
              }).routine = srcRoutine, r = e.vectorize(c), a.case = "single argument";
              var n, t = r(n = "a"), i = [ [ n ], [ n ] ];
              a.identical(t, i), t = r(n = [ 1 ]), i = [ [ n ], [ n ] ], a.identical(t, i), t = r(n = {
                c: 1
              }), i = [ [ n ], [ n ] ], a.identical(t, i), t = r({
                a: 0,
                b: [ 1 ]
              }), i = [ [ {
                a: 0,
                b: [ 1 ]
              } ], [ [ {
                a: 0,
                b: 1
              } ] ] ], a.identical(t, i), t = r({
                a: 0,
                b: [ 1, 2 ]
              }), i = [ [ {
                a: 0,
                b: [ 1, 2 ]
              } ], [ [ {
                a: 0,
                b: 1
              } ], [ {
                a: 0,
                b: 2
              } ] ] ], a.identical(t, i), a.case = "multiple argument", a.shouldThrowError(() => r({
                a: 0,
                b: [ 1 ]
              }, 2)), a.close("vectorizingArray : 1, select : multiple keys "), 
              //
              a.open("vectorizingArray : 1,select : 2"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                select: 2
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r([ 1, 2 ], 1), [ [ 1, 1 ], [ 2, 1 ] ]), 
              a.identical(r(1, [ 1, 2 ]), [ [ 1, 1 ], [ 1, 2 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, 1 ], [ 2, 2 ] ]), 
              a.identical(r(1, 2), [ 1, 2 ]), a.identical(r({
                a: 1
              }, 1), [ {
                a: 1
              }, 1 ]), a.identical(r(1, {
                a: 1
              }), [ 1, {
                a: 1
              } ]), a.identical(r({
                a: 1
              }, {
                b: 2
              }), [ {
                a: 1
              }, {
                b: 2
              } ]), a.identical(r([ 1 ], {
                a: 2
              }), [ [ 1, {
                a: 2
              } ] ]), a.identical(r([ 1, 2 ], {
                a: 3
              }), [ [ 1, {
                a: 3
              } ], [ 2, {
                a: 3
              } ] ]), a.identical(r({
                a: 3
              }, [ 1, 2 ]), [ [ {
                a: 3
              }, 1 ], [ {
                a: 3
              }, 2 ] ]), a.shouldThrowError(() => r(1)), a.shouldThrowError(() => r(1, 2, 3)), 
              a.shouldThrowError(() => r([ 1, 2 ], [ 1, 2, 3 ])), a.shouldThrowError(() => r([ 1 ], [ 2 ], [ 3 ])), 
              a.close("vectorizingArray : 1,select : 2"), 
              //
              a.open("vectorizingMapVals : 1,select : 2"), (c = {
                vectorizingArray: 0,
                vectorizingMapVals: 1,
                select: 2
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r([ 1, 2 ], 3), [ [ 1, 2 ], 3 ]), 
              a.identical(r(1, [ 1, 2 ]), [ 1, [ 1, 2 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, 2 ], [ 1, 2 ] ]), 
              a.identical(r(1, 2), [ 1, 2 ]), a.identical(r({
                a: 1
              }, 1), {
                a: [ 1, 1 ]
              }), a.identical(r(1, {
                a: 1
              }), {
                a: [ 1, 1 ]
              }), a.identical(r({
                a: 1
              }, {
                a: 2
              }), {
                a: [ 1, 2 ]
              }), a.identical(r({
                a: 1,
                b: 1
              }, {
                b: 2,
                a: 2
              }), {
                a: [ 1, 2 ],
                b: [ 1, 2 ]
              }), a.shouldThrowError(() => r(1)), a.shouldThrowError(() => r({
                a: 1
              }, {
                b: 1
              })), a.close("vectorizingMapVals : 1,select : 2"), 
              //
              a.open("vectorizingArray : 1, vectorizingMapVals : 1,select : 2"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                select: 2
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r([ 1, 2 ], 3), [ [ 1, 3 ], [ 2, 3 ] ]), 
              a.identical(r(1, [ 1, 2 ]), [ [ 1, 1 ], [ 1, 2 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, 1 ], [ 2, 2 ] ]), 
              a.identical(r(1, 2), [ 1, 2 ]), a.identical(r({
                a: 1
              }, 1), {
                a: [ 1, 1 ]
              }), a.identical(r(1, {
                a: 1
              }), {
                a: [ 1, 1 ]
              }), a.identical(r({
                a: 1
              }, {
                a: 2
              }), {
                a: [ 1, 2 ]
              }), a.identical(r({
                a: 1,
                b: 1
              }, {
                b: 2,
                a: 2
              }), {
                a: [ 1, 2 ],
                b: [ 1, 2 ]
              }), a.shouldThrowError(() => r([ 1, 2 ], [ 1, 2, 3 ])), a.shouldThrowError(() => r(1, 2, 3)), 
              a.shouldThrowError(() => r({
                a: 1
              }, {
                b: 1
              })), a.shouldThrowError(() => r([ 1 ], {
                b: 1
              })), a.shouldThrowError(() => r({
                b: 1
              }, [ 1 ])), a.shouldThrowError(() => r(1, [ 1 ], {
                b: 1
              })), a.shouldThrowError(() => r([ 1 ], 1, {
                b: 1
              })), a.shouldThrowError(() => r({
                b: 1
              }, 1, [ 1 ])), a.shouldThrowError(() => r({
                b: 1
              }, [ 1 ], 1)), a.close("vectorizingArray : 1, vectorizingMapVals : 1,select : 2"), 
              a.open(" vectorizingMapKeys : 1"), (c = {
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 1
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r(1), [ 1 ]), a.identical(r([ 1 ]), [ [ 1 ] ]), 
              a.identical(r({
                a: 1
              }), {
                a: 1
              }), a.shouldThrowError(() => r(1, 2)), a.close(" vectorizingMapKeys : 1"), a.open("vectorizingMapKeys : 1, select : 2"), 
              (c = {
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 2
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r(1, 1), [ 1, 1 ]), a.identical(r([ 1 ], 1), [ [ 1 ], 1 ]), 
              a.identical(r({
                a: 1
              }, "b"), {
                "a,b": 1
              }), a.identical(r("a", {
                b: 1,
                c: 2
              }), {
                "a,b": 1,
                "a,c": 2
              }), a.identical(r([ "a" ], {
                b: 1,
                c: 2
              }), {
                "a,b": 1,
                "a,c": 2
              }), a.identical(r({
                b: 1,
                c: 2
              }, [ "a" ]), {
                "b,a": 1,
                "c,a": 2
              }), a.shouldThrowError(() => r(1, 2, 3)), a.close("vectorizingMapKeys : 1, select : 2"), 
              a.open("vectorizingMapKeys : 1, vectorizingArray : 1, select : 2"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 2
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r([ 1, 2 ], 3), [ [ 1, 3 ], [ 2, 3 ] ]), 
              a.identical(r(1, [ 1, 2 ]), [ [ 1, 1 ], [ 1, 2 ] ]), a.identical(r([ 1, 2 ], [ 1, 2 ]), [ [ 1, 1 ], [ 2, 2 ] ]), 
              a.identical(r(1, 2), [ 1, 2 ]), a.identical(r({
                a: 1
              }, "b"), {
                "a,b": 1
              }), a.identical(r("a", {
                b: 1,
                c: 2
              }), {
                "a,b": 1,
                "a,c": 2
              }), a.identical(r({
                a: 1
              }, 1), {
                "a,1": 1
              }), a.identical(r(1, {
                b: 1,
                c: 2
              }), {
                "1,b": 1,
                "1,c": 2
              }), a.identical(r([ 1 ], {
                b: !0
              }), {
                "1,b": !0
              }), a.identical(r([ 1, 2 ], {
                b: !0
              }), {
                "1,b": !0,
                "2,b": !0
              }), a.shouldThrowError(() => r(1, 2, 3)), a.shouldThrowError(() => r({
                a: 1
              }, {
                b: 1
              })), 
              // test.shouldThrowError( () => routine( [ 1 ], { b : 1 } ) );
              // test.shouldThrowError( () => routine( { b : 1 }, [ 1 ] ) );
              // test.shouldThrowError( () => routine( 1, [ 1 ], { b : 1 } ) );
              a.shouldThrowError(() => r([ 1 ], 1, {
                b: 1
              })), a.shouldThrowError(() => r({
                b: 1
              }, 1, [ 1 ])), a.shouldThrowError(() => r({
                b: 1
              }, [ 1 ], 1)), a.close("vectorizingMapKeys : 1, vectorizingArray : 1, select : 2"), 
              a.open("vectorizingMapKeys : 1, vectorizingArray : 1, select : 3"), (c = {
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 3
              }).routine = srcRoutine, r = e.vectorize(c), a.identical(r([ 1 ], {
                b: !0
              }, "c"), {
                "1,b,c": !0
              }), a.identical(r([ 1 ], {
                b: !0
              }, [ "c" ]), {
                "1,b,c": !0
              }), a.identical(r([ 1 ], {
                b: !0,
                c: !1
              }, "d"), {
                "1,b,d": !0,
                "1,c,d": !1
              }), a.identical(r([ 1, 2 ], {
                b: !0
              }, "c"), {
                "1,b,c": !0,
                "2,b,c": !0
              }), t = r([ 1, 2 ], {
                b: !0,
                c: !1
              }, [ "d", "e" ]), i = {
                "1,b,d": !0,
                "1,c,d": !1,
                "2,b,e": !0,
                "2,c,e": !1
              }, a.identical(t, i), t = r([ 1, 2 ], [ "d", "e" ], {
                b: !0,
                c: !1
              }), i = {
                "1,d,b": !0,
                "1,d,c": !1,
                "2,e,b": !0,
                "2,e,c": !1
              }, a.identical(t, i), t = r({
                b: !0,
                c: !1
              }, [ 1, 2 ], [ "d", "e" ]), i = {
                "b,1,d": !0,
                "c,1,d": !1,
                "b,2,e": !0,
                "c,2,e": !1
              }, a.identical(t, i), t = r([ 1, 2 ], {
                b: !0,
                c: !1,
                d: !0
              }, [ "e", "f" ]), i = {
                "1,b,e": !0,
                "1,c,e": !1,
                "1,d,e": !0,
                "2,b,f": !0,
                "2,c,f": !1,
                "2,d,f": !0
              }, a.identical(t, i), t = r([ 1, 2 ], [ "e", "f" ], {
                b: !0,
                c: !1,
                d: !0
              }), i = {
                "1,e,b": !0,
                "1,e,c": !1,
                "1,e,d": !0,
                "2,f,b": !0,
                "2,f,c": !1,
                "2,f,d": !0
              }, a.identical(t, i), t = r({
                b: !0,
                c: !1,
                d: !0
              }, [ 1, 2 ], [ "e", "f" ]), i = {
                "b,1,e": !0,
                "c,1,e": !1,
                "d,1,e": !0,
                "b,2,f": !0,
                "c,2,f": !1,
                "d,2,f": !0
              }, a.identical(t, i), t = r(1, {
                b: !0,
                c: !1,
                d: !0
              }, 2), i = {
                "1,b,2": !0,
                "1,c,2": !1,
                "1,d,2": !0
              }, a.identical(t, i), t = r({
                b: !0,
                c: !1,
                d: !0
              }, 1, 2), i = {
                "b,1,2": !0,
                "c,1,2": !1,
                "d,1,2": !0
              }, a.identical(t, i), t = r(1, 2, {
                b: !0,
                c: !1,
                d: !0
              }), i = {
                "1,2,b": !0,
                "1,2,c": !1,
                "1,2,d": !0
              }, a.identical(t, i), t = r([ 1, 2 ], {
                b: !0
              }, "c"), i = {
                "1,b,c": !0,
                "2,b,c": !0
              }, a.identical(t, i), t = r({
                b: !0
              }, [ 1, 2 ], "c"), i = {
                "b,1,c": !0,
                "b,2,c": !0
              }, a.identical(t, i), t = r([ 1, 2 ], "c", {
                b: !0
              }), i = {
                "1,c,b": !0,
                "2,c,b": !0
              }, a.identical(t, i), t = r([ 1, 2 ], {
                b: !0,
                c: !1
              }, "d"), i = {
                "1,b,d": !0,
                "1,c,d": !1,
                "2,b,d": !0,
                "2,c,d": !1
              }, a.identical(t, i), t = r({
                b: !0,
                c: !1
              }, [ 1, 2 ], "d"), i = {
                "b,1,d": !0,
                "b,2,d": !0,
                "c,1,d": !1,
                "c,2,d": !1
              }, a.identical(t, i), t = r([ 1, 2 ], "d", {
                b: !0,
                c: !1
              }), i = {
                "1,d,b": !0,
                "1,d,c": !1,
                "2,d,b": !0,
                "2,d,c": !1
              }, a.identical(t, i), a.shouldThrowError(() => r({
                a: 1
              }, "c", {
                b: 1
              })), a.shouldThrowError(() => r([ 1 ], {
                b: !0
              }, [ "c", "d" ])), a.close("vectorizingMapKeys : 1, vectorizingArray : 1, select : 3"), 
              a.open("vectorizingMapKeys : 1, vectorizingArray : 1, vectorizingMapVals : 1, select : 1");
              var c = {
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 1,
                select: 1,
                routine: function srcRoutine2(e) {
                  return e + 1;
                }
              };
              r = e.vectorize(c), a.identical(r(1), 2), a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), 
              a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 2,
                21: 3,
                31: 4
              }), a.close("vectorizingMapKeys : 1, vectorizingArray : 1, vectorizingMapVals : 1, select : 1");
            }
            //
            ,
            /* qqq : split test routine vectorize */
            /* qqq : add tests for vectorize* routines */
            vectorizeBypassingEmpty: function vectorizeBypassingEmpty(a) {
              function srcRoutine() {
                return e.sure(arguments.length), e.longSlice(arguments);
              }
              function srcRoutine2() {
                return e.sure(arguments.length), arguments[0] + 1;
              }
              //
                            function srcRoutine3(e) {
                return e;
              }
              function srcRoutine3(e) {
                return e;
              }
              a.open("vectorizing off, bypassingEmpty:0");
              var r = e.vectorize({
                routine: srcRoutine,
                bypassingEmpty: 0,
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: 1
              });
              a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.case = "with arg";
              var n = r(1), t = [ 1 ];
              a.identical(n, t), a.close("vectorizing off, bypassingEmpty:0"), 
              //
              a.open("vectorizing off, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine,
                bypassingEmpty: 1,
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.case = "with arg", n = r(1), 
              t = [ 1 ], a.identical(n, t), a.close("vectorizing off, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine,
                bypassingEmpty: 0,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.case = "with arg", n = r(1), 
              t = [ 1 ], a.identical(n, t), a.close("vectorizingArray:1, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine,
                bypassingEmpty: 1,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.case = "with arg", 
              n = r(1), t = [ 1 ], a.identical(n, t), a.close("vectorizingArray:1, bypassingEmpty:1"), 
              //
              a.open("vectorizingMapVals:1, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 1,
                vectorizingArray: 0,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), "11"), a.identical(r([ 1, 2, 3 ]), "1,2,31"), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: 2,
                2: 3,
                3: 4
              }), a.close("vectorizingMapVals:1, bypassingEmpty:1"), 
              //
              a.open("vectorizingMapVals:1, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 0,
                vectorizingArray: 0,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), "11"), a.identical(r([ 1, 2, 3 ]), "1,2,31"), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: 2,
                2: 3,
                3: 4
              }), a.close("vectorizingMapVals:1, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 1,
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: 2,
                2: 3,
                3: 4
              }), a.close("vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:1"), 
              //
              a.open("vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 0,
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 0,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                1: 2,
                2: 3,
                3: 4
              }), a.close("vectorizingArray:1, vectorizingMapVals:1, bypassingEmpty:0"), 
              //
              a.open("vectorizingMapKeys:1, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 1,
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), "11"), a.identical(r([ 1, 2, 3 ]), "1,2,31"), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 1,
                21: 2,
                31: 3
              }), a.close("vectorizingMapKeys:1, bypassingEmpty:1"), 
              //
              a.open("vectorizingMapKeys:1, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 0,
                vectorizingArray: 0,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), "11"), a.identical(r([ 1, 2, 3 ]), "1,2,31"), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 1,
                21: 2,
                31: 3
              }), a.close("vectorizingMapKeys:1, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 1,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 1,
                21: 2,
                31: 3
              }), a.close("vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:1"), 
              //
              a.open("vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 0,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 1,
                21: 2,
                31: 3
              }), a.close("vectorizingArray:1, vectorizingMapKeys:1, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:1"), 
              r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 1,
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", n = r(), t = [], a.identical(n, t), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 2,
                21: 3,
                31: 4
              }), a.close("vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:1"), 
              //
              a.open("vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:0"), 
              r = e.vectorize({
                routine: srcRoutine2,
                bypassingEmpty: 0,
                vectorizingArray: 1,
                vectorizingMapVals: 1,
                vectorizingMapKeys: 1,
                select: 1
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), 2), 
              a.identical(r([ 1 ]), [ 2 ]), a.identical(r([ 1, 2, 3 ]), [ 2, 3, 4 ]), a.identical(r({
                1: 1,
                2: 2,
                3: 3
              }), {
                11: 2,
                21: 3,
                31: 4
              }), a.close("vectorizingArray:1, vectorizingMapKeys:1, vectorizingMapVals : 1, bypassingEmpty:0"), 
              // vectorizeForOptionsMapForKeys
              a.open("vectorizingArray:1, select : array, bypassingEmpty:0"), r = e.vectorize({
                routine: srcRoutine3,
                bypassingEmpty: 0,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: [ "0" ]
              }), a.case = "no arg", a.shouldThrowErrorSync(() => r()), a.identical(r(1), [ 1 ]), 
              a.identical(r([ 1 ]), [ [ 1 ] ]), a.identical(r([ [ 1 ] ]), [ [ {
                0: 1
              } ] ]), a.identical(r({
                0: [ 1 ]
              }), [ [ {
                0: 1
              } ] ]), a.close("vectorizingArray:1, select : array, bypassingEmpty:0"), 
              //
              a.open("vectorizingArray:1, select : array, bypassingEmpty:1"), r = e.vectorize({
                routine: srcRoutine3,
                bypassingEmpty: 1,
                vectorizingArray: 1,
                vectorizingMapVals: 0,
                vectorizingMapKeys: 0,
                select: [ "0" ]
              }), a.identical(r(), []), a.identical(r(1), [ 1 ]), a.identical(r([ 1 ]), [ [ 1 ] ]), 
              a.identical(r([ [ 1 ] ]), [ [ {
                0: 1
              } ] ]), a.identical(r({
                0: [ 1 ]
              }), [ [ {
                0: 1
              } ] ]), a.close("vectorizingArray:1, select : array, bypassingEmpty:1");
            }
          }
        };
        r = wTestSuite(r), void 0 === n || n.parent || wTester.test(r.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Routine_test_s
  function String_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/String.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file String_test_s
    function String_test_s_naked() {
      !function _String_test_s_() {
        "use strict";
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l1/String",
          silencing: 1,
          tests: {
            strLeft: 
            // --
            //
            // --
            function strLeft(a) {
              /* - */
              a.open("string"), 
              /* - */
              a.case = "begin";
              var r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", "aa");
              a.identical(n, r), a.case = "middle", r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", "bb"), a.identical(n, r), a.case = "end", 
              r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", "cc"), a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "aa", "bb" ]), a.identical(n, r), r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "bb", "aa" ]), a.identical(n, r), a.case = "middle, several entry", 
              r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "bb", "cc" ]), a.identical(n, r), r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "cc", "bb" ]), a.identical(n, r), a.case = "end, several entry", 
              r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "cc", "dd" ]), a.identical(n, r), r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ]), a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ {
                index: 12,
                entry: "cc"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ {
                index: 12,
                entry: "cc"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ]), 
              a.identical(n, r), 
              /* */
              a.case = "with window", r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -10), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -1), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -2), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 3), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 6), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 7), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 12,
                entry: "aa"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 10), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -15), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -16), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -10), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -9), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15, -12), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15, -9), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -2, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1, 7), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -15), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -16), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -10), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -9), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -12), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 2), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 7), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -15), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -16), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -10), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -9), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -12), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 7), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 8), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = {
                index: 17,
                entry: void 0
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", []), a.identical(n, r), a.case = "not found", 
              r = {
                index: 17,
                entry: void 0
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", "dd"), a.identical(n, r), a.case = "empty entry", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", ""), a.identical(n, r), a.case = "empty entry, empty src", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strLeft("", ""), a.identical(n, r), a.case = "empty src", r = {
                index: 0,
                entry: void 0
              }, n = e.strLeft("", "aa"), a.identical(n, r), 
              /* - */
              a.close("string"), a.open("regexp"), 
              /* - */
              a.case = "begin", r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", /a+/), a.identical(n, r), a.case = "middle", 
              r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", /b+/), a.identical(n, r), a.case = "end", 
              r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", /c+/), a.identical(n, r), 
              /* */
              a.case = "begin smeared", r = {
                index: 0,
                entry: "xa"
              }, n = e.strLeft("xaax_xaax_xbbx_xbbx_xccx_xccx", /\wa/), a.identical(n, r), a.case = "middle smeared", 
              r = {
                index: 10,
                entry: "xb"
              }, n = e.strLeft("xaax_xaax_xbbx_xbbx_xccx_xccx", /\wb/), a.identical(n, r), a.case = "end ", 
              r = {
                index: 20,
                entry: "xc"
              }, n = e.strLeft("xaax_xaax_xbbx_xbbx_xccx_xccx", /\wc/), a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /a+/, /b+/ ]), a.identical(n, r), r = {
                index: 0,
                entry: "aa"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /b+/, /a+/ ]), a.identical(n, r), a.case = "middle, several entry", 
              r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /b+/, /c+/ ]), a.identical(n, r), r = {
                index: 6,
                entry: "bb"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /c+/, /b+/ ]), a.identical(n, r), a.case = "end, several entry", 
              r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /c+/, /d+/ ]), a.identical(n, r), r = {
                index: 12,
                entry: "cc"
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ]), a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ {
                index: 12,
                entry: "cc"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ {
                index: 12,
                entry: "cc"
              }, {
                index: 0,
                entry: "cc"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ]), 
              a.identical(n, r), 
              /* */
              a.case = "with window, mixed", r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -17), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -15), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -10), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 16,
                entry: "a"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -1), 
              a.identical(n, r), r = [ {
                index: 17,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -2), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -17, -15), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 1,
                entry: "a"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 1, 7), 
              a.identical(n, r), r = [ {
                index: 1,
                entry: "a"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 1, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, -15), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "a"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, -16), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, 7), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 17,
                entry: void 0
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 7), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strLeft([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 8), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = {
                index: 17,
                entry: void 0
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", []), a.identical(n, r), a.case = "not found", 
              r = {
                index: 17,
                entry: void 0
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", /d+/), a.identical(n, r), a.case = "empty entry", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strLeft("aa_aa_bb_bb_cc_cc", new RegExp("")), a.identical(n, r), a.case = "empty entry, empty src", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strLeft("", new RegExp("")), a.identical(n, r), a.case = "empty src", r = {
                index: 0,
                entry: void 0
              }, n = e.strLeft("", /a+/), a.identical(n, r), 
              /* - */
              a.close("regexp"), a.open("throwing"), a.shouldThrowErrorSync(() => e.strLeft("abc", "b", -100)), 
              a.shouldThrowErrorSync(() => e.strLeft("abc", "b", 100)), a.shouldThrowErrorSync(() => e.strLeft("abc", "b", 0, -100)), 
              a.shouldThrowErrorSync(() => e.strLeft("abc", "b", 0, 100)), a.shouldThrowErrorSync(() => e.strLeft(/a/, /a+/)), 
              a.shouldThrowErrorSync(() => e.strLeft("abc", /a+/, "")), a.shouldThrowErrorSync(() => e.strLeft("abc")), 
              a.shouldThrowErrorSync(() => e.strLeft("123", 1)), a.shouldThrowErrorSync(() => e.strLeft("123", [ 1 ])), 
              a.shouldThrowErrorSync(() => e.strLeft()), a.close("throwing");
            }
            //
            ,
            strRight: function strRight(a) {
              /* - */
              a.open("string"), 
              /* - */
              a.case = "begin";
              var r = {
                index: 3,
                entry: "aa"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", "aa");
              a.identical(n, r), a.case = "middle", r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", "bb"), a.identical(n, r), a.case = "end", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", "cc"), a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "aa", "bb" ]), a.identical(n, r), r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "bb", "aa" ]), a.identical(n, r), a.case = "middle, several entry", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "bb", "cc" ]), a.identical(n, r), r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "cc", "bb" ]), a.identical(n, r), a.case = "end, several entry", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "cc", "dd" ]), a.identical(n, r), r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ]), a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 3,
                entry: "cc"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 3,
                entry: "cc"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ]), 
              a.identical(n, r), 
              /* */
              a.case = "with window", r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -10), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -1), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -2), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 3), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 6), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 7), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 10), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -15), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -16), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -10), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -17, -9), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15, -12), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -15, -9), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], -2, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 1, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -15), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -16), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -10), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -9), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, -12), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 2), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], void 0, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -15), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -16), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -10), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -9), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, -12), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 17), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], 0, 8), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", []), a.identical(n, r), a.case = "not found", 
              r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", "dd"), a.identical(n, r), a.case = "empty entry", 
              r = {
                index: 17,
                entry: ""
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", ""), a.identical(n, r), a.case = "empty entry, empty src", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strRight("", ""), a.identical(n, r), a.case = "empty src", r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("", "aa"), a.identical(n, r), 
              /* - */
              a.close("string"), a.open("regexp"), 
              /* - */
              a.case = "begin", r = {
                index: 3,
                entry: "aa"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", /a+/), a.identical(n, r), a.case = "middle", 
              r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", /b+/), a.identical(n, r), a.case = "end", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", /c+/), a.identical(n, r), 
              /* */
              a.case = "begin smeared", r = {
                index: 7,
                entry: "ax"
              }, n = e.strRight("xaax_xaax_xbbx_xbbx_xccx_xccx", /a\w/), a.identical(n, r), a.case = "middle smeared", 
              r = {
                index: 17,
                entry: "bx"
              }, n = e.strRight("xaax_xaax_xbbx_xbbx_xccx_xccx", /b\w/), a.identical(n, r), a.case = "end ", 
              r = {
                index: 27,
                entry: "cx"
              }, n = e.strRight("xaax_xaax_xbbx_xbbx_xccx_xccx", /c\w/), a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /a+/, /b+/ ]), a.identical(n, r), r = {
                index: 9,
                entry: "bb"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /b+/, /a+/ ]), a.identical(n, r), a.case = "middle, several entry", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /b+/, /c+/ ]), a.identical(n, r), r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /c+/, /b+/ ]), a.identical(n, r), a.case = "end, several entry", 
              r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /c+/, /d+/ ]), a.identical(n, r), r = {
                index: 15,
                entry: "cc"
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ]), a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 9,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 3,
                entry: "cc"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ {
                index: 15,
                entry: "cc"
              }, {
                index: 3,
                entry: "cc"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ]), 
              a.identical(n, r), 
              /* */
              a.case = "with window, mixed", r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -17), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -15), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -10), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: 16,
                entry: "a"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -1), 
              a.identical(n, r), r = [ {
                index: -1,
                entry: void 0
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -2), 
              a.identical(n, r), r = [ {
                index: 9,
                entry: "bb"
              }, {
                index: 15,
                entry: "aa"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], -17, -15), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 2), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 1, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 1, 8), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, -15), 
              a.identical(n, r), r = [ {
                index: 0,
                entry: "a"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, -16), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], void 0, 8), 
              a.identical(n, r), r = [ {
                index: 3,
                entry: "aa"
              }, {
                index: -1,
                entry: void 0
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 7), 
              a.identical(n, r), r = [ {
                index: 6,
                entry: "bb"
              }, {
                index: 6,
                entry: "bb"
              } ], n = e.strRight([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, "bb" ], 0, 8), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", []), a.identical(n, r), a.case = "not found", 
              r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", /d+/), a.identical(n, r), a.case = "empty entry", 
              r = {
                index: 17,
                entry: ""
              }, n = e.strRight("aa_aa_bb_bb_cc_cc", new RegExp("")), a.identical(n, r), a.case = "empty entry, empty src", 
              r = {
                index: 0,
                entry: ""
              }, n = e.strRight("", new RegExp("")), a.identical(n, r), a.case = "empty src", 
              r = {
                index: -1,
                entry: void 0
              }, n = e.strRight("", /a+/), a.identical(n, r), 
              /* - */
              a.close("regexp"), a.open("throwing"), a.shouldThrowErrorSync(() => e.strRight("abc", "b", -100)), 
              a.shouldThrowErrorSync(() => e.strRight("abc", "b", 100)), a.shouldThrowErrorSync(() => e.strRight("abc", "b", 0, -100)), 
              a.shouldThrowErrorSync(() => e.strRight("abc", "b", 0, 100)), a.shouldThrowErrorSync(() => e.strRight(/a/, /a+/)), 
              a.shouldThrowErrorSync(() => e.strRight("abc", /a+/, "")), a.shouldThrowErrorSync(() => e.strRight("abc")), 
              a.shouldThrowErrorSync(() => e.strRight("123", 1)), a.shouldThrowErrorSync(() => e.strRight("123", [ 1 ])), 
              a.shouldThrowErrorSync(() => e.strRight()), a.close("throwing");
            }
            //
            ,
            strEquivalent: function strEquivalent(a) {
              /* - */
              a.open("true"), a.case = "strings";
              var r = e.strEquivalent("abc", "abc");
              a.identical(r, !0), a.case = "regexp and string", r = e.strEquivalent(/\w+/, "abc"), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strEquivalent("abc", /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strEquivalent(/\w+/, /\w+/), 
              a.identical(r, !0), a.close("true"), 
              /* - */
              a.open("false"), a.case = "strings", r = e.strEquivalent("abd", "abc"), a.identical(r, !1), 
              a.case = "regexp and string", r = e.strEquivalent(/\s+/, "abc"), a.identical(r, !1), 
              a.case = "regexp and string", r = e.strEquivalent(/\w/, "abc"), a.identical(r, !1), 
              a.case = "string and regexp", r = e.strEquivalent("abc", /\s+/), a.identical(r, !1), 
              a.case = "string and regexp", r = e.strEquivalent("abc", /\w/), a.identical(r, !1), 
              a.case = "regexp and regexp", r = e.strEquivalent(/\w*/, /\w+/), a.identical(r, !1), 
              a.case = "regexp and regexp", r = e.strEquivalent(/\w+/g, /\w+/), a.identical(r, !1), 
              a.case = "regexp and regexp", r = e.strEquivalent(/\w+/g, /\w+/gi), a.identical(r, !1), 
              a.close("false");
            }
            //
            ,
            strsEquivalent: function strsEquivalent(a) {
              /* - */
              a.open("scalar, true"), a.case = "strings";
              var r = e.strsEquivalent("abc", "abc");
              a.identical(r, !0), a.case = "regexp and string", r = e.strsEquivalent(/\w+/, "abc"), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strsEquivalent("abc", /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalent(/\w+/, /\w+/), 
              a.identical(r, !0), a.close("scalar, true"), 
              /* - */
              a.open("scalar, false"), a.case = "strings", r = e.strsEquivalent("abd", "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalent(/\s+/, "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalent(/\w/, "abc"), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalent("abc", /\s+/), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalent("abc", /\w/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalent(/\w*/, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalent(/\w+/g, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalent(/\w+/g, /\w+/gi), 
              a.identical(r, !1), a.close("scalar, false"), 
              /* - */
              a.open("vector, true"), a.case = "vector, vector";
              var n = [ "abc", /\w+/, "abc", /\w+/ ], t = [ "abc", "abc", /\w+/, /\w+/ ];
              r = e.strsEquivalent(n, t), a.identical(r, [ !0, !0, !0, !0 ]), a.case = "vector, scalar", 
              n = [ "abc", /\w+/, "abc", /\w+/ ], t = "abc", r = e.strsEquivalent(n, t), a.identical(r, [ !0, !0, !0, !0 ]), 
              a.case = "scalar, vector", n = "abc", t = [ "abc", /\w+/, "abc", /\w+/ ], r = e.strsEquivalent(n, t), 
              a.identical(r, [ !0, !0, !0, !0 ]), a.close("vector, true"), 
              /* - */
              a.open("vector, false"), a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ], r = e.strsEquivalent(n, t), 
              a.identical(r, [ !1, !1, !1, !1, !1, !1, !1, !1 ]), a.case = "vector, scalar", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              t = "abc", r = e.strsEquivalent(n, t), a.identical(r, [ !1, !1, !1, !0, !0, !0, !0, !0 ]), 
              a.case = "scalar, vector", n = "abc", t = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              r = e.strsEquivalent(n, t), a.identical(r, [ !1, !1, !1, !0, !0, !0, !0, !0 ]), 
              a.close("vector, false");
            }
            //
            ,
            strsEquivalentAll: function strsEquivalentAll(a) {
              /* - */
              a.open("scalar, true"), a.case = "strings";
              var r = e.strsEquivalentAll("abc", "abc");
              a.identical(r, !0), a.case = "regexp and string", r = e.strsEquivalentAll(/\w+/, "abc"), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strsEquivalentAll("abc", /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalentAll(/\w+/, /\w+/), 
              a.identical(r, !0), a.close("scalar, true"), 
              /* - */
              a.open("scalar, false"), a.case = "strings", r = e.strsEquivalentAll("abd", "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalentAll(/\s+/, "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalentAll(/\w/, "abc"), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalentAll("abc", /\s+/), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalentAll("abc", /\w/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAll(/\w*/, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAll(/\w+/g, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAll(/\w+/g, /\w+/gi), 
              a.identical(r, !1), a.close("scalar, false"), 
              /* - */
              a.open("vectors"), a.case = "vector, vector";
              var n = [ "abc", /\w+/, "abc", /\w+/ ], t = [ "abc", "abc", /\w+/, /\w+/ ];
              r = e.strsEquivalentAll(n, t), a.identical(r, !0), a.case = "vector, scalar", n = [ "abc", /\w+/, "abc", /\w+/ ], 
              t = "abc", r = e.strsEquivalentAll(n, t), a.identical(r, !0), a.case = "scalar, vector", 
              n = "abc", t = [ "abc", /\w+/, "abc", /\w+/ ], r = e.strsEquivalentAll(n, t), a.identical(r, !0), 
              a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ], r = e.strsEquivalentAll(n, t), 
              a.identical(r, !1), a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ], r = e.strsEquivalentAll(n, t), 
              a.identical(r, !1), a.case = "vector, scalar", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              t = "abc", r = e.strsEquivalentAll(n, t), a.identical(r, !1), a.case = "vector, scalar", 
              n = [ "abd", /\s+/ ], t = "abc", r = e.strsEquivalentAll(n, t), a.identical(r, !1), 
              a.case = "vector, scalar", n = [ /\w+/g, /\w+/gi ], t = "abc", r = e.strsEquivalentAll(n, t), 
              a.identical(r, !0), a.case = "scalar, vector", n = "abc", t = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              r = e.strsEquivalentAll(n, t), a.identical(r, !1), a.case = "scalar, vector", n = "abc", 
              t = [ "abd", /\s+/ ], r = e.strsEquivalentAll(n, t), a.identical(r, !1), a.case = "scalar, vector", 
              n = "abc", t = [ /\w+/g, /\w+/gi ], r = e.strsEquivalentAll(n, t), a.identical(r, !0), 
              a.close("vectors");
            }
            //
            ,
            strsEquivalentAny: function strsEquivalentAny(a) {
              /* - */
              a.open("scalar, true"), a.case = "strings";
              var r = e.strsEquivalentAny("abc", "abc");
              a.identical(r, !0), a.case = "regexp and string", r = e.strsEquivalentAny(/\w+/, "abc"), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strsEquivalentAny("abc", /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalentAny(/\w+/, /\w+/), 
              a.identical(r, !0), a.close("scalar, true"), 
              /* - */
              a.open("scalar, false"), a.case = "strings", r = e.strsEquivalentAny("abd", "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalentAny(/\s+/, "abc"), 
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalentAny(/\w/, "abc"), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalentAny("abc", /\s+/), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalentAny("abc", /\w/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAny(/\w*/, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAny(/\w+/g, /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentAny(/\w+/g, /\w+/gi), 
              a.identical(r, !1), a.close("scalar, false"), 
              /* - */
              a.open("vectors"), a.case = "vector, vector";
              var n = [ "abc", /\w+/, "abc", /\w+/ ], t = [ "abc", "abc", /\w+/, /\w+/ ];
              r = e.strsEquivalentAny(n, t), a.identical(r, !0), a.case = "vector, scalar", n = [ "abc", /\w+/, "abc", /\w+/ ], 
              t = "abc", r = e.strsEquivalentAny(n, t), a.identical(r, !0), a.case = "scalar, vector", 
              n = "abc", t = [ "abc", /\w+/, "abc", /\w+/ ], r = e.strsEquivalentAny(n, t), a.identical(r, !0), 
              a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ], r = e.strsEquivalentAny(n, t), 
              a.identical(r, !1), a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ], r = e.strsEquivalentAny(n, t), 
              a.identical(r, !0), a.case = "vector, scalar", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              t = "abc", r = e.strsEquivalentAny(n, t), a.identical(r, !0), a.case = "vector, scalar", 
              n = [ "abd", /\s+/ ], t = "abc", r = e.strsEquivalentAny(n, t), a.identical(r, !1), 
              a.case = "vector, scalar", n = [ /\w+/g, /\w+/gi ], t = "abc", r = e.strsEquivalentAny(n, t), 
              a.identical(r, !0), a.case = "scalar, vector", n = "abc", t = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              r = e.strsEquivalentAny(n, t), a.identical(r, !0), a.case = "scalar, vector", n = "abc", 
              t = [ "abd", /\s+/ ], r = e.strsEquivalentAny(n, t), a.identical(r, !1), a.case = "scalar, vector", 
              n = "abc", t = [ /\w+/g, /\w+/gi ], r = e.strsEquivalentAny(n, t), a.identical(r, !0), 
              a.close("vectors");
            }
            //
            ,
            strsEquivalentNone: function strsEquivalentNone(a) {
              /* - */
              a.open("scalar, not true"), a.case = "strings";
              var r = e.strsEquivalentNone("abc", "abc");
              a.identical(r, !1), a.case = "regexp and string", r = e.strsEquivalentNone(/\w+/, "abc"), 
              a.identical(r, !1), a.case = "string and regexp", r = e.strsEquivalentNone("abc", /\w+/), 
              a.identical(r, !1), a.case = "regexp and regexp", r = e.strsEquivalentNone(/\w+/, /\w+/), 
              a.identical(r, !1), a.close("scalar, not true"), 
              /* - */
              a.open("scalar, not false"), a.case = "strings", r = e.strsEquivalentNone("abd", "abc"), 
              a.identical(r, !0), a.case = "regexp and string", r = e.strsEquivalentNone(/\s+/, "abc"), 
              a.identical(r, !0), a.case = "regexp and string", r = e.strsEquivalentNone(/\w/, "abc"), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strsEquivalentNone("abc", /\s+/), 
              a.identical(r, !0), a.case = "string and regexp", r = e.strsEquivalentNone("abc", /\w/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalentNone(/\w*/, /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalentNone(/\w+/g, /\w+/), 
              a.identical(r, !0), a.case = "regexp and regexp", r = e.strsEquivalentNone(/\w+/g, /\w+/gi), 
              a.identical(r, !0), a.close("scalar, not false"), 
              /* - */
              a.open("vectors"), a.case = "vector, vector";
              var n = [ "abc", /\w+/, "abc", /\w+/ ], t = [ "abc", "abc", /\w+/, /\w+/ ];
              r = e.strsEquivalentNone(n, t), a.identical(r, !1), a.case = "vector, scalar", n = [ "abc", /\w+/, "abc", /\w+/ ], 
              t = "abc", r = e.strsEquivalentNone(n, t), a.identical(r, !1), a.case = "scalar, vector", 
              n = "abc", t = [ "abc", /\w+/, "abc", /\w+/ ], r = e.strsEquivalentNone(n, t), a.identical(r, !1), 
              a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/gi ], r = e.strsEquivalentNone(n, t), 
              a.identical(r, !0), a.case = "vector, vector", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/g ], 
              t = [ "abc", "abc", "abc", /\s+/, /\w/, /\w+/, /\w+/, /\w+/g ], r = e.strsEquivalentNone(n, t), 
              a.identical(r, !1), a.case = "vector, scalar", n = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              t = "abc", r = e.strsEquivalentNone(n, t), a.identical(r, !1), a.case = "vector, scalar", 
              n = [ "abd", /\s+/ ], t = "abc", r = e.strsEquivalentNone(n, t), a.identical(r, !0), 
              a.case = "vector, scalar", n = [ /\w+/g, /\w+/gi ], t = "abc", r = e.strsEquivalentNone(n, t), 
              a.identical(r, !1), a.case = "scalar, vector", n = "abc", t = [ "abd", /\s+/, /\w/, "abc", "abc", /\w*/, /\w+/g, /\w+/gi ], 
              r = e.strsEquivalentNone(n, t), a.identical(r, !1), a.case = "scalar, vector", n = "abc", 
              t = [ "abd", /\s+/ ], r = e.strsEquivalentNone(n, t), a.identical(r, !0), a.case = "scalar, vector", 
              n = "abc", t = [ /\w+/g, /\w+/gi ], r = e.strsEquivalentNone(n, t), a.identical(r, !1), 
              a.close("vectors");
            }
            //
            ,
            strBeginOf: 
            //
            function strBeginOf(a) {
              var r, n;
              /**/              a.case = "strBeginOf", 
              /**/
              r = e.strBeginOf("abc", ""), n = "", a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", "c"), n = !1, a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", "bc"), n = !1, a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", " c"), n = !1, a.identical(r, n)
              /* end.length > src.length */ , r = e.strBeginOf("abc", "abcd"), n = !1, a.identical(r, n)
              /* same length, not equal*/ , r = e.strBeginOf("abc", "cba"), n = !1, a.identical(r, n)
              /* equal */ , r = e.strBeginOf("abc", "abc"), n = "abc", a.identical(r, n)
              /* array */ , r = e.strBeginOf("abc", []), n = !1, a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", [ "" ]), n = "", a.identical(r, n)
              /**/ , r = e.strBeginOf("abccc", [ "c", "ccc" ]), n = !1, a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", [ "a", "ab", "abc" ]), n = "a", a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", [ "x", "y", "c" ]), n = !1, a.identical(r, n)
              /**/ , r = e.strBeginOf("abc", [ "x", "y", "z" ]), n = !1, a.identical(r, n), a.shouldThrowError(() => e.strBeginOf(1, "")), 
              a.shouldThrowError(() => e.strBeginOf("abc", 1)), a.shouldThrowError(() => e.strBeginOf()), 
              a.shouldThrowError(() => e.strBeginOf(void 0, void 0)), a.shouldThrowError(() => e.strBeginOf(null, null));
            }
            //
            ,
            strEndOf: function strEndOf(a) {
              var r, n;
              //
                            a.case = "strEndOf", 
              /**/
              r = e.strEndOf("abc", ""), n = "", a.identical(r, n)
              /**/ , r = e.strEndOf("abc", "a"), n = !1, a.identical(r, n)
              /**/ , r = e.strEndOf("abc", "ab"), n = !1, a.identical(r, n)
              /**/ , r = e.strEndOf("abc", " a"), n = !1, a.identical(r, n)
              /* end.length > src.length */ , r = e.strEndOf("abc", "abcd"), n = !1, a.identical(r, n)
              /* same length */ , r = e.strEndOf("abc", "cba"), n = !1, a.identical(r, n)
              /* equal */ , r = e.strEndOf("abc", "abc"), n = "abc", a.identical(r, n)
              /* array */ , r = e.strEndOf("abc", []), n = !1, a.identical(r, n)
              /**/ , r = e.strEndOf("abc", [ "" ]), n = "", a.identical(r, n)
              /**/ , r = e.strEndOf("abccc", [ "a", "ab" ]), n = !1, a.identical(r, n)
              /**/ , r = e.strEndOf("abc", [ "ab", "abc" ]), n = "abc", a.identical(r, n)
              /**/ , r = e.strEndOf("abc", [ "x", "y", "a" ]), n = !1, a.identical(r, n)
              /**/ , r = e.strEndOf("abc", [ "x", "y", "z" ]), n = !1, a.identical(r, n), a.shouldThrowError(() => e.strEndOf(1, "")), 
              a.shouldThrowError(() => e.strEndOf("abc", 1)), a.shouldThrowError(() => e.strEndOf()), 
              a.shouldThrowError(() => e.strEndOf(void 0, void 0)), a.shouldThrowError(() => e.strEndOf(null, null));
            }
            //
            ,
            strBegins: function strBegins(a) {
              var r, n;
              //
                            a.case = "strBegins", 
              /**/
              r = e.strBegins("", ""), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("a", ""), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("a", "a"), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("a", "b"), n = !1, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", "ab"), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", "abc"), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", " a"), n = !1, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", [ "x", "y", "ab" ]), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", [ "" ]), n = !0, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", []), n = !1, a.identical(r, n), 
              /**/
              r = e.strBegins("abc", [ "1", "b", "a" ]), n = !0, a.identical(r, n), a.shouldThrowError(() => e.strBegins(1, "")), 
              a.shouldThrowError(() => e.strBegins("a", 1)), a.shouldThrowError(() => e.strBegins("abc", [ 1, "b", "a" ]));
            }
            //
            ,
            strEnds: function strEnds(a) {
              var r, n;
              //
                            a.case = "strEnds", 
              /**/
              r = e.strEnds("", ""), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("a", ""), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("a", "a"), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("a", "b"), n = !1, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", "bc"), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", "abc"), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", [ "x", "y", "bc" ]), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", [ "" ]), n = !0, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", []), n = !1, a.identical(r, n), 
              /**/
              r = e.strEnds("abc", [ "1", "b", "c" ]), n = !0, a.identical(r, n), a.shouldThrowError(() => e.strEnds(1, "")), 
              a.shouldThrowError(() => e.strEnds("a", 1));
            }
            //
            ,
            // converter
            strShort: function strShort(a) {
              a.case = "undefined";
              var r = void 0, n = "undefined", t = e.strShort(r);
              a.identical(t, n), a.case = "null", r = null, n = "null", t = e.strShort(r), a.identical(t, n), 
              a.case = "number", r = 13, n = "13", t = e.strShort(r), a.identical(t, n), a.case = "boolean", 
              r = !1, n = "false", t = e.strShort(r), a.identical(t, n), a.case = "string", r = "abc", 
              n = "abc", t = e.strShort(r), a.identical(t, n);
            }
            //
            ,
            strPrimitive: function strPrimitive(a) {
              a.case = "undefined";
              var r = void 0, n = void 0, t = e.strPrimitive(r);
              a.identical(t, n), a.case = "null", r = null, n = void 0, t = e.strPrimitive(r), 
              a.identical(t, n), a.case = "number", r = 13, n = "13", t = e.strPrimitive(r), a.identical(t, n), 
              a.case = "boolean", r = !1, n = "false", t = e.strPrimitive(r), a.identical(t, n), 
              a.case = "string", r = "abc", n = "abc", t = e.strPrimitive(r), a.identical(t, n);
            }
            //
            ,
            strIsolateLeftOrNone: function strIsolateLeftOrNone(a) {
              var r, n;
              /* - */              a.case = "single delimeter", 
              /**/
              r = e.strIsolateLeftOrNone("", ""), n = [ "", "", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("", [ "" ]), n = [ "", "", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abc", [ "" ]), n = [ "", "", "abc" ], a.identical(r, n), 
              /* empty delimeters array */
              r = e.strIsolateLeftOrNone("abca", []), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("", "a"), n = [ "", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("", [ "a" ]), n = [ "", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", "a"), n = [ "", "a", "bca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "a" ]), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* number 1 by default, no cut, just returns src */
              r = e.strIsolateLeftOrNone("abca", "d"), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /* number 1 by default, no cut, just returns src */
              r = e.strIsolateLeftOrNone("abca", [ "d" ]), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /* - */
              a.case = "single delimeter, number", r = e.strIsolateLeftOrNone("abca", "", 2), 
              n = [ "a", "", "bca" ], a.identical(r, n), 
              /* cut on second occurrence */
              r = e.strIsolateLeftOrNone("abca", "a", 2), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* cut on second occurrence */
              r = e.strIsolateLeftOrNone("abca", [ "a" ], 2), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* cut on third occurrence */
              r = e.strIsolateLeftOrNone("abcaca", "a", 3), n = [ "abcac", "a", "" ], a.identical(r, n), 
              /* cut on third occurrence */
              r = e.strIsolateLeftOrNone("abcaca", [ "a" ], 3), n = [ "abcac", "a", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abcaca", "a", 4), n = [ "abcaca", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abcaca", [ "a" ], 4), n = [ "abcaca", void 0, "" ], 
              a.identical(r, n), 
              /* - */
              a.case = "several delimeters", 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "a", "c" ]), n = [ "", "a", "bca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "c", "a" ]), n = [ "", "a", "bca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "x", "y" ]), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "x", "y", "a" ]), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* - */
              a.case = "several delimeters, number", 
              /* empty delimeters array */
              r = e.strIsolateLeftOrNone("abca", [], 2), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "a", "c" ], 2), n = [ "ab", "c", "a" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abcbc", [ "c", "a" ], 2), n = [ "ab", "c", "bc" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("cbcbc", [ "c", "a" ], 3), n = [ "cbcb", "c", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("cbcbc", [ "c", "a" ], 4), n = [ "cbcbc", void 0, "" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("jj", [ "c", "a" ], 4), n = [ "", void 0, "jj" ], a.identical(r, n), 
              /* - */
              a.case = "one of delimeters contains other", 
              /* - */
              r = e.strIsolateLeftOrNone("ab", [ "a", "ab" ]), n = [ "", "a", "b" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("ab", [ "ab", "a" ]), n = [ "", "ab", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("ab", [ "b", "ab" ]), n = [ "", "ab", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("ab", [ "ab", "b" ]), n = [ "", "ab", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("a b c", " ", 1), n = [ "a", " ", "b c" ], a.identical(r, n), 
              /* - */
              a.case = "single delimeter"
              /* cut on first appear */ , r = e.strIsolateLeftOrNone("abca", "a", 1), n = [ "", "a", "bca" ], 
              a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateLeftOrNone("jj", "a", 1), n = [ "", void 0, "jj" ], a.identical(r, n), 
              /* cut on second appear */
              r = e.strIsolateLeftOrNone("abca", "a", 2), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* 5 attempts */
              r = e.strIsolateLeftOrNone("abca", "a", 5), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /* - */
              a.case = "multiple delimeter"
              /**/ , r = e.strIsolateLeftOrNone("abca", [ "a", "c" ], 1), n = [ "", "a", "bca" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "a", "c" ], 2), n = [ "ab", "c", "a" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrNone("abca", [ "a", "c" ], 3), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateLeftOrNone("jj", [ "a", "c" ], 1), n = [ "", void 0, "jj" ], a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateLeftOrNone("jj", [ "a" ], 1), n = [ "", void 0, "jj" ], a.identical(r, n), 
              /* - */
              a.case = "options as map", 
              /**/
              r = e.strIsolateLeftOrNone({
                src: "abca",
                delimeter: "a",
                times: 1
              }), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* number option is missing */
              r = e.strIsolateLeftOrNone({
                src: "abca",
                delimeter: "a"
              }), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* - */
              a.case = "number option check", 
              /* number is zero */
              r = e.strIsolateLeftOrNone("abca", "a", 0), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /* number is negative */
              r = e.strIsolateLeftOrNone("abca", "a", -1), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /* - */
              a.open("abaaca with strings"), r = e.strIsolateLeftOrNone("abaaca", "a", 0), n = [ "", void 0, "abaaca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", "a", 1), n = [ "", "a", "baaca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", "a", 2), n = [ "ab", "a", "aca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", "a", 3), n = [ "aba", "a", "ca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", "a", 4), n = [ "abaac", "a", "" ], 
              a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", "a", 5), n = [ "abaaca", void 0, "" ], 
              a.identical(r, n), a.close("abaaca with strings"), a.open("abababa with strings"), 
              r = e.strIsolateLeftOrNone("abababa", "aba", 1), n = [ "", "aba", "baba" ], a.identical(r, n), 
              r = e.strIsolateLeftOrNone("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], a.identical(r, n), 
              r = e.strIsolateLeftOrNone("abababa", "aba", 3), n = [ "abab", "aba", "" ], a.identical(r, n), 
              r = e.strIsolateLeftOrNone("abababa", "aba", 4), n = [ "abababa", void 0, "" ], 
              a.identical(r, n), a.close("abababa with strings")
              /* - */ , a.open("abaaca with regexp"), r = e.strIsolateLeftOrNone("abaaca", /a+/, 0), 
              n = [ "", void 0, "abaaca" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", /a+/, 1), 
              n = [ "", "a", "baaca" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", /a+/, 2), 
              n = [ "ab", "aa", "ca" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", /a+/, 3), 
              n = [ "aba", "a", "ca" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", /a+/, 4), 
              n = [ "abaac", "a", "" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abaaca", /a+/, 5), 
              n = [ "abaaca", void 0, "" ], a.identical(r, n), a.close("abaaca with regexp"), 
              a.open("abababa with regexp"), r = e.strIsolateLeftOrNone("abababa", /aba/, 1), 
              n = [ "", "aba", "baba" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abababa", /aba/, 2), 
              n = [ "ab", "aba", "ba" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abababa", /aba/, 3), 
              n = [ "abab", "aba", "" ], a.identical(r, n), r = e.strIsolateLeftOrNone("abababa", /aba/, 4), 
              n = [ "abababa", void 0, "" ], a.identical(r, n), a.close("abababa with regexp")
              /* - */ , a.case = "single argument but object expected", a.shouldThrowErrorSync(function() {
                e.strIsolateLeftOrNone("abc");
              }), a.case = "invalid option", a.shouldThrowErrorSync(function() {
                e.strIsolateLeftOrNone({
                  src: "abc",
                  delimeter: "a",
                  x: "a"
                });
              }), a.case = "changing of left option not allowed", a.shouldThrowErrorSync(function() {
                e.strIsolateLeftOrNone({
                  src: "abc",
                  delimeter: "a",
                  left: 0
                });
              });
            }
            //
            ,
            strIsolateLeftOrAll: function strIsolateLeftOrAll(a) {
              var r, n;
              a.case = "cut in most left position", 
              /* nothing */
              r = e.strIsolateLeftOrAll("", "b"), n = [ "", void 0, "" ], a.identical(r, n), 
              /* nothing */
              r = e.strIsolateLeftOrAll("", ""), n = [ "", "", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrAll("appc", "p"), n = [ "a", "p", "pc" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrAll("appc", "c"), n = [ "app", "c", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrAll("appc", "a"), n = [ "", "a", "ppc" ], a.identical(r, n), 
              /**/
              r = e.strIsolateLeftOrAll("jj", "a"), n = [ "jj", void 0, "" ], a.identical(r, n), 
              /* - */
              a.open("abaaca with strings"), r = e.strIsolateLeftOrAll("abaaca", "a", 0), n = [ "", void 0, "abaaca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", "a", 1), n = [ "", "a", "baaca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", "a", 2), n = [ "ab", "a", "aca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", "a", 3), n = [ "aba", "a", "ca" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", "a", 4), n = [ "abaac", "a", "" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", "a", 5), n = [ "abaaca", void 0, "" ], 
              a.identical(r, n), a.close("abaaca with strings"), a.open("abababa with strings"), 
              r = e.strIsolateLeftOrAll("abababa", "aba", 1), n = [ "", "aba", "baba" ], a.identical(r, n), 
              r = e.strIsolateLeftOrAll("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], a.identical(r, n), 
              r = e.strIsolateLeftOrAll("abababa", "aba", 3), n = [ "abab", "aba", "" ], a.identical(r, n), 
              r = e.strIsolateLeftOrAll("abababa", "aba", 4), n = [ "abababa", void 0, "" ], a.identical(r, n), 
              a.close("abababa with strings")
              /* - */ , a.open("abaaca with regexp"), r = e.strIsolateLeftOrAll("abaaca", /a+/, 0), 
              n = [ "", void 0, "abaaca" ], a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", /a+/, 1), 
              n = [ "", "a", "baaca" ], a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", /a+/, 2), 
              n = [ "ab", "aa", "ca" ], a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", /a+/, 3), 
              n = [ "aba", "a", "ca" ], a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", /a+/, 4), 
              n = [ "abaac", "a", "" ], a.identical(r, n), r = e.strIsolateLeftOrAll("abaaca", /a+/, 5), 
              n = [ "abaaca", void 0, "" ], a.identical(r, n), a.close("abaaca with regexp"), 
              a.open("abababa with regexp"), r = e.strIsolateLeftOrAll("abababa", /aba/, 1), n = [ "", "aba", "baba" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abababa", /aba/, 2), n = [ "ab", "aba", "ba" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abababa", /aba/, 3), n = [ "abab", "aba", "" ], 
              a.identical(r, n), r = e.strIsolateLeftOrAll("abababa", /aba/, 4), n = [ "abababa", void 0, "" ], 
              a.identical(r, n), a.close("abababa with regexp")
              /* - */ , a.case = "delimeter must be a String", a.shouldThrowErrorSync(function() {
                e.strIsolateLeftOrAll("jj", 1);
              }), a.case = "source must be a String", a.shouldThrowErrorSync(function() {
                e.strIsolateLeftOrAll(1, "1");
              });
            }
            //
            ,
            strIsolateRightOrNone: function strIsolateRightOrNone(a) {
              var r, n;
              /* - */              a.case = "single delimeter", 
              /**/
              r = e.strIsolateRightOrNone("", ""), n = [ "", "", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("", [ "" ]), n = [ "", "", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrNone("abc", [ "" ]), n = [ "abc", "", "" ], a.identical(r, n), 
              /* empty delimeters array */
              r = e.strIsolateRightOrNone("abca", []), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("", "a"), n = [ "", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("", [ "a" ]), n = [ "", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", "a"), n = [ "abc", "a", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "a" ]), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* number 1 by default, no cut, just returns src */
              r = e.strIsolateRightOrNone("abca", "d"), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /* number 1 by default, no cut, just returns src */
              r = e.strIsolateRightOrNone("abca", [ "d" ]), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /* - */
              a.case = "single delimeter, number", r = e.strIsolateRightOrNone("abca", "", 2), 
              n = [ "abc", "", "a" ], a.identical(r, n), 
              /* cut on second occurrence */
              r = e.strIsolateRightOrNone("abca", "a", 2), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* cut on second occurrence */
              r = e.strIsolateRightOrNone("abca", [ "a" ], 2), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* cut on third occurrence */
              r = e.strIsolateRightOrNone("abcaca", "a", 3), n = [ "", "a", "bcaca" ], a.identical(r, n), 
              /* cut on third occurrence */
              r = e.strIsolateRightOrNone("abcaca", [ "a" ], 3), n = [ "", "a", "bcaca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abcaca", "a", 4), n = [ "", void 0, "abcaca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abcaca", [ "a" ], 4), n = [ "", void 0, "abcaca" ], 
              a.identical(r, n), 
              /* - */
              a.case = "several delimeters", 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "a", "c" ]), n = [ "abc", "a", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "c", "a" ]), n = [ "abc", "a", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "x", "y" ]), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "x", "y", "a" ]), n = [ "abc", "a", "" ], 
              a.identical(r, n), 
              /* - */
              a.case = "several delimeters, number", 
              /* empty delimeters array */
              r = e.strIsolateRightOrNone("abca", [], 2), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "a", "c" ], 1), n = [ "abc", "a", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrNone("abca", [ "a", "c" ], 2), n = [ "ab", "c", "a" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abcbc", [ "c", "a" ], 2), n = [ "ab", "c", "bc" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("cbcbc", [ "c", "a" ], 3), n = [ "", "c", "bcbc" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("cbcbc", [ "c", "a" ], 4), n = [ "", void 0, "cbcbc" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("jj", [ "c", "a" ], 4), n = [ "jj", void 0, "" ], a.identical(r, n), 
              /* - */
              a.case = "one of delimeters contains other", 
              /* - */
              r = e.strIsolateRightOrNone("ab", [ "a", "ab" ]), n = [ "", "a", "b" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("ab", [ "ab", "a" ]), n = [ "", "ab", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("ab", [ "b", "ab" ]), n = [ "a", "b", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("ab", [ "ab", "b" ]), n = [ "a", "b", "" ], a.identical(r, n), 
              /* - */
              a.case = "defaults"
              /**/ , r = e.strIsolateRightOrNone("a b c", " ", 1), n = [ "a b", " ", "c" ], a.identical(r, n), 
              /* - */
              a.case = "single delimeter"
              /* cut on first appear */ , r = e.strIsolateRightOrNone("abca", "a", 1), n = [ "abc", "a", "" ], 
              a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateRightOrNone("jj", "a", 1), n = [ "jj", void 0, "" ], a.identical(r, n), 
              /* cut on second appear */
              r = e.strIsolateRightOrNone("abca", "a", 2), n = [ "", "a", "bca" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", "a", 5), n = [ "", void 0, "abca" ], a.identical(r, n), 
              /* - */
              a.case = "multiple delimeter"
              /**/ , r = e.strIsolateRightOrNone("abca", [ "a", "c" ], 1), n = [ "abc", "a", "" ], 
              a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "a", "c" ], 2), n = [ "ab", "c", "a" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrNone("abca", [ "a", "c" ], 3), n = [ "", "a", "bca" ], a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateRightOrNone("jj", [ "a", "c" ], 1), n = [ "jj", void 0, "" ], a.identical(r, n), 
              /* no occurrences */
              r = e.strIsolateRightOrNone("jj", [ "a" ], 1), n = [ "jj", void 0, "" ], a.identical(r, n), 
              /* - */
              a.case = "options as map", 
              /**/
              r = e.strIsolateRightOrNone({
                src: "abca",
                delimeter: "a",
                times: 1
              }), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* number option is missing */
              r = e.strIsolateRightOrNone({
                src: "abca",
                delimeter: "a"
              }), n = [ "abc", "a", "" ], a.identical(r, n), 
              /* - */
              a.case = "number option check", 
              /* number is zero */
              r = e.strIsolateRightOrNone("abca", "a", 0), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /* number is negative */
              r = e.strIsolateRightOrNone("abca", "a", -1), n = [ "abca", void 0, "" ], a.identical(r, n), 
              /* */
              r = e.strIsolateRightOrNone("acbca", [ "a", "c" ], 1), n = [ "acbc", "a", "" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("acbca", [ "a", "c" ], 2), n = [ "acb", "c", "a" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abababa", "aba", 1), n = [ "abab", "aba", "" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abababa", "aba", 3), n = [ "", "aba", "baba" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abababa", "aba", 4), n = [ "", void 0, "abababa" ], 
              a.identical(r, n), 
              /* - */
              a.open("abaaca with strings"), r = e.strIsolateRightOrNone("abaaca", "a", 0), n = [ "abaaca", void 0, "" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", "a", 1), n = [ "abaac", "a", "" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", "a", 2), n = [ "aba", "a", "ca" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", "a", 3), n = [ "ab", "a", "aca" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", "a", 4), n = [ "", "a", "baaca" ], 
              a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", "a", 5), n = [ "", void 0, "abaaca" ], 
              a.identical(r, n), a.close("abaaca with strings"), a.open("abababa with strings"), 
              r = e.strIsolateRightOrNone("abababa", "aba", 1), n = [ "abab", "aba", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrNone("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], a.identical(r, n), 
              r = e.strIsolateRightOrNone("abababa", "aba", 3), n = [ "", "aba", "baba" ], a.identical(r, n), 
              r = e.strIsolateRightOrNone("abababa", "aba", 4), n = [ "", void 0, "abababa" ], 
              a.identical(r, n), a.close("abababa with strings")
              /* - */ , a.open("abaaca with regexp"), r = e.strIsolateRightOrNone("abaaca", /a+/, 0), 
              n = [ "abaaca", void 0, "" ], a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", /a+/, 1), 
              n = [ "abaac", "a", "" ], a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", /a+/, 2), 
              n = [ "ab", "aa", "ca" ], a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", /a+/, 3), 
              n = [ "ab", "a", "aca" ], a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", /a+/, 4), 
              n = [ "", "a", "baaca" ], a.identical(r, n), r = e.strIsolateRightOrNone("abaaca", /a+/, 5), 
              n = [ "", void 0, "abaaca" ], a.identical(r, n), a.close("abaaca with regexp"), 
              a.open("abababa with regexp"), r = e.strIsolateRightOrNone("abababa", /aba/, 1), 
              n = [ "abab", "aba", "" ], a.identical(r, n), r = e.strIsolateRightOrNone("abababa", /aba/, 2), 
              n = [ "ab", "aba", "ba" ], a.identical(r, n), r = e.strIsolateRightOrNone("abababa", /aba/, 3), 
              n = [ "", "aba", "baba" ], a.identical(r, n), r = e.strIsolateRightOrNone("abababa", /aba/, 4), 
              n = [ "", void 0, "abababa" ], a.identical(r, n), a.close("abababa with regexp")
              /* */ , a.case = "single argument but object expected", a.shouldThrowErrorSync(function() {
                e.strIsolateRightOrNone("abc");
              }), a.case = "invalid option", a.shouldThrowErrorSync(function() {
                e.strIsolateRightOrNone({
                  src: "abc",
                  delimeter: "a",
                  x: "a"
                });
              }), a.case = "changing of left option not allowed", a.shouldThrowErrorSync(function() {
                e.strIsolateRightOrNone({
                  src: "abc",
                  delimeter: "a",
                  left: 0
                });
              });
            }
            //
            ,
            strIsolateRightOrAll: function strIsolateRightOrAll(a) {
              var r, n;
              a.case = "cut in most right position", 
              /* nothing */
              r = e.strIsolateRightOrAll("", ""), n = [ "", "", "" ], a.identical(r, n), 
              /* nothing */
              r = e.strIsolateRightOrAll("", "b"), n = [ "", void 0, "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrAll("ahpc", "h"), n = [ "a", "h", "pc" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrAll("ahpc", "c"), n = [ "ahp", "c", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrAll("appbb", "b"), n = [ "appb", "b", "" ], a.identical(r, n), 
              /**/
              r = e.strIsolateRightOrAll("jj", "a"), n = [ "", void 0, "jj" ], a.identical(r, n), 
              /* */
              r = e.strIsolateRightOrAll("acbca", [ "a", "c" ], 1), n = [ "acbc", "a", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("acbca", [ "a", "c" ], 2), n = [ "acb", "c", "a" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 1), n = [ "abab", "aba", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 3), n = [ "", "aba", "baba" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 4), n = [ "", void 0, "abababa" ], 
              a.identical(r, n), 
              /* - */
              a.open("abaaca with strings"), r = e.strIsolateRightOrAll("abaaca", "a", 0), n = [ "abaaca", void 0, "" ], 
              a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", "a", 1), n = [ "abaac", "a", "" ], 
              a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", "a", 2), n = [ "aba", "a", "ca" ], 
              a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", "a", 3), n = [ "ab", "a", "aca" ], 
              a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", "a", 4), n = [ "", "a", "baaca" ], 
              a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", "a", 5), n = [ "", void 0, "abaaca" ], 
              a.identical(r, n), a.close("abaaca with strings"), a.open("abababa with strings"), 
              r = e.strIsolateRightOrAll("abababa", "aba", 1), n = [ "abab", "aba", "" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 2), n = [ "ab", "aba", "ba" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 3), n = [ "", "aba", "baba" ], a.identical(r, n), 
              r = e.strIsolateRightOrAll("abababa", "aba", 4), n = [ "", void 0, "abababa" ], 
              a.identical(r, n), a.close("abababa with strings")
              /* - */ , a.open("abaaca with regexp"), r = e.strIsolateRightOrAll("abaaca", /a+/, 0), 
              n = [ "abaaca", void 0, "" ], a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", /a+/, 1), 
              n = [ "abaac", "a", "" ], a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", /a+/, 2), 
              n = [ "ab", "aa", "ca" ], a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", /a+/, 3), 
              n = [ "ab", "a", "aca" ], a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", /a+/, 4), 
              n = [ "", "a", "baaca" ], a.identical(r, n), r = e.strIsolateRightOrAll("abaaca", /a+/, 5), 
              n = [ "", void 0, "abaaca" ], a.identical(r, n), a.close("abaaca with regexp"), 
              a.open("abababa with regexp"), r = e.strIsolateRightOrAll("abababa", /aba/, 1), 
              n = [ "abab", "aba", "" ], a.identical(r, n), r = e.strIsolateRightOrAll("abababa", /aba/, 2), 
              n = [ "ab", "aba", "ba" ], a.identical(r, n), r = e.strIsolateRightOrAll("abababa", /aba/, 3), 
              n = [ "", "aba", "baba" ], a.identical(r, n), r = e.strIsolateRightOrAll("abababa", /aba/, 4), 
              n = [ "", void 0, "abababa" ], a.identical(r, n), a.close("abababa with regexp")
              /* */ , a.case = "delimeter must be a String", a.shouldThrowErrorSync(function() {
                e.strIsolateRightOrAll("jj", 1);
              }), a.case = "source must be a String", a.shouldThrowErrorSync(function() {
                e.strIsolateRightOrAll(1, "1");
              });
            }
            //
            ,
            strIsolateInsideOrNone: function strIsolateInsideOrNone(a) {
              /* - */
              a.open("string"), 
              /* - */
              a.case = "begin";
              var r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "aa", "bb");
              a.identical(n, r), a.case = "middle", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "bb", "cc"), a.identical(n, r), 
              a.case = "end", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "cc", "dd"), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "cc", ""), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "aa", "bb" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "bb", "aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "bb", "cc" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "cc", "bb" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry", r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "cc", "dd" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ], [ "dd", "cc" ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ], [ "", "" ]), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "cc" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "bb" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "dd" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ], [ "dd", "cc" ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], [ "", "cc", "_cc_bb_bb_aa_aa", "", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ], [ "", "" ]), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [], []), 
              a.identical(n, r), a.case = "not found", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "dd", "dd"), 
              a.identical(n, r), a.case = "not found begin", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "dd", ""), 
              a.identical(n, r), a.case = "not found end", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "", "dd"), 
              a.identical(n, r), a.case = "empty entry", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", "", ""), a.identical(n, r), a.case = "empty entry, empty src", 
              r = [ "", "", "", "", "" ], n = e.strIsolateInsideOrNone("", "", ""), a.identical(n, r), 
              a.case = "empty src", r = void 0, n = e.strIsolateInsideOrNone("", "aa", "bb"), 
              a.identical(n, r), 
              /* - */
              a.close("string"), a.open("regexp"), 
              /* */
              a.case = "begin smeared", r = [ "x", "aa", "x_xaax_xbbx_xb", "bx", "_xccx_xccx" ], 
              n = e.strIsolateInsideOrNone("xaax_xaax_xbbx_xbbx_xccx_xccx", /a\w/, /b\w/), a.identical(n, r), 
              a.case = "middle smeared", r = [ "xaax_xaax_x", "bb", "x_xbbx_xccx_xc", "cx", "" ], 
              n = e.strIsolateInsideOrNone("xaax_xaax_xbbx_xbbx_xccx_xccx", /b\w/, /c\w/), a.identical(n, r), 
              a.case = "end smeared", r = void 0, n = e.strIsolateInsideOrNone("xaax_xaax_xbbx_xbbx_xccx_xccx", /c\w/, /d\w/), 
              a.identical(n, r), r = [ "xaax_xaax_xbbx_xbbx_x", "cc", "x_xccx", "", "" ], n = e.strIsolateInsideOrNone("xaax_xaax_xbbx_xbbx_xccx_xccx", /c\w/, new RegExp("")), 
              a.identical(n, r), a.case = "begin", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /a+/, /b+/), a.identical(n, r), 
              a.case = "middle", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /b+/, /c+/), 
              a.identical(n, r), a.case = "end", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /c+/, /d+/), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /c+/, new RegExp("")), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /a+/, /b+/ ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /b+/, /a+/ ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /b+/, /c+/ ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /c+/, /b+/ ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry", r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /c+/, /d+/ ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ], [ /d+/, /c+/ ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ], [ new RegExp(""), new RegExp("") ]), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, /b+/ ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /a+/ ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /c+/ ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /b+/ ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /d+/ ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ], [ /d+/, /c+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], [ "", "cc", "_cc_bb_bb_aa_aa", "", "" ] ], 
              n = e.strIsolateInsideOrNone([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ], [ new RegExp(""), new RegExp("") ]), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", [], []), 
              a.identical(n, r), a.case = "not found", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /d+/, /d+/), 
              a.identical(n, r), a.case = "not found begin", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", /d+/, new RegExp("")), 
              a.identical(n, r), a.case = "not found end", r = void 0, n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", new RegExp(""), /d+/), 
              a.identical(n, r), a.case = "empty entry", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrNone("aa_aa_bb_bb_cc_cc", new RegExp(""), new RegExp("")), 
              a.identical(n, r), a.case = "empty entry, empty src", r = [ "", "", "", "", "" ], 
              n = e.strIsolateInsideOrNone("", new RegExp(""), new RegExp("")), a.identical(n, r), 
              a.case = "empty src", r = void 0, n = e.strIsolateInsideOrNone("", /a+/, /b+/), 
              a.identical(n, r), 
              /* - */
              a.close("regexp"), a.shouldThrowError(() => e.strIsolateInsideOrNone()), a.shouldThrowError(() => e.strIsolateInsideOrNone("")), 
              a.shouldThrowError(() => e.strIsolateInsideOrNone("", "")), a.shouldThrowError(() => e.strIsolateInsideOrNone("", "", "", "")), 
              a.shouldThrowError(() => e.strIsolateInsideOrNone(1, "", "")), a.shouldThrowError(() => e.strIsolateInsideOrNone("123", 1, "")), 
              a.shouldThrowError(() => e.strIsolateInsideOrNone("123", "", 3));
            }
            //
            ,
            strIsolateInsideOrAll: function strIsolateInsideOrAll(a) {
              /* - */
              a.open("string"), 
              /* - */
              a.case = "begin";
              var r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "aa", "bb");
              a.identical(n, r), a.case = "middle", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "bb", "cc"), a.identical(n, r), 
              a.case = "end", r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "cc", "dd"), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "cc", ""), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "aa", "bb" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "bb", "aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "bb", "cc" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "cc", "bb" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry", r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "cc", "dd" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ], [ "dd", "cc" ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ "dd", "cc" ], [ "", "" ]), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "aa", "bb" ], [ "aa", "bb" ]), 
              a.identical(n, r), r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "aa" ], [ "bb", "aa" ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "bb", "cc" ], [ "bb", "cc" ]), 
              a.identical(n, r), r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "bb" ], [ "cc", "bb" ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "cc", "dd" ], [ "cc", "dd" ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ], [ "dd", "cc" ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], [ "", "cc", "_cc_bb_bb_aa_aa", "", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ "dd", "cc" ], [ "", "" ]), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [], []), 
              a.identical(n, r), a.case = "not found", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "dd", "dd"), a.identical(n, r), 
              a.case = "not found begin", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "dd", ""), 
              a.identical(n, r), a.case = "not found end", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "", "dd"), a.identical(n, r), a.case = "empty entry", 
              r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", "", ""), 
              a.identical(n, r), a.case = "empty entry, empty src", r = [ "", "", "", "", "" ], 
              n = e.strIsolateInsideOrAll("", "", ""), a.identical(n, r), a.case = "empty src", 
              r = [ "", "", "", "", "" ], n = e.strIsolateInsideOrAll("", "aa", "bb"), a.identical(n, r), 
              /* - */
              a.close("string"), a.open("regexp"), 
              /* */
              a.case = "begin smeared", r = [ "x", "aa", "x_xaax_xbbx_xb", "bx", "_xccx_xccx" ], 
              n = e.strIsolateInsideOrAll("xaax_xaax_xbbx_xbbx_xccx_xccx", /a\w/, /b\w/), a.identical(n, r), 
              a.case = "middle smeared", r = [ "xaax_xaax_x", "bb", "x_xbbx_xccx_xc", "cx", "" ], 
              n = e.strIsolateInsideOrAll("xaax_xaax_xbbx_xbbx_xccx_xccx", /b\w/, /c\w/), a.identical(n, r), 
              a.case = "end smeared", r = [ "xaax_xaax_xbbx_xbbx_x", "cc", "x_xccx", "", "" ], 
              n = e.strIsolateInsideOrAll("xaax_xaax_xbbx_xbbx_xccx_xccx", /c\w/, /d\w/), a.identical(n, r), 
              r = [ "xaax_xaax_xbbx_xbbx_x", "cc", "x_xccx", "", "" ], n = e.strIsolateInsideOrAll("xaax_xaax_xbbx_xbbx_xccx_xccx", /c\w/, new RegExp("")), 
              a.identical(n, r), a.case = "begin", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /a+/, /b+/), a.identical(n, r), 
              a.case = "middle", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /b+/, /c+/), 
              a.identical(n, r), a.case = "end", r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /c+/, /d+/), a.identical(n, r), 
              r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /c+/, new RegExp("")), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry", r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /a+/, /b+/ ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /b+/, /a+/ ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry", r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /b+/, /c+/ ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /c+/, /b+/ ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry", r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /c+/, /d+/ ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ], [ /d+/, /c+/ ]), 
              a.identical(n, r), r = [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [ /d+/, /c+/ ], [ new RegExp(""), new RegExp("") ]), 
              a.identical(n, r), 
              /* */
              a.case = "begin, several entry, several sources", r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /a+/, /b+/ ], [ /a+/, /b+/ ]), 
              a.identical(n, r), r = [ [ "", "aa", "_aa_bb_", "bb", "_cc_cc" ], [ "cc_cc_", "bb", "_bb_aa_", "aa", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /a+/ ], [ /b+/, /a+/ ]), 
              a.identical(n, r), a.case = "middle, several entry, several sources", r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /b+/, /c+/ ], [ /b+/, /c+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_", "bb", "_bb_cc_", "cc", "" ], [ "", "cc", "_cc_bb_", "bb", "_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /b+/ ], [ /c+/, /b+/ ]), 
              a.identical(n, r), a.case = "end, several entry, several sources", r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /c+/, /d+/ ], [ /c+/, /d+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_", "cc", "" ], [ "", "cc", "_", "cc", "_bb_bb_aa_aa" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ], [ /d+/, /c+/ ]), 
              a.identical(n, r), r = [ [ "aa_aa_bb_bb_", "cc", "_cc", "", "" ], [ "", "cc", "_cc_bb_bb_aa_aa", "", "" ] ], 
              n = e.strIsolateInsideOrAll([ "aa_aa_bb_bb_cc_cc", "cc_cc_bb_bb_aa_aa" ], [ /d+/, /c+/ ], [ new RegExp(""), new RegExp("") ]), 
              a.identical(n, r), 
              /* */
              a.case = "no entry", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", [], []), 
              a.identical(n, r), a.case = "not found", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /d+/, /d+/), a.identical(n, r), 
              a.case = "not found begin", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", /d+/, new RegExp("")), 
              a.identical(n, r), a.case = "not found end", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], 
              n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", new RegExp(""), /d+/), a.identical(n, r), 
              a.case = "empty entry", r = [ "", "", "aa_aa_bb_bb_cc_cc", "", "" ], n = e.strIsolateInsideOrAll("aa_aa_bb_bb_cc_cc", new RegExp(""), new RegExp("")), 
              a.identical(n, r), a.case = "empty entry, empty src", r = [ "", "", "", "", "" ], 
              n = e.strIsolateInsideOrAll("", new RegExp(""), new RegExp("")), a.identical(n, r), 
              a.case = "empty src", r = [ "", "", "", "", "" ], n = e.strIsolateInsideOrAll("", /a+/, /b+/), 
              a.identical(n, r), 
              /* - */
              a.close("regexp"), a.shouldThrowError(() => e.strIsolateInsideOrAll()), a.shouldThrowError(() => e.strIsolateInsideOrAll("")), 
              a.shouldThrowError(() => e.strIsolateInsideOrAll("", "")), a.shouldThrowError(() => e.strIsolateInsideOrAll("", "", "", "")), 
              a.shouldThrowError(() => e.strIsolateInsideOrAll(1, "", "")), a.shouldThrowError(() => e.strIsolateInsideOrAll("123", 1, "")), 
              a.shouldThrowError(() => e.strIsolateInsideOrAll("123", "", 3));
            }
          }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file String_test_s
  function Time_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Time.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Time_test_s
    function Time_test_s_naked() {
      !function _Time_test_s_() {
        "use strict";
        void 0 !== n && t("../Layer2.s").include("wTesting");
        var e = wTools, a = {
          name: "Tools/base/l1/Time",
          silencing: 1,
          tests: {
            timeReadyJoin: 
            // --
            // tests
            // --
            function timeReadyJoin(a) {
              function r1() {
                return r += 1, console.log(arguments), 1 === r ? a.equivalent(arguments, [ "arg1", "arg2" ]) : 2 === r ? a.equivalent(arguments, [ "arg1", "arg3", "arg4" ]) : 3 === r ? a.equivalent(arguments, [ "arg5", "arg6", "arg7", "arg8" ]) : 4 === r && a.equivalent(arguments, [ "arg5", "arg6", "arg9" ]), 
                4 === r && n.take(r), arguments;
              }
              let r = 0, n = _testerGlobal_.wTools.Consequence(), t = e.timeReadyJoin(void 0, r1, [ "arg1" ]);
              t("arg2"), t("arg3", "arg4");
              let i = e.timeReadyJoin(void 0, r1, [ "arg5", "arg6" ]);
              return i("arg7", "arg8"), i("arg9"), n;
            }
            // --
            // declare
            // --
                    }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Time_test_s
  function Typing_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l1.test/Typing.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l1.test/"), n = _starter_._fileCreate(e, r, // == begin of file Typing_test_s
    function Typing_test_s_naked() {
      !function _Typing_test_s_() {
        "use strict";
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l1/Typing",
          silencing: 1,
          tests: {
            objectLike: 
            //
            function objectLike(a) {
              debugger;
              a.description = "array-like entities should not overlap with array-like entities set", 
              a.identical(e.objectLike(new ArrayBuffer(10)), !1), a.identical(e.objectLike(new Float32Array(10)), !1), 
              a.identical(e.objectLike(new Int32Array(10)), !1), a.identical(e.objectLike(new DataView(new ArrayBuffer(10))), !1), 
              a.identical(e.objectLike(new Array(10)), !1), a.identical(e.objectLike([ 1, 2, 3 ]), !1), 
              a.identical(e.objectLike(new Map()), !1), a.description = "this entities are object-like", 
              a.identical(e.objectLike(_global_), !0), a.identical(e.objectLike(new Object()), !0), 
              a.identical(e.objectLike({}), !0), a.identical(e.objectLike(Object.create(null)), !0);
              debugger;
            }
            //
            ,
            promiseIs: function promiseIs(a) {
              a.case = "check if entity is a Promise", a.is(!e.promiseIs()), a.is(!e.promiseIs({})), 
              a.is(!e.promiseIs(new function Promise() {}())), a.is(e.promiseIs(Promise.resolve(0)));
              var r = new Promise((e, a) => {
                e(0);
              });
              a.is(e.promiseIs(r));
            }
            //
            ,
            consequenceLike: function consequenceLike(a) {
              if (a.case = "check if entity is a consequenceLike", !e.consequenceLike) return a.identical(!0, !0);
              a.is(!e.consequenceLike()), a.is(!e.consequenceLike({})), a.is(e.consequenceLike(Promise.resolve(0)));
              var r = new Promise((e, a) => {
                e(0);
              });
              a.is(e.consequenceLike(r));
            }
            //
                    }
        };
        //
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file Typing_test_s
  function StringTools_test_s() {
    let e = _starter_._pathResolve(a, "dwtools/abase/l2.test/StringTools.test.s"), r = _starter_._pathResolve(a, "dwtools/abase/l2.test/"), n = _starter_._fileCreate(e, r, // == begin of file StringTools_test_s
    function StringTools_test_s_naked() {
      !function _StringTools_test_s_() {
        "use strict";
        void 0 !== n && t("../Layer2.s").include("wTesting"), _global_;
        var e = _global_.wTools, a = {
          name: "Tools/base/l2/String",
          silencing: 1,
          enabled: 1,
          tests: {
            strRemoveBegin: 
            // --
            //
            // --
            function strRemoveBegin(a) {
              /* - */
              a.case = "returns string with removed occurrence from start";
              var r = e.strRemoveBegin("example", "exa"), n = "mple";
              a.identical(r, n), a.case = "returns original if no occurrence found", r = e.strRemoveBegin("mple", "exa"), 
              n = "mple", a.identical(r, n), a.case = "returns original if occurence is not at the beginning", 
              r = e.strRemoveBegin("example", "ple"), n = "example", a.identical(r, n), 
              /* - */
              a.case = "other", 
              /**/
              r = e.strRemoveBegin("", ""), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("", "x"), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", "a"), n = "bc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", "ab"), n = "c", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", "x"), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", "abc"), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", ""), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", [ "a", "b", "c" ]), n = "bc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", [ "b", "c", "a" ]), n = "bc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("aabbcc", [ "a", "b", "c" ]), n = "abbcc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abcabc", [ "a", "b", "c" ]), n = "bcabc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", [ "", "a" ]), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("abc", [ "abc", "a" ]), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "abc", "bca", "cab" ], [ "a", "d" ]), n = [ "bc", "bca", "cab" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "abc", "bca", "cab" ], [ "a", "b", "c" ]), n = [ "bc", "ca", "ab" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "abcabc", "bcabca", "cabcab" ], [ "a", "b", "c" ]), n = [ "bcabc", "cabca", "abcab" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "abcabc", "bcabca", "cabcab" ], [ "b", "c", "a" ]), n = [ "bcabc", "cabca", "abcab" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "a", "b", "c" ], [ "x" ]), n = [ "a", "b", "c" ], a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "a", "b", "c" ], [ "a", "b", "c" ]), n = [ "", "", "" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "a", "b", "c" ], []), n = [ "a", "b", "c" ], a.identical(r, n), 
              /* - */
              a.case = "RegExp", 
              /**/
              r = e.strRemoveBegin("example", /ex/), n = "ample", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "example", "examplex" ], /ex\z/), n = [ "example", "examplex" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin([ "example", "1example", "example2", "exam3ple" ], /\d/), n = [ "example", "example", "example2", "exam3ple" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("example", [ /am/ ]), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("example", [ /ex/, /\w/ ]), n = "ample", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("example", [ /\w/, /ex/ ]), n = "xample", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("example", /[axe]/), n = "xample", a.identical(r, n), 
              /**/
              r = e.strRemoveBegin("example", /\w{4}/), n = "ple", a.identical(r, n), a.shouldThrowError(() => e.strRemoveBegin(1, "")), 
              a.shouldThrowError(() => e.strRemoveBegin("a", 1)), a.shouldThrowError(() => e.strRemoveBegin()), 
              a.shouldThrowError(() => e.strRemoveBegin(void 0, void 0)), a.shouldThrowError(() => e.strRemoveBegin(null, null)), 
              a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strRemoveBegin("abcd", "a", "a");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strRemoveBegin();
              }), a.case = "first argument is wrong", a.shouldThrowError(function() {
                e.strRemoveBegin(1, "2");
              }), a.case = "second argument is wrong", a.shouldThrowError(function() {
                e.strRemoveBegin("1", 2);
              }), a.case = "second argument is array with wrong element", a.shouldThrowError(function() {
                e.strRemoveBegin("1", [ " a", 2 ]);
              });
            }
            //
            ,
            strRemoveEnd: function strRemoveEnd(a) {
              a.case = "returns string with removed occurrence from end";
              var r = e.strRemoveEnd("example", "mple"), n = "exa";
              a.identical(r, n), a.case = "returns original if no occurrence found ", r = e.strRemoveEnd("example", ""), 
              n = "example", a.identical(r, n), a.case = "returns original if occurrence is not at the end ", 
              r = e.strRemoveEnd("example", "exa"), n = "example", a.identical(r, n), 
              /* - */
              a.case = "other", 
              /**/
              r = e.strRemoveEnd("", ""), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("", "x"), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", "c"), n = "ab", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", "bc"), n = "a", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", "x"), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", "abc"), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", ""), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", [ "a", "b", "c" ]), n = "ab", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", [ "", "a" ]), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", [ "", "c" ]), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("abc", [ "abc", "a" ]), n = "", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "abc", "bca", "cab" ], [ "a", "d" ]), n = [ "abc", "bc", "cab" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "abc", "bca", "cab" ], [ "a", "b", "c" ]), n = [ "ab", "bc", "ca" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "a", "b", "c" ], [ "x" ]), n = [ "a", "b", "c" ], a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "a", "b", "c" ], [ "a", "b", "c" ]), n = [ "", "", "" ], a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "a", "b", "c" ], []), n = [ "a", "b", "c" ], a.identical(r, n), 
              /* - */
              a.case = "RegExp", 
              /**/
              r = e.strRemoveEnd("example", /ple/), n = "exam", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /le$/), n = "examp", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /^le/), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /\d/), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /am/), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /[axe]/), n = "exampl", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd("example", /\w{4}/), n = "exa", a.identical(r, n), 
              /**/
              r = e.strRemoveEnd([ "example", "1example", "example2", "exam3ple" ], [ /\d/, /e/, /^3/ ]), 
              n = [ "exampl", "1exampl", "example", "exam3pl" ], a.identical(r, n), a.shouldThrowError(() => e.strRemoveEnd(1, "")), 
              a.shouldThrowError(() => e.strRemoveEnd("a", 1)), a.shouldThrowError(() => e.strRemoveEnd()), 
              a.shouldThrowError(() => e.strRemoveEnd(void 0, void 0)), a.shouldThrowError(() => e.strRemoveEnd(null, null)), 
              a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strRemoveEnd("one", "two", "three");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strRemoveEnd();
              }), a.case = "first argument is wrong", a.shouldThrowError(function() {
                e.strRemoveEnd(1, "second");
              }), a.case = "second argument is wrong", a.shouldThrowError(function() {
                e.strRemoveEnd("first", 2);
              });
            }
            //
            ,
            strRemove: function strRemove(a) {
              a.case = "returns string with removed occurrence at the beggining";
              var r = e.strRemove("One example", "On"), n = "e example";
              a.identical(r, n), a.case = "returns string with removed occurrence at the end", 
              r = e.strRemove("One example", "ple"), n = "One exam", a.identical(r, n), a.case = "returns string with removed occurrence in the middle", 
              r = e.strRemove("One example", "ne examp"), n = "Ole", a.identical(r, n), a.case = "returns string with removed first occurrence", 
              r = e.strRemove("One example", "e"), n = "On example", a.identical(r, n), a.case = "returns original if no occurrence found ", 
              r = e.strRemove("example", "y"), n = "example", a.identical(r, n), a.case = "returns original if no occurrence found ", 
              r = e.strRemove("example", "ma"), n = "example", a.identical(r, n), 
              /* - */
              a.case = "other", 
              /**/
              r = e.strRemove("", ""), n = "", a.identical(r, n), 
              /**/
              r = e.strRemove("", "x"), n = "", a.identical(r, n), 
              /**/
              r = e.strRemove("cacbc", "c"), n = "acbc", a.identical(r, n), 
              /**/
              r = e.strRemove("abca", "bc"), n = "aa", a.identical(r, n), 
              /**/
              r = e.strRemove("abc", "x"), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemove("abcabc", "abc"), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemove("abc", ""), n = "abc", a.identical(r, n), 
              /**/
              r = e.strRemove("abc", [ "a", "b", "c" ]), n = "", a.identical(r, n), 
              /**/
              r = e.strRemove("bcabca", [ "", "a" ]), n = "bcbca", a.identical(r, n), 
              /**/
              r = e.strRemove("abc", [ "abc", "a" ]), n = "", a.identical(r, n), 
              /**/
              r = e.strRemove([ "abc", "bca", "cab" ], [ "a", "d" ]), n = [ "bc", "bc", "cb" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemove([ "abc", "bca", "cab" ], [ "a", "b", "c" ]), n = [ "", "", "" ], 
              a.identical(r, n), 
              /**/
              r = e.strRemove([ "a", "b", "c" ], [ "x" ]), n = [ "a", "b", "c" ], a.identical(r, n), 
              /**/
              r = e.strRemove([ "a", "b", "c" ], []), n = [ "a", "b", "c" ], a.identical(r, n), 
              /* - */
              a.case = "RegExp", 
              /**/
              r = e.strRemove("One example", /e/), n = "On example", a.identical(r, n), 
              /**/
              r = e.strRemove("le example", /le$/), n = "le examp", a.identical(r, n), 
              /**/
              r = e.strRemove("example", /^le/), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemove("example", /\d/), n = "example", a.identical(r, n), 
              /**/
              r = e.strRemove("ex1am2pl3e4", /\d/), n = "exam2pl3e4", a.identical(r, n), 
              /**/
              r = e.strRemove("example", /[axe]/), n = "xample", a.identical(r, n), 
              /**/
              r = e.strRemove("example", /[a-z]/), n = "xample", a.identical(r, n), 
              /**/
              r = e.strRemove([ "example", "1example", "example2", "xam3ple" ], [ /\d/, /e/, /^3/ ]), 
              n = [ "xample", "xample", "xample", "xampl" ], a.identical(r, n), a.shouldThrowError(() => e.strRemove(1, "")), 
              a.shouldThrowError(() => e.strRemove("a", 1)), a.shouldThrowError(() => e.strRemove()), 
              a.shouldThrowError(() => e.strRemove(void 0, void 0)), a.shouldThrowError(() => e.strRemove(null, null)), 
              a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strRemove("one", "two", "three");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strRemove();
              }), a.case = "first argument is wrong", a.shouldThrowError(function() {
                e.strRemove(1, "second");
              }), a.case = "second argument is wrong", a.shouldThrowError(function() {
                e.strRemove("first", 2);
              });
            }
            //
            ,
            strReplaceBegin: function strReplaceBegin(a) {
              /**/
              var r, n;
              r = e.strReplaceBegin("", "", ""), n = "", a.identical(r, n), r = e.strReplaceBegin("", "", "a"), 
              n = "a", a.identical(r, n), r = e.strReplaceBegin("a", "a", "b"), n = "b", a.identical(r, n), 
              r = e.strReplaceBegin("a", "x", "b"), n = "a", a.identical(r, n), r = e.strReplaceBegin("abc", "ab", "c"), 
              n = "cc", a.identical(r, n), r = e.strReplaceBegin("abc", "", "c"), n = "cabc", 
              a.identical(r, n), r = e.strReplaceBegin([], "", ""), n = [], a.identical(r, n), 
              r = e.strReplaceBegin([ "a", "b", "c" ], "a", "c"), n = [ "c", "b", "c" ], a.identical(r, n), 
              r = e.strReplaceBegin([ "a", "b", "c" ], [ "a", "b", "c" ], "c"), n = [ "c", "c", "c" ], 
              a.identical(r, n), r = e.strReplaceBegin([ "a", "b", "c" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "x", "y", "z" ], a.identical(r, n), r = e.strReplaceBegin([ "aa", "bb", "cc" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "xa", "yb", "zc" ], a.identical(r, n), r = e.strReplaceBegin([ "aa", "bb", "cc" ], [ "y", "z", "c" ], [ "x", "y", "z" ]), 
              n = [ "aa", "bb", "zc" ], a.identical(r, n), r = e.strReplaceBegin([ "a", "b", "c" ], [ "x", "y", "z" ], "c"), 
              n = [ "a", "b", "c" ], a.identical(r, n), r = e.strReplaceBegin([ "a", "ab", "ac" ], "a", [ "x", "y", "z" ]), 
              n = [ "x", "xb", "xc" ], a.identical(r, n), /* - */
              /**/
              a.case = "RegExp", 
              /**/
              r = e.strReplaceBegin("example", /exa/, "si"), n = "simple", a.identical(r, n), 
              r = e.strReplaceBegin("example", /ex$/, "no"), n = "example", a.identical(r, n), 
              r = e.strReplaceBegin([ "example", "lexical" ], [ /^le/, /ex$/, /\w{3}/ ], [ "a", "b", "si" ]), 
              n = [ "simple", "axical" ], a.identical(r, n), r = e.strReplaceBegin([ "example", "lexical" ], [ /^le/, /ex$/, /\w{3}/ ], "si"), 
              n = [ "simple", "sixical" ], a.identical(r, n), r = e.strReplaceBegin([ "example1", "3example", "exam4ple" ], /\d/, "2"), 
              n = [ "example1", "2example", "exam4ple" ], a.identical(r, n), r = e.strReplaceBegin([ "example", "1example", "example2", "exam3ple" ], [ /\d/, /e/, /^3/ ], [ "3", "2", "1" ]), 
              n = [ "2xample", "3example", "2xample2", "2xam3ple" ], a.identical(r, n), 
              /**/
              a.case = "Null", 
              /**/
              r = e.strReplaceBegin(null, /exa/, "si"), n = [], a.identical(r, n), r = e.strReplaceBegin("example", null, "no"), 
              n = "example", a.identical(r, n), a.shouldThrowError(() => e.strReplaceBegin()), 
              a.shouldThrowError(() => e.strReplaceBegin(1, "", "")), a.shouldThrowError(() => e.strReplaceBegin("")), 
              a.shouldThrowError(() => e.strReplaceBegin(1, "", "", "")), a.shouldThrowError(() => e.strReplaceBegin("a", 1, "")), 
              a.shouldThrowError(() => e.strReplaceBegin("a", "a", 1)), a.shouldThrowError(() => e.strReplaceBegin("a", [ "x", 1 ], "a")), 
              a.shouldThrowError(() => e.strReplaceBegin("a", [ "b", "a" ], [ "x", 1 ])), a.shouldThrowError(() => e.strReplaceBegin("a", [ "a" ], [ "x", "1" ])), 
              a.shouldThrowError(() => e.strReplaceBegin("string", "begin", null)), a.shouldThrowError(() => e.strReplaceBegin("string", "begin", void 0)), 
              a.shouldThrowError(() => e.strReplaceBegin("string", void 0, "ins")), a.shouldThrowError(() => e.strReplaceBegin(void 0, "begin", "ins"));
            }
            //
            ,
            strReplaceEnd: function strReplaceEnd(a) {
              /**/
              var r, n;
              r = e.strReplaceEnd("", "", ""), n = "", a.identical(r, n), r = e.strReplaceEnd("", "", "a"), 
              n = "a", a.identical(r, n), r = e.strReplaceEnd("a", "a", "b"), n = "b", a.identical(r, n), 
              r = e.strReplaceEnd("a", "x", "b"), n = "a", a.identical(r, n), r = e.strReplaceEnd("abc", "bc", "c"), 
              n = "ac", a.identical(r, n), r = e.strReplaceEnd("abc", "", "c"), n = "abcc", a.identical(r, n), 
              r = e.strReplaceEnd([], "", ""), n = [], a.identical(r, n), r = e.strReplaceEnd([ "a", "b", "c" ], "a", "c"), 
              n = [ "c", "b", "c" ], a.identical(r, n), r = e.strReplaceEnd([ "a", "b", "c" ], [ "a", "b", "c" ], "c"), 
              n = [ "c", "c", "c" ], a.identical(r, n), r = e.strReplaceEnd([ "a", "b", "c" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "x", "y", "z" ], a.identical(r, n), r = e.strReplaceEnd([ "aa", "bb", "cc" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "ax", "by", "cz" ], a.identical(r, n), r = e.strReplaceEnd([ "aa", "bb", "cc" ], [ "y", "z", "c" ], [ "x", "y", "z" ]), 
              n = [ "aa", "bb", "cz" ], a.identical(r, n), r = e.strReplaceEnd([ "a", "b", "c" ], [ "x", "y", "z" ], "c"), 
              n = [ "a", "b", "c" ], a.identical(r, n), r = e.strReplaceEnd([ "a", "ab", "ca" ], "a", [ "x", "y", "z" ]), 
              n = [ "x", "ab", "cx" ], a.identical(r, n), 
              /**/
              a.case = "RegExp", 
              /**/
              r = e.strReplaceEnd("example", /ple/, "en"), n = "examen", a.identical(r, n), r = e.strReplaceEnd("example", /^le/, "no"), 
              n = "example", a.identical(r, n), r = e.strReplaceEnd([ "example", "lexical" ], [ /^le/, /ex$/, /\w{3}/ ], [ "a", "b", "en" ]), 
              n = [ "examen", "lexien" ], a.identical(r, n), r = e.strReplaceEnd([ "example", "lexical" ], [ /al$/, /ex$/, /\w{3}/ ], "en"), 
              n = [ "examen", "lexien" ], a.identical(r, n), r = e.strReplaceEnd([ "example1", "3example", "exam4ple" ], /\d/, "2"), 
              n = [ "example2", "3example", "exam4ple" ], a.identical(r, n), r = e.strReplaceEnd([ "example", "1example", "example2", "exam2ple" ], [ /\d/, /e/, /^3/ ], [ "3", "2", "1" ]), 
              n = [ "exampl2", "1exampl2", "example3", "exam2pl2" ], a.identical(r, n), 
              /**/
              a.case = "Null", 
              /**/
              r = e.strReplaceEnd(null, /le/, "si"), n = [], a.identical(r, n), r = e.strReplaceEnd("example", null, "no"), 
              n = "example", a.identical(r, n), a.shouldThrowError(() => e.strReplaceEnd()), a.shouldThrowError(() => e.strReplaceEnd(1, "", "")), 
              a.shouldThrowError(() => e.strReplaceEnd("")), a.shouldThrowError(() => e.strReplaceEnd(1, "", "", "")), 
              a.shouldThrowError(() => e.strReplaceEnd("a", 1, "")), a.shouldThrowError(() => e.strReplaceEnd("a", "a", 1)), 
              a.shouldThrowError(() => e.strReplaceEnd("a", [ "x", 1 ], "a")), a.shouldThrowError(() => e.strReplaceEnd("a", [ "a" ], [ 1 ])), 
              a.shouldThrowError(() => e.strReplaceEnd("a", [ "b", "c" ], [ "c" ])), a.shouldThrowError(() => e.strReplaceEnd("string", "end", null)), 
              a.shouldThrowError(() => e.strReplaceEnd("string", "end", void 0)), a.shouldThrowError(() => e.strReplaceEnd("string", void 0, "ins")), 
              a.shouldThrowError(() => e.strReplaceEnd(void 0, "end", "ins"));
            }
            //
            ,
            strReplace: function strReplace(a) {
              /**/
              var r, n;
              r = e.strReplace("", "", ""), n = "", a.identical(r, n), r = e.strReplace("", "", "a"), 
              n = "a", a.identical(r, n), r = e.strReplace("a", "a", "b"), n = "b", a.identical(r, n), 
              r = e.strReplace("a", "x", "b"), n = "a", a.identical(r, n), r = e.strReplace("bcabcabc", "bc", "c"), 
              n = "cabcabc", a.identical(r, n), r = e.strReplace([], "", ""), n = [], a.identical(r, n), 
              r = e.strReplace([ "aaa", "ba", "c" ], "a", "c"), n = [ "caa", "bc", "c" ], a.identical(r, n), 
              r = e.strReplace([ "abc", "cab", "cba" ], [ "a", "b", "c" ], [ "c", "c", "c" ]), 
              n = [ "ccc", "ccc", "ccc" ], a.identical(r, n), r = e.strReplace([ "a", "b", "c" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "x", "y", "z" ], a.identical(r, n), r = e.strReplace([ "ab", "bc", "ca" ], [ "a", "b", "c" ], [ "x", "y", "z" ]), 
              n = [ "xy", "yz", "zx" ], a.identical(r, n), r = e.strReplace([ "aa", "bb", "cc" ], [ "y", "z", "c" ], [ "x", "y", "z" ]), 
              n = [ "aa", "bb", "zc" ], a.identical(r, n), r = e.strReplace([ "a", "b", "c" ], [ "x", "y", "z" ], [ "1", "2", "3" ]), 
              n = [ "a", "b", "c" ], a.identical(r, n), r = e.strReplace([ "a", "bab", "ca" ], "a", "x"), 
              n = [ "x", "bxb", "cx" ], a.identical(r, n), 
              /**/
              a.case = "RegExp", 
              /**/
              r = e.strReplace("example", /ple/, "en"), n = "examen", a.identical(r, n), r = e.strReplace("example", /^le/, "no"), 
              n = "example", a.identical(r, n), r = e.strReplace([ "example", "lex11ical" ], [ /^le/, /ex$/, /\d{2}/ ], [ "a", "b", "en" ]), 
              n = [ "example", "axenical" ], a.identical(r, n), r = e.strReplace([ "example", "lexical" ], [ /al$/, /^ex/ ], [ "1", "2" ]), 
              n = [ "2ample", "lexic1" ], a.identical(r, n), r = e.strReplace([ "example1", "3example", "exam4ple" ], /\d/, "2"), 
              n = [ "example2", "2example", "exam2ple" ], a.identical(r, n), r = e.strReplace([ "3example", "1example", "example2", "exam2ple" ], [ /\d/, /e/, /^3/ ], [ "3", "2", "1" ]), 
              n = [ "12xample", "12xample", "2xample3", "2xam3ple" ], a.identical(r, n), a.shouldThrowError(() => e.strReplace()), 
              a.shouldThrowError(() => e.strReplace(1, "", "")), a.shouldThrowError(() => e.strReplace("")), 
              a.shouldThrowError(() => e.strReplace(1, "", "", "")), a.shouldThrowError(() => e.strReplace("a", 1, "")), 
              a.shouldThrowError(() => e.strReplace("a", "a", 1)), a.shouldThrowError(() => e.strReplace("a", [ "x", 1 ], "a")), 
              a.shouldThrowError(() => e.strReplace("a", [ "a" ], [ 1 ])), a.shouldThrowError(() => e.strReplace("a", [ "b", "c" ], [ "c" ])), 
              a.shouldThrowError(() => e.strReplace("string", "sub", null)), a.shouldThrowError(() => e.strReplace("string", "sub", void 0)), 
              a.shouldThrowError(() => e.strReplace("string", null, "ins")), a.shouldThrowError(() => e.strReplace("string", void 0, "ins")), 
              a.shouldThrowError(() => e.strReplace(null, "sub", "ins")), a.shouldThrowError(() => e.strReplace(void 0, "sub", "ins"));
            }
            //
            ,
            strPrependOnce: function strPrependOnce(a) {
              var r, n;
              /* - */              a.case = "strPrependOnce", 
              /**/
              r = e.strPrependOnce("", ""), n = "", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("", "a"), n = "a", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("ab", "a"), n = "ab", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("ab", "ab"), n = "ab", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("ab", "x"), n = "xab", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("ab", ""), n = "ab", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("morning", "Good "), n = "Good morning", a.identical(r, n), 
              /**/
              r = e.strPrependOnce("Good morning", "Good "), n = "Good morning", a.identical(r, n), 
              a.shouldThrowError(() => e.strPrependOnce()), a.shouldThrowError(() => e.strPrependOnce(null, "")), 
              a.shouldThrowError(() => e.strPrependOnce("", null)), a.shouldThrowError(() => e.strPrependOnce(NaN, "")), 
              a.shouldThrowError(() => e.strPrependOnce("", NaN)), a.shouldThrowError(() => e.strPrependOnce(3, "")), 
              a.shouldThrowError(() => e.strPrependOnce("", 3)), a.shouldThrowError(() => e.strPrependOnce([], "")), 
              a.shouldThrowError(() => e.strPrependOnce("", []));
            }
            //
            ,
            strAppendOnce: function strAppendOnce(a) {
              var r, n;
              /* - */              a.case = "strAppendOnce", 
              /**/
              r = e.strAppendOnce("", ""), n = "", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("", "a"), n = "a", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("ab", "a"), n = "aba", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("ab", "ab"), n = "ab", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("ab", "x"), n = "abx", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("ab", ""), n = "ab", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("Good ", "morning"), n = "Good morning", a.identical(r, n), 
              /**/
              r = e.strAppendOnce("Good morning", "morning"), n = "Good morning", a.identical(r, n), 
              a.shouldThrowError(() => e.strAppendOnce()), a.shouldThrowError(() => e.strAppendOnce(null, "")), 
              a.shouldThrowError(() => e.strAppendOnce("", null)), a.shouldThrowError(() => e.strAppendOnce(NaN, "")), 
              a.shouldThrowError(() => e.strAppendOnce("", NaN)), a.shouldThrowError(() => e.strAppendOnce(3, "")), 
              a.shouldThrowError(() => e.strAppendOnce("", 3)), a.shouldThrowError(() => e.strAppendOnce([], "")), 
              a.shouldThrowError(() => e.strAppendOnce("", []));
            }
            // --
            //
            // --
            ,
            /* - */
            strForRange: function strForRange(a) {
              a.case = "returns string representing the range of numbers";
              var r = e.strForRange([ 1, 10 ]), n = "[ 1..10 ]";
              a.identical(r, n), a.case = "returns string representing the range of symbols", 
              r = e.strForRange([ "a", "z" ]), n = "[ a..z ]", a.identical(r, n), a.case = "no arguments", 
              a.shouldThrowError(function() {
                e.strForRange();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strForRange("wrong argument");
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.strForRange([ 1, 10 ], "redundant argument");
              });
            },
            strCapitalize: 
            //
            function strCapitalize(a) {
              a.case = "first letter is upper case";
              var r = e.strCapitalize("object"), n = "Object";
              a.identical(r, n), a.case = "single word", r = e.strCapitalize("one"), n = "One", 
              a.identical(r, n), a.case = "two words", r = e.strCapitalize("one two"), n = "One two", 
              a.identical(r, n), a.case = "invalid arguments length", a.shouldThrowError(function() {
                e.strCapitalize("first", "wrond argument");
              }), a.case = "wrong type of argument", a.shouldThrowError(function() {
                e.strCapitalize(777);
              }), a.case = "no argument provided", a.shouldThrowError(function() {
                e.strCapitalize();
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strCapitalize();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strCapitalize(33);
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.strCapitalize("object", "redundant argument");
              });
            }
            //
            ,
            strIndentation: function strIndentation(a) {
              var r, n;
              /* - */              a.case = "single line", 
              /**/
              r = e.strIndentation("", "_"), n = "_", a.identical(r, n), 
              /* no new lines, returns tab + source */
              r = e.strIndentation("abc", "_"), n = "_abc", a.identical(r, n), 
              /* - */
              a.case = "multiline", 
              /**/
              r = e.strIndentation("a\nb", "_"), n = "_a\n_b", a.identical(r, n), 
              /* tab before first and each new line */
              r = e.strIndentation("\na\nb\nc", "_"), n = "_\n_a\n_b\n_c", a.identical(r, n), 
              /* tabs count = new lines count + 1 for first line */
              r = e.strIndentation("\n\n\n", "_"), n = "_\n_\n_\n_", a.identical(r, n), 
              /**/
              r = e.strIndentation("a\nb\nc", "\t"), n = "\ta\n\tb\n\tc", a.identical(r, n), 
              /* - */
              a.case = "array", 
              /**/
              r = e.strIndentation([ "a", "b", "c" ], "_"), n = "_a\n_b\n_c", a.identical(r, n), 
              r = e.strIndentation([ "a\nb", "b\nc", "c\nd" ].join("\n"), "_"), n = "_a\n_b\n_b\n_c\n_c\n_d", 
              a.identical(r, n), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strIndentation("one", "two", "three");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strIndentation();
              }), a.case = "first argument type is wrong", a.shouldThrowError(function() {
                e.strIndentation(123, "second");
              }), a.case = "second argument type is wrong", a.shouldThrowError(function() {
                e.strIndentation("first", 321);
              });
            }
            //
            ,
            strSplitsCoupledGroup: function strSplitsCoupledGroup(a) {
              a.open("trivial"), a.case = "empty";
              var r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "<<-" ], "dd" ];
              a.identical(r, n), a.case = "middle", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", "cc", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", "cc", "<<-" ], "dd" ], a.identical(r, n), a.case = "left", 
              r = e.strSplitsCoupledGroup({
                splits: [ ">>", "bb", "cc", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ [ ">>", "bb", "cc", "<<-" ], "dd" ], a.identical(r, n), a.case = "right", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", "cc", "<<-" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", "cc", "<<-" ] ], a.identical(r, n), 
              /* - */
              a.close("trivial"), a.open("several"), 
              /* - */
              a.case = "empty", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "<<-", ">>", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "<<-" ], [ ">>", "<<-" ], "dd" ], a.identical(r, n), a.case = "middle", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", "cc", "<<-", "dd", ">>", "ee", "ff", "<<-", "gg" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", "cc", "<<-" ], "dd", [ ">>", "ee", "ff", "<<-" ], "gg" ], 
              a.identical(r, n), a.case = "left", r = e.strSplitsCoupledGroup({
                splits: [ ">>", "bb", "cc", "<<-", ">>", "ee", "ff", "<<-", "gg" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ [ ">>", "bb", "cc", "<<-" ], [ ">>", "ee", "ff", "<<-" ], "gg" ], a.identical(r, n), 
              a.case = "right", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", "cc", "<<-", ">>", "ee", "ff", "<<-" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", "cc", "<<-" ], [ ">>", "ee", "ff", "<<-" ] ], a.identical(r, n), 
              a.close("several"), a.open("recursion"), 
              /* - */
              a.case = "empty", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", ">>", "<<=", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", [ ">>", "<<=" ], "<<-" ], "dd" ], a.identical(r, n), a.case = "middle", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", ">>", "cc", "dd", "<<=", "ee", "<<-", "ff" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", [ ">>", "cc", "dd", "<<=" ], "ee", "<<-" ], "ff" ], 
              a.identical(r, n), a.case = "left", r = e.strSplitsCoupledGroup({
                splits: [ ">>", ">>", "cc", "dd", "<<=", "ee", "<<-", "ff" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ [ ">>", [ ">>", "cc", "dd", "<<=" ], "ee", "<<-" ], "ff" ], a.identical(r, n), 
              a.case = "right", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "bb", ">>", "cc", "dd", "<<=", "<<-" ],
                prefix: ">>",
                postfix: /^<</
              }), n = [ "aa", [ ">>", "bb", [ ">>", "cc", "dd", "<<=" ], "<<-" ] ], a.identical(r, n), 
              a.close("recursion"), a.open("uncoupled prefix"), 
              /* - */
              a.case = "empty", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", ">>", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPrefix: 1
              }), n = [ "aa", ">>", [ ">>", "<<-" ], "dd" ], a.identical(r, n), a.case = "middle", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", "bb", ">>", "cc", ">>", "dd", "<<=", "ee", "ff" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPrefix: 1
              }), n = [ "aa", "bb", ">>", "cc", [ ">>", "dd", "<<=" ], "ee", "ff" ], a.identical(r, n), 
              a.case = "left", r = e.strSplitsCoupledGroup({
                splits: [ ">>", ">>", "dd", "<<=", "ee", "ff" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPrefix: 1
              }), n = [ ">>", [ ">>", "dd", "<<=" ], "ee", "ff" ], a.identical(r, n), a.case = "right", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", "bb", ">>", "cc", ">>", "<<=" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPrefix: 1
              }), n = [ "aa", "bb", ">>", "cc", [ ">>", "<<=" ] ], a.identical(r, n), 
              /* - */
              a.close("uncoupled prefix"), a.open("uncoupled postfix"), 
              /* - */
              a.case = "empty", r = e.strSplitsCoupledGroup({
                splits: [ "aa", ">>", "<<=", "<<-", "dd" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPostfix: 1
              }), n = [ "aa", [ ">>", "<<=" ], "<<-", "dd" ], a.identical(r, n), a.case = "middle", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", "bb", ">>", "cc", "dd", "<<=", "ee", "<<-", "ff" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPostfix: 1
              }), n = [ "aa", "bb", [ ">>", "cc", "dd", "<<=" ], "ee", "<<-", "ff" ], a.identical(r, n), 
              a.case = "left", r = e.strSplitsCoupledGroup({
                splits: [ ">>", "cc", "dd", "<<=", "ee", "<<-", "ff" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPostfix: 1
              }), n = [ [ ">>", "cc", "dd", "<<=" ], "ee", "<<-", "ff" ], a.identical(r, n), a.case = "right", 
              r = e.strSplitsCoupledGroup({
                splits: [ "aa", "bb", ">>", "cc", "dd", "<<=", "<<-" ],
                prefix: ">>",
                postfix: /^<</,
                allowingUncoupledPostfix: 1
              }), n = [ "aa", "bb", [ ">>", "cc", "dd", "<<=" ], "<<-" ], a.identical(r, n), 
              /* - */
              a.close("uncoupled postfix"), a.open("throwing")
              /* - */ , a.case = "uncoupled postfix", a.shouldThrowError(() => {
                e.strSplitsCoupledGroup({
                  splits: [ "aa", ">>", "<<=", "<<-", "dd" ],
                  prefix: ">>",
                  postfix: /^<</
                });
              }), a.case = "uncoupled prefix", a.shouldThrowError(() => {
                e.strSplitsCoupledGroup({
                  splits: [ "aa", ">>", ">>", "<<=", "dd" ],
                  prefix: ">>",
                  postfix: /^<</
                });
              }), a.close("throwing");
            }
            //
            ,
            strSplitFast: function strSplitFast(a) {
              a.case = "trivial";
              var r = e.strSplitFast("", ""), n = [];
              a.identical(r, n), r = e.strSplitFast("abc", ""), n = [ "a", "", "b", "", "c" ], 
              a.identical(r, n), r = e.strSplitFast("", "a"), n = [ "" ], a.identical(r, n), r = e.strSplitFast("test test test"), 
              n = [ "test", " ", "test", " ", "test" ], a.identical(r, n), a.case = "split string into an array of strings", 
              r = e.strSplitFast(" test   test   test "), n = [ "", " ", "test", " ", "", " ", "", " ", "test", " ", "", " ", "", " ", "test", " ", "" ], 
              a.identical(r, n), a.case = "returns an array of strings", r = e.strSplitFast(" test   test   test ", "something"), 
              n = [ " test   test   test " ], a.identical(r, n), a.case = "returns an array of strings", 
              r = e.strSplitFast(" test <delimteter>  test<delimteter>   test ", "<delimteter>"), 
              n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], a.identical(r, n), 
              a.case = "simple string, default options", r = e.strSplitFast("a b c d"), n = [ "a", " ", "b", " ", "c", " ", "d" ], 
              a.identical(r, n);
              /*
    preservingEmpty : 1,
    preservingDelimeters : 0,
  */
              var t, i = {
                preservingEmpty: 1,
                preservingDelimeters: 0
              }
              /* */;
              a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = "", r = e.strSplitFast(t), 
              n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = "", r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = "a", r = e.strSplitFast(t), 
              n = [ "" ], a.identical(r, n), a.case = "has empty element in result", (t = e.mapExtend(null, i)).src = "a b  c", 
              r = e.strSplitFast(t), n = [ "a", "b", "", "c" ], a.identical(r, n), a.case = "returns an array of strings", 
              (t = e.mapExtend(null, i)).src = "test test test", r = e.strSplitFast(t), n = [ "test", "test", "test" ], 
              a.identical(r, n), a.case = "split string into an array of strings", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              r = e.strSplitFast(t), n = [ "", "test", "", "", "test", "", "", "test", "" ], a.identical(r, n), 
              a.case = "split with delimeter which src does not have", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              t.delimeter = "x", r = e.strSplitFast(t), n = [ " test   test   test " ], a.identical(r, n), 
              a.case = "custom delimeter", (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = "<delimteter>", r = e.strSplitFast(t), n = [ " test ", "  test", "   test " ], 
              a.identical(r, n), a.case = "simple string, default options", (t = e.mapExtend(null, i)).src = "a b c d", 
              r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "arguments as map", 
              (t = e.mapExtend(null, i)).src = "a,b,c,d", t.delimeter = ",", r = e.strSplitFast(t), 
              n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", 
              t.delimeter = [ ",", "." ], r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), 
              a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [], 
              r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ "," ], r = e.strSplitFast(t), 
              n = [ "    a", "b", "c", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "content", "" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", "", "", "", "", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", " ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common", 
              (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", "a2", "a3", "", "", "Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ "." ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ ",", "." ], n = [ "a ", "", " b ", "", " c ", "", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = ",", n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", t.delimeter = ",", 
              n = [ "", "" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = ",", n = [ "", "", "", "" ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ '"' ], 
              r = e.strSplitFast(t), n = [ "", "a b", " ", "", " c", "" ], a.identical(r, n), 
              a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c" ], r = e.strSplitFast(t), n = [ '"', '" ""', "" ], a.identical(r, n), 
              a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplitFast(t), n = [ "", "", "", "", "", "", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c", '"', " " ], r = e.strSplitFast(t), n = [ "", "", "", "", "", "", "", "" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ "a b", " ", " c", '"', "" ], r = e.strSplitFast(t), n = [ "", "", "", "", "x", "", "", "", "", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 0,
                preservingDelimeters: 0
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = "", 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = "", r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = "a", r = e.strSplitFast(t), 
              n = [], a.identical(r, n), a.case = "has empty element in result", (t = e.mapExtend(null, i)).src = "a b  c", 
              r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), a.case = "returns an array of strings", 
              (t = e.mapExtend(null, i)).src = "test test test", r = e.strSplitFast(t), n = [ "test", "test", "test" ], 
              a.identical(r, n), a.case = "split string into an array of strings", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              r = e.strSplitFast(t), n = [ "test", "test", "test" ], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (t = e.mapExtend(null, i)).src = " test   test   test ", t.delimeter = "x", r = e.strSplitFast(t), 
              n = [ " test   test   test " ], a.identical(r, n), a.case = "custom delimeter", 
              (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = "<delimteter>", r = e.strSplitFast(t), n = [ " test ", "  test", "   test " ], 
              a.identical(r, n), a.case = "simple string, default options", (t = e.mapExtend(null, i)).src = "a b c d", 
              r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "arguments as map", 
              (t = e.mapExtend(null, i)).src = "a,b,c,d", t.delimeter = ",", r = e.strSplitFast(t), 
              n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", 
              t.delimeter = [ ",", "." ], r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), 
              a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [], 
              r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ "," ], r = e.strSplitFast(t), 
              n = [ "    a", "b", "c", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "content" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", " ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common", 
              (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", "a2", "a3", "Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "delimeter not exist in src", 
              (t = e.mapExtend(null, i)).src = "a,b,c", t.delimeter = [ "." ], n = [ "a,b,c" ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ ",", "." ], n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = ",", n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", t.delimeter = ",", 
              n = [], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = ",", n = [], r = e.strSplitFast(t), 
              a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ '"' ], 
              r = e.strSplitFast(t), n = [ "a b", " ", " c" ], a.identical(r, n), a.case = "quoted in the middle", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "a b", " c" ], r = e.strSplitFast(t), 
              n = [ '"', '" ""' ], a.identical(r, n), a.case = "quoted in the middle with space first", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "a b", " ", " c", '"' ], 
              r = e.strSplitFast(t), n = [ "c" ], a.identical(r, n), a.case = "quoted in the middle with space last", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "a b", " c", '"', " " ], 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ "a b", " ", " c", '"', "" ], r = e.strSplitFast(t), n = [ "x", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 1,
                preservingDelimeters: 1
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = "", 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = "", r = e.strSplitFast(t), n = [ "a", "", "b", "", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = "a", r = e.strSplitFast(t), 
              n = [ "" ], a.identical(r, n), a.case = "has empty element in result", (t = e.mapExtend(null, i)).src = "a b  c", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", "", " ", "c" ], a.identical(r, n), 
              a.case = "returns an array of strings", (t = e.mapExtend(null, i)).src = "test test test", 
              r = e.strSplitFast(t), n = [ "test", " ", "test", " ", "test" ], a.identical(r, n), 
              a.case = "split string into an array of strings", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              r = e.strSplitFast(t), n = [ "", " ", "test", " ", "", " ", "", " ", "test", " ", "", " ", "", " ", "test", " ", "" ], 
              a.identical(r, n), a.case = "split with delimeter which src does not have", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              t.delimeter = "x", r = e.strSplitFast(t), n = [ " test   test   test " ], a.identical(r, n), 
              a.case = "custom delimeter", (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = "<delimteter>", r = e.strSplitFast(t), n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], 
              a.identical(r, n), a.case = "simple string, default options", (t = e.mapExtend(null, i)).src = "a b c d", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", "c", " ", "d" ], a.identical(r, n), 
              a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", t.delimeter = ",", 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), 
              a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [ ",", "." ], 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), 
              a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [], 
              r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ "," ], r = e.strSplitFast(t), 
              n = [ "    a", ",", "b", ",", "c", ",", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "", ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "content", ".", "" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", " ", "", "<<!", "", " ", "", "<<-", "", " ", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", "<<!", " ", "<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "having long common", (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", "<<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", " ", "a2", " ", "a3", " ", "", "<<<-", "", " ", "Bb" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ "." ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ ",", "." ], n = [ "a ", ".", "", ",", " b ", ".", "", ",", " c ", ".", "", ",", " d" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = ",", n = [ "a ", ",", " b ", ",", " c ", ",", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", 
              t.delimeter = ",", n = [ "", ",", "" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "src is triplet of delimeter", (t = e.mapExtend(null, i)).src = ",,,", 
              t.delimeter = ",", n = [ "", ",", "", ",", "", ",", "" ], r = e.strSplitFast(t), 
              a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ '"' ], 
              r = e.strSplitFast(t), n = [ "", '"', "a b", '"', " ", '"', "", '"', " c", '"', "" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c" ], r = e.strSplitFast(t), n = [ '"', "a b", '" ""', " c", "" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "", '"', "", '"', "", " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c", '"', " " ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "", '"', "", '"', "", " c", "" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplitFast(t), n = [ '"', "", "a", "", " ", "", "b", "", '"', "", " ", "", '"', "", '"', "", " ", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ "a b", " ", " c", '"', "" ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "x", "", "", " ", "", '"', "", '"', "", " ", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 0,
                preservingDelimeters: 1
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = "", 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = "", r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = "a", r = e.strSplitFast(t), 
              n = [], a.identical(r, n), a.case = "has empty element in result", (t = e.mapExtend(null, i)).src = "a b  c", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", " ", "c" ], a.identical(r, n), 
              a.case = "returns an array of strings", (t = e.mapExtend(null, i)).src = "test test test", 
              r = e.strSplitFast(t), n = [ "test", " ", "test", " ", "test" ], a.identical(r, n), 
              a.case = "split string into an array of strings", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              r = e.strSplitFast(t), n = [ " ", "test", " ", " ", " ", "test", " ", " ", " ", "test", " " ], 
              a.identical(r, n), a.case = "split with delimeter which src does not have", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              t.delimeter = "x", r = e.strSplitFast(t), n = [ " test   test   test " ], a.identical(r, n), 
              a.case = "custom delimeter", (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = "<delimteter>", r = e.strSplitFast(t), n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], 
              a.identical(r, n), a.case = "simple string, default options", (t = e.mapExtend(null, i)).src = "a b c d", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", "c", " ", "d" ], a.identical(r, n), 
              a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", t.delimeter = ",", 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), 
              a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [ ",", "." ], 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), 
              a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [], 
              r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ "," ], r = e.strSplitFast(t), 
              n = [ "    a", ",", "b", ",", "c", ",", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", "#" ], r = e.strSplitFast(t), n = [ "content", "." ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", " ", "<<!", " ", "<<-", " ", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", "<<!", " ", "<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "having long common", (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa ", "<<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", " ", "a2", " ", "a3", " ", "<<<-", " ", "Bb" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ "." ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ ",", "." ], n = [ "a ", ".", ",", " b ", ".", ",", " c ", ".", ",", " d" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = ",", n = [ "a ", ",", " b ", ",", " c ", ",", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", 
              t.delimeter = ",", n = [ "," ], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = ",", n = [ ",", ",", "," ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ '"' ], 
              r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " c", '"' ], a.identical(r, n), 
              a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c" ], r = e.strSplitFast(t), n = [ '"', "a b", '" ""', " c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ "a b", " c", '"', " " ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " c" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ "a b", " ", " c", '"', "" ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", "x", " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.strSplitFast();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strSplitFast([]);
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strSplitFast(13);
              }), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strSplitFast("1", "2", "3");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strSplitFast(123);
              }), a.case = "invalid option type", a.shouldThrowError(function() {
                e.strSplitFast({
                  src: 3
                });
              }), a.case = "invalid option defined", a.shouldThrowError(function() {
                e.strSplitFast({
                  src: "word",
                  delimeter: 0,
                  left: 1
                });
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strSplitFast();
              });
            }
            //
            ,
            strSplitFastRegexp: function strSplitFastRegexp(a) {
              a.case = "trivial";
              var r = e.strSplitFast("a b c", new RegExp(" ")), n = [ "a", " ", "b", " ", "c" ];
              a.identical(r, n), r = e.strSplitFast("abc", new RegExp("")), n = [ "a", "", "b", "", "c" ], 
              a.identical(r, n), r = e.strSplitFast("", new RegExp("")), n = [], a.identical(r, n), 
              r = e.strSplitFast("", "a"), n = [ "" ], a.identical(r, n), a.case = "returns an array of strings", 
              r = e.strSplitFast(" test <delimteter>  test<delimteter>   test ", /<delimteter>/), 
              n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], a.identical(r, n);
              /*
    preservingEmpty : 1,
    preservingDelimeters : 0,
  */
              var t, i = {
                preservingEmpty: 1,
                preservingDelimeters: 0
              }
              /* */;
              a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = new RegExp(""), 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = new RegExp(""), r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = /a/, r = e.strSplitFast(t), 
              n = [ "" ], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (t = e.mapExtend(null, i)).src = " test   test   test ", t.delimeter = /x/, r = e.strSplitFast(t), 
              n = [ " test   test   test " ], a.identical(r, n), a.case = "custom delimeter", 
              (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = /<delimteter>/, r = e.strSplitFast(t), n = [ " test ", "  test", "   test " ], 
              a.identical(r, n), a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", 
              t.delimeter = /,/, r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), 
              a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [ /,/, /\./ ], 
              r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ /,/ ], r = e.strSplitFast(t), 
              n = [ "    a", "b", "c", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ /\./, /#/ ], r = e.strSplitFast(t), n = [ "", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ /\./, /#/ ], r = e.strSplitFast(t), n = [ "content", "" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], n = [ "Aa", "", "", "", "", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", " ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common", 
              (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], 
              n = [ "a1", "a2", "a3", "", "", "Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ /\./ ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ /,/, /\./ ], n = [ "a ", "", " b ", "", " c ", "", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = /,/, n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", t.delimeter = /,/, 
              n = [ "", "" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = /,/, n = [ "", "", "", "" ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ /"/ ], 
              r = e.strSplitFast(t), n = [ "", "a b", " ", "", " c", "" ], a.identical(r, n), 
              a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/ ], r = e.strSplitFast(t), n = [ '"', '" ""', "" ], a.identical(r, n), 
              a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/ ], r = e.strSplitFast(t), n = [ "", "", "", "", "", "", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/, /"/, / / ], r = e.strSplitFast(t), n = [ "", "", "", "", "", "", "", "" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ new RegExp(), /a b/, / /, "", " c" ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ /a b/, / /, " c", '"', "" ], r = e.strSplitFast(t), n = [ "", "", "", "", "x", "", "", "", "", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 0,
                preservingDelimeters: 0
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = new RegExp(""), 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = new RegExp(""), r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = /a/, r = e.strSplitFast(t), 
              n = [], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (t = e.mapExtend(null, i)).src = " test   test   test ", t.delimeter = /x/, r = e.strSplitFast(t), 
              n = [ " test   test   test " ], a.identical(r, n), a.case = "custom delimeter", 
              (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = /<delimteter>/, r = e.strSplitFast(t), n = [ " test ", "  test", "   test " ], 
              a.identical(r, n), a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", 
              t.delimeter = /,/, r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), 
              a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [ /,/, /\./ ], 
              r = e.strSplitFast(t), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ /,/ ], r = e.strSplitFast(t), 
              n = [ "    a", "b", "c", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ "content" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], n = [ "Aa", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", " ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common", 
              (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], 
              n = [ "a1", "a2", "a3", "Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "delimeter not exist in src", 
              (t = e.mapExtend(null, i)).src = "a,b,c", t.delimeter = [ /\./ ], n = [ "a,b,c" ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ /,/, /\./ ], n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = /,/, n = [ "a ", " b ", " c ", " d" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", t.delimeter = /,/, 
              n = [], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = /,/, n = [], r = e.strSplitFast(t), 
              a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ /"/ ], 
              r = e.strSplitFast(t), n = [ "a b", " ", " c" ], a.identical(r, n), a.case = "quoted in the middle", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ /a b/, / c/ ], r = e.strSplitFast(t), 
              n = [ '"', '" ""' ], a.identical(r, n), a.case = "quoted in the middle with space first", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ /a b/, / /, / c/, /"/ ], 
              r = e.strSplitFast(t), n = [ "c" ], a.identical(r, n), a.case = "quoted in the middle with space last", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ /a b/, / c/, /"/, / / ], 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", /a b/, / /, new RegExp(""), / c/ ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/, "" ], r = e.strSplitFast(t), n = [ "x", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 1,
                preservingDelimeters: 1
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = new RegExp(""), 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = new RegExp(""), r = e.strSplitFast(t), n = [ "a", "", "b", "", "c" ], 
              a.identical(r, n), a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = /a/, 
              r = e.strSplitFast(t), n = [ "" ], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (t = e.mapExtend(null, i)).src = " test   test   test ", t.delimeter = /x/, r = e.strSplitFast(t), 
              n = [ " test   test   test " ], a.identical(r, n), a.case = "custom delimeter", 
              (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = /<delimteter>/, r = e.strSplitFast(t), n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], 
              a.identical(r, n), a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", 
              t.delimeter = /,/, r = e.strSplitFast(t), n = [ "a", ",", "b", ",", "c", ",", "d" ], 
              a.identical(r, n), a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", 
              t.delimeter = [ /,/, /\./ ], r = e.strSplitFast(t), n = [ "a", ",", "b", ".", "c", ".", "d" ], 
              a.identical(r, n), a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", 
              t.delimeter = [], r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ /,/ ], r = e.strSplitFast(t), 
              n = [ "    a", ",", "b", ",", "c", ",", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ "", ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ "content", ".", "" ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], n = [ "Aa", " ", "", "<<!", "", " ", "", "<<-", "", " ", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", "<<!", " ", "<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "having long common", (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", "<<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], 
              n = [ "a1", " ", "a2", " ", "a3", " ", "", "<<<-", "", " ", "Bb" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ /\./ ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ /,/, /\./ ], n = [ "a ", ".", "", ",", " b ", ".", "", ",", " c ", ".", "", ",", " d" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = /,/, n = [ "a ", ",", " b ", ",", " c ", ",", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", 
              t.delimeter = /,/, n = [ "", ",", "" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "src is triplet of delimeter", (t = e.mapExtend(null, i)).src = ",,,", 
              t.delimeter = /,/, n = [ "", ",", "", ",", "", ",", "" ], r = e.strSplitFast(t), 
              a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ /"/ ], 
              r = e.strSplitFast(t), n = [ "", '"', "a b", '"', " ", '"', "", '"', " c", '"', "" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/ ], r = e.strSplitFast(t), n = [ '"', "a b", '" ""', " c", "" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/ ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "", '"', "", '"', "", " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/, /"/, / / ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "", '"', "", '"', "", " c", "" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", /a b/, / /, new RegExp(""), / c/ ], 
              r = e.strSplitFast(t), n = [ '"', "", "a", "", " ", "", "b", "", '"', "", " ", "", '"', "", '"', "", " ", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/, "" ], r = e.strSplitFast(t), n = [ "", '"', "", "a b", "", '"', "", " ", "x", "", "", " ", "", '"', "", '"', "", " ", "c" ], 
              a.identical(r, n), i = {
                preservingEmpty: 0,
                preservingDelimeters: 1
              }
              /* */ , a.case = "empty both", (t = e.mapExtend(null, i)).src = "", t.delimeter = new RegExp(""), 
              r = e.strSplitFast(t), n = [], a.identical(r, n), a.case = "empty delimeter", (t = e.mapExtend(null, i)).src = "abc", 
              t.delimeter = new RegExp(""), r = e.strSplitFast(t), n = [ "a", "b", "c" ], a.identical(r, n), 
              a.case = "empty src", (t = e.mapExtend(null, i)).src = "", t.delimeter = /a/, r = e.strSplitFast(t), 
              n = [], a.identical(r, n), a.case = "has empty element in result", (t = e.mapExtend(null, i)).src = "a b  c", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", " ", "c" ], a.identical(r, n), 
              a.case = "returns an array of strings", (t = e.mapExtend(null, i)).src = "test test test", 
              r = e.strSplitFast(t), n = [ "test", " ", "test", " ", "test" ], a.identical(r, n), 
              a.case = "split string into an array of strings", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              r = e.strSplitFast(t), n = [ " ", "test", " ", " ", " ", "test", " ", " ", " ", "test", " " ], 
              a.identical(r, n), a.case = "split with delimeter which src does not have", (t = e.mapExtend(null, i)).src = " test   test   test ", 
              t.delimeter = /x/, r = e.strSplitFast(t), n = [ " test   test   test " ], a.identical(r, n), 
              a.case = "custom delimeter", (t = e.mapExtend(null, i)).src = " test <delimteter>  test<delimteter>   test ", 
              t.delimeter = /<delimteter>/, r = e.strSplitFast(t), n = [ " test ", "<delimteter>", "  test", "<delimteter>", "   test " ], 
              a.identical(r, n), a.case = "simple string, default options", (t = e.mapExtend(null, i)).src = "a b c d", 
              r = e.strSplitFast(t), n = [ "a", " ", "b", " ", "c", " ", "d" ], a.identical(r, n), 
              a.case = "arguments as map", (t = e.mapExtend(null, i)).src = "a,b,c,d", t.delimeter = /,/, 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), 
              a.case = "delimeter as array", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [ /,/, /\./ ], 
              r = e.strSplitFast(t), n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), 
              a.case = "zero delimeter length", (t = e.mapExtend(null, i)).src = "a,b.c.d", t.delimeter = [], 
              r = e.strSplitFast(t), n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", 
              (t = e.mapExtend(null, i)).src = "    a,b,c,d   ", t.delimeter = [ /,/ ], r = e.strSplitFast(t), 
              n = [ "    a", ",", "b", ",", "c", ",", "d   " ], a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (t = e.mapExtend(null, i)).src = ".content", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (t = e.mapExtend(null, i)).src = "content.", 
              t.delimeter = [ ".", /#/ ], r = e.strSplitFast(t), n = [ "content", "." ], a.identical(r, n), 
              a.case = "many delimeters having common", (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", 
              t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], n = [ "Aa", " ", "<<!", " ", "<<-", " ", "Bb" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "many delimeters having common", 
              (t = e.mapExtend(null, i)).src = "Aa <<! <<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", "<<!", " ", "<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), 
              a.case = "having long common", (t = e.mapExtend(null, i)).src = "Aa <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</ ], 
              n = [ "Aa ", "<<<-", " Bb" ], r = e.strSplitFast(t), a.identical(r, n), a.case = "having long common 2", 
              (t = e.mapExtend(null, i)).src = "a1 a2 a3 <<<- Bb", t.delimeter = [ /->>>/, /<<<-/, /->>/, /<<-/, /!>>/, /<<!/, />>/, /<</, / / ], 
              n = [ "a1", " ", "a2", " ", "a3", " ", "<<<-", " ", "Bb" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeter not exist in src", (t = e.mapExtend(null, i)).src = "a,b,c", 
              t.delimeter = [ /\./ ], n = [ "a,b,c" ], r = e.strSplitFast(t), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (t = e.mapExtend(null, i)).src = "a ., b ., c ., d", 
              t.delimeter = [ /,/, /\./ ], n = [ "a ", ".", ",", " b ", ".", ",", " c ", ".", ",", " d" ], 
              r = e.strSplitFast(t), a.identical(r, n), a.case = "one delimeters", (t = e.mapExtend(null, i)).src = "a , b , c , d", 
              t.delimeter = /,/, n = [ "a ", ",", " b ", ",", " c ", ",", " d" ], r = e.strSplitFast(t), 
              a.identical(r, n), a.case = "delimeters equal src", (t = e.mapExtend(null, i)).src = ",", 
              t.delimeter = /,/, n = [ "," ], r = e.strSplitFast(t), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (t = e.mapExtend(null, i)).src = ",,,", t.delimeter = /,/, n = [ ",", ",", "," ], 
              r = e.strSplitFast(t), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (t = e.mapExtend(null, i)).src = '"a b" "" c"', t.delimeter = [ /"/ ], 
              r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " c", '"' ], a.identical(r, n), 
              a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/ ], r = e.strSplitFast(t), n = [ '"', "a b", '" ""', " c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/ ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (t = e.mapExtend(null, i)).src = '"a b" "" c', 
              t.delimeter = [ /a b/, / c/, /"/, / / ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", '"', '"', " c" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (t = e.mapExtend(null, i)).src = '"a b" "" c', t.delimeter = [ "", /a b/, / /, new RegExp(""), / c/ ], 
              r = e.strSplitFast(t), n = [ '"', "a", " ", "b", '"', " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (t = e.mapExtend(null, i)).src = '"a b" x "" c', 
              t.delimeter = [ /a b/, / /, / c/, /"/, "" ], r = e.strSplitFast(t), n = [ '"', "a b", '"', " ", "x", " ", '"', '"', " ", "c" ], 
              a.identical(r, n), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strSplitFast(/1/, /2/, "3");
              });
            }
            //
            ,
            strSplit: function strSplit(a) {
              /* - */
              a.open("empty");
              var r = e.strSplit("", ""), n = [];
              a.identical(r, n), r = e.strSplit("abc", ""), n = [ "a", "", "b", "", "c" ], a.identical(r, n), 
              r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 1,
                preservingDelimeters: 1,
                stripping: 0,
                quoting: 0
              }), n = [ "a", "", "b", "", "c" ], a.identical(r, n), r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 1,
                preservingDelimeters: 0,
                stripping: 0,
                quoting: 0
              }), n = [ "a", "b", "c" ], a.identical(r, n), r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 0,
                preservingDelimeters: 0,
                stripping: 0,
                quoting: 0
              }), n = [ "a", "b", "c" ], a.identical(r, n), r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 0,
                preservingDelimeters: 0,
                stripping: 0,
                quoting: 1
              }), n = [ "a", "b", "c" ], a.identical(r, n), r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 0,
                preservingDelimeters: 0,
                stripping: 1,
                quoting: 0
              }), n = [ "a", "b", "c" ], a.identical(r, n), r = e.strSplit({
                src: "abc",
                delimeter: "",
                preservingEmpty: 0,
                preservingDelimeters: 0,
                stripping: 1,
                quoting: 1
              }), n = [ "a", "b", "c" ], a.identical(r, n), n = [ "a", "b", "c" ], a.identical(r, n), 
              r = e.strSplit("", "a"), n = [ "" ], a.identical(r, n), a.close("empty"), 
              /* - */
              a.open("trivial"), r = e.strSplit("test test test"), n = [ "test", "", "test", "", "test" ], 
              a.identical(r, n), r = e.strSplit(" test   test   test "), n = [ "", "", "test", "", "", "", "", "", "test", "", "", "", "", "", "test", "", "" ], 
              a.identical(r, n), r = e.strSplit(" test   test   test ", "something"), n = [ "test   test   test" ], 
              a.identical(r, n), r = e.strSplit(" test <delimteter>  test<delimteter>   test ", "<delimteter>"), 
              n = [ "test", "<delimteter>", "test", "<delimteter>", "test" ], a.identical(r, n), 
              r = e.strSplit("a b c d"), n = [ "a", "", "b", "", "c", "", "d" ], a.identical(r, n), 
              a.close("trivial"), 
              /* - */
              a.open("trivial, pe:0"), r = e.strSplit({
                src: "test test test",
                preservingEmpty: 0
              }), n = [ "test", "test", "test" ], a.identical(r, n), r = e.strSplit({
                src: " test   test   test ",
                preservingEmpty: 0
              }), n = [ "test", "test", "test" ], a.identical(r, n), r = e.strSplit({
                src: " test   test   test ",
                delimeter: "something",
                preservingEmpty: 0
              }), n = [ "test   test   test" ], a.identical(r, n), r = e.strSplit({
                src: " test <delimteter>  test<delimteter>   test ",
                delimeter: "<delimteter>",
                preservingEmpty: 0
              }), n = [ "test", "<delimteter>", "test", "<delimteter>", "test" ], a.identical(r, n), 
              r = e.strSplit({
                src: "a b c d",
                preservingEmpty: 0
              }), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.close("trivial, pe:0"), 
              /* - */
              a.open('d:" " trivial'), a.case = " space at the beginning", r = e.strSplit(" aa b#b cc", " "), 
              n = [ "", "", "aa", "", "b#b", "", "cc" ], a.identical(r, n), a.case = "space in the end", 
              r = e.strSplit("aa b#b cc ", " "), n = [ "aa", "", "b#b", "", "cc", "", "" ], a.identical(r, n), 
              a.case = "space on the beginning and the end", r = e.strSplit(" aa b#b cc ", " "), 
              n = [ "", "", "aa", "", "b#b", "", "cc", "", "" ], a.identical(r, n), a.close('d:" " trivial'), 
              /* - */
              a.open('d:"#" trivial'), a.case = " space at the beginning", r = e.strSplit(" aa b#b cc", "#"), 
              n = [ "aa b", "#", "b cc" ], a.identical(r, n), a.case = "space in the end", r = e.strSplit("aa b#b cc ", "#"), 
              n = [ "aa b", "#", "b cc" ], a.identical(r, n), a.case = "space on the beginning and the end", 
              r = e.strSplit(" aa b#b cc ", "#"), n = [ "aa b", "#", "b cc" ], a.identical(r, n), 
              a.close('d:"#" trivial'), 
              /* - */
              a.open("s:1 q:0 pe:0");
              var t = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 0
              };
              a.case = "empty both", (c = e.mapExtend(null, t)).src = "", c.delimeter = "", r = e.strSplit(c), 
              n = [], a.identical(r, n), a.case = "empty delimeter", (c = e.mapExtend(null, t)).src = "abc", 
              c.delimeter = "", r = e.strSplit(c), n = [ "a", "b", "c" ], a.identical(r, n), a.case = "empty src", 
              (c = e.mapExtend(null, t)).src = "", c.delimeter = "a", r = e.strSplit(c), n = [], 
              a.identical(r, n), a.case = "has empty element in result", (c = e.mapExtend(null, t)).src = "a b  c", 
              r = e.strSplit(c), n = [ "a", "b", "c" ], a.identical(r, n), a.case = "returns an array of strings", 
              (c = e.mapExtend(null, t)).src = "test test test", r = e.strSplit(c), n = [ "test", "test", "test" ], 
              a.identical(r, n), a.case = "split string into an array of strings", (c = e.mapExtend(null, t)).src = " test   test   test ", 
              r = e.strSplit(c), n = [ "test", "test", "test" ], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (c = e.mapExtend(null, t)).src = " test   test   test ", c.delimeter = "x", r = e.strSplit(c), 
              n = [ "test   test   test" ], a.identical(r, n), a.case = "custom delimeter", (c = e.mapExtend(null, t)).src = " test <delimteter>  test<delimteter>   test ", 
              c.delimeter = "<delimteter>", r = e.strSplit(c), n = [ "test", "<delimteter>", "test", "<delimteter>", "test" ], 
              a.identical(r, n), a.case = "simple string, default options", (c = e.mapExtend(null, t)).src = "a b c d", 
              r = e.strSplit(c), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "arguments as map", 
              (c = e.mapExtend(null, t)).src = "a,b,c,d", c.delimeter = ",", r = e.strSplit(c), 
              n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), a.case = "delimeter as array", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [ ",", "." ], r = e.strSplit(c), 
              n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), a.case = "zero delimeter length", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [], r = e.strSplit(c), 
              n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", (c = e.mapExtend(null, t)).src = "    a,b,c,d   ", 
              c.delimeter = [ "," ], r = e.strSplit(c), n = [ "a", ",", "b", ",", "c", ",", "d" ], 
              a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (c = e.mapExtend(null, t)).src = ".content", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (c = e.mapExtend(null, t)).src = "content.", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ "content", "." ], a.identical(r, n), 
              a.case = "many delimeters having common", (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", 
              c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", "<<!", "<<-", "Bb" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "many delimeters having common", 
              (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<!", "<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common", 
              (c = e.mapExtend(null, t)).src = "Aa <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common 2", 
              (c = e.mapExtend(null, t)).src = "a1 a2 a3 <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", "a2", "a3", "<<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "delimeter not exist in src", 
              (c = e.mapExtend(null, t)).src = "a,b,c", c.delimeter = [ "." ], n = [ "a,b,c" ], 
              r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "several delimeters", (c = e.mapExtend(null, t)).src = "a ., b ., c ., d", 
              c.delimeter = [ ",", "." ], n = [ "a", ".", ",", "b", ".", ",", "c", ".", ",", "d" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "one delimeters", (c = e.mapExtend(null, t)).src = "a , b , c , d", 
              c.delimeter = ",", n = [ "a", ",", "b", ",", "c", ",", "d" ], r = e.strSplit(c), 
              a.identical(r, n), a.case = "delimeters equal src", (c = e.mapExtend(null, t)).src = ",", 
              c.delimeter = ",", n = [ "," ], r = e.strSplit(c), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (c = e.mapExtend(null, t)).src = ",,,", c.delimeter = ",", n = [ ",", ",", "," ], 
              r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (c = e.mapExtend(null, t)).src = '"a b" "" c"', c.delimeter = [ '"' ], 
              r = e.strSplit(c), n = [ '"', "a b", '"', '"', '"', "c", '"' ], a.identical(r, n), 
              a.case = "quoted in the middle", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c" ], r = e.strSplit(c), n = [ '"', "a b", '" ""', "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplit(c), n = [ '"', "a b", '"', '"', '"', "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c", '"', " " ], r = e.strSplit(c), n = [ '"', "a b", '"', '"', '"', "c" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (c = e.mapExtend(null, t)).src = '"a b" "" c', c.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplit(c), n = [ '"', "a", "b", '"', '"', '"', "c" ], a.identical(r, n), 
              a.case = "quoted in the middle", (c = e.mapExtend(null, t)).src = '"a b" x "" c', 
              c.delimeter = [ "a b", " ", " c", '"', "" ], r = e.strSplit(c), n = [ '"', "a b", '"', "x", '"', '"', "c" ], 
              a.identical(r, n), a.close("s:1 q:0 pe:0"), 
              /* - */
              a.open("s:1 q:0 pe:1"), t = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 1
              }, a.case = "empty both", (c = e.mapExtend(null, t)).src = "", c.delimeter = "", 
              r = e.strSplit(c), n = [], a.identical(r, n), a.case = "empty delimeter", (c = e.mapExtend(null, t)).src = "abc", 
              c.delimeter = "", r = e.strSplit(c), n = [ "a", "", "b", "", "c" ], a.identical(r, n), 
              a.case = "empty src", (c = e.mapExtend(null, t)).src = "", c.delimeter = "a", r = e.strSplit(c), 
              n = [ "" ], a.identical(r, n), a.case = "has empty element in result", (c = e.mapExtend(null, t)).src = "a b  c", 
              r = e.strSplit(c), n = [ "a", "", "b", "", "", "", "c" ], a.identical(r, n), a.case = "returns an array of strings", 
              (c = e.mapExtend(null, t)).src = "test test test", r = e.strSplit(c), n = [ "test", "", "test", "", "test" ], 
              a.identical(r, n), a.case = "split string into an array of strings", (c = e.mapExtend(null, t)).src = " test   test   test ", 
              r = e.strSplit(c), n = [ "", "", "test", "", "", "", "", "", "test", "", "", "", "", "", "test", "", "" ], 
              a.identical(r, n), a.case = "split with delimeter which src does not have", (c = e.mapExtend(null, t)).src = " test   test   test ", 
              c.delimeter = "x", r = e.strSplit(c), n = [ "test   test   test" ], a.identical(r, n), 
              a.case = "custom delimeter", (c = e.mapExtend(null, t)).src = " test <delimteter>  test<delimteter>   test ", 
              c.delimeter = "<delimteter>", r = e.strSplit(c), n = [ "test", "<delimteter>", "test", "<delimteter>", "test" ], 
              a.identical(r, n), a.case = "simple string, default options", (c = e.mapExtend(null, t)).src = "a b c d", 
              r = e.strSplit(c), n = [ "a", "", "b", "", "c", "", "d" ], a.identical(r, n), a.case = "arguments as map", 
              (c = e.mapExtend(null, t)).src = "a,b,c,d", c.delimeter = ",", r = e.strSplit(c), 
              n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), a.case = "delimeter as array", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [ ",", "." ], r = e.strSplit(c), 
              n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), a.case = "zero delimeter length", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [], r = e.strSplit(c), 
              n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", (c = e.mapExtend(null, t)).src = "    a,b,c,d   ", 
              c.delimeter = [ "," ], r = e.strSplit(c), n = [ "a", ",", "b", ",", "c", ",", "d" ], 
              a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (c = e.mapExtend(null, t)).src = ".content", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ "", ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (c = e.mapExtend(null, t)).src = "content.", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ "content", ".", "" ], a.identical(r, n), 
              a.case = "many delimeters having common", (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", 
              c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", "", "", "<<!", "", "", "", "<<-", "", "", "Bb" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "many delimeters having common", 
              (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<!", "", "<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common", 
              (c = e.mapExtend(null, t)).src = "Aa <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common 2", 
              (c = e.mapExtend(null, t)).src = "a1 a2 a3 <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", "", "a2", "", "a3", "", "", "<<<-", "", "", "Bb" ], r = e.strSplit(c), 
              a.identical(r, n), a.case = "delimeter not exist in src", (c = e.mapExtend(null, t)).src = "a,b,c", 
              c.delimeter = [ "." ], n = [ "a,b,c" ], r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "several delimeters", (c = e.mapExtend(null, t)).src = "a ., b ., c ., d", 
              c.delimeter = [ ",", "." ], n = [ "a", ".", "", ",", "b", ".", "", ",", "c", ".", "", ",", "d" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "one delimeters", (c = e.mapExtend(null, t)).src = "a , b , c , d", 
              c.delimeter = ",", n = [ "a", ",", "b", ",", "c", ",", "d" ], r = e.strSplit(c), 
              a.identical(r, n), a.case = "delimeters equal src", (c = e.mapExtend(null, t)).src = ",", 
              c.delimeter = ",", n = [ "", ",", "" ], r = e.strSplit(c), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (c = e.mapExtend(null, t)).src = ",,,", c.delimeter = ",", n = [ "", ",", "", ",", "", ",", "" ], 
              r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "quoted at edges", (c = e.mapExtend(null, t)).src = '"a b" "" c"', c.delimeter = [ '"' ], 
              r = e.strSplit(c), n = [ "", '"', "a b", '"', "", '"', "", '"', "c", '"', "" ], 
              a.identical(r, n), a.case = "quoted in the middle", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c" ], r = e.strSplit(c), n = [ '"', "a b", '" ""', "c", "" ], 
              a.identical(r, n), a.case = "quoted in the middle with space first", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplit(c), n = [ "", '"', "", "a b", "", '"', "", "", "", '"', "", '"', "", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c", '"', " " ], r = e.strSplit(c), n = [ "", '"', "", "a b", "", '"', "", "", "", '"', "", '"', "", "c", "" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (c = e.mapExtend(null, t)).src = '"a b" "" c', c.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplit(c), n = [ '"', "", "a", "", "", "", "b", "", '"', "", "", "", '"', "", '"', "", "", "", "c" ], 
              a.identical(r, n), a.case = "quoted in the middle", (c = e.mapExtend(null, t)).src = '"a b" x "" c', 
              c.delimeter = [ "", '"', "", "a b", "", '"', "", "", "x", "", "", "", "", '"', "", '"', "", "", "c" ], 
              r = e.strSplit(c), n = [ '"', "", "a", "", "", "", "b", "", '"', "", "", "", "x", "", "", "", '"', "", '"', "", "", "", "c" ], 
              a.identical(r, n), a.close("s:1 q:0 pe:1"), 
              /* - */
              a.open("s:1 q:1 pe:0"), t = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 0
              }, a.case = "empty both", (c = e.mapExtend(null, t)).src = "", c.delimeter = "", 
              r = e.strSplit(c), n = [], a.identical(r, n), a.case = "empty delimeter", (c = e.mapExtend(null, t)).src = "abc", 
              c.delimeter = "", r = e.strSplit(c), n = [ "a", "b", "c" ], a.identical(r, n), a.case = "empty src", 
              (c = e.mapExtend(null, t)).src = "", c.delimeter = "a", r = e.strSplit(c), n = [], 
              a.identical(r, n), a.case = "has empty element in result", (c = e.mapExtend(null, t)).src = "a b  c", 
              r = e.strSplit(c), n = [ "a", "b", "c" ], a.identical(r, n), a.case = "returns an array of strings", 
              (c = e.mapExtend(null, t)).src = "test test test", r = e.strSplit(c), n = [ "test", "test", "test" ], 
              a.identical(r, n), a.case = "split string into an array of strings", (c = e.mapExtend(null, t)).src = " test   test   test ", 
              r = e.strSplit(c), n = [ "test", "test", "test" ], a.identical(r, n), a.case = "split with delimeter which src does not have", 
              (c = e.mapExtend(null, t)).src = " test   test   test ", c.delimeter = "x", r = e.strSplit(c), 
              n = [ "test   test   test" ], a.identical(r, n), a.case = "custom delimeter", (c = e.mapExtend(null, t)).src = " test <delimteter>  test<delimteter>   test ", 
              c.delimeter = "<delimteter>", r = e.strSplit(c), n = [ "test", "<delimteter>", "test", "<delimteter>", "test" ], 
              a.identical(r, n), a.case = "simple string, default options", (c = e.mapExtend(null, t)).src = "a b c d", 
              r = e.strSplit(c), n = [ "a", "b", "c", "d" ], a.identical(r, n), a.case = "arguments as map", 
              (c = e.mapExtend(null, t)).src = "a,b,c,d", c.delimeter = ",", r = e.strSplit(c), 
              n = [ "a", ",", "b", ",", "c", ",", "d" ], a.identical(r, n), a.case = "delimeter as array", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [ ",", "." ], r = e.strSplit(c), 
              n = [ "a", ",", "b", ".", "c", ".", "d" ], a.identical(r, n), a.case = "zero delimeter length", 
              (c = e.mapExtend(null, t)).src = "a,b.c.d", c.delimeter = [], r = e.strSplit(c), 
              n = [ "a,b.c.d" ], a.identical(r, n), a.case = "stripping off", (c = e.mapExtend(null, t)).src = "    a,b,c,d   ", 
              c.delimeter = [ "," ], r = e.strSplit(c), n = [ "a", ",", "b", ",", "c", ",", "d" ], 
              a.identical(r, n), 
              /* */
              a.case = "many delimeters, delimeter on the begin", (c = e.mapExtend(null, t)).src = ".content", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ ".", "content" ], a.identical(r, n), 
              a.case = "many delimeters, delimeter on the end", (c = e.mapExtend(null, t)).src = "content.", 
              c.delimeter = [ ".", "#" ], r = e.strSplit(c), n = [ "content", "." ], a.identical(r, n), 
              a.case = "many delimeters having common", (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", 
              c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], n = [ "Aa", "<<!", "<<-", "Bb" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "many delimeters having common", 
              (c = e.mapExtend(null, t)).src = "Aa <<! <<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<!", "<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common", 
              (c = e.mapExtend(null, t)).src = "Aa <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<" ], 
              n = [ "Aa", "<<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "having long common 2", 
              (c = e.mapExtend(null, t)).src = "a1 a2 a3 <<<- Bb", c.delimeter = [ "->>>", "<<<-", "->>", "<<-", "!>>", "<<!", ">>", "<<", " " ], 
              n = [ "a1", "a2", "a3", "<<<-", "Bb" ], r = e.strSplit(c), a.identical(r, n), a.case = "delimeter not exist in src", 
              (c = e.mapExtend(null, t)).src = "a,b,c", c.delimeter = [ "." ], n = [ "a,b,c" ], 
              r = e.strSplit(c), a.identical(r, n), 
              /**/
              a.case = "several delimeters", (c = e.mapExtend(null, t)).src = "a ., b ., c ., d", 
              c.delimeter = [ ",", "." ], n = [ "a", ".", ",", "b", ".", ",", "c", ".", ",", "d" ], 
              r = e.strSplit(c), a.identical(r, n), a.case = "one delimeters", (c = e.mapExtend(null, t)).src = "a , b , c , d", 
              c.delimeter = ",", n = [ "a", ",", "b", ",", "c", ",", "d" ], r = e.strSplit(c), 
              a.identical(r, n), a.case = "delimeters equal src", (c = e.mapExtend(null, t)).src = ",", 
              c.delimeter = ",", n = [ "," ], r = e.strSplit(c), a.identical(r, n), a.case = "src is triplet of delimeter", 
              (c = e.mapExtend(null, t)).src = ",,,", c.delimeter = ",", n = [ ",", ",", "," ], 
              r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "complex quoted at edges", (c = e.mapExtend(null, t)).src = '"a b" " c"', 
              c.delimeter = [ '"' ], r = e.strSplit(c), n = [ '"a b" " c"' ], a.identical(r, n), 
              a.case = "quoted in the middle", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c" ], r = e.strSplit(c), n = [ '"a b" ""', "c" ], a.identical(r, n), 
              a.case = "quoted in the middle with space first", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " ", " c", '"' ], r = e.strSplit(c), n = [ '"a b"', '""', "c" ], 
              a.identical(r, n), a.case = "quoted in the middle with space last", (c = e.mapExtend(null, t)).src = '"a b" "" c', 
              c.delimeter = [ "a b", " c", '"', " " ], r = e.strSplit(c), n = [ '"a b"', '""', "c" ], 
              a.identical(r, n), a.case = "delimeter with empty string at the beginning of array", 
              (c = e.mapExtend(null, t)).src = '"a b" "" c', c.delimeter = [ "", "a b", " ", "", " c" ], 
              r = e.strSplit(c), n = [ '"a b"', '""', "c" ], a.identical(r, n), a.case = "quoted in the middle", 
              (c = e.mapExtend(null, t)).src = '"a b" x "" c', c.delimeter = [ "a b", " ", " c", '"', "" ], 
              r = e.strSplit(c), n = [ '"a b"', "x", '""', "c" ], a.identical(r, n), 
              /* special quoting tests */
              a.case = "quoted at edges, delimeter : #", (c = e.mapExtend(null, t)).src = '"aa"bb"cc"', 
              c.delimeter = [ "#" ], r = e.strSplit(c), n = [ '"aa"bb"cc"' ], a.identical(r, n), 
              a.close("s:1 q:1 pe:0"), 
              /* - */
              a.open("s:1 q:1 pe:0 pq:1 iq:0 delimeter:#"), t = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 0,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: "#"
              }, a.case = 'quoted at edges"', (c = e.mapExtend(null, t)).src = '"aa"bb"cc"', r = e.strSplit(c), 
              n = [ '"aa"', "bb", '"cc"' ], a.identical(r, n), a.case = 'quoted at edges with extra quote inside "', 
              (c = e.mapExtend(null, t)).src = '"aa"bb""cc"', r = e.strSplit(c), n = [ '"aa"', "bb", '""', 'cc"' ], 
              a.identical(r, n), a.case = 'quoted at edges with # inside the first quoted text"', 
              (c = e.mapExtend(null, t)).src = '"a#a"bb""cc"', r = e.strSplit(c), n = [ '"a#a"', "bb", '""', 'cc"' ], 
              a.identical(r, n), a.case = 'quoted at edges with # inside not quoted text"', (c = e.mapExtend(null, t)).src = '"aa"b#b""cc"', 
              r = e.strSplit(c), n = [ '"aa"', "b", "#", "b", '""', 'cc"' ], a.identical(r, n), 
              a.case = 'quoted at edges with # inside the last quoted text"', (c = e.mapExtend(null, t)).src = '"aa"bb""c#c"', 
              r = e.strSplit(c), n = [ '"aa"', "bb", '""', "c", "#", 'c"' ], a.identical(r, n), 
              a.case = 'quoted at edges with # inside all 3 text splits"', (c = e.mapExtend(null, t)).src = '"a#a"b#b""c#c"', 
              r = e.strSplit(c), n = [ '"a#a"', "b", "#", "b", '""', "c", "#", 'c"' ], a.identical(r, n), 
              a.case = "quoted at edges with extra spaces on edges", (c = e.mapExtend(null, t)).src = ' "aa"bb"cc" ', 
              r = e.strSplit(c), n = [ '"aa"', "bb", '"cc"' ], a.identical(r, n), a.close("s:1 q:1 pe:0 pq:1 iq:0 delimeter:#"), 
              /* - */
              a.open("s:1 q:1 pe:0 pq:0 iq:1 delimeter:#"), t = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 0,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: "#"
              }, a.case = 'quoted at edges"', (c = e.mapExtend(null, t)).src = '"aa"bb"cc"', r = e.strSplit(c), 
              n = [ "aabbcc" ], a.identical(r, n), a.case = 'quoted at edges with extra quote inside "', 
              (c = e.mapExtend(null, t)).src = '"aa"bb""cc"', r = e.strSplit(c), n = [ 'aabbcc"' ], 
              a.identical(r, n), a.case = 'quoted at edges with # inside the first quoted text"', 
              (c = e.mapExtend(null, t)).src = '"a#a"bb""cc"', r = e.strSplit(c), n = [ 'a#abbcc"' ], 
              a.identical(r, n), a.case = 'quoted at edges with # inside not quoted text"', (c = e.mapExtend(null, t)).src = '"aa"b#b""cc"', 
              r = e.strSplit(c), n = [ "aab", "#", 'bcc"' ], a.identical(r, n), a.case = 'quoted at edges with # inside the last quoted text"', 
              (c = e.mapExtend(null, t)).src = '"aa"bb""c#c"', r = e.strSplit(c), n = [ "aabbc", "#", 'c"' ], 
              a.identical(r, n), a.case = 'quoted at edges with # inside all 3 text splits"', 
              (c = e.mapExtend(null, t)).src = '"a#a"b#b""c#c"', r = e.strSplit(c), n = [ "a#ab", "#", "bc", "#", 'c"' ], 
              a.identical(r, n), a.case = "quoted at edges with extra spaces on edges", (c = e.mapExtend(null, t)).src = ' "aa"bb"cc" ', 
              r = e.strSplit(c), n = [ "aabbcc" ], a.identical(r, n), a.close("s:1 q:1 pe:0 pq:0 iq:1 delimeter:#"), 
              /* - */
              a.open("complex");
              var i = 'Test check // ( Tools/base/l2/String / strSplit / delimeter:" " > space on the beginning and the end <  ) # 3 ... failed';
              a.case = "s:0 q:1 pe:1 pd:1 pq:0 iq:0";
              var c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              };
              r = e.strSplit(c), n = [ "Test check ", "/", "", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", " delimeter:", " ", "", " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:1 pd:1 pq:1 iq:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", " delimeter:", '" "', "", " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:1 pd:1 pq:0 iq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", " delimeter: ", " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:1 pd:1 pq:1 iq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", ' delimeter:" "', " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:0 pe:0 pd:0", c = {
                stripping: 0,
                quoting: 0,
                preservingEmpty: 0,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", " ( Tools", "base", "l2", "String ", " strSplit ", ' delimeter:" "', "space on the beginning and the end", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:0 pe:0 pd:1", c = {
                stripping: 0,
                quoting: 0,
                preservingEmpty: 0,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", ' delimeter:" "', " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:0 pe:1 pd:0", c = {
                stripping: 0,
                quoting: 0,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "", " ( Tools", "base", "l2", "String ", " strSplit ", ' delimeter:" "', "space on the beginning and the end", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:0 pe:1 pd:1", c = {
                stripping: 0,
                quoting: 0,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", ' delimeter:" "', " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:0 pd:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 0,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", " ( Tools", "base", "l2", "String ", " strSplit ", ' delimeter:" "', "space on the beginning and the end", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:0 pd:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 0,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", ' delimeter:" "', " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:0 pd:1 pq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 0,
                preservingDelimeters: 1,
                preservingQuoting: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "/", "/", " ( Tools", "/", "base", "/", "l2", "/", "String ", "/", " strSplit ", "/", ' delimeter:" "', " > ", "space on the beginning and the end", " < ", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:0 q:1 pe:1 pd:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check ", "", " ( Tools", "base", "l2", "String ", " strSplit ", ' delimeter:" "', "space on the beginning and the end", " ) # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:0 pe:0 pd:0", c = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 0,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "( Tools", "base", "l2", "String", "strSplit", 'delimeter:" "', "space on the beginning and the end", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:0 pe:0 pd:1", c = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 0,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "/", "/", "( Tools", "/", "base", "/", "l2", "/", "String", "/", "strSplit", "/", 'delimeter:" "', ">", "space on the beginning and the end", "<", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:0 pe:1 pd:0", c = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "", "( Tools", "base", "l2", "String", "strSplit", 'delimeter:" "', "space on the beginning and the end", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:0 pe:1 pd:1", c = {
                stripping: 1,
                quoting: 0,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "/", "", "/", "( Tools", "/", "base", "/", "l2", "/", "String", "/", "strSplit", "/", 'delimeter:" "', ">", "space on the beginning and the end", "<", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:0 pd:0", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 0,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "( Tools", "base", "l2", "String", "strSplit", 'delimeter:" "', "space on the beginning and the end", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:0 pd:1", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 0,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "/", "/", "( Tools", "/", "base", "/", "l2", "/", "String", "/", "strSplit", "/", 'delimeter:" "', ">", "space on the beginning and the end", "<", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:1 pd:0", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "", "( Tools", "base", "l2", "String", "strSplit", 'delimeter:" "', "space on the beginning and the end", ") # 3 ... failed" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:1 pd:1", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                delimeter: [ " > ", " < ", "/" ],
                src: i
              }, r = e.strSplit(c), n = [ "Test check", "/", "", "/", "( Tools", "/", "base", "/", "l2", "/", "String", "/", "strSplit", "/", 'delimeter:" "', ">", "space on the beginning and the end", "<", ") # 3 ... failed" ], 
              a.identical(r, n), i = '\n= Org\n\n- Q: "Where?"\n- A1: "Here."\n\n- A2: "There."\n', 
              a.case = "s:1 q:1 pe:1 pd:0 pq:1 iq:1", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ "\n" ],
                src: i
              }, r = e.strSplit(c), n = [ "", "= Org", "", '- Q: "Where?"', '- A1: "Here."', "", '- A2: "There."', "" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:1 pd:0 pq:1 iq:0", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ "\n" ],
                src: i
              }, r = e.strSplit(c), n = [ "", "= Org", "", "- Q:", '"Where?"', "", "- A1:", '"Here."', "", "", "- A2:", '"There."', "", "" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:1 pd:0 pq:0 iq:1", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ "\n" ],
                src: i
              }, r = e.strSplit(c), n = [ "", "= Org", "", "- Q: Where?", "- A1: Here.", "", "- A2: There.", "" ], 
              a.identical(r, n), a.case = "s:1 q:1 pe:1 pd:0 pq:0 iq:0", c = {
                stripping: 1,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ "\n" ],
                src: i
              }, r = e.strSplit(c), n = [ "", "= Org", "", "- Q:", "Where?", "", "- A1:", "Here.", "", "", "- A2:", "There.", "", "" ], 
              a.identical(r, n), a.case = "quoted at edges, s:1 q:1 pe:1 pd:0 pq:0 iq:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ '"' ],
                src: '"a b" " c"'
              }, n = [ "", "a b", " ", " c", "" ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted at edges, s:1 q:1 pe:1 pd:0 pq:0 iq:1", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ '"' ],
                src: '"a b" " c"'
              }, n = [ "a b  c" ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted at edges, s:1 q:1 pe:1 pd:0 pq:1 iq:0", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ '"' ],
                src: '"a b" " c"'
              }, n = [ "", '"a b"', " ", '" c"', "" ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted at edges, s:1 q:1 pe:1 pd:0 pq:1 iq:1", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ '"' ],
                src: '"a b" " c"'
              }, n = [ '"a b" " c"' ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted in the middle, s:1 q:1 pe:1 pd:0 pq:1 iq:1", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ '"' ],
                src: '"a b" """x" c'
              }, n = [ '"a b" """x" c' ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted in the middle, s:1 q:1 pe:1 pd:0 pq:1 iq:0", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ '"' ],
                src: '"a b" """x" c'
              }, n = [ "", '"a b"', " ", '""', "", '"x"', " c" ], r = e.strSplit(c), a.identical(r, n), 
              a.case = "quoted in the middle, s:1 q:1 pe:1 pd:0 pq:0 iq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ '"' ],
                src: '"a b" """x" c'
              }, n = [ "a b x c" ], r = e.strSplit(c), a.identical(r, n), a.case = "quoted in the middle, s:1 q:1 pe:1 pd:0 pq:0 iq:0", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ '"' ],
                src: '"a b" """x" c'
              }, n = [ "", "a b", " ", "", "", "x", " c" ], r = e.strSplit(c), a.identical(r, n), 
              /* */
              a.case = "extra quote, s:1 q:1 pe:1 pd:0 pq:1 iq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ "#" ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ '"aa"bb""cc"' ], a.identical(r, n), a.case = "extra quote, s:1 q:1 pe:1 pd:0 pq:0 iq:1", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ "#" ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ 'aabbcc"' ], a.identical(r, n), a.case = "extra quote, s:1 q:1 pe:1 pd:0 pq:1 iq:0", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ "#" ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ "", '"aa"', "bb", '""', 'cc"' ], a.identical(r, n), 
              a.case = "extra quote, s:1 q:1 pe:1 pd:0 pq:0 iq:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 0,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ "#" ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ "", "aa", "bb", "", 'cc"' ], a.identical(r, n), 
              /* */
              a.case = "extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:1 iq:1", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 1,
                inliningQuoting: 1,
                delimeter: [ "#", '"' ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ '"aa"bb""cc', '"', "" ], a.identical(r, n), a.case = "extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:0 iq:1", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 0,
                inliningQuoting: 1,
                delimeter: [ "#", '"' ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ "aabbcc", '"', "" ], a.identical(r, n), a.case = "extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:1 iq:0", 
              c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 1,
                inliningQuoting: 0,
                delimeter: [ "#", '"' ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ "", '"aa"', "bb", '""', "cc", '"', "" ], a.identical(r, n), 
              a.case = "extra quote as delimeter, s:1 q:1 pe:1 pd:1 pq:0 iq:0", c = {
                stripping: 0,
                quoting: 1,
                preservingEmpty: 1,
                preservingDelimeters: 1,
                preservingQuoting: 0,
                inliningQuoting: 0,
                delimeter: [ "#", '"' ],
                src: '"aa"bb""cc"'
              }, r = e.strSplit(c), n = [ "", "aa", "bb", "", "cc", '"', "" ], a.identical(r, n), 
              /* - */
              a.close("complex");
            }
            // //
            //
            // function strSplitNaive( test )
            // {
            //
            //   test.case = 'returns an array of strings';
            //   debugger;
            //   var got = _.strSplitNaive( 'test test test' );
            //   debugger;
            //   var expected = [ 'test', 'test', 'test' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'split string into an array of strings';
            //   var got = _.strSplitNaive( ' test   test   test ' );
            //   var expected = [ 'test', 'test', 'test' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'returns an array of strings';
            //   var got = _.strSplitNaive( ' test   test   test ', 'redundant argument' );
            //   var expected = [ 'test   test   test' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'returns an array of strings';
            //   var got = _.strSplitNaive( ' test <delimteter>  test<delimteter>   test ', '<delimteter>' );
            //   var expected = [ 'test', 'test', 'test' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'simple string, default options';
            //   var got = _.strSplitNaive( 'a b c d' );
            //   var expected = [ 'a', 'b', 'c', 'd' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'arguments as map';
            //   var got = _.strSplitNaive( { src : 'a,b,c,d', delimeter : ','  } );
            //   var expected = [ 'a', 'b', 'c', 'd' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'delimeter as array';
            //   var got = _.strSplitNaive( { src : 'a,b.c.d', delimeter : [ ',', '.' ]  } );
            //   var expected = [ 'a', 'b', 'c', 'd' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'zero delimeter length';
            //   var got = _.strSplitNaive( { src : 'a,b.c.d', delimeter : []  } );
            //   var expected = [ 'a,b.c.d' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'stripping off';
            //   var got = _.strSplitNaive( { src : '    a,b,c,d   ', delimeter : [ ',' ], stripping : 0  } );
            //   var expected = [ '    a', 'b', 'c', 'd   ' ];
            //   test.identical( got, expected );
            //
            //   /* */
            //
            //   test.case = 'preserving delimeters, many delimeters, delimeter on the begin';
            //   var got = _.strSplitNaive({ src : '.content', preservingDelimeters : 1, delimeter : [ '.','#' ] })
            //   var expected = [ '.','content' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'preserving delimeters, many delimeters, delimeter on the end';
            //   var got = _.strSplitNaive({ src : 'content.', preservingDelimeters : 1, delimeter : [ '.','#' ] })
            //   var expected = [ 'content','.' ];
            //   test.identical( got, expected );
            //
            //   /* */
            //
            //   test.case = 'many delimeters having common, preserving empty';
            //   var src = 'Aa <<! <<- Bb';
            //   var expected = [ 'Aa',' ','','<<!','',' ','','<<-','',' ','Bb' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1,
            //     stripping : 0,
            //   });
            //
            //   test.identical( got, expected );
            //   test.case = 'many delimeters having common, removing empty';
            //   var src = 'Aa <<! <<- Bb';
            //   var expected = [ 'Aa',' ','<<!',' ','<<-',' ','Bb' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
            //     preservingEmpty : 0,
            //     preservingDelimeters : 1,
            //     stripping : 0,
            //   });
            //   test.identical( got, expected );
            //
            //   /* */
            //
            //   test.case = 'having long common';
            //   var src = 'Aa <<<- Bb';
            //   var expected = [ 'Aa',' ','','<<<-','',' ','Bb' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1,
            //     stripping : 0,
            //   });
            //   test.identical( got, expected );
            //
            //   /* */
            //
            //   test.case = 'having long common 2';
            //   var src = 'a1 a2 a3 <<<- Bb';
            //   var expected = [ 'a1',' ','a2',' ','a3',' ','','<<<-','',' ','Bb' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '->>>','<<<-','->>','<<-','!>>','<<!','>>','<<',' ' ],
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1,
            //     stripping : 0,
            //   });
            //   test.identical( got, expected );
            //
            //   /*delimeter not exist in src*/
            //
            //   var src = 'a,b,c';
            //   var expected = [ 'a,b,c' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '.' ],
            //     preservingDelimeters : 1
            //   });
            //   test.identical( got, expected );
            //
            //   /*delimeter not exist in src*/
            //
            //   var src = 'a,b,c';
            //   var expected = [ 'a,b,c' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ '.' ],
            //     preservingDelimeters : 1
            //   });
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   test.case = 'preservingEmpty';
            //
            //   var src = 'a ., b ., c ., d';
            //   var expected = [ 'a', '', 'b', '', 'c', '', 'd' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : [ ',', '.' ],
            //     preservingEmpty : 1
            //   });
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var src = 'a , b , c , d';
            //   var expected = [ 'a', 'b', 'c', 'd' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : ',',
            //     preservingEmpty : 1
            //   });
            //   test.identical( got, expected );
            //
            //
            //   /**/
            //
            //   var src = ',';
            //   var expected = [ '', '' ];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : ',',
            //     preservingEmpty : 1
            //   });
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var src = ',,,';
            //   var expected = [];
            //   var got = _.strSplitNaive
            //   ({
            //     src,
            //     delimeter : ',',
            //     preservingEmpty : 0
            //   });
            //   test.identical( got, expected );
            //
            //   /* take into acount text inside " " */
            //
            //   test.case = 'take into acount text inside ""';
            //
            //   var o =
            //   {
            //     src : '"/path/with space/" a b c',
            //     quoting : 1,
            //     preservingEmpty : 1,
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ '/path/with space/', '', 'a', '', 'b', '', 'c' ];
            //   test.identical( got, expected );
            //
            //   test.case = 'take into acount text inside ""';
            //
            //   var o =
            //   {
            //     src : '"/path/with space/" a b c',
            //     quoting : 1,
            //     preservingEmpty : 0,
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ '/path/with space/', 'a', 'b', 'c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : 'a "/path with/empty space/" a',
            //     quoting : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a', '/path with/empty space/', 'a' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b c" "a b c" "a b c"',
            //     quoting : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b c', 'a b c', 'a b c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b c" "a b c" "a b c"',
            //     quoting : 1,
            //     preservingEmpty : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b c', '', 'a b c', '', 'a b c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b c"x"a b c"x"a b c"',
            //     quoting : 1,
            //     delimeter : [ 'x' ],
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b c', 'x', 'a b c', 'x', 'a b c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c"',
            //     quoting : 0,
            //     delimeter : [ '"' ],
            //     stripping : 1,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ '', '\"', 'a b', '\"', '', '\"', '', '\"', 'c', '\"', '' ]
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c',
            //     quoting : 0,
            //     delimeter : [ '"' ],
            //     stripping : 0,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ '', '\"', 'a b', '\"', ' ', '\"', '', '\"', ' c' ];
            //   test.identical( got, expected );
            //
            //   var o =
            //   {
            //     src : '"a b" "" c',
            //     quoting : 1,
            //     delimeter : [ '"' ],
            //     stripping : 0,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b', ' ', '', ' c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c',
            //     quoting : 1,
            //     delimeter : [ '"' ],
            //     stripping : 0,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b', ' ', '', ' c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c',
            //     quoting : 1,
            //     delimeter : [ '"' ],
            //     stripping : 1,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b', '', '', 'c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c"',
            //     quoting : 1,
            //     delimeter : [ '"' ],
            //     stripping : 1,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b', '', '', 'c' ];
            //   test.identical( got, expected );
            //
            //   /**/
            //
            //   var o =
            //   {
            //     src : '"a b" "" c"',
            //     quoting : 1,
            //     delimeter : [ '"' ],
            //     stripping : 0,
            //     preservingEmpty : 1,
            //     preservingDelimeters : 1
            //   }
            //   var got = _.strSplitNaive( o );
            //   var expected = [ 'a b', ' ', '', ' c' ];
            //   test.identical( got, expected );
            //
            //   /*
            //     stripping : 1,
            //     quoting : 1,
            //     preservingEmpty : 0,
            //   */
            //
            //   var op =
            //   {
            //     stripping : 1,
            //     quoting : 1,
            //     preservingEmpty : 0,
            //   }
            //
            //   /* */
            //
            //   if( !Config.debug )
            //   return;
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowError( function( )
            //   {
            //     _.strSplitNaive( );
            //   } );
            //
            //   test.case = 'argument is wrong';
            //   test.shouldThrowError( function( )
            //   {
            //     _.strSplitNaive( [  ] );
            //   } );
            //
            //   test.case = 'argument is wrong';
            //   test.shouldThrowError( function( )
            //   {
            //     _.strSplitNaive( 13 );
            //   } );
            //
            //   test.case = 'invalid arguments count';
            //   test.shouldThrowError( function()
            //   {
            //     _.strSplitNaive( '1', '2', '3' );
            //   });
            //
            //   test.case = 'invalid argument type';
            //   test.shouldThrowError( function()
            //   {
            //     _.strSplitNaive( 123 );
            //   });
            //
            //   test.case = 'invalid option type';
            //   test.shouldThrowError( function()
            //   {
            //     _.strSplitNaive( { src : 3 } );
            //   });
            //
            //   test.case = 'invalid option defined';
            //   test.shouldThrowError( function()
            //   {
            //     _.strSplitNaive( { src : 'word', delimeter : 0, left : 1 } );
            //   });
            //
            //   test.case = 'no arguments';
            //   test.shouldThrowError( function()
            //   {
            //     _.strSplitNaive();
            //   });
            //
            // }
            //
            ,
            // strSplitNaive,
            strSplitStrNumber: function strSplitStrNumber(a) {
              a.case = "returns object with one property";
              var r = e.strSplitStrNumber("abcdef"), n = {
                str: "abcdef"
              };
              a.identical(r, n), a.case = "returns object with two properties", r = e.strSplitStrNumber("abc3def"), 
              n = {
                str: "abc",
                number: 3
              }, a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.strSplitStrNumber();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strSplitStrNumber([]);
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strSplitStrNumber(13);
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.strSplitStrNumber("abc3", "redundant argument");
              });
            }
            //
            ,
            strStrip: 
            //
            /* qqq : uncover it please */
            function strStrip(a) {
              /**/
              for (var r = [ {
                description: "defaults, src is a string"
              }, {
                src: "",
                expected: ""
              }, {
                src: "a",
                expected: "a"
              }, {
                src: "   a   ",
                expected: "a"
              }, {
                src: " \0 a \0 ",
                expected: "a"
              }, {
                src: "\r\n\t\f\v a \v\r\n\t\f",
                expected: "a"
              }, {
                src: "\r\n\t\f\v hello world \v\r\n\t\f",
                expected: "hello world"
              }, {
                description: "stripper contains regexp special symbols"
              }, {
                src: {
                  src: "\\s\\s",
                  stripper: "\\s"
                },
                expected: ""
              }, {
                src: {
                  src: "(x)(x)",
                  stripper: "(x)"
                },
                expected: ""
              }, {
                src: {
                  src: "abc",
                  stripper: "[abc]"
                },
                expected: "abc"
              }, {
                src: {
                  src: "[abc]",
                  stripper: "[abc]"
                },
                expected: ""
              }, {
                src: {
                  src: "abc",
                  stripper: "[^abc]"
                },
                expected: "abc"
              }, {
                src: {
                  src: "abc",
                  stripper: "[a-c]"
                },
                expected: "abc"
              }, {
                src: {
                  src: "[a-c]",
                  stripper: "[a-c]"
                },
                expected: ""
              }, {
                src: {
                  src: "ab(a|b)",
                  stripper: "(a|b)"
                },
                expected: "ab"
              }, {
                src: {
                  src: "gp",
                  stripper: "a+"
                },
                expected: "gp"
              }, {
                src: {
                  src: "hp",
                  stripper: "b{3}"
                },
                expected: "hp"
              }, {
                src: {
                  src: "acbc",
                  stripper: "^[ab]c$"
                },
                expected: "acbc"
              }, {
                description: "stripper is regexp"
              }, {
                src: {
                  src: " abc",
                  stripper: /[abc]/
                },
                expected: " bc"
              }, {
                src: {
                  src: "abc",
                  stripper: /\D/
                },
                expected: "bc"
              }, {
                src: {
                  src: "abc",
                  stripper: /[abc]$/
                },
                expected: "ab"
              }, {
                src: {
                  src: "abc",
                  stripper: /abc/
                },
                expected: ""
              }, {
                src: {
                  src: "hello",
                  stripper: /lo?/
                },
                expected: "helo"
              }, {
                description: "defaults, src is an array",
                src: [ "", "a", "   a   ", " \0 a \0 ", "\r\n\t\f\v a \v\r\n\t\f" ],
                expected: [ "", "a", "a", "a", "a" ]
              }, {
                description: "src array of strings, custom stripper",
                src: {
                  src: [ "", "a", " a ", "  a  ", " \n ", " a b c " ],
                  stripper: " "
                },
                expected: [ "", "a", "a", "a", "\n", "abc" ]
              }, {
                description: "src array of strings, custom stripper as regexp",
                src: {
                  src: [ "x", "xx", "axbxc", "x\nx" ],
                  stripper: new RegExp("x")
                },
                expected: [ "", "x", "abxc", "\nx" ]
              }, {
                description: "src array of strings, custom stripper as regexp",
                src: {
                  src: [ "abc", "acb", "bac", "cab" ],
                  stripper: /abc|[abc]/
                },
                expected: [ "", "cb", "ac", "ab" ]
              }, {
                description: "src array of strings, custom stripper as regexp",
                src: {
                  src: [ "abc", "acb", "bac", "bca", "cba", "cab" ],
                  stripper: /[abc]/g
                },
                expected: [ "", "", "", "", "", "" ]
              }, {
                description: "src string, stripper array of strings",
                src: {
                  src: "xxyy",
                  stripper: [ "x", "y" ]
                },
                expected: ""
              }, {
                src: {
                  src: "jjkk",
                  stripper: [ "x", "y" ]
                },
                expected: "jjkk"
              }, {
                description: "invalid type",
                args: 0,
                err: !0
              }, {
                description: "too many arguments",
                args: [ "a", "" ],
                err: !0
              }, {
                description: "null argument",
                args: [ null ],
                err: !0
              }, {
                description: "NaN arguments",
                args: [ NaN ],
                err: !0
              }, {
                description: "one string has invalid type",
                args: [ [ "a", 0, "b" ] ],
                err: !0
              }, {
                description: "stripper has invalid type",
                args: [ {
                  src: "a",
                  stripper: 0
                } ],
                err: !0
              }, {
                description: "stripper has invalid type",
                args: [ {
                  src: "a",
                  stripper: [ "a", 0 ]
                } ],
                err: !0
              }, {
                description: "null stripper",
                args: [ {
                  src: [ "a", "b" ],
                  stripper: null
                } ],
                err: !0
              }, {
                description: "NaN stripper",
                args: [ {
                  src: [ "a", "b" ],
                  stripper: NaN
                } ],
                err: !0
              } ], n = 0; n < r.length; n++) {
                var t = r[n];
                if (t.description && (a.case = t.description), t.err && a.shouldThrowError(() => e.strStrip.apply(e, e.arrayAs(t.args))), 
                t.src && !a.identical(e.strStrip(t.src), t.expected)) {
                  debugger;
                  a.identical(e.strStrip(t.src), t.expected);
                  debugger;
                }
              }
            }
            //
            ,
            strStripLeft: function strStripLeft(a) {
              /**/
              for (var r = [ {
                description: "defaults, src is a string"
              }, {
                src: "   a   ",
                expected: "a   "
              }, {
                src: " \0 a \0 ",
                expected: "a \0 "
              }, {
                src: "\r\v a \v\r\n\t\f",
                expected: "a \v\r"
              }, {
                src: "\0 hello world \0",
                expected: "hello world \0"
              }, {
                description: "defaults, src is an array",
                src: [ "", "a", "   a   ", " \0 a \0 ", "\r\n\t\f\v a \v\r" ],
                expected: [ "", "a", "a   ", "a \0 ", "a \v\r" ]
              }, {
                description: "invalid type",
                args: 0,
                err: !0
              }, {
                description: "too many arguments",
                args: [ "a", "" ],
                err: !0
              }, {
                description: "null argument",
                args: [ null ],
                err: !0
              }, {
                description: "NaN arguments",
                args: [ NaN ],
                err: !0
              }, {
                description: "one string has invalid type",
                args: [ [ "a", 0, "b" ] ],
                err: !0
              } ], n = 0; n < r.length; n++) {
                var t = r[n];
                if (t.description && (a.case = t.description), t.err && a.shouldThrowError(() => e.strStripLeft.apply(e, e.arrayAs(t.args))), 
                t.src && !a.identical(e.strStripLeft(t.src), t.expected)) {
                  debugger;
                  a.identical(e.strStripLeft(t.src), t.expected);
                  debugger;
                }
              }
            }
            //
            ,
            strStripRight: function strStripRight(a) {
              /**/
              for (var r = [ {
                description: "defaults, src is a string"
              }, {
                src: "   ul   ",
                expected: "   ul"
              }, {
                src: " \0 om \0 ",
                expected: " \0 om"
              }, {
                src: "\r\v a \v\n\t\f\r",
                expected: "\r\v a"
              }, {
                src: "\0 hello world \0",
                expected: "\0 hello world"
              }, {
                description: "defaults, src is an array",
                src: [ "", "a", "   a   ", " \0 a \0 ", "\r\v a \v\n\t\f\r" ],
                expected: [ "", "a", "   a", " \0 a", "\r\v a" ]
              }, {
                description: "invalid type",
                args: 0,
                err: !0
              }, {
                description: "too many arguments",
                args: [ "a", "" ],
                err: !0
              }, {
                description: "null argument",
                args: [ null ],
                err: !0
              }, {
                description: "NaN arguments",
                args: [ NaN ],
                err: !0
              }, {
                description: "one string has invalid type",
                args: [ [ "a", 0, "b" ] ],
                err: !0
              } ], n = 0; n < r.length; n++) {
                var t = r[n];
                if (t.description && (a.case = t.description), t.err && a.shouldThrowError(() => e.strStripRight.apply(e, e.arrayAs(t.args))), 
                t.src && !a.identical(e.strStripRight(t.src), t.expected)) {
                  debugger;
                  a.identical(e.strStripRight(t.src), t.expected);
                  debugger;
                }
              }
            }
            //
            ,
            strRemoveAllSpaces: function strRemoveAllSpaces(a) {
              a.case = "removes the spaces from the borders";
              var r = e.strRemoveAllSpaces("  abcdef  "), n = "abcdef";
              a.identical(r, n), a.case = "removes the spaces from the given string", r = e.strRemoveAllSpaces("a b c d e f"), 
              n = "abcdef", a.identical(r, n), a.case = "replaces the all spaces with the commas", 
              r = e.strRemoveAllSpaces("a b c d e f", ","), n = "a,b,c,d,e,f", a.identical(r, n), 
              a.case = "simple string, default options", r = e.strRemoveAllSpaces("a b c d e"), 
              n = "abcde", a.identical(r, n), a.case = "sub defined", r = e.strRemoveAllSpaces("a b c d e", ", "), 
              n = "a, b, c, d, e", a.identical(r, n), a.case = "empty string", r = e.strRemoveAllSpaces(" "), 
              n = "", a.identical(r, n), a.case = "sub as word", r = e.strRemoveAllSpaces("a b c", " and "), 
              n = "a and b and c", a.identical(r, n), a.case = "sub as number", r = e.strRemoveAllSpaces("a b c", 0), 
              n = "a0b0c", a.identical(r, n), a.case = "sub as array", r = e.strRemoveAllSpaces("a b c d e", [ 5, 6 ]), 
              n = "a5,6b5,6c5,6d5,6e", a.identical(r, n), a.case = "sub as null", r = e.strRemoveAllSpaces("a b c d e", null), 
              n = "anullbnullcnulldnulle", a.identical(r, n), a.case = "sub as NaN", r = e.strRemoveAllSpaces("a b c d e", NaN), 
              n = "aNaNbNaNcNaNdNaNe", a.identical(r, n), a.case = "sub as regexp", r = e.strRemoveAllSpaces("a b c d e", /a$/), 
              n = "a/a$/b/a$/c/a$/d/a$/e", a.identical(r, n), a.case = "vectorized input", r = e.strRemoveAllSpaces([ "  a b ", "c  d ", " e f " ]), 
              n = [ "ab", "cd", "ef" ], a.identical(r, n), a.case = "vectorized input", r = e.strRemoveAllSpaces([ "  a b ", "c  d ", " e f " ], "-"), 
              n = [ "--a-b-", "c--d-", "-e-f-" ], a.identical(r, n), a.case = "vectorized input", 
              r = e.strRemoveAllSpaces([ "  a b ", "c  d ", " e f " ], 3), n = [ "33a3b3", "c33d3", "3e3f3" ], 
              a.identical(r, n), a.case = "vectorized input", r = e.strRemoveAllSpaces([ "a b", "cd ", " ef" ], [ 0, 1 ]), 
              n = [ "a0,1b", "cd0,1", "0,1ef" ], a.identical(r, n), a.case = "invalid arguments count", 
              a.shouldThrowError(function() {
                e.strRemoveAllSpaces("1", "2", "3");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strRemoveAllSpaces(123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strRemoveAllSpaces();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strRemoveAllSpaces(13);
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.strRemoveAllSpaces("a b c d e f", ",", "redundant argument");
              }), a.case = "Null argument", a.shouldThrowError(function() {
                e.strRemoveAllSpaces(null);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strRemoveAllSpaces(NaN);
              }), a.case = "Regexp argument", a.shouldThrowError(function() {
                e.strRemoveAllSpaces(/^a/);
              });
            }
            //
            ,
            strStripEmptyLines: function strStripEmptyLines(a) {
              a.case = "simple string";
              var r = e.strStripEmptyLines("line_one\n\nline_two"), n = "line_one\nline_two";
              a.identical(r, n), a.case = "empty string", r = e.strStripEmptyLines(""), n = "", 
              a.identical(r, n), a.case = "single line", r = e.strStripEmptyLines("b"), n = "b", 
              a.identical(r, n), a.case = "multiple breaklines", r = e.strStripEmptyLines("\n\na\n\nb\n\n\n"), 
              n = "a\nb", a.identical(r, n), a.case = "Lines with spaces", r = e.strStripEmptyLines(" line one\n\n line two \n\n line 3 \n"), 
              n = " line one\n line two \n line 3 ", a.identical(r, n), a.case = "Lines with spaces and tabs", 
              r = e.strStripEmptyLines(" line one\n\t\n\n line \t two \n\n line 3 \n"), n = " line one\n line \t two \n line 3 ", 
              a.identical(r, n), a.case = "Array input", r = e.strStripEmptyLines([ "  a \n\n b ", " \nc  d \n\n\n " ]), 
              n = [ "  a \n b ", "c  d " ], a.identical(r, n), a.case = "Empty array input", r = e.strStripEmptyLines([]), 
              n = [], a.identical(r, n), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strStripEmptyLines("1", "2", "3");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strStripEmptyLines(123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strStripEmptyLines();
              }), a.case = "null argument", a.shouldThrowError(function() {
                e.strStripEmptyLines(null);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strStripEmptyLines(NaN);
              }), a.case = "Regexp argument", a.shouldThrowError(function() {
                e.strStripEmptyLines(/a?$/);
              }), a.case = "Array with wrong arguments", a.shouldThrowError(function() {
                e.strStripEmptyLines([ null, NaN, 3, /a?$/ ]);
              });
            }
            //
            ,
            strSub: function strSub(a) {
              a.case = "simple string - get all";
              var r = e.strSub("Hello", [ 0, 5 ]), n = "Hello";
              a.identical(r, n), a.case = "simple string - range bigger than length", r = e.strSub("Hello", [ 0, 8 ]), 
              n = "Hello", a.identical(r, n), a.case = "simple string - get subString", r = e.strSub("Hello", [ 0, 4 ]), 
              n = "Hell", a.identical(r, n), a.case = "simple string - get end of string", r = e.strSub("Hello", [ 3, 5 ]), 
              n = "lo", a.identical(r, n), a.case = "simple string - range reversed", r = e.strSub("Hello", [ 4, 0 ]), 
              n = "Hell", a.identical(r, n), a.case = "simple string - range in the middle of the string", 
              r = e.strSub("Hello", [ 2, 3 ]), n = "l", a.identical(r, n), a.case = "empty string", 
              r = e.strSub("", [ 2, 3 ]), n = "", a.identical(r, n), a.case = "Input array", r = e.strSub([ "Hello", "World" ], [ 3, 4 ]), 
              n = [ "l", "l" ], a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.strSub();
              }), a.case = "Too many arguments", a.shouldThrowError(function() {
                e.strSub("1", "2", "3");
              }), a.case = "Too many ranges", a.shouldThrowError(function() {
                e.strSub("Hello world", [ 0, 1 ], [ 2, 3 ]);
              }), a.case = "Not enough arguments", a.shouldThrowError(function() {
                e.strSub("1");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strSub(123, [ 0, 1 ]);
              }), a.case = "null argument", a.shouldThrowError(function() {
                e.strSub(null, [ 0, 1 ]);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strSub(NaN, [ 0, 1 ]);
              }), a.case = "Regexp argument", a.shouldThrowError(function() {
                e.strSub(/a?$/, [ 0, 1 ]);
              }), a.case = "invalid argument range", a.shouldThrowError(function() {
                e.strSub("hi ", 123);
              }), a.case = "null range", a.shouldThrowError(function() {
                e.strSub("good morning", null);
              }), a.case = "NaN range", a.shouldThrowError(function() {
                e.strSub("good afternoon", NaN);
              }), a.case = "Regexp range", a.shouldThrowError(function() {
                e.strSub("good night", /a?$/);
              }), a.case = "Array with wrong arguments", a.shouldThrowError(function() {
                e.strSub([ null, NaN, 3, /a?$/ ], [ 0, 1 ]);
              }), a.case = "Range array with wrong arguments", a.shouldThrowError(function() {
                e.strSub([ "Hello", "world" ], [ null, NaN ]);
              }), a.case = "Range array empty", a.shouldThrowError(function() {
                e.strSub([ "Hello", "world" ], []);
              }), a.case = "Range array with not enough arguments", a.shouldThrowError(function() {
                e.strSub([ "Hello", "world" ], [ 2 ]);
              }), a.case = "Range array with too many arguments", a.shouldThrowError(function() {
                e.strSub([ "Hello", "world" ], [ 2, 3, 4 ]);
              });
            }
            //
            ,
            strReplaceWords: function strReplaceWords(a) {
              a.case = "simple string";
              var r = e.strReplaceWords("a b c d", [ "b", "c" ], [ "x", "y" ]), n = "a x y d";
              a.identical(r, n), a.case = "escaping string", r = e.strReplaceWords("\na b \n c d", [ "b", "c" ], [ "x", "y" ]), 
              n = "\na x \n y d", a.identical(r, n), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strReplaceWords("1", "2");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strReplaceWords(123, [], []);
              }), a.case = "invalid arrays length", a.shouldThrowError(function() {
                e.strReplaceWords("one two", [ "one" ], [ "one", "two" ]);
              }), a.case = "invalid second arg type", a.shouldThrowError(function() {
                e.strReplaceWords("one two", 5, [ "one", "two" ]);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strReplaceWords();
              });
            }
            //
            ,
            strJoin: function strJoin(a) {
              /* - */
              a.open("single argument"), a.case = "join nothing";
              var r = e.strJoin([]), n = [];
              a.identical(r, n), a.case = "join empty vector", r = e.strJoin([ [] ]), n = [], 
              a.identical(r, n), a.case = "join empty vectors", r = e.strJoin([ [], [] ]), n = [], 
              a.identical(r, n), a.case = "join empty vector and string", r = e.strJoin([ [], "abc" ]), 
              n = [], a.identical(r, n), 
              // test.case = 'join empty vector and strings';
              // var got = _.strJoin([ [], [ 'abc', 'def' ] ]);
              // var expected = [];
              // test.identical( got, expected );
              a.case = "join numbers", r = e.strJoin([ 1, 2, 3 ]), n = "123", a.identical(r, n), 
              a.case = "join strings", r = e.strJoin([ "1", "2", "3" ]), n = "123", a.identical(r, n), 
              a.case = "join two arrays", r = e.strJoin([ [ "b", "c" ], [ "x", "y" ] ]), n = [ "bx", "cy" ], 
              a.identical(r, n), a.case = "join string + number", r = e.strJoin([ 1, 2, "3" ]), 
              n = "123", a.identical(r, n), a.case = "join array + string", r = e.strJoin([ [ 1, 2 ], "3" ]), 
              n = [ "13", "23" ], a.identical(r, n), a.case = "join array + number", r = e.strJoin([ [ 1, 2 ], 3 ]), 
              n = [ "13", "23" ], a.identical(r, n), a.case = "one argument", r = e.strJoin([ "1" ]), 
              n = "1", a.identical(r, n), a.case = "NaN argument", r = e.strJoin([ "1", NaN ]), 
              n = "1NaN", a.identical(r, n), a.case = "different types", r = e.strJoin([ 1, "2", [ "3", 4 ], 5, "6" ]), 
              n = [ "12356", "12456" ], a.identical(r, n), a.case = "different types with two arrays", 
              r = e.strJoin([ "1", 2, [ 3, 4, 5 ], [ 6, 7, 8 ] ]), n = [ "1236", "1247", "1258" ], 
              a.identical(r, n), a.close("single argument"), 
              /* - */
              a.open("two arguments"), a.case = "join number array with joiner", r = e.strJoin([ 1, 2 ], "3"), 
              n = "132", a.identical(r, n), a.case = "join string array with joiner", r = e.strJoin([ "b", "c" ], "0"), 
              n = "b0c", a.identical(r, n), a.case = "join string array with joiner", r = e.strJoin([ "Hello", "world", "!" ], " "), 
              n = "Hello world !", a.identical(r, n), a.case = "join array and joiner", r = e.strJoin([ 0, [ "1", "2" ] ], "3"), 
              n = [ "031", "032" ], a.identical(r, n), a.case = "join arrays and joiner", r = e.strJoin([ 0, [ "1", "2" ], [ "a", "b" ] ], "-"), 
              n = [ "0-1-a", "0-2-b" ], a.identical(r, n), a.case = "join umber arrays and joiner", 
              r = e.strJoin([ [ 0, 3, 6 ], [ 1, 4, 7 ], [ 2, 5, 8 ] ], "x"), n = [ "0x1x2", "3x4x5", "6x7x8" ], 
              a.identical(r, n), a.case = "join array + string + joiner", r = e.strJoin([ [ 1, 2 ], "3" ], "__"), 
              n = [ "1__3", "2__3" ], a.identical(r, n), a.case = "Undefined joiner", r = e.strJoin([ [ 1, 2 ], "3" ], void 0), 
              n = [ "13", "23" ], a.identical(r, n), a.close("two arguments"), a.case = "No arguments", 
              a.shouldThrowError(function() {
                e.strJoin();
              }), a.case = "Too many arguments", a.shouldThrowError(function() {
                e.strJoin("1", "2", "3");
              }), a.case = "Empty arguments", a.shouldThrowError(function() {
                e.strJoin([], []);
              }), a.case = "invalid argument type in array", a.shouldThrowError(function() {
                e.strJoin([ {
                  a: 1
                }, [ 1 ], [ 2 ] ]);
              }), a.case = "null argument in array", a.shouldThrowError(function() {
                e.strJoin([ "1", null ]);
              }), a.case = "null argument in array", a.shouldThrowError(function() {
                e.strJoin([ "1", void 0 ]);
              }), a.case = "RegExp argument in array", a.shouldThrowError(function() {
                e.strJoin([ "1", /a?/ ]);
              }), a.case = "arrays with different lengths in array", a.shouldThrowError(function() {
                e.strJoin([ [ 1, 2 ], [ 1 ], [ 2 ] ]);
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strJoin({
                  a: 1
                }, [ 1 ]);
              }), a.case = "null argument", a.shouldThrowError(function() {
                e.strJoin([ "1" ], null, null);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strJoin([ "1" ], NaN);
              }), a.case = "Wrong argument", a.shouldThrowError(function() {
                e.strJoin("1", 2);
              }), a.case = "RegExp argument", a.shouldThrowError(function() {
                e.strJoin("1", /a?/);
              }), a.case = "arrays with different length", a.shouldThrowError(function() {
                e.strJoin([ 1, 2 ], [ 1 ]);
              });
            }
            //
            ,
            strJoinPath: function strJoinPath(a) {
              // Simple
              a.case = "Empty";
              var r = e.strJoinPath([], ""), n = "";
              a.identical(r, n), a.case = "join string array with joiner", r = e.strJoinPath([ "b", "c" ], "0"), 
              n = "b0c", a.identical(r, n), a.case = "join string array with joiner", r = e.strJoinPath([ "Hello", "world", "!" ], " "), 
              n = "Hello world !", a.identical(r, n), a.case = "join array with joiner", r = e.strJoinPath([ "1", "2", "4" ], "/"), 
              n = "1/2/4", a.identical(r, n), a.case = "join array with joiner ( only numbers )", 
              r = e.strJoinPath([ 1, 2, 4 ], "/"), n = "1/2/4", a.identical(r, n), a.case = "join array with joiner ( string and numbers )", 
              r = e.strJoinPath([ 1, "4 is smaller than 2", 4 ], "/"), n = "1/4 is smaller than 2/4", 
              a.identical(r, n), a.case = "join array and joiner", r = e.strJoinPath([ "0", [ "1", "2" ] ], "3"), 
              n = [ "031", "032" ], a.identical(r, n), a.case = "join arrays and joiner", r = e.strJoinPath([ "0", [ "1", "2" ], [ "a", "b" ] ], "-"), 
              n = [ "0-1-a", "0-2-b" ], a.identical(r, n), a.case = "join arrays and joiner", 
              r = e.strJoinPath([ [ "0", "3", "6" ], [ "1", "4", "7" ], [ "2", "5", "8" ] ], "x"), 
              n = [ "0x1x2", "3x4x5", "6x7x8" ], a.identical(r, n), a.case = "join array + string + joiner", 
              r = e.strJoinPath([ [ "1", "2" ], "3" ], "__"), n = [ "1__3", "2__3" ], a.identical(r, n), 
              a.case = "join array + string + joiner ( with numbers )", r = e.strJoinPath([ [ 1, 2 ], 3, "string" ], "__"), 
              n = [ "1__3__string", "2__3__string" ], a.identical(r, n), 
              //Joiner in src strings
              a.case = "String does not end with joiner", r = e.strJoinPath([ "Hi,", "world" ], "/"), 
              n = "Hi,/world", a.identical(r, n), a.case = "String ends with joiner", r = e.strJoinPath([ "Hi,", "world" ], ","), 
              n = "Hi,world", a.identical(r, n), a.case = "String ends with joiner", r = e.strJoinPath([ "Hi,", "world", 2 ], ","), 
              n = "Hi,world,2", a.identical(r, n), a.case = "String does not begin with joiner", 
              r = e.strJoinPath([ "Hi", ",world" ], "/"), n = "Hi/,world", a.identical(r, n), 
              a.case = "String begins with joiner", r = e.strJoinPath([ "Hi", ",world" ], ","), 
              n = "Hi,world", a.identical(r, n), a.case = "String begins and ends with joiner", 
              r = e.strJoinPath([ "/1/", "/2/", "/3/", 4, "/5/" ], "/"), n = "/1/2/3/4/5/", a.identical(r, n), 
              a.case = "String begins and ends with joiner", r = e.strJoinPath([ "/1//", "/2//", "//4/" ], "/"), 
              n = "/1//2///4/", a.identical(r, n), a.case = "No arguments", a.shouldThrowError(function() {
                e.strJoinPath();
              }), a.case = "Too few arguments", a.shouldThrowError(function() {
                e.strJoinPath([ "1" ]);
              }), a.case = "Too many arguments", a.shouldThrowError(function() {
                e.strJoinPath([ "1" ], "2", "3");
              }), a.case = "invalid argument type in array", a.shouldThrowError(function() {
                e.strJoinPath([ {
                  a: 1
                }, [ "1" ], [ "2" ] ], "/");
              }), a.case = "null argument in array", a.shouldThrowError(function() {
                e.strJoinPath([ "1", null ], "/");
              }), a.case = "null argument in array", a.shouldThrowError(function() {
                e.strJoinPath([ "1", void 0 ], "/");
              }), a.case = "RegExp argument in array", a.shouldThrowError(function() {
                e.strJoinPath([ "1", /a?/ ], "/");
              }), a.case = "arrays with different lengths in array", a.shouldThrowError(function() {
                e.strJoinPath([ [ 1, 2 ], [ 1 ], [ 2 ] ], "/");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strJoinPath({
                  a: 1
                }, [ 1 ]);
              }), a.case = "null argument", a.shouldThrowError(function() {
                e.strJoinPath([ "1" ], null);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strJoinPath([ "1" ], NaN);
              }), a.case = "Wrong argument", a.shouldThrowError(function() {
                e.strJoinPath("1", 2);
              }), a.case = "RegExp argument", a.shouldThrowError(function() {
                e.strJoinPath("1", /a?/);
              }), a.case = "arrays with different length", a.shouldThrowError(function() {
                e.strJoinPath([ [ 1, 2 ], [ 1 ] ], "/");
              });
            }
            //
            ,
            strUnjoin: function strUnjoin(a) {
              var r = e.strUnjoin.any;
              a.case = "case 1";
              var n = e.strUnjoin("prefix_something_postfix", [ "prefix", r, "postfix" ]), t = [ "prefix", "_something_", "postfix" ];
              a.identical(n, t), a.case = "case 2a", n = e.strUnjoin("prefix_something_postfix", [ r, "something", "postfix" ]), 
              t = void 0, a.identical(n, t), a.case = "case 2b", n = e.strUnjoin("prefix_something_postfix", [ r, "something", r, "postfix" ]), 
              t = [ "prefix_", "something", "_", "postfix" ], a.identical(n, t), a.case = "case 3a", 
              n = e.strUnjoin("prefix_something_postfix", [ "something", "postfix", r ]), t = void 0, 
              a.identical(n, t), a.case = "case 3b", n = e.strUnjoin("prefix_something_postfix", [ r, "something", r, "postfix", r ]), 
              t = [ "prefix_", "something", "_", "postfix", "" ], a.identical(n, t), a.case = "case 4", 
              n = e.strUnjoin("abc", [ r ]), t = [ "abc" ], a.identical(n, t), a.case = "case 5", 
              n = e.strUnjoin("abc", [ "a", r ]), t = [ "a", "bc" ], a.identical(n, t), a.case = "case 5b", 
              n = e.strUnjoin("abc", [ r, "a" ]), t = void 0, a.identical(n, t), a.case = "case 6", 
              n = e.strUnjoin("abc", [ "b", r ]), t = void 0, a.identical(n, t), a.case = "case 6b", 
              n = e.strUnjoin("abc", [ r, "b" ]), t = void 0, a.identical(n, t), a.case = "case 7", 
              n = e.strUnjoin("abc", [ r, "c" ]), t = [ "ab", "c" ], a.identical(n, t), a.case = "case 7b", 
              n = e.strUnjoin("abc", [ "c", r ]), t = void 0, a.identical(n, t), a.case = "case 8", 
              n = e.strUnjoin("abc", [ "a", r, "c" ]), t = [ "a", "b", "c" ], a.identical(n, t), 
              a.case = "case 9", n = e.strUnjoin("abc", [ r, "b", r ]), t = [ "a", "b", "c" ], 
              a.identical(n, t), a.case = "case 9b", n = e.strUnjoin("abc", [ r, "c", r ]), t = [ "ab", "c", "" ], 
              a.identical(n, t), a.case = "no arguments", a.shouldThrowError(function() {
                e.strUnjoin();
              }), a.case = "Not enough arguments", a.shouldThrowError(function() {
                e.strUnjoin("1");
              }), a.case = "Too many arguments", a.shouldThrowError(function() {
                e.strUnjoin("1", "2", "3");
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strUnjoin(123, []);
              }), a.case = "invalid second arg type", a.shouldThrowError(function() {
                e.strUnjoin("one two", 123);
              }), a.case = "invalid array element type", a.shouldThrowError(function() {
                e.strUnjoin("one two", [ 1, "two" ]);
              }), a.case = "null first argument type", a.shouldThrowError(function() {
                e.strUnjoin(null, []);
              }), a.case = "null second arg type", a.shouldThrowError(function() {
                e.strUnjoin("one two", null);
              }), a.case = "null array element type", a.shouldThrowError(function() {
                e.strUnjoin("one two", [ null, "two" ]);
              }), a.case = "NaN first argument type", a.shouldThrowError(function() {
                e.strUnjoin(NaN, []);
              }), a.case = "NaN second arg type", a.shouldThrowError(function() {
                e.strUnjoin("one two", NaN);
              }), a.case = "NaN array element type", a.shouldThrowError(function() {
                e.strUnjoin("one two", [ NaN, "two" ]);
              }), a.case = "RegExp first argument type", a.shouldThrowError(function() {
                e.strUnjoin(/\d$/, []);
              }), a.case = "RegExp second arg type", a.shouldThrowError(function() {
                e.strUnjoin("one two", /\D$/);
              }), a.case = "RegExp array element type", a.shouldThrowError(function() {
                e.strUnjoin("one two", [ /^\d/, "two" ]);
              });
            }
            //
            ,
            strUnicodeEscape: function strUnicodeEscape(a) {
              a.case = "simple string";
              var r = e.strUnicodeEscape("prefix"), n = "\\u0070\\u0072\\u0065\\u0066\\u0069\\u0078";
              a.identical(r, n), a.case = "escaping", r = e.strUnicodeEscape("\npostfix//"), n = "\\u000a\\u0070\\u006f\\u0073\\u0074\\u0066\\u0069\\u0078\\u002f\\u002f", 
              a.identical(r, n), a.case = "empty string", r = e.strUnicodeEscape(""), n = "", 
              a.identical(r, n), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strUnicodeEscape("1", "2", "3");
              }), a.case = "invalid  argument type", a.shouldThrowError(function() {
                e.strUnicodeEscape(123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strUnicodeEscape();
              });
            }
            //
            ,
            strCount: function strCount(a) {
              a.open("string"), a.case = "none";
              var r = e.strCount("abc", "z"), n = 0;
              a.identical(r, n), a.case = "nl", r = e.strCount("abc\ndef\nghi", "\n"), n = 2, 
              a.identical(r, n), a.case = "simple string", r = e.strCount("ababacabacabaaba", "aba"), 
              n = 4, a.identical(r, n), a.case = "empty src", r = e.strCount("", "abc"), n = 0, 
              a.identical(r, n), a.case = "empty ins", r = e.strCount("abc", ""), n = 3, a.identical(r, n), 
              a.close("string"), 
              /* */
              a.open("regexp"), a.case = "none", r = e.strCount("abc", /z/), n = 0, a.identical(r, n), 
              a.case = "nl", r = e.strCount("abc\ndef\nghi", /\n/m), n = 2, a.identical(r, n), 
              a.case = "simple string", r = e.strCount("ababacabacabaaba", /aba/), n = 4, a.identical(r, n), 
              a.case = "empty src", r = e.strCount("", /a/), n = 0, a.identical(r, n), a.case = "empty ins", 
              r = e.strCount("abc", RegExp("")), n = 3, a.identical(r, n), a.close("regexp"), 
              a.case = "no arguments", a.shouldThrowError(function() {
                e.strCount();
              }), a.case = "first argument is wrong", a.shouldThrowError(function() {
                e.strCount([], "\n");
              }), a.case = "second argument is wrong", a.shouldThrowError(function() {
                e.strCount("abc\ndef\nghi", 13);
              }), a.case = "not enough arguments", a.shouldThrowError(function() {
                e.strCount("abc\ndef\nghi");
              }), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strCount("1", "2", "3");
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strCount(123, "1");
              }), a.case = "invalid second arg type", a.shouldThrowError(function() {
                e.strCount("one two", 123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strCount();
              });
            }
            //
            ,
            strDup: function strDup(a) {
              a.case = "srcString  and number of times remain unchanged";
              var r = e.strDup("Hi, ", 3), n = "Hi, Hi, Hi, ";
              a.identical(r, n), a.identical("Hi, ", "Hi, "), a.identical(3, 3), a.case = "concatenation test", 
              r = e.strDup("a", 2), n = "aa", a.identical(r, n), a.case = "simple string", r = e.strDup("ab", 2), 
              n = "abab", a.identical(r, n), a.case = "invalid times value", r = e.strDup("a", -2), 
              n = "", a.identical(r, n), a.case = "zero times", r = e.strDup("a", 0), n = "", 
              a.identical(r, n), a.case = "returns the empty string", r = e.strDup("abc ", 0), 
              n = "", a.identical(r, n), a.case = "Second argument NaN", r = e.strDup("abc", NaN), 
              n = "", a.identical(r, n), a.case = "Two words with a spaces", r = e.strDup("Hi world ", 2), 
              n = "Hi world Hi world ", a.identical(r, n), a.case = "one space", r = e.strDup(" ", 2), 
              n = "  ", a.identical(r, n), a.case = "returns the first copy of the given string", 
              r = e.strDup("abc", 1), n = "abc", a.identical(r, n), a.case = "copies and concatenates first argument three times", 
              r = e.strDup("abc", 3), n = "abcabcabc", a.identical(r, n), a.case = "copies and concatenates first argument 10 times", 
              r = e.strDup("1", 10), n = "1111111111", a.identical(r, n), a.case = "vectorized input concatenated negative times", 
              r = e.strDup([ "ab", "cd", "ef" ], -2), n = [ "", "", "" ], a.identical(r, n), a.case = "vectorized input concatenated zero times", 
              r = e.strDup([ "ab", "cd", "ef" ], 0), n = [ "", "", "" ], a.identical(r, n), a.case = "vectorized input concatenated one time", 
              r = e.strDup([ "ab", "cd", "ef" ], 1), n = [ "ab", "cd", "ef" ], a.identical(r, n), 
              a.case = "vectorized input concatenated 3 times", r = e.strDup([ "ab", "cd", "ef" ], 3), 
              n = [ "ababab", "cdcdcd", "efefef" ], a.identical(r, n), a.case = "Empty vectorized input", 
              r = e.strDup([], 3), n = [], a.identical(r, n), a.case = "no arguments", a.shouldThrowError(function() {
                e.strDup();
              }), a.case = "second argument is not provided", a.shouldThrowError(function() {
                e.strDup("a");
              }), a.case = "first argument is not provided", a.shouldThrowError(function() {
                e.strDup(3);
              }), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strDup("1");
              }), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strDup("1", "2", 3);
              }), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strDup("1", "2", "3");
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strDup(123, 1);
              }), a.case = "times is not number", a.shouldThrowError(function() {
                e.strDup("ab", [ 3, 4 ]);
              }), a.case = "invalid second arg type", a.shouldThrowError(function() {
                e.strDup("one", "two");
              }), a.case = "second argument is wrong", a.shouldThrowError(function() {
                e.strDup("a", "wrong argument");
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strDup(1, 2);
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strDup([ 1, 2 ], 2);
              }), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strDup([ "1", 2 ], 2);
              }), a.case = "invalid second argument type", a.shouldThrowError(function() {
                e.strDup("1", "2");
              }), a.case = "null argument", a.shouldThrowError(function() {
                e.strDup(null, 2);
              }), a.case = "null second argument", a.shouldThrowError(function() {
                e.strDup("2", null);
              }), a.case = "undefined argument", a.shouldThrowError(function() {
                e.strDup(void 0, 2);
              }), a.case = "undefined second argument", a.shouldThrowError(function() {
                e.strDup("2", void 0);
              }), a.case = "NaN argument", a.shouldThrowError(function() {
                e.strDup(NaN, 2);
              }), a.case = "Regexp argument", a.shouldThrowError(function() {
                e.strDup(/^\d/, 2);
              }), a.case = "regExp second argument", a.shouldThrowError(function() {
                e.strDup("2", /^\d/);
              });
            }
            //
            ,
            strLinesSelect: function strLinesSelect(a) {
              var r = "a\nb\nc\nd";
              /* */
              a.case = "single line selection", 
              /**/
              t = e.strLinesSelect("", 1), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect("abc", 1), i = "abc", a.identical(t, i), 
              /**/
              t = e.strLinesSelect("abc", 0), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, 1), i = "a", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, 2), i = "b", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, -1), i = "", a.identical(t, i), 
              /* line number bigger then actual count of lines */
              t = e.strLinesSelect(r, 99), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, 1, 2), i = "a", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 1, 2 ]), i = "a", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ -1, 2 ]), i = "a", a.identical(t, i), 
              /* - */
              a.case = "multiline selection", 
              /**/
              t = e.strLinesSelect(r, [ -1, -1 ]), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect("", [ 1, 3 ]), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 1, 3 ]), i = "a\nb", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ -1, 2 ]), i = "a", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 1, 4 ]), i = "a\nb\nc", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 99, 4 ]), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 1, 99 ]), i = r, a.identical(t, i), 
              /**/
              t = e.strLinesSelect(r, [ 2, 5 ]), i = "b\nc\nd", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                range: [ 2, 5 ],
                zero: 4
              }), i = "a", a.identical(t, i), 
              /* - */
              a.case = "selection without range provided, selectMode : center", 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 2,
                numberOfLines: 3,
                selectMode: "center",
                zero: 1
              }), i = "a\nb\nc", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 3,
                selectMode: "center",
                zero: 1
              }), i = "a\nb", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 1,
                selectMode: "center",
                zero: 1
              }), i = "a", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 99,
                selectMode: "center",
                zero: 1
              }), i = r, a.identical(t, i), r = "a\nb\nc\nd", t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: -1,
                selectMode: "center",
                zero: 1
              }), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 0,
                numberOfLines: 1,
                selectMode: "center",
                zero: 1
              }), i = "", a.identical(t, i), t = e.strLinesSelect({
                src: "",
                line: 1,
                numberOfLines: 1,
                selectMode: "center",
                zero: 1
              }), i = "", a.identical(t, i), 
              /* - */
              a.case = "selection without range provided, selectMode : begin", 
              /*two lines from begining of the string*/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 2,
                selectMode: "begin",
                zero: 1
              }), i = "a\nb", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: -1,
                numberOfLines: 2,
                selectMode: "begin",
                zero: 1
              }), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 0,
                selectMode: "begin",
                zero: 1
              }), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 99,
                selectMode: "begin",
                zero: 1
              }), i = r, a.identical(t, i), 
              /* zero > range[ 0 ] */
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 5,
                selectMode: "begin",
                zero: 2
              }), i = r, a.identical(t, i), 
              /* - */
              a.case = "selection without range provided, selectMode : end", 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 4,
                numberOfLines: 2,
                selectMode: "end"
              }), i = "c\nd", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: -1,
                numberOfLines: 2,
                selectMode: "end"
              }), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 0,
                selectMode: "end"
              }), i = "", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 99,
                selectMode: "end"
              }), i = "a", a.identical(t, i), 
              /* zero > range[ 0 ] */
              t = e.strLinesSelect({
                src: r,
                line: 1,
                numberOfLines: 5,
                selectMode: "end",
                zero: 2
              }), i = "", a.identical(t, i), 
              /* - */
              a.case = "custom new line";
              var n = "a b c d"
              /**/;
              t = e.strLinesSelect({
                src: n,
                range: [ 1, 3 ],
                delimteter: " "
              }), i = "a b", a.identical(t, i), 
              /**/
              t = e.strLinesSelect({
                src: n,
                range: [ 1, 3 ],
                delimteter: "x"
              }), i = n, a.identical(t, i), 
              /* - */
              a.case = "number"
              /**/ , t = e.strLinesSelect({
                src: r,
                range: [ 1, 3 ],
                number: 1
              }), i = "1 : a\n2 : b", a.identical(t, i), r = "Lorem\n  ipsum dolor\n  sit amet,\n  consectetur\n  adipisicing\n  elit", 
              /* - */
              a.case = "first line";
              var t = e.strLinesSelect(r, 1), i = "Lorem";
              a.identical(t, i), 
              /* - */
              a.case = "first two lines", t = e.strLinesSelect(r, 1, 3), i = "Lorem\n  ipsum dolor", 
              a.identical(t, i), 
              /* - */
              a.case = "range as array", t = e.strLinesSelect(r, [ 1, 3 ]), i = "Lorem\n  ipsum dolor", 
              a.identical(t, i), a.case = "custom new line", n = "Lorem||ipsum dolor||sit amet||consectetur", 
              t = e.strLinesSelect({
                src: n,
                range: [ 3, 5 ],
                zero: 1,
                delimteter: "||"
              }), i = "sit amet||consectetur", a.identical(t, i), 
              /* - */
              a.case = "empty line, out of range", t = e.strLinesSelect({
                src: "",
                range: [ 1, 1 ]
              }), i = "", a.identical(t, i), 
              /* - */
              a.case = "empty line", t = e.strLinesSelect({
                src: "",
                range: [ 0, 1 ]
              }), i = "", a.identical(t, i), 
              /* - */
              a.case = "incorrect range", t = e.strLinesSelect({
                src: r,
                range: [ 2, 1 ]
              }), i = "", a.identical(t, i), a.case = "invalid first argument type", a.shouldThrowError(function() {
                e.strLinesSelect(1, 1);
              }), a.case = "invalid second argument type", a.shouldThrowError(function() {
                e.strLinesSelect("lorem\nipsum\n", "second");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strLinesSelect();
              }), a.case = "unknown property provided", a.shouldThrowError(function() {
                e.strLinesSelect({
                  src: "lorem\nipsum\n",
                  range: [ 0, 1 ],
                  x: 1
                });
              });
            }
            //
            ,
            strLinesStrip: function strLinesStrip(a) {
              a.case = "Argument is only one string", a.case = "Src stays unchanged";
              var r = e.strLinesStrip("\na\n\nbc\ndef\n"), n = "a\nbc\ndef";
              a.identical(r, n), a.identical("\na\n\nbc\ndef\n", "\na\n\nbc\ndef\n"), a.case = "Empty string", 
              r = e.strLinesStrip(""), n = "", a.identical(r, n), a.case = "Only escape sequences", 
              r = e.strLinesStrip("\n\t\r"), n = "", a.identical(r, n), a.case = "String without escape sequences and begin/end spaces", 
              r = e.strLinesStrip("Hello world"), n = "Hello world", a.identical(r, n), a.case = "String with begin/end spaces", 
              r = e.strLinesStrip("  Hello world   "), n = "Hello world", a.identical(r, n), a.case = "String with begin/end escape sequences", 
              r = e.strLinesStrip("\t\r\nHello world\r\n\t"), n = "Hello world", a.identical(r, n), 
              a.case = "String with escape sequences", r = e.strLinesStrip("\n\tHello\r\n\tworld\r\n"), 
              n = "Hello\nworld", a.identical(r, n), a.case = "String with escape sequences", 
              r = e.strLinesStrip("\n\tHello\r\n\t\t\r\nworld\r\n"), n = "Hello\nworld", a.identical(r, n), 
              a.case = "String with escape sequences and spaces", r = e.strLinesStrip("\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t"), 
              n = "Hello\nWorld\n!", a.identical(r, n), 
              //
              a.case = "Argument is only one array", a.case = "Src stays unchanged";
              var t = [ "\na\n\nbc\ndef\n" ];
              r = e.strLinesStrip(t), n = [ "a\n\nbc\ndef" ], a.identical(r, n), a.identical(t, [ "\na\n\nbc\ndef\n" ]), 
              a.case = "Empty array", r = e.strLinesStrip([]), n = [], a.identical(r, n), a.case = "Empty array with empty string", 
              r = e.strLinesStrip([ "" ]), n = [], a.identical(r, n), a.case = "Only escape sequences", 
              r = e.strLinesStrip([ "", "\t\r\n" ]), n = [], a.identical(r, n), a.case = "String without escape sequences and begin/end spaces", 
              r = e.strLinesStrip([ "Hello world", "", "\t\r\n" ]), n = [ "Hello world" ], a.identical(r, n), 
              a.case = "String with begin/end spaces", r = e.strLinesStrip([ "  Hello ", " world   " ]), 
              n = [ "Hello", "world" ], a.identical(r, n), a.case = "String with begin/end escape sequences", 
              r = e.strLinesStrip([ "\t\r\nHello  ", "  world\r\n\t" ]), n = [ "Hello", "world" ], 
              a.identical(r, n), a.case = "String with escape sequences", r = e.strLinesStrip([ "\n\tHello\r\n\tworld\r\n" ]), 
              n = [ "Hello\r\n\tworld" ], a.identical(r, n), a.case = "String with escape sequences", 
              r = e.strLinesStrip("\n\tHello\r\n\t\t\r\nworld\r\n"), n = "Hello\nworld", a.identical(r, n), 
              a.case = "String with escape sequences and spaces", r = e.strLinesStrip([ "\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t", "  \nHow are you?  \r  \n  \t  " ]), 
              n = [ "Hello  \r\n\t\t\r\n World \t\r\n!", "How are you?" ], a.identical(r, n), 
              //
              a.case = "Several arguments", a.case = "Several strings", r = e.strLinesStrip("\n\tHello  \r\n\t\t\r\n", " World \t\r\n! \r\n\t", " \nHow are you?  "), 
              n = [ "Hello", "World\n!", "How are you?" ], a.identical(r, n), a.case = "Several arrays", 
              r = e.strLinesStrip([ "\n\tHello  \r\n\t\t\r\n", " World \t\r\n! \r\n\t" ], [ " \n\nHow  ", " \r\nare\t", " you \n ?  \r" ], [ "  \n\r\t " ]), 
              n = [ [ "Hello", "World \t\r\n!" ], [ "How", "are", "you \n ?" ], [] ], a.identical(r, n), 
              a.case = "Several strings and arrays", r = e.strLinesStrip("\n\tHello  \r\n\t\t\r\n", [ " World \t\r\n ", " ! \r\n\t" ], [ " \n\nHow  ", " \r\nare\t", " you \n ?  \r" ], " I am \n\r\t good \n\n "), 
              n = [ "Hello", [ "World", "!" ], [ "How", "are", "you \n ?" ], "I am\ngood" ], a.identical(r, n), 
              //
              a.case = "Compare input string and input array", a.case = "Input String";
              var i = "\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t\nHow are you?  ", c = e.strLinesStrip(i);
              n = [ "Hello", "World", "!", "How are you?" ], a.identical(c.split("\n"), n), a.case = "Input Array";
              var s = (i = "\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t\nHow are you?  ").split("\n"), l = e.strLinesStrip(s);
              n = [ "Hello", "World", "!", "How are you?" ], a.identical(l, n), a.case = "Input one line string and array", 
              s = [ i = "\tHello  World \t! \r" ], c = e.strLinesStrip(i), l = e.strLinesStrip(s), 
              a.identical(l[0], c), a.case = "Input string and array", s = (i = "\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t").split("\n"), 
              c = e.strLinesStrip(i), l = e.strLinesStrip(s), a.identical(l, c.split("\n")), a.case = "Several Inputs string and array";
              var o = "\n\tHello  \r\n\t\t\r\n World \t\r\n! \r\n\t", d = o.split("\n"), u = "  How \n\n Are \r\n\t you   today \t\r\n? \r\n", y = u.split("\n"), m = "\n\t  I \t am \r\n\t \t\r\n Great ! ", p = m.split("\n");
              c = e.strLinesStrip(o, u, m), l = e.strLinesStrip(d, y, p), a.identical(l[0], c[0].split("\n")), 
              a.identical(l[1], c[1].split("\n")), a.identical(l[2], c[2].split("\n")), a.case = "no arguments", 
              a.shouldThrowError(() => e.strLinesStrip()), a.case = "Wrong type of argument", 
              a.shouldThrowError(() => e.strLinesStrip(null)), a.shouldThrowError(() => e.strLinesStrip(void 0)), 
              a.shouldThrowError(() => e.strLinesStrip(NaN)), a.shouldThrowError(() => e.strLinesStrip(3)), 
              a.shouldThrowError(() => e.strLinesStrip([ 3 ])), a.shouldThrowError(() => e.strLinesStrip(/^a/));
            }
            //
            ,
            strLinesNumber: function strLinesNumber(a) {
              a.case = "trivial", a.case = "returns the object";
              var r = e.strLinesNumber("abc\ndef\nghi"), n = "1 : abc\n2 : def\n3 : ghi";
              a.identical(r, n), a.case = "returns the object", r = e.strLinesNumber([]), n = "", 
              a.identical(r, n), 
              /* - */
              a.case = "string", 
              /**/
              r = e.strLinesNumber(""), n = "1 : ", a.identical(r, n), 
              /**/
              r = e.strLinesNumber("a"), n = "1 : a", a.identical(r, n), 
              /**/
              r = e.strLinesNumber("a\nb"), n = "1 : a\n2 : b", a.identical(r, n), 
              /**/
              r = e.strLinesNumber("a\nb", 2), n = "2 : a\n3 : b", a.identical(r, n), 
              /**/
              r = e.strLinesNumber("line1\nline2\nline3"), n = [ "1 : line1", "2 : line2", "3 : line3" ].join("\n"), 
              a.identical(r, n), 
              /**/
              r = e.strLinesNumber("\n\n"), n = [ "1 : ", "2 : ", "3 : " ].join("\n"), a.identical(r, n), 
              /* - */
              a.case = "array", 
              /**/
              r = e.strLinesNumber([ "line1", "line2", "line3" ]), n = [ "1 : line1", "2 : line2", "3 : line3" ].join("\n"), 
              /**/
              r = e.strLinesNumber([ "line", "line", "line" ], 2), n = [ "2 : line", "3 : line", "4 : line" ].join("\n"), 
              /**/
              r = e.strLinesNumber([ "line\n", "line\n", "line\n" ]), n = [ "1 : line\n", "2 : line\n", "3 : line\n" ].join("\n"), 
              a.case = "no arguments", a.shouldThrowError(function() {
                e.strLinesNumber();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strLinesNumber(13);
              }), a.case = "invalid  argument type", a.shouldThrowError(function() {
                e.strLinesNumber(123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strLinesNumber();
              });
            }
            //
            ,
            strLinesCount: function strLinesCount(a) {
              a.case = "returns 1";
              var r = "function( x, y ) { return x + y; }", n = e.strLinesCount(r), t = 1;
              a.identical(n, t), a.case = "returns 4", r = "function( x, y ) \n { \n   return x + y; \n }", 
              n = e.strLinesCount(r), t = 4, a.identical(n, t), a.case = "one line string test", 
              n = e.strLinesCount("one line"), t = 1, a.identical(n, t), a.case = "multiline string test", 
              n = e.strLinesCount("first line\nsecond line\nthird line"), t = 3, a.identical(n, t), 
              a.case = "multiline  text test", n = e.strLinesCount("one\n                             two\n                             three"), 
              t = 3, a.identical(n, t), a.case = "invalid arguments count", a.shouldThrowError(function() {
                e.strLinesCount("1", "2");
              }), a.case = "invalid argument type", a.shouldThrowError(function() {
                e.strLinesCount(123);
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strLinesCount();
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strLinesCount();
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strLinesCount([ 1, "\n", 2 ]);
              }), a.case = "argument is wrong", a.shouldThrowError(function() {
                e.strLinesCount(13);
              }), a.case = "too many arguments", a.shouldThrowError(function() {
                e.strLinesCount("function( x, y ) \n { \n   return x + y; \n }", "redundant argument");
              });
            }
            //
            ,
            strLinesNearest: function strLinesNearest(a) {
              var r = "\na\nbc\ndef\nghij\n\n";
              /* - */              a.open("Range is a number"), 
              /*  */
              a.open("numberOfLines : 0");
              var n = 6, t = e.strSub(r, [ n, n + 1 ]), i = [ "", "d", "" ], c = [ 6, 6, 7, 7 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 0
              });
              a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "d"), a.close("numberOfLines : 0"), 
              /*  */
              a.open("numberOfLines : 1"), n = 6, i = [ "", "d", "ef" ], c = [ 6, 6, 7, 9 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 1
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines : 1"), 
              /*  */
              a.open("numberOfLines : 2"), n = 6, i = [ "bc\n", "d", "ef" ], c = [ 3, 6, 7, 9 ], 
              s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 2
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines : 2"), 
              /*  */
              a.open("numberOfLines : 8 ( > all lines )"), n = 6, i = [ "\na\nbc\n", "d", "ef\nghij\n\n" ], 
              c = [ 0, 6, 7, 16 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 8
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines : 8 ( > all lines )"), 
              /*  */
              a.open("NaN range"), n = NaN, i = [ "", "", "" ], c = [ NaN, NaN, NaN, NaN ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 8
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("NaN range"), 
              /*  */
              a.close("Range is a number"), 
              /* - */
              a.open("aligned range, single line"), 
              /*  */
              a.open("numberOfLines not defined ( = 3 )"), n = [ 3, 5 ], i = [ "a\n", "bc", "\ndef" ], 
              c = [ 1, 3, 5, 9 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: void 0
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines not defined ( = 3 )"), 
              /*  */
              a.open("numberOfLines : NaN"), n = [ 3, 5 ], i = [ "\na\n", "bc", "\ndef\nghij\n\n" ], 
              c = [ void 0, 3, 5, void 0 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: NaN
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines : NaN"), 
              /*  */
              a.open("numberOfLines : null"), n = [ 3, 5 ], i = [ "", "bc", "bc" ], c = [ 3, 3, 5, 3 ], 
              s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: null
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.close("numberOfLines : null"), 
              /*  */
              a.open("numberOfLines : 0"), n = [ 6, 9 ], t = e.strSub(r, n), i = [ "", "def", "" ], 
              c = [ 6, 6, 9, 9 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 0
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "def"), a.close("numberOfLines : 0"), 
              /*  */
              a.open("numberOfLines : 1"), n = [ 6, 9 ], t = e.strSub(r, n), i = [ "", "def", "" ], 
              c = [ 6, 6, 9, 9 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 1
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "def"), a.close("numberOfLines : 1"), 
              /* */
              a.open("numberOfLines : 2"), n = [ 6, 9 ], t = e.strSub(r, n), i = [ "bc\n", "def", "" ], 
              c = [ 3, 6, 9, 9 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 2
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "def"), a.close("numberOfLines : 2"), 
              /* */
              a.open("numberOfLines : 3"), n = [ 6, 9 ], t = e.strSub(r, n), i = [ "bc\n", "def", "\nghij" ], 
              c = [ 3, 6, 9, 14 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 3
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "def"), a.close("numberOfLines : 3"), 
              /* */
              a.open("numberOfLines : 4"), n = [ 6, 9 ], t = e.strSub(r, n), i = [ "a\nbc\n", "def", "\nghij" ], 
              c = [ 1, 6, 9, 14 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 4
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "def"), a.close("numberOfLines : 4"), 
              /* - */
              a.close("aligned range, single line"), 
              /* - */
              a.open("not aligned range, several lines"), 
              /*  */
              a.open("numberOfLines : 0"), n = [ 4, 11 ], t = e.strSub(r, n), i = [ "", "c\ndef\ng", "" ], 
              c = [ 4, 4, 11, 11 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 0
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "c\ndef\ng"), a.close("numberOfLines : 0"), 
              /*  */
              a.open("numberOfLines : 1"), n = [ 4, 11 ], t = e.strSub(r, n), i = [ "b", "c\ndef\ng", "hij" ], 
              c = [ 3, 4, 11, 14 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 1
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "c\ndef\ng"), a.close("numberOfLines : 1"), 
              /* */
              a.open("numberOfLines : 2"), n = [ 4, 11 ], t = e.strSub(r, n), i = [ "a\nb", "c\ndef\ng", "hij" ], 
              c = [ 1, 4, 11, 14 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 2
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "c\ndef\ng"), a.close("numberOfLines : 2"), 
              /* */
              a.open("numberOfLines : 3"), n = [ 4, 11 ], t = e.strSub(r, n), i = [ "a\nb", "c\ndef\ng", "hij\n" ], 
              c = [ 1, 4, 11, 15 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 3
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "c\ndef\ng"), a.close("numberOfLines : 3"), 
              /* */
              a.open("numberOfLines : 4"), n = [ 4, 11 ], t = e.strSub(r, n), i = [ "\na\nb", "c\ndef\ng", "hij\n" ], 
              c = [ 0, 4, 11, 15 ], s = e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 4
              }), a.will = "check strLinesNearest", a.identical(s.splits, i), a.identical(s.spans, c), 
              a.will = "check strSub", a.identical(t, "c\ndef\ng"), a.close("numberOfLines : 4"), 
              /* - */
              a.close("not aligned range, several lines");
              debugger;
              console.log("done1"), logger.log("done2"), a.open("Wrong range"), n = [ 4, 11, 12 ], 
              a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: r,
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: r,
                charsRange: null,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: r,
                charsRange: "crange",
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: r,
                numberOfLines: 4
              })), a.close("Wrong range"), 
              /*  */
              a.open("Wrong src"), n = [ 4, 11 ], a.shouldThrowErrorSync(() => e.strLinesNearest({
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: null,
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: NaN,
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: void 0,
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: 3,
                charsRange: n,
                numberOfLines: 4
              })), a.shouldThrowErrorSync(() => e.strLinesNearest({
                src: [ "abd", "ef" ],
                charsRange: n,
                numberOfLines: 4
              })), a.close("Wrong src"), 
              /*  */
              a.open("Wrong arg"), a.shouldThrowErrorSync(() => e.strLinesNearest(3)), a.shouldThrowErrorSync(() => e.strLinesNearest([ 3, 4 ])), 
              a.shouldThrowErrorSync(() => e.strLinesNearest(null)), a.shouldThrowErrorSync(() => e.strLinesNearest(void 0)), 
              a.shouldThrowErrorSync(() => e.strLinesNearest(NaN)), a.shouldThrowErrorSync(() => e.strLinesNearest("args"));
              let l = {
                src: [ "abd", "ef" ],
                charsRange: n,
                numberOfLines: 4
              };
              a.shouldThrowErrorSync(() => e.strLinesNearest()), a.shouldThrowErrorSync(() => e.strLinesNearest(l, l)), 
              a.close("Wrong arg");
            }
            //
            ,
            strLinesRangeWithCharRange: function strLinesRangeWithCharRange(a) {
              a.open("embraced by empty lines");
              var r = "\na\nbc\ndef\nghij\n\n";
              a.case = "single line in the middle";
              /* */
              var n = [ 3, 5 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n);
              a.identical(i, [ 2, 3 ]), a.identical(t, "bc"), a.case = "line in the middle with NL", 
              n = [ 3, 6 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 2, 4 ]), 
              a.identical(t, "bc\n"), a.case = "single line in the beginning", n = [ 1, 2 ], t = e.strSub(r, n), 
              i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 1, 2 ]), a.identical(t, "a"), 
              a.case = "line in the beginning with NL", n = [ 1, 3 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), 
              a.identical(i, [ 1, 3 ]), a.identical(t, "a\n"), a.case = "single line in the end", 
              n = [ 10, 14 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 4, 5 ]), 
              a.identical(t, "ghij"), a.case = "line in the end with NL", n = [ 10, 15 ], t = e.strSub(r, n), 
              i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 4, 6 ]), a.identical(t, "ghij\n"), 
              a.case = "not aligned range with multiple lines", n = [ 4, 11 ], t = e.strSub(r, n), 
              i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 2, 5 ]), a.identical(t, "c\ndef\ng"), 
              a.case = "empty line in the beginning", n = [ 0, 0 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), 
              a.identical(i, [ 0, 1 ]), a.identical(t, ""), a.case = "empty line in the end", 
              n = [ 15, 15 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 5, 6 ]), 
              a.identical(t, ""), a.close("embraced by empty lines"), 
              /* */
              a.open("not embraced by empty lines"), r = "a\nbc\ndef\nghij", a.case = "single line in the middle", 
              n = [ 2, 4 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 1, 2 ]), 
              a.identical(t, "bc"), a.case = "line in the middle with NL", n = [ 2, 5 ], t = e.strSub(r, n), 
              i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 1, 3 ]), a.identical(t, "bc\n"), 
              a.case = "single line in the beginning", n = [ 0, 1 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), 
              a.identical(i, [ 0, 1 ]), a.identical(t, "a"), a.case = "line in the beginning with NL", 
              n = [ 0, 2 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 0, 2 ]), 
              a.identical(t, "a\n"), a.case = "single line in the end", n = [ 9, 13 ], t = e.strSub(r, n), 
              i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 3, 4 ]), a.identical(t, "ghij"), 
              a.case = "line in the end with NL", n = [ 9, 14 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), 
              a.identical(i, [ 3, 4 ]), a.identical(t, "ghij"), a.case = "not aligned range with multiple lines", 
              n = [ 3, 10 ], t = e.strSub(r, n), i = e.strLinesRangeWithCharRange(r, n), a.identical(i, [ 1, 4 ]), 
              a.identical(t, "c\ndef\ng"), a.close("not embraced by empty lines");
            }
            //
            ,
            strStrShort: function strStrShort(a) {
              a.case = "simple string";
              var r = e.strStrShort("string", 4), n = "'st' ... 'ng'";
              a.identical(r, n), a.case = "string with escaping", r = e.strStrShort("s\ntring", 4), 
              n = "'s' ... 'ng'", a.identical(r, n), a.case = "limit 0", r = e.strStrShort("string", 0), 
              n = "string", a.identical(r, n), a.case = "limit 1", r = e.strStrShort("string", 1), 
              n = "'s'", a.identical(r, n), a.case = "string wih spaces", r = e.strStrShort("source and", 5), 
              n = "'sou' ... 'nd'", a.identical(r, n), a.case = "one argument call", r = e.strStrShort({
                src: "string",
                limit: 4,
                wrap: "'"
              }), n = "'st' ... 'ng'", a.identical(r, n), a.case = "string with whitespaces", 
              r = e.strStrShort({
                src: "  simple string   ",
                limit: 4,
                wrap: "'"
              }), n = "'  ' ... '  '", a.identical(r, n), a.case = "wrap 0", r = e.strStrShort({
                src: "simple",
                limit: 4,
                wrap: 0
              }), n = "si ... le", a.identical(r, n), a.case = "escaping 0", r = e.strStrShort({
                src: "simple",
                limit: 5,
                wrap: '"',
                escaping: 0
              }), n = '"si" ... "le"', a.identical(r, n), a.case = "escaping 1", r = e.strStrShort({
                src: "string",
                limit: 4,
                wrap: '"'
              }), n = '"s" ... "ng"', a.identical(r, n), a.case = "invalid first argument type", 
              a.shouldThrowError(function() {
                e.strStrShort(1, 5);
              }), a.case = "invalid second argument type", a.shouldThrowError(function() {
                e.strStrShort("string", "0");
              }), a.case = "no arguments", a.shouldThrowError(function() {
                e.strStrShort();
              }), a.case = "unknown property provided", a.shouldThrowError(function() {
                e.strStrShort({
                  src: "string",
                  limit: 4,
                  wrap: 0,
                  fixed: 5
                });
              });
            }
            //
            ,
            strCommonLeft: function strCommonLeft(a) {
              a.case = "no args";
              var r = e.strCommonLeft(), n = "";
              a.identical(r, n), a.case = "one argument", r = e.strCommonLeft("abc"), n = "abc", 
              a.identical(r, n), a.case = "ins is empty string", r = e.strCommonLeft("", "a", "b"), 
              n = "", a.identical(r, n), a.case = "one string is empty", r = e.strCommonLeft("abc", "", "abc", "ada"), 
              n = "", a.identical(r, n), a.case = "no match", r = e.strCommonLeft("abcd", "abc", "d"), 
              n = "", a.identical(r, n), a.case = "several strings", r = e.strCommonLeft("abc", "abd", "abc", "ada"), 
              n = "a", a.identical(r, n), a.case = "several strings", r = e.strCommonLeft("abcd", "ab", "abc", "a"), 
              n = "a", a.identical(r, n), a.case = "Several character string", r = e.strCommonLeft("abc", "abcd", "abcde", "abcdef"), 
              n = "abc", a.identical(r, n), a.case = "Several character string", r = e.strCommonLeft("abcdef", "abcd", "abcde", "abc"), 
              n = "abc", a.identical(r, n), a.case = "Several character string", r = e.strCommonLeft("abcd", "abc", "abcd"), 
              n = "abc", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonLeft("abcd", "abc", 3), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonLeft("abcd", "abc", NaN), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonLeft("abcd", "ab", "abc", [ 3 ]), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonLeft("abcd", "ab", "abc", /a/), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonLeft("abcd", "ab", "abc", [ "abc" ]), 
              n = "", a.identical(r, n), a.case = "no match case", r = e.strCommonLeft("abcd", "ab", "Abc"), 
              n = "", a.identical(r, n), a.case = "ins is array", a.shouldThrowError(function() {
                e.strCommonLeft([ "a", "b", "c" ], "abd", "abc", "ada");
              }), a.case = "ins is number", a.shouldThrowError(function() {
                e.strCommonLeft(3, "abd", "abc", "ada");
              }), a.case = "ins is regExp", a.shouldThrowError(function() {
                e.strCommonLeft(/^a/, "abd", "abc", "ada");
              }), a.case = "ins is NaN", a.shouldThrowError(function() {
                e.strCommonLeft(NaN, "abd", "abc", "ada");
              }), a.case = "ins is null", a.shouldThrowError(function() {
                e.strCommonLeft(null, "abd", "abc", "ada");
              }), a.case = "One arg null", a.shouldThrowError(function() {
                e.strCommonLeft("abd", "abc", "ada", null);
              }), a.case = "ins is undefined", a.shouldThrowError(function() {
                e.strCommonLeft(void 0, "abd", "abc", "ada");
              }), a.case = "One arg undefined", a.shouldThrowError(function() {
                e.strCommonLeft("abd", "abc", "ada", void 0);
              });
            }
            //
            ,
            strCommonRight: function strCommonRight(a) {
              a.case = "no args";
              var r = e.strCommonRight(), n = "";
              a.identical(r, n), a.case = "one argument", r = e.strCommonRight("abc"), n = "abc", 
              a.identical(r, n), a.case = "ins is empty string", r = e.strCommonRight("", "ab", "b"), 
              n = "", a.identical(r, n), a.case = "one string is empty", r = e.strCommonRight("abc", "", "abc", "bc"), 
              n = "", a.identical(r, n), a.case = "no match", r = e.strCommonRight("abcd", "abc", "d"), 
              n = "", a.identical(r, n), a.case = "several strings", r = e.strCommonRight("a", "cba", "dba", "ada"), 
              n = "a", a.identical(r, n), a.case = "several strings", r = e.strCommonRight("abcd", "cd", "abcd", "d"), 
              n = "d", a.identical(r, n), a.case = "Several character string", r = e.strCommonRight("cdef", "abcdef", "def", "bcdef"), 
              n = "def", a.identical(r, n), a.case = "Several character string", r = e.strCommonRight("abcdef", "bcdef", "cdef", "def"), 
              n = "def", a.identical(r, n), a.case = "Several character string", r = e.strCommonRight("abcd", "bcd", "abcd"), 
              n = "bcd", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonRight("abc", "abc", 3), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonRight("acde", "bcde", NaN), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonRight("abcd", "abd", "ad", [ 3 ]), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonRight("c", "bc", "abc", /c/), 
              n = "", a.identical(r, n), a.case = "One arg is not a string", r = e.strCommonRight("abcd", "cd", "bcd", [ "abcd" ]), 
              n = "", a.identical(r, n), a.case = "no match case", r = e.strCommonRight("abcd", "cD", "AbcD"), 
              n = "", a.identical(r, n), a.case = "ins is array", a.shouldThrowError(function() {
                e.strCommonRight([ "a", "b", "c" ], "abd", "abc", "ada");
              }), a.case = "ins is number", a.shouldThrowError(function() {
                e.strCommonRight(3, "abd", "abc", "ada");
              }), a.case = "ins is regExp", a.shouldThrowError(function() {
                e.strCommonRight(/^a/, "abd", "abc", "ada");
              }), a.case = "ins is NaN", a.shouldThrowError(function() {
                e.strCommonRight(NaN, "abd", "abc", "ada");
              }), a.case = "ins is null", a.shouldThrowError(function() {
                e.strCommonRight(null, "abd", "abc", "ada");
              }), a.case = "One arg null", a.shouldThrowError(function() {
                e.strCommonRight("abd", "abc", "ada", null);
              }), a.case = "ins is undefined", a.shouldThrowError(function() {
                e.strCommonRight(void 0, "abd", "abc", "ada");
              }), a.case = "One arg undefined", a.shouldThrowError(function() {
                e.strCommonRight("abd", "abc", "ada", void 0);
              });
            }
            //
            ,
            strExtractInlined: function strExtractInlined(a) {
              function onInlined(e) {
                var a = e.split(":");
                if (2 === a.length) return a;
              }
              /* */              a.case = "empty";
              var r = "", n = e.strExtractInlined(r), t = [ "" ];
              a.identical(n, t), 
              /* */
              a.case = "without inlined text", r = "a", n = e.strExtractInlined(r), t = [ "a" ], 
              a.identical(n, t), 
              /* */
              a.case = "default options", r = "ab#cd#ef", n = e.strExtractInlined(r), t = [ "ab", [ "cd" ], "ef" ], 
              a.identical(n, t), 
              /* */
              a.case = "trivial case", r = "this #background:red#is#background:default# text and is not", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "this ", [ "background", "red" ], "is", [ "background", "default" ], " text and is not" ], 
              a.identical(n, t), 
              /* */
              a.case = "openning delimeter # does not have closing", r = "this #background:red#is#background:default# text and # is not", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "this ", [ "background", "red" ], "is", [ "background", "default" ], " text and # is not" ], 
              a.identical(n, t), 
              /* */
              a.case = "two inlined substrings is not in fact inlined", r = "#simple # text #background:red#is#background:default# text and # is not#", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "#simple # text ", [ "background", "red" ], "is", [ "background", "default" ], " text and # is not#" ], 
              a.identical(n, t), 
              /* */
              a.case = "inlined at the beginning and false inlined", r = "#background:red#i#s#background:default##text", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "", [ "background", "red" ], "i#s", [ "background", "default" ], "#text" ], 
              a.identical(n, t), 
              /* */
              a.case = "inlined at the beginning and the end", r = "#background:red#i#s#background:default#", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "", [ "background", "red" ], "i#s", [ "background", "default" ], "" ], 
              a.identical(n, t), 
              /* */
              a.case = "inlined at the beginning and the end with preservingEmpty:0", r = "#background:red#i#s#background:default#", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined,
                preservingEmpty: 0
              }), t = [ [ "background", "red" ], "i#s", [ "background", "default" ] ], a.identical(n, t), 
              /* */
              a.case = "wrapped by inlined text", r = "#background:red#text#background:default#", 
              n = e.strExtractInlined({
                src: r,
                onInlined: onInlined
              }), t = [ "", [ "background", "red" ], "text", [ "background", "default" ], "" ], 
              a.identical(n, t), 
              /* */ //
              a.case = "preservingEmpty:0, no empty", r = "#inline1#ordinary#inline2#", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [ [ "inline1" ], "ordinary", [ "inline2" ] ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, empty left", r = "##ordinary#inline2#", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [ [ "" ], "ordinary", [ "inline2" ] ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, empty right", r = "#inline1#ordinary##", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [ [ "inline1" ], "ordinary", [ "" ] ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, empty middle", r = "#inline1##inline2#", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [ [ "inline1" ], [ "inline2" ] ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, empty all", r = "####", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [ [ "" ], [ "" ] ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, empty all", r = "", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0
              }), t = [], a.identical(n, t), 
              /* */ //
              a.case = "preservingEmpty:0, onInlined:null no empty", r = "#inline1#ordinary#inline2#", 
              n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [ "inline1", "ordinary", "inline2" ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, onInlined:null, empty left", r = "##ordinary#inline2#", 
              n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [ "ordinary", "inline2" ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, onInlined:null, empty right", r = "#inline1#ordinary##", 
              n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [ "inline1", "ordinary" ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, onInlined:null, empty middle", r = "#inline1##inline2#", 
              n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [ "inline1", "inline2" ], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, onInlined:null, empty all", r = "####", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [], a.identical(n, t), 
              /* */
              a.case = "preservingEmpty:0, onInlined:null, empty all", r = "", n = e.strExtractInlined({
                src: r,
                preservingEmpty: 0,
                onInlined: null
              }), t = [], a.identical(n, t), a.case = "too many arguments", a.shouldThrowError(() => {
                debugger;
                e.strExtractInlined("", {}, "");
              });
            }
            //
            ,
            strExtractInlinedStereo: function strExtractInlinedStereo(a) {
              var r, n;
              a.case = "default", 
              /* nothing */
              r = e.strExtractInlinedStereo(""), n = [ "" ], a.identical(r, n);
              /* prefix/postfix # by default*/
              debugger;
              r = e.strExtractInlinedStereo("#abc#");
              debugger;
              n = [ "", "abc", "" ], a.identical(r, n), 
              /* - */
              a.case = "with options", 
              /* pre/post are same*/
              r = e.strExtractInlinedStereo({
                prefix: "/",
                postfix: "/",
                src: "/abc/"
              }), n = [ "", "abc", "" ], a.identical(r, n), 
              /**/
              r = e.strExtractInlinedStereo({
                prefix: "/",
                postfix: "/",
                src: "//abc//"
              }), n = [ "", "", "abc", "", "" ], a.identical(r, n), 
              /* different pre/post */
              r = e.strExtractInlinedStereo({
                prefix: "/#",
                postfix: "#",
                src: "/#abc#"
              }), n = [ "abc" ], a.identical(r, n), 
              /* postfix appears in source two times */
              r = e.strExtractInlinedStereo({
                prefix: "/",
                postfix: "#",
                src: "/ab#c#"
              }), n = [ "ab", "c#" ], a.identical(r, n), r = e.strExtractInlinedStereo({
                onInlined: 
                /* onInlined #1 */
                function onInlined1(e) {
                  if (e.length) return e;
                },
                src: "#abc#"
              }), n = [ "#abc#" ], a.identical(r, n), r = e.strExtractInlinedStereo({
                prefix: "/",
                postfix: "#",
                onInlined: 
                /* onInlined #2 */
                function onInlined2(e) {
                  return e + e;
                },
                src: "/abc#"
              }), n = [ "abcabc" ], a.identical(r, n);
            }
            //
                    }
        };
        a = wTestSuite(a), void 0 === n || n.parent || wTester.test(a.name);
      }();
    }), t = n.include;
    n.include;
  }(), // == end of file StringTools_test_s
  _starter_._fileInclude(a, "./Main.s"), module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Diagnostics.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Entity.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Long.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Map.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Regexp.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Routine.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/String.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Time.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l1.test/Typing.test.s"), 
  module.exports = _starter_._fileInclude(a, "./dwtools/abase/l2.test/StringTools.test.s");
}(); // == end of library